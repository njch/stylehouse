name: Lyricoso writoro
hooks:
  fresh_init: |
    G TT ->G("T/splat");
    G TT ->G("T/crawl");
    G TT ->G("Ϡ");
    
    
    G TT ->G("L/follow");
    G TT ->G("L/ob");
    w set_follow;
    $G->{H} = $H;
    w getstarted;
  recoded_init: |
    w getstarted;
    timer 1 { w set_follow };
  any_child_recoded_init: |
    w set_follow;
    w splat_wormholes;
  set_follow: |
    G follow ->RW;
    
    my $fols = [
        [ "d_Ghosts",            w default_somewhere ],
        [ 'Ϡ Ghosts',         undef,
          sub { [ grep { $_->{name} =~ /Ϡ/ } @{ $H->data->{Ghost} } ] } ],
        [ "G ob",             G ob ],
        [ "\@Flab",     undef, sub { [@Flab] } ],
        [ "\@F",         undef, sub { [@F] } ],
        [ "H apps",     undef, sub { $H->{G}->w('data/get_apps') } ],
        [ undef, $H ],
        [ undef, $O ],
        [ undef, G(follow)->W ],
        [ "COLS", undef, sub { rand(255) } ],
    ];
    for my $fol (@$fols) {
        G follow Tw arr(name => $fol->[0], thing => $fol->[1], code => $fol->[2]);
    }
    
    G splat Tw Splat(wing => G(follow)->W);
  default_somewhere: |
    $H->data->{Ghost}
  getstarted: |
    $G->unrush('getstarted') || return;
    Say "ẞ";
    w somewhere(thing => w default_somewhere);
  somewhere: |
    my $thing = $ar->{thing};
    if ($ar->{nothing}) {
        Say "nothing...";
        Gf Ϡ ->{T}->{_ob} = G ob;
        Gf Ϡ Tw arr(%$ar);
        return;
    }
    if ($ar->{wormhole}) {
        w wormholify;
        return;
    }
    
    my $Cr = G crawl;
    say "" for 1..5;
    say join"", ("       ẞ           ")x38;
    start_timer();
    
    
    $Cr->RW;

    $Cr->T($thing, undef, $G->nw()->from({print=>'"L0sw "',F => [@F]}));
    
    my $wormhole = $G->{some_W} = $Cr->W;
    my $crawltime = show_delta();

    w splat_wormholes;
    
    Say "ẞ W $wormhole->{n}x".scalar(@{$wormhole->{script}})." for ".($wormhole->{G}->{name}||"$thing")."\n$crawltime   ".show_delta();
  splat_wormholes: |
    return unless G(crawl);
    G splat Tw Splat(somewhere => $G->{some_W});
  wormholify: |
    G splat Tw Splat(worm => $wormhole);
  splat_splatW: |
    G splat Tw Splat(splatW   => {script=>G(splat)->W->CS}   );
    #timer 2.5 { w splat_splatW };
    
  splatmenues: |
    my $ob = G(ob)->W;
    ob => sub { 
    
    w somewhere(wormhole => $ob) };

