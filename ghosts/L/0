name: Lyricoso writoro
hooks:
  fresh_init: |
    G TT ->G("T/splat");
    G TT ->G("T/crawl");
    G TT ->G("Ϡ");
    
    G TT ->G("L/path");
    G TT ->G("L/land");
    G TT ->G("L/func");
    G TT ->G("L/ob");
    
    w set_land;
    
    w getstarted;
  recoded_init: |
    w getstarted;
    w set_land;
    timer 1 { w set_follow };
  any_child_recoded_init: |
    w set_land;
    w splat_wormholes;
    if ($ar->{S}->{way} =~ /crawl/) {
        w getstarted;
    }
  
  
  
  
  
  
  
  set_land: |
    G land ->RW;
    my $gns = sub {
        my $s = shift;
        sub {[ grep { $_->{name} =~ /$s/ } @{$H->data->{Ghost}} ]}
    };
    
    for (
    [ "G*",         sub { $H->data->{Ghost} }                                     ],
    [ 'G*Ϡ',          $gns->('Ϡ')    ],
    [ 'G*Њ',          $gns->('Њ')    ],
    [ "wayf",         sub { $G->stackway } ],
    [ "\@F",           sub { [@F] }                                                    ],
    [ "Apps",        sub { $H->{G}->w('data/get_apps') }                            ],
    [ 'H',            sub {  $H } ],
    [ 'O',             sub { $O } ],
    [ 'G'.' follow',sub {  G(land)->W } ],
    [ "COLS",         sub { $doneprotolwptimes; } ],
        ) {
        my ($name, $code) = @$_;
        G land Tw arr[$name, $code];
    }
    
    G splat Tw Splat(land => G(land)->W);
    
    G func ->RW;
    
    for (
    [ "clearworm",          sub {
    G splat Tw clear(splatname => 'worm');
    return "and";
    }    ],
    [ 'Gdb',          sub { $Ghost::db = !$Ghost::db; $H->Say("gdb"); }    ],    
        ) {
        my ($name, $code) = @$_;
        G func Tw arr[$name, $code];
    }
    
    G splat Tw Splat(func => G(func)->W);
  default_somewhere: |
     $G
  getstarted: |
    $G->unrush('getstarted') || return;
    Say "ẞ";
    w somewhere(thing => w default_somewhere);
  extra_crawlies:
      - K: something
  somewhere: |
    if ($ar->{nothing}) {
        Say "nothing...";
        Gf Ϡ Tw arr(%$ar);
        return;
    }
    if ($ar->{wormhole}) {
        w wormholify;
        return;
    }
    
    G path Tw arr(%$ar);
    G splat Tw Splat(path => G(path)->W);
    
    my $Cr = G crawl;
    die unless $Cr;
    say "" for 1..5;
    say join"", ("       ẞ           ")x38;
    start_timer();
    
    $Cr->RW;

    $Cr->T($thing, undef, $G->stackway);
    
    my $wormhole = $G->{some_W} = $Cr->W;
    my $crawltime = show_delta();

    w splat_wormholes;
    
    Say "ẞ W $wormhole->{n}x".scalar(@{$wormhole->{script}})." for ".($wormhole->{G}->{name}||"$thing")."\n$crawltime   ".show_delta();
  splat_wormholes: |
    return unless G(crawl);
    G splat Tw Splat(somewhere => $G->{some_W});
  wormholify: |
    G splat Tw Splat(worm => $wormhole);
  splat_splatW: |
    G splat Tw Splat(splatW   => {script=>G(splat)->W->CS}   );
    #timer 2.5 { w splat_splatW };
    
  splatmenues: |
    my $ob = G(ob)->W;
    ob => sub { 
    
    w somewhere(wormhole => $ob) };

