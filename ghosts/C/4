
R_surz:
    - K: Jtwo #c
      babz:
        'S#unifromA 1.0134': |
            R.lastS = $S;
            S.K eq "D" || die || "D?";
            sayyl "Doing S.K S.name hmmmmmmmm S.J.from S.J.trav";
            my $i = S.J.from || die;
            my $t = S.J.trav || '';
            ($t, R.a.travly) = split /\^/, $t, 2;
            R.a.i = $R->suets($i, $t);
        'S 2.1004': |
          a.s = R.S.s || w $R dus;
          a.s.HASH.oh = 0.2;
          a.tr.rowlimit = R.S.rowlimit || 9*4;
          
          a.fro->('Rl 0.01' => [$H,R.G,$R,$S], {cv=>0.2});
          
          a.fro->('R_J_from 0.12' => S.J.from, 0.2, '%css' => 'border:2px solid pink;');

          a.bz->('R_J_trav 0.13' => S.J.trav, '%sf' => 'black_fs120'); 

          a.bz->('R_S_e 0.2' => R.S.e, '%sf' => 'white');

          a.fro->('R_a_i 0.21' => R.a.i, 0.2);

          a.bz->('Js 0.29' => "\n");
    - K: Jbuild #c
      babz:
        'S#du 3.1': | 
          a.e ||= R.S.e || die;
          defined a.i || die;
          my $mod = "";
          if (S.J.trav eq  '{way{hooks') {
              a.e += 2;
            $mod = "hooklook";
          }
          my $d;
          if (#ref a.i eq 'R' && 
          S.mod.double) {
          
              my $an = {u=>a.i, cv=>0.8, q=>1};
              w $R gp(a=>$an);
              
              my $anH = {u=>a.i, cv=>0.8, q=>1, wa=>'HASH2'};
              w $R gp(a=>$anH);
              
              a.i = {# %{an.bb},
              %{anH.bb}
              };
          }
          
          $d = w $R du;
          
          if (3 == grep { $_ =~ /^.+ .+\d\t.+$/ } (shuffle keys %$d)[0,1,2]) {
              sayyl "Looks like style";
              # looks like style
              my $l;
              for my $k (keys %$d) {
                  my $j = $R->shj($k, $d);
                  sayre j.t;
                  my $t = j.t;
                  my $st = $1 if $t =~ s/(%\S+)//;
                  $st ||= 'Å¾';
                  my $lt = "$t\t"."0.4";
                  exists $l->{$lt}->{$st} && die "$t    $st";
                  $l->{$lt}->{$st} = j.s;
              }
              $d = $l;
              S.a.treemood = "styley";
          }
          
          if ($mod eq 'hooklook') {
              for my $k (keys %$d) {
                  my $v = delete $d->{$k};
                  next if ref $v;
                  $k =~ s/(?<=\t)(.+?)$/0.4/;
                  $d->{$k} = $v;
              }
          }
    - K: maka #c
      babz:
        'S 7': |
          my $html = w $R makaout(R=>$R, a=>R.a, cv => 0);
    
    - K: adu #c
      babz:
        'S#aduhummings 4.01': |
          my $humm = R.a.humm;
          w $R $humm/humms[$a, $d];
      n_D:
        humms: |
          my @r = w stylekeysort[$d];
          my $si = @r;
          my @i = w $R wind[$si];
          my $ro = R.a.ro = {}; # wind round
          my $i = 0;
          for my $r (@r) {
                sayyl " - $r";
              my $j = $R->shj($r, $d);
              #sayre wdump($j);
              
              my $li = j.li = shift @i || die;
              $ro->{$li} = $j;
              #my $z = a.bz->("$li 
              
              
              a.bz->("${li}_Bs 0.3 0.3${li}0" => "\n") if $i > 0;
                   
              a.bz->("${li}_li 0.3 0.3${li}1", j.li,
                  '%sf', 'blue_fs120');

              my $t = j.t;
              $t .= join("", (" ") x (6 - length($t))) if length($t) < 6;
              a.bz->("${li}_k 0.3 0.3${li}2", $t,
                  '%sf', 'black');

              my $cv = j.cv;
              $cv =~ s/^0//;
              a.bz->("${li}_cv 0.3 0.3${li}22", $cv,
                  '%sf', 'red_fs80');


              a.fro->("${li}_s 0.3 0.3${li}4", j.s, j.cv,
                  '%sf', 'white_fs120');
                  
              
              
              #a.fro->("${li}_si 0.3 0.3${li}8", j.s.A.n_pyramid, 0.2, '%sf', 'white_fs120');
                  
              
              

              #sayyl " S_4[$i => $li   ".$G->F_delta;
              $i++; 

          }
    - K: self_Jness #c
      spesh: 1
      babz:
         'S 4.1': |
            a.fro->('H 0.01' => $H, 0.2);
            a.fro->('G 0.02' => $G, 0.2);
            a.fro->('R 0.11' => $R, 0.2);
         'S 4.2': |
            # spesh
            

