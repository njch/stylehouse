R_surz:
    - K: forkpi #c
      spesh: 0
      babz:
        'gp#fork_layert 5.6': | 
            if (a.cv > 0.2 && !a.replaceJid && !a.q && $wa ne 'text') {
                my $la = {%$a};
                la.origin_inarow = G.gp_inarow;
                a.isJid = la.replaceJid = $H->mkuid;
                my $lyt = R.layert ||= [];
                push @$lyt, $la;
                a.forking = $la;
                a.cv = 0.1;
                $ping = 1;
            }
        'S#waylayert_pias 8.8': |
            if (my $pias = delete R.layert) {
                # my $it = natatime 5, @$pias;
                # TODO they come back out of order of attachment 
                # fork only the top level pi, not pi within pi?
                $G->timer(0, sub {
                    w $R forkpi/pias[$S, $pias];
                });
            }
        'gp 6.2': |
            R.lastS.a.pis->{a.isJid} = $a;
        'gp 7.1': |
            a.forking.wash = $H->dig($html) if a.forking;
        'S#tidy 0.113': |
            if (my $tokill = delete S.forkpi_tokill) {
                kill 'KILL', $_ for @$tokill;
            }
      n_D:
        pias: |
            if (my $pid = fork()) {
                my $Sftk = S.forkpi_tokill ||= [];
                push @$Sftk, $pid;
                return
            }
            H.db = H.pg->db;
            H.isforked = 1;
            # child must exit, after reporting error
            # so nothing else can happen. listening db handle gone anyway?
            my $bail = sub{ exit };
            $G->accum($G0, _aft_err_do => $bail);
            $G->accum($F[0], _aft_etc_do => $bail);
            
            sayyl "pier Forked... ";
            
            my @js;
            my $group = 6;
            for my $a (@$pias) {
                my $html = w $R gp[$a];
                next if a.wash eq $H->dig($html);
                my $set = $H->ejson($html);
                my $id = a.replaceJid || die;
                my $js = qq{ \$('#$id').replaceWith($set);};
                push @js, $js;
                if (@js >= $group) {
                    $H->send(join('', @js));
                    @js = ();
                }
            }
            $H->send(join '', @js) if @js;
            saygr "pier done ".F_delta;
            

