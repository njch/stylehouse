
R_surz: #c


    - K: prot_fits #c
      babz:
        'S#proto_fits 8.7': |
          # proto fits: shrink this webbing into a space in our webbing
          my @sty;

          my $o = 12;
          my $lines = split /\n/, $html;
          if ($lines > $o) {
              $lines = 17 if $lines > 17;
              my $fs = 100 * $o / $lines;
              $fs *= -1 if $fs < 0;
              push @sty, "font-size:$fs%";
          }
          push @sty, "background:rgba(80,50,22,0.3)"; 
          push @sty, "white-space:pre";
          push @sty, "font-family:mono";
          push @sty, "display:block";
          push @sty, "overflow-wrap:break-word";
          my $sty = join ";", @sty; 
          $html = qq{<span style="$sty"><span>$html<span></span>};
      
    - K: keyba #c
      spesh: 1
      babz:
        'keys 3': |
          saygr "doings of $do";
          R.thedoings = $do;
        'S#keybas 3.32': |
          a.bz->('keybas 3.32', "Yogo R.thedoings!");
      
    - K: Num #c
      key: {0: out, number: in}
      n_D:
            out: |
              return S.ksuc = "" if S.ksuc && $k eq "0";
              my @trav = $G->chuntr(S.J.trav);
              pop @trav;
              S.J.trav = join '', @trav;
            in: |
              S.ksuc .= $k;
              my $j = S.a.ro->{S.ksuc};
              
              if (!$j) {
                  w unchanged[$S];
                  sayre "no j ye for S.ksuc" for 1..5;
                  return;
              }
              sayyl "got $j j.t j.cv for S.ksuc";


              S.ksuc = "";
              if (S.a.travly) {
                  S.J.trav =~ s/\^.+?$// || die;
              }

              my ($hop) = j.t;
              S.J.trav .= $hop; 
    - K: Sud #c
      n_D:
            in: |    # ebrace flying embryo J
                S.J = { from => ar.i };
                S.J.trav = ar.t if ar.t;
                sayyl "suddenly ".gp(ar.i);
    
    - K: playn #c
      babz:
        'S 3.214': |
          if (S.J.trav eq  '{way{hooks') {
              a.e += 2;
              S.mod.hooklook = 1;
          }
          if (S.mod.double) {
              my $an = {u=>a.i, cv=>0.8, q=>1};
              w $R gp(a=>$an);
              
              my $anH = {u=>a.i, cv=>0.8, q=>1, wa=>'HASH2'};
              w $R gp(a=>$anH);
              
              my $something = {
                  #%{an.bb},
                  %{anH.bb}
              };
              
              w Dave(K=>"Cm1",way=>"C/nv",Dname=>"hd",i=>$something);
              
              #S.mod.humm = 'null';
              #S.a.bb = $d;
              #my $ht = w $R makaout(a=>S.a, cv => 0);
              #$d->{'{zzz 0.97'} = 
          }
    - K: stringlook #c
      babz:
        'S 3.424': |
          S.mod.humm = 'adu';
          if (!%$d) {
            if (!ref a.i) {
              sayre "SDoing something else";
              S.mod.humm = 'simphumm';
              my $sd = {};
              $G->D_to_style({K=>"s",D=>a.i}, $sd);
              my @ksd = sort keys %$sd;
              my $on;
              my @j = map { G.R->shj($_, $sd) } @ksd;
              ($on) = map { _.cv } grep { _.cv eq S.a.travly } @j;
              saygr "Was S.a.travly";
              for my $j (@j) {
                  my $k = j.t;
                  my $v = j.cv;
                  my $s = j.s;
                  my $sec = 0;
                  
                  my $vo = 0.7;
                  
                  if ($on && $on eq j.cv || @j == 1) {
                      $vo = 0.8;
                      sayyl "\t\t$on  j.cv";
                  }
                  elsif ($on && 0) {
                      my $dist = $on - j.cv;
                      $dist *= -1 if $dist < 0;
                      $sec = $dist;
                      $sec =
                      $sec < 1 ? 3
                      :
                      $sec < 2 ? 2
                      :
                      $sec < 3 ? 1
                      :
                      0;
                      
                          $sec = $sec*0.01;
                          $vo = 0.7 + $sec;
                      
                      #sayyl " j.cv \t $sec\t\t$vo";
                  }
                  say "^j.cv\t$vo";
                  $d->{"^j.cv\t$vo"} = $s;
              }
            }
          }
    - K: stylook #c
      babz:
        'S 3.4145': |
          if (3 == grep { $_ =~ /^.+ .+\d\t.+$/ } (shuffle keys %$d)[0,1,2]) {
              my $l;
              for my $k (keys %$d) {
                  my $j = $R->shj($k, $d);
                  #sayre j.t;
                  my $t = j.t;
                  my $st = $1 if $t =~ s/(%\S+)//;
                  $st ||= 'Å¾';
                  my $lt = "$t\t"."0.4";
                  exists $l->{$lt}->{$st} && die "$t    $st";
                  $l->{$lt}->{$st} = j.s;
              }
              $d = $l;
              S.a.treemood = "styley";
          }
    - K: hookok #c
      babz:
        'S 3.4146': |
          if (S.mod.hooklook) {
              for my $k (keys %$d) {
                  my $v = delete $d->{$k};
                  next if ref $v;
                  $k =~ s/(?<=\t)(.+?)$/0.4/;
                  $d->{$k} = $v;
              }
          }

          
    - K: goto #c
      key:
        J: J
        M: RwS
        SM: SM
        SN: SN
        F: F
        H: H
        W: W
        G: G
        S: S
      n_D:
        G: |
          `ssh v 'export DISPLAY=":0"; ssh s "cd styleshed; git gui"'`;
        S: |
          my ($GG) = grep { $_ ne $G && _.name =~ /^C(?!\/)/} @{H.G.GGs};
          die "No other G named 'C'" unless $GG;
          my $otheR = $GG w are;
          ar.i = $otheR;
          w $R Sud/in;

        H: |
          ar.i = H.G.GGs;
          w $R Sud/in;
        RwS: |
          S.J = {from=>$R,trav=>'{way{hooks{S'};
        SM: |
          S.J = {from=>$R,trav=>'{way{hooks{goto'};
        SN: |
          S.J = {from=>S.a.i,trav=>'{ways[0{hooks'};
        J: |
          my $J = a.i = R.A->spawn('J');
          J.W = G.GG.U.W;
          J.hol = "H.style/H.name/H.id";
          J.tiNZ = J.W.at.styles =~ /\bNZ\b/;
          J.hitime = $H->hitime;
          # throw J into Pg
              #G0.Wh->{$ww} = $W;
          ar.i = $J;
          w $R Sud/in;
        W: |
          my $n = int rand 30000;
          S.J = { from => [$n,unico($n,1)]};
        F: |
              saygr "Trying!!!!" for 1..5;
              my @lot = w trythis;
              my $f = $F[0];
              ar.i = $f;
              w $R Sud/in;
              sayyl "Trithings: $_ " for @lot;
    - K: Q #c
      key:
        SR: Redisy
        D: D
        SD: SD
        Q: Q
        C: C
        K: K
        N: N
        T: T
        U: U
      n_D:
        U: |
          ar.i = H.G.A.n_G;
          ar.i = [G:Cm1];
          w $R Sud/in;
        N: |
          S.monod.double = 1;!S.mood.double;
        K: |
          my $P = 0->anyway('P_sud');
          my $GG = $G;
          H.G w percs[$P, $GG];
        C: |
          H.G w reexec;
        T: |
          my $ia = R.a.i.A || die "no idea about A?";
          my $ab = [$ia];
          push @$ab, $ia while $ia = ia.u;
          ar.i = $ab;
          w $R Sud/in;
        Q: |
          my $g = G:C/ool;
          ar.i = $g;
          w $R Sud/in;
        Redisy: |
              S.J = {
                from => [reverse sort H.r->keys("*")],
              };
        D: |
            my $u = w makeD;
            return;
        SD: |
            my $way = "C C/nv";
            my $K = "C".H.nn++;
            my $P = [{GAK => "$K $way"}];
            my $g = H.G w percs[$P];
            #my $g = G:$K;
            $g w ave(i=>$R);
            return;
            # make C elsewhere...
            sayre "Yeahp";
            my $with = "C/nv";
            $H->pub("S/hut/C", "percC $with");
    - K: chr0 #c
      spesh: 1
      babz:
         'S 4.01': |
           for my $i (1..10) {
               my $c;
               for my $ii (1..25) {
                   $c = 250 + ($i * 100) + $ii;
                   my $ch = unico($c);
                   a.bz->("ch_$c 3.011" , $ch);
               }
               a.bz->("ch_${c}_nl 3.011" => "\n");
           }
    - K: Vit #c
      key: {E: up, R: down}
      n_D:
            up: |
                S.S.e += 0.1;
            down: |
                S.S.e -= 0.1;

