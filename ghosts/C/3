R_Jz:
 - K: cruxal #c on inness style adju
   D: |
     my $j = x.j;
     my $J = j.b.b.j;
     my ($k,$v) = @$m;
     J.bz->("j.l%".$k." j.cv", $v);
 - K: pi/direlab #c round corner, where one bit/type/hum of noise splits others
   D: |
     my $s = $u;
     my $r = J.d.g.r;
     
     my $fi = {pi=>'fileinfo', s=>r.s, label=>$u, gp=>{cv=>0.1}};
     Jn(fileinfo => 0.3, $fi,
            '{hs:6.7.2.9,ab:1,top:1em,right:1em}');
     
     Jn('label', '', fi.label,
         "{zi:15,sha:2 3 6 ccf,fw:6,co:3f4}");
     
 - K: og/ref #c mix up @{o.r}
   D: |
     my $ac = {};
     for my $r (@{o.r}) {
         my $u = r.s;
         my $s = "AREF";
         $s = 'text' if !ref $u;
         $s = 'array' if ref $u eq 'ARRAY';
         $s = 'code' if ref $u eq 'CODE';
         $s = 'hash' if ref $u eq 'HASH';
         acum $ac, $s, $r;
     }
     my @r;
     for my $s (sort keys %$ac) {
         my $v = $ac->{$s};
         o.g.ref->{$s} = $v;
         push @r, @$v;
     }
     _.sc.mw = '22em' for @r;
     _.sc.over = 'hidden' for @r;
     o.r = \@r;

       if (o.g.ref) {
           for my $r (@{o.g.ref.AREF||[]}) {
               r.sc.fs = 15;
           }
           my @coag = @{o.g.ref.code||[]};
           if (@coag) {
               my ($f,@r) = @coag;
               my $co = {map {_.r => _.s}@coag};
               f.s = $co;
               f.c.pi = "codes";
               f.r = "codes";
               _.skip = 1 for @r;
           }
       }
       
     # want a default mode that shrinks away as other innesses come up
     # & reappropriates pi rhythms
     # where pi/stuff uses wtfs
     # chunks of the branching meaning can be patched upwards
     my $bigys = {map{$_=>1}qw{B S Z o phl phy}};
     @{o.r} = grep {!(
         sc.ou eq 'hash' && (
             $bigys->{_.r} && !%{_.s}
            || _.r eq 'Gw' && _.s eq '1'
         )
     )} @{o.r};
       
 - K: pi/codes #c bo
   D: |
     # cranking
     for my $k (sort keys %$u) {
         my $s = " $k";
         my $sc = {co=>'34f'};
         Rw wtf + dhei$k $s $sc;
         my $v = $u->{$k};
         die unless ref $v eq 'CODE';
     }
 - K: ou/text #c
   D: |
     o.type = 'text';
     push @{o.r}, { r=>"text", s=>$u, cv=>0.4 };
 - K: ou/hash #c
   D: |
      
      my @ks = sort keys %$u;
      o.total = @ks;
      until (@{o.r} >= $thi) {
          last if !@ks;
          my $k = shift @ks;
          my $v = $u->{$k};
          # $plucky # could be R coded small lmaz
          # can meet slightly more and select best
          # nothing is too worthy
          push @{o.r}, { r=>$k, path=>"{".$k, s=>$v };

          if (@{o.r} >= $thi) {
              o.more = @ks if @ks;
              last;
          }
      }
      # bunch of keys... ^ interpret, compress knowledge
      # TODO ^make itv like two indexes, polars
      # any sorta layout knowhow...
 - K: ou/array #c
   D: |
         o.type = 'ARRAY';
         o.total = @$u;
         my $i = 0;
         until (@{o.r} >= $thi) {
             if (!exists $u->[$i]) {
                 last;
             }
             
             my $v = $u->[$i];
             # $plucky
             push @{o.r}, { r=>$i, path=>"[".$i, s=>$v };
             
             if (@{o.r} >= $thi) {
                 o.more = @$u - @{o.r};
                 delete o.more if !o.more;
                 last;
             }
             $i++;
         }
 - K: ou/code #c
   D: |
          die;
          o.type = 'CODE';
          push @{o.r}, { r=>"CODE", clues=>{stuff=>"fromDm?"} }
 - K: ii/more #c round corner
   D: |
     my $d;
     d.t = 'more';
     d.sc.ab = 'right:-1em';
     d.c.pi = 'more';
     d.c.gp.cv = 0.5;
     d.c.s = $o;
     Rw iiJM + $d;
 - K: pi/more #c round corner
   D: |
     #J.d.sc.bo = '3px solid white';
     Rw MyN $J $N:_ for
     [
     [more => 1, {s=>'@'},{fs=>19,co=>'31f'}],
     [more => 2, {s=>u.more}],
     [more => 3, {s=>'more'},{co=>'000',sha=>'3 5 2 531'}]
     ];
     

