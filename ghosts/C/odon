name: code
include: T/ravel T/braid
chains:
 - K: 'stylefile'#c
   Ki: 'styledir'
   arr_if: |
     1 || -d "$thing/lib" && -d "$thing/ghosts"
   foreach_travel:
     glob: |
       "$thing/style*", "$thing/not"
     find_files: |
       #"$thing/lib",
       "$thing/ghosts"
     grep: |
         !/T|H/
   y:
     t:
       event: |
         G.U.mk->(Codon => { stylefile => L.t });
     
 - K: C load
   Ki: Codon
   arr_if: |
     G.i.K eq "Codon"
   auto_D: |
     my $C = G.i;
     $_ = C.B.stylefile;
     my $code = $H->slurp($_) if $_;
     C.B.name ||= do {
         /(ghost)s\// ? (/ghosts\/(.+)$/)[1] :
        /(lib)\// ? (/lib\/(.+)\.pm$/)[1] : $_
     };
     C.B.flav = $1 if $1;
     $code = C.B.code if C.B.code;
     G.t = [ map { s/\n$//s; $_ } split "\n", $code ];
     
     w andwhen(asap => {oway_D=>"C chunks"});
     
 - K: C chunks
   Ki: Codon
   arr_if: |
     1
   D:
     my $chunks = 0->mk_or_match(Chunks => { });
      lines => L.t
     
    
 - K: 'yaml'
   arr_if: |
     -f $thing && $thing =~ /odon/ && 1
   foreach_travel:
     each: Way::load_yaml($thing);
dials:
  max_depth: 3
hooks:
  ways:
    Codon:
      K: Codon
      print: |
        S.B.name
    Chunks:
      K: Chunks
      auto_D: |
        #make chunks
  event: |
    G.L = $L;
    my $y = "";
    $y = "/".ar.uyL.i.B.K if ar.uyL;
    $G->w("y$y/event", $ar, L.i);
    if (ar.uyL) {
    }
    w uxd;
  
  andwhen: |
    push @{G.andwhen||=[]}, $ar;
  T_end: |
    0->andwhendo();
  uxd: |
    G.ux->w('ux', {Ls=>$G->W->CS});
    $Ly->w(somewhere => {thing => $ar});
  figure_some_chain: |
    $G->doo(c.auto_D, {}) if c.auto_D;
    push @{G.o}, $c;
    return 1 # all good ness
  events:
    - K: Codon
      Ei: stylefile y t
      uxL:
          Bn: t
      y:
        w: 
          event: |
            Say "Cahgned L.t";
        t:
          event: |
            G.U.mk->(Codon => { stylefile=>L.t });
        
  
  Earr: |
    # scan events etc.
  

