name: code
include: T/ravel T/braid
chains:
 - K: 'stylefile'#c
   Ki: 'styledir'
   arr_if: |
     1 || -d "$thing/lib" && -d "$thing/ghosts"
   foreach_travel:
     glob: |
       "$thing/style*", "$thing/not"
     find_files: |
       #"$thing/lib",
       "$thing/ghosts"
     grep: |
         !/T|H/
   y:
     t:
       event: |
         0->TafuB(Codon => { stylefile => L.t });
     
 - K: Codon #c
   print: |
     S.B.name;
   flows_D: |
     my $Codon = T.i;
     w codonify[$Codon];
     
 - K: Chunks
   Ki: Codon
   arr_if: |
     T.i.K eq "Codon"
   travels: 1
   extract_D: |
     my $Codon = T.i.Lo.i;
     w chunkify[$Codon];
   
 - K: Chunk
   print: |
     S.B.i;
   flows_D: |
     my $C = T.i;
     T.t = C.B.lines->[0] || C.B.lines->[1];
     T.t||= ki(C.B);
   y:
     t:
       event: |
         0->TafuBl("CodeMirror");
 
 - K: CodeMirror
   uys_long:
     - K: CodeMirror
       

 - K: 'yaml'
   arr_if: |
     -f $thing && $thing =~ /odon/ && 1
   foreach_travel:
     each: Way::load_yaml($thing);
dials:
  max_depth: 3
hooks:
  figure_some_chain: |
    push @{G.o}, $c;
    w $c travels if c.travels;
    return 1 # all good ness
  codonify: |
     my $C = $Codon;
     $_ = C.B.stylefile;
     my $code = $H->slurp($_) if $_;
     C.B.name ||= do {
         /(ghost)s\/(.+)$/ ? $2 :
         /(lib)\/(.+)\.pm$/ ? $2 : $_
     };
     C.B.flav = $1 if /(ghost)s\// || /(lib)\// || /(not)$/;
     T.t = C.B.name;
     $code = C.B.code if C.B.code;
     C.B.lines = [ map { s/\n$//s; $_ } split "\n", $code ];
  
  chunkify: |
    my $C = $Codon;
    my $c = "#"."c";
    my @stuff = ([]);
    my $ghost = C.B.flav eq "ghost";
    my $not = C.B.flav eq "not";
    for my $l (@{ C.B.lines }) {
        defined $l || die "no defined l! C.B.name";
        
        push @stuff, []
        
        if
              @{$stuff[-1]} > 0
            && (
                ($ghost||$not) && $l =~ /^\w+|^  \w+/
                ||
                $l =~ /$c/
                ||
                !$ghost && $l =~ /^\S+.+ \{(?:\s+\#.+?)?$/gm
            );
            
        push @{ $stuff[-1] }, $l;
    }
    my $chunks = [];
    my $i = 0;
    for my $s (@stuff) {
        push @$chunks, {
            i => $i++,
            rows => scalar(@$s),
            lines => $s,
        };
    }
    _.Codon = $C for @$chunks; # traction to Codon
    0->TafuBl(Chunk => $_) for @$chunks;
    T.L.t = 0+@$chunks;
    return $chunks;
  event: |
    G.L = $L;
    0->L_is($L);
    my $y = "";
    $y = "/".ar.uyL.i.B.K if ar.uyL;
    $G->w("y$y/event", $ar, L.i);
    if (ar.uyL) {
    }
    w uxd;
  
  andwhen: |
    push @{G.andwhen||=[]}, $ar;
  T_end: |
    0->andwhendo();
  uxd: |
    G.ux->w('ux', {Ls=>$G->W->CS});
    $Ly->w(somewhere => {thing => $ar});
  events:
    - K: Codon
      Ei: stylefile y t
      uxL:
          Bn: t
      y:
        w: 
          event: |
            Say "Cahgned L.t";
        t:
          event: |
            G.U.mk->(Codon => { stylefile=>L.t });
        
  
  Earr: |
    # scan events etc.
  

