name: code
include: T/ravel T/braid
chains:
 - K: 'stylefile'#c
   Ki: 'styledir'
   arr_if: |
     1 || -d "$thing/lib" && -d "$thing/ghosts"
   foreach_travel:
     glob: |
       "$thing/style*", "$thing/not"
     find_files: |
       #"$thing/lib",
       "$thing/ghosts"
     grep: |
         !/T|H/
   y:
     t:
       event: |
         0->TafuB(Codon => { stylefile => L.t });
     
 - K: Codon
   print: |
     S.B.name;
   flows_D: |
     my $C = T.i;
     $_ = C.B.stylefile;
     my $code = $H->slurp($_) if $_;
     C.B.name ||= do {
         /(ghost)s\/(.+)$/ ? $2 :
         /(lib)\/(.+)\.pm$/ ? $2 : $_
     };
     C.B.flav = $1 if $1;
     $code = C.B.code if C.B.code;
     C.B.lines = [ map { s/\n$//s; $_ } split "\n", $code ];
     
 - K: Chunks
   Ki: Codon
   arr_if: |
     T.i.K eq "Codon"
   travels: 1
   extract_D: |
     my $C = T.i.Lo.i;
     T.t = "!!".wdump($C);
     my $chunks = w chunkify[$C];
     for my $chunk (@$chunks) {
         0->TafuBl(Chunk => $chunk);
     }
     #die "Chonk";
   
 - K: Chunk
   print: |
     S.B.name;
   flows_D: |
     my $C = T.i;
     T.t = C.B.lines->[0];
     T.t||= ki(C.B);
   

 - K: 'yaml'
   arr_if: |
     -f $thing && $thing =~ /odon/ && 1
   foreach_travel:
     each: Way::load_yaml($thing);
dials:
  max_depth: 3
hooks:
  figure_some_chain: |
    push @{G.o}, $c;
    w $c travels if c.travels;
    return 1 # all good ness
  chunkify: |
       my $c = "#"."c";
       my @stuff = ([]);
       my @lines = @{ C.B.lines };
       while (defined(my $l = shift @lines)) {
             push @stuff, []
              if
              C.B.flav eq "ghost" ?
                  @{$stuff[-1]} > 0 && $l =~ /^\w+|^  \w+/
                     || $l =~ /$c/
            :
            C.B.flav ne "not" ?
                $l =~ /^\S+.+ \{(?:\s+\#.+?)?$/gm

                     || $l =~ /$c/
            : 0;
            
            push @{ $stuff[-1] }, $l;
        }
        my $chunks = [];
        my $i = 0;
        for my $s (@stuff) {
            push @$chunks, {
                i => $i++,
                rows => scalar(@$s),
                lines => $s,
            };
        }
        $chunks;
    
  event: |
    G.L = $L;
    my $y = "";
    $y = "/".ar.uyL.i.B.K if ar.uyL;
    $G->w("y$y/event", $ar, L.i);
    if (ar.uyL) {
    }
    w uxd;
  
  andwhen: |
    push @{G.andwhen||=[]}, $ar;
  T_end: |
    0->andwhendo();
  uxd: |
    G.ux->w('ux', {Ls=>$G->W->CS});
    $Ly->w(somewhere => {thing => $ar});
  events:
    - K: Codon
      Ei: stylefile y t
      uxL:
          Bn: t
      y:
        w: 
          event: |
            Say "Cahgned L.t";
        t:
          event: |
            G.U.mk->(Codon => { stylefile=>L.t });
        
  
  Earr: |
    # scan events etc.
  

