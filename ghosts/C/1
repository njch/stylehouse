hooks:
  R_surs:
    uni: | #c
      #  from => $H,
      #  trav => "{G{GGs",
      my @tr = split /(?=\{|\[)/, $t;
      
      for (@tr) {
          /^(.)(.+)$/;
          say "Sapped $i       $1 $2";
          last if $1 eq " ";
          $i = $i->{$2} if $1 eq "{";
          $i = $i->[$2] if $1 eq "[" && (ref $i eq 'ARRAY' || die "NOT!");
      }
      if ($t =~ m/^.+? (.+)$/) {
          say "Had some more: $1";
      }
      $i
    
    cgp: | #c data guess chart
        my $c = {};
        if (!defined $u){
            c.undef = 1;
        } else {
            if (my $ref = ref $u) {
                c.ARRAY = 1 if $ref eq "ARRAY";
                c.HASH = 1 if $ref eq "HASH";
                c.CODE = 1 if $ref eq "CODE";
                c.canpi = 1 if !%$c && $u->can('pi');
                for (qw'A C G T     R') {
                      $c->{$_} = 1 if $ref eq $_;
                }
                c.ref = $ref if !%$c;
            }
            else {
                if (ref \$u eq 'SCALAR') {
                    c.text = 1;
                    c.len = length($u);
                    c.lin = scalar split /\n/, $u;
                    c.b = scalar split /\n\n/, $u;
                    c.number = $u =~ /^(?:\d+\.)?\d+$/;
                    c.wordy = $u =~ /\w+/;
                }
                else { die "wtf is $u" };
            }
        }
        $c
    du: | #c style grab
      $a || die;
      my $R = a.R;
      defined a.i || die;
      # how to get around the Objs' data
      my $s = a.s ||= $R->dus();
      my $i = a.i;
      my $n = a.n;
      a.e = 2 if !defined a.e;
      
      my $c = {};
      a.as ||= [];
      push @{a.as}, $a;
      a.ds = [@{a.ds||[]}, $a];
      
      return {} if @{a.ds} > 12 || 2 < grep {ref _.i && _.i eq $i} @{a.as};
      
      my $ref = ref $i || 'SCALAR';
      my $is = $s->{$ref} || $s->{default};
      $is ||= $s->{HASH} if "$i" =~ /^\w+=HASH\(/;
      $is ||= $s->{default} || return {};
      
      my $mustb = { map { $_ => 1 } split ',', is.mustb } if is.mustb;
      
      for my $j (is.it->($i)) {
          my $k = delete j.k;
          my $K = delete j.K;
          my $v = delete j.v;
          
          $j = {%$is, %$j};
          my $an = {%$a, i => $v};
          
          my $ohms = defined j.oh ? j.oh
              : defined is.oh ? is.oh
            : 1;
          
          an.e -= $ohms;
          
          my $rk = join "\t", $k, an.e;
          
          $c->{$rk} = $v;
          
          a.tr.rows++;
          last if a.tr.rowlimit && a.tr.rows >= a.tr.rowlimit;
          
          if (an.e >= 1 && ref an.i) {
              my $cu = $R->du($an);
              while (my ($ku, $vu) = each %$cu) {
                  my $nk = $k.$ku;
                  next if grep { $_->($_, $an, $cu) } @{s.notZ||[]};
                  $c->{$nk} = $vu;
              }
          }
          elsif (an.e > 0 && an.e < 1 && $mustb && !$mustb->{$K}) {
              delete $c->{$rk};
          }
      }
      
      if (R.a == $a) {
          R.a.d = $c;
      }
      
      # this is about a 4 - material for links
      $c
      
    S: | #c void R_surcess R::S heist
        # 0.1
        my $a = R.a = ar.a ||= {};
        a.R = $R;
        w R_sur/phat;
        
        # 0.2
        a.e ||= R.S.e || die;
        
        # 1.16
        my $unifro = {
            i => R.J.from || die,
            t => R.J.trav || "",
        };
        a.i ||= w R_sur/uni(%$unifro);
        
        # 2 s messed by R plumbing, sure
        a.s = R.S.s || $R->dus;
        a.s.HASH.oh = 0.2;
        a.s.SCALAR.it = sub {
            my $i = 0;
            map { { k => $i++, v=> $_, oh => 0.2 } } split "\n", shift;
        };
        
        a.tr.rowlimit = R.S.rowlimit || 9*2;
        
        # 3
        
        # 4
        
        
        # 4.1
        a.fro->('H 0.01' => $H, 0.2);
        
        a.fro->('G 0.02' => $G, 0.2, '+_fro' => ' ');
        
        a.fro->('R 0.11' => $R, 0.2, '+_fro' => ' ');
        
        # 4.2
        a.fro->('R_J_from 0.12' => R.J.from, 0.2);
        
        a.fro->('R_J_trav 0.13' => R.J.trav, 0.2, '%sf' => 'black_fs120'); 
        
        a.bz->('R_S_e 0.2' => R.S.e, '%sf' => 'white');
        
        a.fro->('R_a_i 0.21' => R.a.i, 0.2);
        
        a.bz->('Js 0.29' => "\n");
        
        # 6
        my $html = w R_sur/makaout(R=>$R, a=>R.a, cv => 0);
        
        # 8
        
        # 9
        saygr " S --- ".F_delta;
        $html
    makaout: | #c
        my $cv = ar.cv;
        $cv = a.cv if !defined $cv;
        
        # 4
        my @r = w stylekeysort(d=>a.bb);
        
        # 4.1
        a.o = {}; # by voltage, peel
        for my $r (@r) {
                my ($l, $vo, $or) = split /\s+/, $r; # split style, vectory
                
                saygr "igggy $l $vo > a.cv" && next if $cv && $vo > $cv;
                
                $or = $vo if !defined $or;
                
                my $o = a.o->{$or} ||= []; 
                push @$o, $r;
        }
        
        # 4.2
            
            #thingness <-> appearance
            my $th = {};
            my $ap = {};
            my @int;
            for my $ov (sort keys %{a.o}) {
                 my $o = a.o->{$ov};
                 
                 for my $r (@$o) {
                     my $s = a.bb->{$r};
                     my ($l, $vo) = split /\s+/, $r; # split style, vectory
                     ($l, my $style) = split '%', $l;
                     
                     my $in = $style ? $ap : $th;
                     my $j = {
                         l => $l,
                         s => $s,
                         vo => $vo,
                     };
                     if ($style) {
                         my $o = $ap->{$l} ||= [];
                         j.style = $style;
                         push @$o, $j
                     }
                     else {
                         if (exists $in->{$l}) {
                             warn "replacemont $l $vo";
                         }
                         $th->{$l} = $j;
                         push @int, $l;
                     }
                }
            }
            
        # 7
        my @s;
            for my $thl (@int) {
                my $j = $th->{$thl} || next;
                my $o = delete $ap->{$thl};
                my $l = j.l;
                my $s = j.s;
                
                # top volt for thing selection: # whattage
                next if $l eq 'K' && a.bb->{"name 0.1"} =~ $s;
                next if $l eq 'name' && a.bb->{"K 0.2"} =~ $s
                    && $s ne a.bb->{"K 0.2"};
                
                die "reffy $s in $l" if ref $s;
                sayyl "for the $l\t\t$s j.vo" if ar.db;
                
                my $ishtml;
                my $css = [];
                for my $oj (@$o) {
                    saybl "        sdtyle! oj.style oj.s" if ar.db; 
                    if (oj.style eq "css") {
                        push @$css, oj.s;
                    }
                    elsif (oj.style eq "gp") {
                        # has a way to $a the gp action within...
                        $ishtml = 1;
                    }
                    elsif (oj.style eq "sf") {
                        push @$css, map { $R::f->{$_} || 
                        die "no style $_"} split '_', oj.s;
                    }
                    else {
                        die "style oj.style = oj.s \t for $l";
                    }
                }
                
                my $at;
                at.style = join ';', @$css;
                at.title = $l;
                $at = join " ", map { $_.'="'.$at->{$_}.'"' } 
                    grep { $at->{$_} } sort keys %$at;
                if (!$ishtml) {
                    $s = encode_entities($s);
                    $s =~ s/\\n/\n/g;
                    die if $s =~ /\\n/;
                }
                $s = "<t $at>$s</t>" if $s;
                push @s, $s;
            }
            
            if (%$ap) {
                sayre "Extr a appearance: ".wdump($ap);
            }
            
            @s = "nose? ".@r if !@s;
            say wdump(2, a.bb) if !@s; 
            #die "nose? $u" if !@s;
            
            join("", @s);

