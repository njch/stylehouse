
R_surs:
    keys: | #c
      my $k = e.k;
      my $R = w are;
      
        sayyl join"  ", ($k) x 13 for 1..2;

        my $key = "$k";
        $key = "S$key" if e.S;
        # some instyle hooks letters to apply
        my $cuz = R.way->find("key")||die;
        # 3
        my $do = $cuz->{$key};
        # 4
        $do ||= do {
            my $or = "number" if $key =~ /[0-9]/;
            $cuz->{$or} if $or;
        };
        # 5
        # 5.9
        $do ||= "wtf";
        w unchanged[$R] if $do eq "wtf";
        sayyl join"  ", ($do) x 13 for 1..2;
        # 6
        w $R $do[$k, $e];
    setup: | #c
        
        R.J ||= { 
            from => H.G,
            trav => '{GGs',
        };
        R.S.e = 0.6;
        
        R.S.ss_Ds = Load(<<'');
                  n: |
                     n.HASH = {};
                  Ai: |
                     Ai.A = {};
                  Gi: |
                     my $likes = {map{$_=>1}qw{G ways}};
                     Gi.HASH = {
                      it => sub {
                        my $h = shift;
                        my @r = map { { K=>$_, k=>"{".$_, v=>$h->{$_} } } sort keys %$h
                      },
                     };
        
        if (my $ssDs = delete R.S.ss_Ds) {
            for my $k (sort keys %$ssDs) { # or K array who knows
                my $u = R.S.ss->{$k} = w $R dus;
                my $D = $ssDs->{$k};
                $G->D({bab=>$D, ar=>{$k=>$u}});
            }
        }
        
        say "Made ".$R->pi;
        #w R.S.w $_/in({}) for keys %{R.S.w};
    
    shj: | #c
      my $j;
      j.r = $r;
      j.s = $d->{$r};
      (j.t, j.cv) = j.r =~ /^(.+)\t(.+?)$/ ? ($1, $2) : split /\s+/, j.r, 2;
      (j.cv, my @e) = split /\s+/, j.cv;
      j.ev = \@e if @e;
      $j
    
    
    as: | #c
        my $j = {};
        my $do;
        $do = sub {
            my $j = {%$j};
            my $ad = [@_];
            my %j = %$j;
            while (@$ad) {
                my ($k, $v) = (shift @$ad, shift @$ad);
                
                my $comp = $k =~ /^(%|\+)/;
                my $j = {%j} if $comp;
                if ($comp) {
                    $k =~ s/^\+// if $comp;
                    j.t .= $k if $comp;
                }
                else {
                    (j.t, j.cv) = split /\s+/, $k, 2;
                    %j = %$j;
                }
                j.cv || die;
                j.r = "j.t j.cv";
                j.s = $v;
                $bb->{j.r} = j.s;
            }
            sub{$do->(%$j, @_)}
        };
        $do
    gpfro: | #c
      my ($R, $aser, $l, $u, $cv, @etc) = @$a;
      
      my $gp = {R=>$R, u=>$u, cv=>$cv};
      my $v = w $R gp(a => $gp);
            
      $aser->($l => $v,
          '%gp' => $gp,
          @etc,
      );
    
    phat: | #c
        a.bb = {};
        a.bz = w $R as(bb=>a.bb);
        a.fro = sub {
            my $fro = [$R, a.bz, @_];
            w $R gpfro(a=>$fro);
        };
    uni: | #c
      #  from => $H,
      #  trav => "{G{GGs",
      my @tr = split /(?=\{|\[)/, $t;
      
      for (@tr) {
          /^(.)(.+)$/;
          say "Sapped $i       $1 $2";
          last if $1 eq " ";
          $i = $i->{$2} if $1 eq "{";
          $i = $i->[$2] if $1 eq "[" && (ref $i eq 'ARRAY' || die "NOT!");
      }
      if ($t =~ m/^.+? (.+)$/) {
          say "Had some more: $1";
      }
      #R.T ||= R.A->spawn("T");
      #R.T->commit("YEP");
      $i
    
    cgp: | #c data guess chart
        my $c = {};
        if (!defined $u){
            c.undef = 1;
        } else {
            if (my $ref = ref $u) {
                c.ARRAY = 1 if $ref eq "ARRAY";
                c.HASH = 1 if $ref eq "HASH";
                c.CODE = 1 if $ref eq "CODE";
                c.canpi = 1 if !%$c && $u->can('pi');
                for (qw'A C G T     R   J') {
                      $c->{$_} = 1 if $ref eq $_;
                }
                c.ref = $ref;
            }
            else {
                if (ref \$u eq 'SCALAR') {
                    c.text = 1;
                    c.len = length($u);
                    c.lin = scalar split /\n/, $u;
                    c.b = scalar split /\n\n/, $u;
                    c.number = $u =~ /^(?:\d+\.)?\d+$/;
                    c.wordy = $u =~ /\w+/;
                }
                else { die "wtf is $u" };
            }
        }
        $c
    dus: | #c
        my $h = {
          ARRAY => {
            it => sub {
              my $h = shift;
              my $i = 0;
              map { { k => "[".$i++, v => $_ } } @$h
            },
            oh => 0,
          },
          HASH => {
            it => sub {
              my $h = shift;
              map { { K=>$_, k=>"{".$_, v=>$h->{$_} } } sort keys %$h
            },
          },
        };
        my $an = sub {
            my $k = shift;
            my $i = $h->{$k} ||= {it => h.HASH.it};
            %$i = (%$i, @_);
        };
        # make so 1.2 means if e>=0.5 traverse with e-=0.2
        # drops 1 every traversal too...
        # cept for sometimes when there's a deeper number in e
        # saying from above via style schema how to curle around
        # the 1-9, wherever
        # then anomalies are mapped with names & meaning in stylegrab 78
        
        $an->(qw'A oh 0.2');
        $an->(qw'C oh 0.2');
        $an->(qw'G oh 0.2');
        $an->(qw'T oh 0.2');
        $an->(qw'R oh 0.2');

        $an->(qw'W oh 0.2 mustb','id,hash,file,G');
        $h
    du: | #c style grab
      $a || die;
      my $R = a.R;
      defined a.i || die;
      # how to get around the Objs' data
      my $s = a.s ||= $R->dus();
      my $i = a.i;
      my $n = a.n;
      a.e = 2 if !defined a.e;
      
      my $c = {};
      a.as ||= [];
      push @{a.as}, $a;
      a.ds = [@{a.ds||[]}, $a];
      
      return {} if @{a.ds} > 12 || 2 < grep {ref _.i && _.i eq $i} @{a.as};
      
      my $ref = ref $i || 'SCALAR';
      my $is = $s->{$ref} || $s->{default};
      $is ||= $s->{HASH} if "$i" =~ /^\w+=HASH\(/;
      $is ||= $s->{default} || return {};
      
      for my $j (is.it->($i)) {
          my $k = delete j.k;
          my $K = delete j.K;
          my $v = delete j.v;
          
          $j = {%$is, %$j};
          
          my $ohms = defined j.oh ? j.oh
              : defined is.oh ? is.oh
            : 1;
          
          my $an = {%$a, i => $v};
          an.e -= $ohms;
          
          my $rk = join "\t", $k, an.e;
          
          $c->{$rk} = $v;
          
          a.tr.rows++;
          last if a.tr.rowlimit && a.tr.rows >= a.tr.rowlimit;
          
          if (an.e >= 1 && ref an.i) {
              my $cu = $R->du($an);
              while (my ($ku, $vu) = each %$cu) {
                  my $nk = $k.$ku;
                  next if grep { $_->($_, $an, $cu) } @{s.notZ||[]};
                  $c->{$nk} = $vu;
              }
          }
      }
      
      # this is about a 4 - material for links
      $c
      
    S: | #c void R_surcess R::S heist
        # 0.1
        my $a = R.a = ar.a ||= {};
        a.R = $R;
        w $R phat;
        
        # 1.16
        
        # 2 s messed by R plumbing, sure
        
        # 3
        
        # 4
        
        # 6
        
        my $html = w $R makaout(R=>$R, a=>R.a, cv => 0);
        
        # 8
        
        # 9
        saygr " S --- ".F_delta;
        $html
    makaout: | #c
        my $cv = ar.cv;
        $cv = a.cv if !defined $cv;
        
        # 4
        my @r = w stylekeysort(d=>a.bb);
        
        # 4.1
        a.o = {}; # by voltage, peel
        for my $r (@r) {
                my ($l, $vo, $or) = split /\s+/, $r; # split style, vectory
                
                saygr "igggy $l $vo > a.cv" && next if $cv && $vo > $cv;
                
                $or = $vo if !defined $or;
                
                my $o = a.o->{$or} ||= []; 
                push @$o, $r;
        }
        
        # 4.2
            
            #thingness <-> appearance
            my $th = {};
            my $ap = {};
            my @int;
            for my $ov (sort keys %{a.o}) {
                 my $o = a.o->{$ov};
                 
                 for my $r (@$o) {
                     my $s = a.bb->{$r};
                     my ($l, $vo) = split /\s+/, $r; # split style, vectory
                     ($l, my $style) = split '%', $l;
                     
                     my $in = $style ? $ap : $th;
                     my $j = {
                         l => $l,
                         s => $s,
                         vo => $vo,
                     };
                     if ($style) {
                         my $o = $ap->{$l} ||= [];
                         j.style = $style;
                         push @$o, $j
                     }
                     else {
                         if (exists $in->{$l}) {
                             warn "replacemont $l $vo";
                         }
                         $th->{$l} = $j;
                         push @int, $l;
                     }
                }
            }
            
        # 7
        my @s;
            for my $thl (@int) {
                my $j = $th->{$thl} || next;
                my $o = delete $ap->{$thl};
                my $l = j.l;
                my $s = j.s;
                
                # top volt for thing selection: # whattage
                next if $l eq 'K' && a.bb->{"name 0.1"} =~ $s;
                next if $l eq 'name' && a.bb->{"K 0.2"} =~ $s
                    && $s ne a.bb->{"K 0.2"};
                
                die "reffy $s in $l" if ref $s;
                sayyl "for the $l\t\t$s j.vo" if ar.db;
                
                my $ishtml;
                my $css = [];
                for my $oj (@$o) {
                    saybl "        sdtyle! oj.style oj.s" if ar.db; 
                    if (oj.style eq "css") {
                        push @$css, oj.s;
                    }
                    elsif (oj.style eq "gp") {
                        # has a way to $a the gp action within...
                        $ishtml = 1;
                    }
                    elsif (oj.style eq "sf") {
                        push @$css, map { $R::f->{$_} || 
                        die "no style $_"} split '_', oj.s;
                    }
                    else {
                        die "style oj.style = oj.s \t for $l";
                    }
                }
                
                my $at;
                at.style = join ';', @$css;
                G.shtuuyle->{at.style}++;
                #at.title = $l;
                $at = join " ", map { $_.'="'.$at->{$_}.'"' } 
                    grep { $at->{$_} } sort keys %$at;
                if (!$ishtml) {
                    $s = encode_entities($s);
                    $s =~ s/\\n/\n/g;
                    die if $s =~ /\\n/;
                }
                $s = "<añ $at>$s</añ>" if $s; 
                push @s, $s;
            }
            
            if (%$ap) {
                sayre "Extr a appearance: ".wdump($ap);
            }
            
            @s = "nose? ".@r if !@s;
            say wdump(2, a.bb) if !@s; 
            #die "nose? $u" if !@s;
            
            join("", @s);

