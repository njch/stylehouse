hooks:
  R_surs:
    uni: | #c
      #  from => $H,
      #  trav => "{G{GGs",
      my @tr = split /(?=\{|\[)/, $t;
      
      for (@tr) {
          /^(.)(.+)$/;
          say "Sapped $i       $1 $2";
          last if $1 eq " ";
          $i = $i->{$2} if $1 eq "{";
          $i = $i->[$2] if $1 eq "[" && (ref $i eq 'ARRAY' || die "NOT!");
      }
      if ($t =~ m/^.+? (.+)$/) {
          say "Had some more: $1";
      }
      $i
    
    S: | #c void R_surcess R::S heist
        # 0.1
        my $a = R.a = ar.a ||= {};
        w R_sur/phat;
        
        # 0.2
        R.a.e ||= R.S.e || die;
        
        # 1.16
        my $unifro = {
            i => R.J.from || die,
            t => R.J.trav || "",
        };
        R.a.i ||= w R_sur/uni(%$unifro);
        
        # 2 s messed by R plumbing, sure
        R.a.s = R.S.s || $R->dus;
        R.a.s.HASH.oh = 0.2;
        R.a.s.SCALAR.it = sub {
            my $i = 0;
            map { { k => $i++, v=> $_, oh => 0.2 } } split "\n\n", shift;
        };
        
        R.a.tr.rowlimit = R.S.rowlimit || 9*2;
        
        # 3
        $R->du;
        
        # 4
        w R_sur/S_4;
        
        # 4.1
        a.fro->('H 0.01' => $H, 0.2);
        
        a.fro->('G 0.02' => $G, 0.2, '+_fro' => ' ');
        
        a.fro->('R 0.11' => $R, 0.2, '+_fro' => ' ');
        
        # 4.2
        a.fro->('R_J_from 0.12' => R.J.from, 0.2);
        
        a.fro->('R_J_trav 0.13' => R.J.trav, 0.2, '%sf' => 'black_fs120'); 
        
        a.bz->('R_S_e 0.2' => R.S.e, '%sf' => 'white');
        
        a.fro->('R_a_i 0.21' => R.a.i, 0.2);
        
        a.bz->('Js 0.29' => "\n");
        
        # 6
        my $html = w R_sur/makaout(R=>$R, a=>R.a, cv => 0);
        
        # 9
        saygr " S --- ".F_delta;
        $html
    S_4: | #c
        my $d = a.d;
        my @r = w stylekeysort[$d];
        my $si = @r;
        my @i = w wind[$si];
        my $ro = R.a.ro = {}; # wind round
        my $i = 0;
        for my $r (@r) {
            my $j = w R_sur/shj[$r, $d];
            my $li = j.li = shift @i || die;
            $ro->{$li} = $j;
            if ($i > 0) {
                 a.bz->("${li}0_Bs 0.3 0.3${li}0" => "\n");
            }
            a.bz->("${li}_li 0.3 0.3${li}1", j.li,
                '%sf', 'blue_fs120');
                
            my $t = j.t;
            $t .= join("", (" ") x (6 - length($t))) if length($t) < 6;
            a.bz->("${li}_k 0.3 0.3${li}2", $t,
                '%sf', 'black');
           
            my $cv = j.cv;
            $cv =~ s/^0//;
            a.bz->("${li}_cv 0.3 0.3${li}22", $cv,
                '%sf', 'red_fs80');
            
            a.fro->("${li}_s 0.3 0.3${li}4", j.s, j.cv,
                '%sf', 'white_fs120');
            
            #sayyl " S_4[$i => $li   ".$G->F_delta;
            $i++; 
            
        }
    makaout: | #c
        my $cv = ar.cv;
        $cv = a.cv if !defined $cv;
        
        # 4
        my @r = w stylekeysort(d=>a.bb);
        
        # 4.1
        a.o = {}; # by voltage, peel
        for my $r (@r) {
                my ($l, $vo, $or) = split /\s+/, $r; # split style, vectory
                
                saygr "igggy $l $vo > a.cv" && next if $cv && $vo > $cv;
                
                $or = $vo if !defined $or;
                
                my $o = a.o->{$or} ||= []; 
                push @$o, $r;
        }
        
        # 4.2
            
            #thingness <-> appearance
            my $th = {};
            my $ap = {};
            my @int;
            for my $ov (sort keys %{a.o}) {
                 my $o = a.o->{$ov};
                 
                 for my $r (@$o) {
                     my $s = a.bb->{$r};
                     my ($l, $vo) = split /\s+/, $r; # split style, vectory
                     ($l, my $style) = split '%', $l;
                     
                     my $in = $style ? $ap : $th;
                     my $j = {
                         l => $l,
                         s => $s,
                         vo => $vo,
                     };
                     if ($style) {
                         my $o = $ap->{$l} ||= [];
                         j.style = $style;
                         push @$o, $j
                     }
                     else {
                         if (exists $in->{$l}) {
                             warn "replacemont $l $vo";
                         }
                         $th->{$l} = $j;
                         push @int, $l;
                     }
                }
            }
            
        # 7
        my @s;
            for my $thl (@int) {
                my $j = $th->{$thl} || next;
                my $o = delete $ap->{$thl};
                my $l = j.l;
                my $s = j.s;
                
                # top volt for thing selection: # whattage
                next if $l eq 'K' && a.bb->{"name 0.1"} =~ $s;
                next if $l eq 'name' && a.bb->{"K 0.2"} =~ $s
                    && $s ne a.bb->{"K 0.2"};
                
                die "reffy $s in $l" if ref $s;
                sayyl "for the $l\t\t$s j.vo" if ar.db;
                
                my $ishtml;
                my $css = [];
                for my $oj (@$o) {
                    saybl "        sdtyle! oj.style oj.s" if ar.db; 
                    if (oj.style eq "css") {
                        push @$css, oj.s;
                    }
                    elsif (oj.style eq "gp") {
                        # has a way to $a the gp action within...
                        $ishtml = 1;
                    }
                    elsif (oj.style eq "sf") {
                        push @$css, map { $R::f->{$_} || 
                        die "no style $_"} split '_', oj.s;
                    }
                    else {
                        die "style oj.style = oj.s \t for $l";
                    }
                }
                
                my $at;
                at.style = join ';', @$css;
                at.title = $l;
                $at = join " ", map { $_.'="'.$at->{$_}.'"' } 
                    grep { $at->{$_} } sort keys %$at;
                if (!$ishtml) {
                    $s = encode_entities($s);
                    $s =~ s/\\n/\n/g;
                    die if $s =~ /\\n/;
                }
                $s = "<t $at>$s</t>" if $s;
                push @s, $s;
            }
            
            if (%$ap) {
                sayre "Extr a appearance: ".wdump($ap);
            }
            
            @s = "nose? ".@r if !@s;
            say wdump(2, a.bb) if !@s; 
            #die "nose? $u" if !@s;
            
            join("", @s);
