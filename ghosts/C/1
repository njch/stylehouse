R_Jz:
 - K: surf #c
   D: |
     my $name = ar.name || ar.m && ar.m->[0] || 'ollox';
     my $i = ar.i || ar.J;
     my $J2 = Rw jin $name;
     Rw ein/stu $J:J2 $i;
 - K: eye #c
   D: |
       my $name = ar.name || 'ollox';
       my $J = Rw jin $name;
       my $an = shift @$m;
       my $i = join '/', grep{defined} 'eye', $an;
       Rw ein/dire $J $i;
 - K: shed #c not even eye
   D: |
     my $o = Rw pul $cs:m i;
     my $i = defined o.i ? o.i : '.';
     die "SHED $i";
     Rw ein/dire $J $i;
 - K: ein/dire #c takeover J
   D: |
     my $r = {i=>$i, t=>[], sc=>{ou=>'dire'}};
     Rw inness $J $r;
 - K: ein/image #c directed... wants to mod some inness, use the event Jtrain...
   D: |
     my $r = {i=>$i, sc=>{ou=>'image'}};
     Rw inness $J $r;
 - K: ein/youtube #c
   D: |
     my $r = {i=>$i, t=>[], sc=>{ou=>'youtube'}};
     Rw inness $J $r;
 - K: ein/stu #c data whatever
   D: |
     my $r = {i=>$i, t=>[], sc=>{grp=>'ref'}};
     Rw inness $J $r;
 - K: inness #cc soy packets everywhere # THINGNESS as onness
   D: |
      w mux(u=>$J) if ar.r; # slower reintro - calc entropy
      
      say "inness of ". gp $J;
      say "r: ".ki ar.r if ar.r;
      J.on ||= Rw tent on;
      J.on.yy.conroll.dont ||= 1;
      
      my $ye = Rw suck + */ines;
      
      #die wdump $ye if J.name =~ /mash/;
      
      if ($ye) {
      sayre "inness override ".$J->pi for 1..5;
      return
      }
      die if J.name =~ /mash/;
      
      # right handed receiver of 8s, informs to humm etc.
      # would involve many uish and the types of perception we want to see
      # laying out the plane of attack
      # just has to find a corner of it as 3
      # ^ inject 6
      # but first...
      # t distributable, listy compressible pass space
      # ^ recursor... incubator
      # v def
      my $o = J.onei ||= {i=>$G};
      my $r = ar.r;
      %$o = (i => r.i) if r.i;
      
      o.t||=[];
      
      if (ref r.t eq 'ARRAY') {
          o.t = [@{r.t}];
      }
      else {
          push @{o.t}, r.t if r.t;
      }
      
      # do this from u%ut, branch climber
      # ^^^ exactly, tip sits around the rim, styles ping flows
      my $i = o.i;
      for my $t (@{o.t}) {
          sayyl "   -trav $i       $t";
          $i = $R->suets($i, $t);
      }
      sayyl "Inness: ".slim(130,gp(o.i))."     "
        .join("   ", @{o.t})." ----> ".slim(130,gp $i)
            if $i ne o.i;

      # on ventrickles already, look at the path for clues
      # if last t was {bb 55 stylse
      # the tree of loveliness to hook in as things fly by again soon...
      
      # like J.yy.inness.wants to fold back all the uninteresting stuff
      # also show the groups of phases etc
      # styles from on become humming/rounding protocols
      #
      
      J.on bz u 0.1 $i
      J.on bz u%ori 0.1 J.onei.i
      J.on bz u%travely 0.1 J.onei.t
      if (r.sc) {
          for my $k (sort keys %{r.sc}) {
             my $v = r.sc->{$k};
             J.on bz u%$k 0.1 $v
          }
      }
      

