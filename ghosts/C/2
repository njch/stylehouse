
R_surs:
    gp: | #c R_sur gp
        G.gp_inarow++;
        my $a = ar.a || {};
        a.cv = ar.cv if ar.cv;
        a.R = ar.R if ar.R;
        a.u = ar.u if ar.u;
        a.cv = 0.1 if a.cv < 0.1;
        my $u = a.u;
        
        # 3
        my $R = a.R;
        w $R phat[$a]; # zippur
        
        my $c = w $R cgp[$u]; # schemer guesses
        
        my $arr = {
            a => $a, # @_
            u => $u,
            R => a.R,
        };
        
        # 4
        my ($wa) = grep { $c->{$_} } qw'canpi ARRAY HASH ref undef text';
        $wa ||= 'wtf';
        
        if ($wa eq "canpi") { # supply $self
            $wa = ref $u;
            $arr->{$wa} = $u if $wa ne 'G';
        }
        R.way->find("pi/$wa") || die "not $wa equip";
        
        # 5

        # 6
        w $R pi/$wa(%$arr);
        
        # 7
        my $html = w $R makaout(%$arr);
        
        # 8
        
        # 9
        G.gp_inarow--;
        my $ind = join "", ("  ") x scalar @F;
        #sayyl "$ind Done gp for $u ".F_delta;
        $html
    pi: #c
      wtf: | #c
        a.bz->('know 0.1', "$u");
      ARRAY: | #c
            my $cv = a.cv ||= 0.3;
            
            my $si = @$u;
            a.bz->('si 0.1' => $si, '%css' => "color:#fff;font-size:50%");
            a.bz->('Bo 0.1 0.11' => '[');
            a.bz->('oB 0.1 0.9' => ']');
            
            return if $cv < 0.2;
            
            my $ki = 0;
            my $i = 0;
            while (exists $u->[$i]) {
                my $uu = $u->[$i];
                if ($ki > 0) {
                    $ki++;
                    a.bb->{"[${ki}_Bs 0.2"} = ',';
                    $ki++;
                }
                
                my $vcv = a.cv - 0.2; # dus bend for $k
                $vcv = 0.1 if $vcv < 0.1;
                if (1) {
                    a.fro->("[${ki}_v 0.2", $uu, $vcv,
                    
                        "%css" => "font-size:75%");
                    $ki++;
                }
                
                $i++;
                if ($i >= 5) {
                    a.bz->("more 0.2 0.886" => "@",
                    
                        '%sf' => "blue");
                    last;
                }
            }
      HASH: | #c
            my $cv = a.cv ||= 0.3;
            
            my $si = keys %$u;
            a.bz->('si 0.1' => $si, 'si%css 0.1' => "color:#fff;font-size:50%");
            
            a.bz->("Bo 0.1 0.11" => '{');
            a.bz->('oB 0.1 0.9' => '}');
            
            return if $cv < 0.2;
            
            # 3
            my $r = {map{$_=>1} sort keys %$u};
            my @r = grep { delete $r->{$_} } qw'K name';
            push @r, sort keys %$r;
            
            my $ki = 0;
            my $i = 0;
            for my $k (@r) {
                my $v = $u->{$k};
                
                if ($ki > 0) {
                    $ki++;
                    a.bb->{"[${ki}_Bs 0.2"} = ',';
                    $ki++;
                }
                a.bz->("[${ki}_k 0.2" => $k,
                    
                    "\%css 0.2" => "color:#acf;font-size:80%");
                    
                    
                my $keyi = $ki;
                $ki++;
                my $vcv = a.cv - 0.2; # dus bend for $k
                
                if ($vcv >= 0.2) {
                
                    a.bz->("[${ki}_Bi 0.2" => ':');
                    
                    $ki++;
                    
                    a.fro->("[${ki}_v 0.2" => $v, $vcv,
                    
                        '%css 0.2' => "font-size:75%");

                }
                
                $i++;
                if ($i >= 5) {
                    a.bz->("more 0.2 0.886" => "@",
                    
                        '%sf' => "blue");
                    last;
                }
            }
      ref: | #c weird ref
        a.bz->('knowref 0.1', ">?$u");
      code: | #c
        a.bz->('know 0.1', "CODE");
      undef: | #c
        a.bz->('know 0.1', '~');
      text: | #c
            my $text = $u;
            
            my @s;
            my $adhow = $text =~ s/\n/â†¯/g;
            
            my $tev = int(a.cv * 200); # 0.4 = 100
            
            my $si = length($text);
            if (!$si) {
                a.bz->('length 0.1', "''", '%sf', 'blue');
            }
            if ($si > $tev) {
                $text = ($text=~/^(.{$tev})/s)[0];
            }
            else {
                undef $si;
            }
            
            a.bz->('line 0.1' => $text,
                '%css' => "background:rgba(200,30,80,0.3);color:#3f3;"
                    ."font-size:70%");
            
            
            if ($si) {
                a.bz->("#more 0.9" => "@",

                    "%sf" => "blue");
            }
            
            return if a.cv < 0.2;
            
            my $ni = a.c.lin if a.c.lin > 1;
            my $bi = a.c.b if a.c.b > 1;
            
                a.bz->("si/l 0.2" => "$si",
                    '%css' => "color:#b89;font-size:50%;position:absolute") if $si;
                a.bz->('si/n 0.2' => "$ni",
                    '%css' =>
                        "color:#fff;font-size:50%;"
                        ."position:absolute;margin-top:1.4em;") if $ni;
                a.bz->('si/b 0.2' => "b$bi",
                    '%css' =>
                        "color:#f89;font-size:50%;"
                        ."float:left;left:-1em") if $bi;
                        
            return if a.cv < 0.7;
            
            my $col = $G->vimcolor($u);
            $col =~ s/\\n/\\\\n/g;
            $col =~ s/\n/\\n/g; 
            $col =~ s/'/\\'/g;
            a.bz->("line 0.1" => $col, '%gp'=>{vimcolor=>1},
                '%css' => "font-size:40%");
            
      A: | #c
        my $cv = a.cv ||= 0.3;
        a.bb->{"thi 0"} = ref $u;
        return if $cv < 0.1;
        a.bb->{"name 0.1"} = u.name;
        return if $cv < 0.2;
        a.bb->{"K 0.2"} = u.K;
        
        a.fro->('i 0.2', A.i, 0.2);
        
        return if $cv < 0.3;
        
        my $un;
        for my $nuk (keys %$A) {
            next if $nuk !~ /^(u|n)/;
            my $v = $A->{$nuk};
            my $tot = ref $v eq "ARRAY" ? @$v : $v;
            $un->{$1}->{$nuk} = $tot;
            my $lv = $1 eq "u" ? 1 : 2;
            
            a.bz->("un/$1/${nuk}_nuk 0.3$lv", "$nuk:",
                    
                    "\%css" => "color:#acf;font-size:80%");
            
            a.fro->("un/$1/${nuk}_t 0.3$lv", $tot, 0.2,
                    
                    "\%css" => "color:#fca;font-size:80%");
        }
        
      G: | #c
        my $cv = a.cv ||= 0.3;
        a.bb->{"thi 0"} = ref $u;
        return if $cv < 0.1;
        a.bb->{"name 0.1"} = u.name;
        return if $cv < 0.2;
        a.bb->{"K 0.2"} = u.K;
        
      T: | #c
        a.bz->('pi 0.1', $u->pi);
      J: | #c
        my $cv = a.cv ||= 0.3;
        a.bb->{"thi 0"} = ref $u;
        return if $cv < 0.1;
        a.bb->{"name 0.1"} = $H->ejson(u.B) if u.B;
        return if $cv < 0.2;
        a.fro->('i 0.2', u.A.i, 0.1);
      H: | #c
        a.bz->('thi 0.01' => 'H');
        a.bz->("name 0.06" => H.style,
            '%css' => "color:white;font-size:120%;margin-left:-1.5em;position:absolute;");
        a.bz->("K 0.1" => H.name,
            '%css' => "color:black;font-size:120%;margin-left:-0.67em;position:absolute;");
        
      R: | #c
        my $cv = a.cv ||= 0.3;
        a.bb->{"thi 0"} = ref $u;
        return if $cv < 0.1;
        a.bb->{"name 0.1"} = u.name;
        return if $cv < 0.2; 
        a.bb->{"K 0.2"} = u.K;
        

      C: | #c
        my $cv = a.cv ||= 0.3;
        a.bb = {};
        a.bb->{"thi 0"} = ref $u;
        return if $cv < 0.1;
        a.bb->{"name 0.1"} = u.name;
        
        return if $cv < 0.2;
        
        a.bb->{"K 0.2"} = u.K;
        a.bb->{"K%css 0.2"} = "color:#3f3";
        
        if (C.B && C.B.name) {
            a.bz->("B_name 0.2", C.B.name, '%css' => "color:#3f3"); 
        }
        
        return if $cv < 0.3;
        
        if (C.G && (defined C.print || C.Gw)) {
            my $p = C.G->w('print' => {}, $C, {nodie=>1});
            a.bb->{"print 0.3"} = $p if defined $p;
        }
        
        # dusseldorf
        my %s = map { $_=>1 } grep { /^[a-z]/ } keys %$C;
        delete $s{id};
        my @or = qw'name point timer', keys %s; 
        
        my $c; 
        my $b; 
        for my $k (@or) {
            next if !defined $k;
            next if !exists $C->{$k};
            my $t = $C->{$k};
            next if !defined $t;
            next if ref $t;
            next if $t =~ /\n/; 
            my $slim = slim(20,20,$t);
            
            a.bb->{"$k 0.4"} = $slim if $cv >= 0.4; # also a dus fuzz away
            
            a.bb->{"$k 0.3"} = $slim if $k eq "point"; # pyramid
        }
        
        if (C.B && %{C.B}) {
            a.fro->('B 0.3', C.B, 0.2);
        }

