R_Jz:
 - K: onl/cut #c
   D: |
     $scsort||die;
     @$onl = reverse
         sort { a.sc->{$scsort} <=> b.sc->{$scsort} }
         grep { defined _.sc->{$scsort} || die'no %'.$scsort.' on: '._.j.r }
         @$onl;
     my @in;
     my @cut;
     push @{ @in < 4 ? \@in : \@cut }, $_ for @$onl;
     for my $x (@cut) {
         delete J.bb->{_.r} for x.j, values %{x.sj};
     }
     @$onl = @in;
     $onl
     
 - K: very #c tak tlv into space, ready for lx/suro
   D: |
       my $onl = ar.onl;
       $onl ||= Rw tlv $J;
       
       my $phi = $out - $in; # <-0.8->
       my $thi = $phi / (@$onl||1); # or indi
       # thi vs $onl individuality
       my $tin = $in;
       for my $x (@$onl) {
           # go higher and pipe mods to squish space
           x.in = $tin;
           x.out = $tin + $thi;
           $tin = x.out; # next
           
           x.thi = $tot/$phi; # space volve, indi...
           #die "x.j.r   shall x.thi    ($tot $phi)";
           
           my $j = x.j;
           if (!J.q) {
               say "up on ".$J->pi."    j.r    ".slim 200, gp(j.s);
               say "   * _.r          => ".gp(_.s) for values %{x.sj};
               say "up around x.in <-> x.out"
           }
       }
       $onl
       
 - K: ii/iny #c ha zom
   D: |
       # root ^
       # travel v
       # cend pwth
       my $M = [];
       
       Rw ii/infrom + $M;
       
       #say "ii/cap: ".ki$rr;
       my $t = '/'.x.j.t.'-cap';
       Rw om/lev + $oM:M $t $at=0.0001;
 - K: ix/suro #c
   D: |
      my $j = x.j;
      my $coi = Rw pha $J $k:j.l;
      my $M = [];
      
      # innessy
      Rw ii/iny $J $x $M;
      my $s = '';
      Rw wtf $M spa $s;
      #v v v v v v v
      # v v v v v v
      Rw ii/bod $J $x $M;
      # ^ ^ ^ ^ ^ ^
      #^ ^ ^ ^ ^ ^ ^
      
      say "surM:   ".join ',  ', map{_.t} @$M;
      
      die if !@$M;
      
      Rw om/bal $J $oM:M $t:j.t $in:x.in $out:x.out;
      coi.end->();
 - K: ii/bod #c boodle am $rr into $M: lab,pi, lab,pi ...
   D: |
       my $in = x.in; # TODO whereto?
       my $out = x.out;
       my $phi = ($out - $in) * (x.thi || 2); # normal lines per 0.1
       my $thi = $phi; # oundo big window, bod small
       my $whi = $thi * (x.sc.whim || 2);
       say "bod $in <--> $out  $thi     x.j.r"; # TODO say big
       
       my $o = Rw oundo $thi $whi $x;
       
       my $oM = [];
       for my $r (@{o.r}) {
           defined r.r || die"nor".ki$r;
           next if r.skip;
           my $M = [];
           # SZOOOOOOOOOOOM animated, passing landmarks
           
           Rw ii/labegy $x $r $M;
           #v v v v v v v
           # v v v v v v
           Rw ii/pi $x $r $M;
           # ^ ^ ^ ^ ^ ^
           #^ ^ ^ ^ ^ ^ ^
           # ^ pass $thi, pool resources
           
           my $rc = {};
           # whole line magneted styles etc...
           rc.path = r.c.path if r.c.path;
           say " iibod rc.path   for r.r";
           Rw om/lev + $oM:M $M:oM $t:r.r $c:rc;
       }
       if (o.more) {
           Rw ii/more $x $o $M:oM;
       }
       Rw iM + $oM;
 - K: ii/pi #c THE WHOLE GHUTS, see d.c.gp ghost plumbing  & d.g.(x|r) for geo sync suro
   D: |
     my $d;
     d.g.x = $x;
     d.g.r = $r;
     d.t = 'pi';
     # structureal elements jump into the pipe lining
     d.c = {%{r.c||{}}};
     d.c.pi ||= '';
     
     d.c.s ||= r.s;
     d.c.gp.cv ||= 0.6;
     
     d.c.path ||= r.path;
       
     d.sc = {%{r.sc||{}}};
     d.sc.ws = 'n';
     d.sc.ab = 'left:1em';
     
     Rw iiJM + $d;
 - K: ii/labegy #c suitcase handle # elemental locus of travel/path fields
   D: |
     my $d;
     d.g.x = $x;
     d.g.r = $r;
     d.t = 'lab';
     d.c = {%{r.lab_c||{}}};
     d.c.s = r.r;
     d.c.pi ||= 'lab';
     d.c.fsx = "25";
     # selection piways
     d.sc = {%{r.lab_sc||{}}};
     d.sc.ws = 'p';
     d.sc.ab = 'right:0.5em'; 
     Rw iiJM + $d;
     # the lasty tangvely, sandy mod hooks beVow
 - K: whack #c the <, smash bit off end of stick
   D: |
     my $o = J.onei;
     if (@{o.t||[]}) {
         die;
     }
     else {
         o.i =~ s/\/[^\/]+$//;
     }

