
R_surz:
  - K: Vit #c
    key: {E: up, R: down}
    n_D:
            up: |
                S.S.e += 0.1;
            down: |
                S.S.e -= 0.1;
  - K: Num #c
    key: {0: out, number: in}
    n_D:
            out: |
              return S.ksuc = "" if S.ksuc && $k eq "0";
              my @trav = $G->chuntr(S.J.trav);
              pop @trav;
              S.J.trav = join '', @trav;
            in: |
              S.ksuc .= $k;
              my $j = S.a.ro->{S.ksuc};
              
              if (!$j) {
                  w unmux(u=>$S); # TODO totally 8 up some ... near the Jtrav # like remux
                  sayre "no j ye for S.ksuc" for 1..5;
                  return;
              }
              sayyl "got $j j.t j.cv for S.ksuc";


              S.ksuc = "";
              if (S.a.travly) {
                  S.J.trav =~ s/\^.+?$// || die;
              }

              my ($hop) = j.t;
              S.J.trav .= $hop; 
  - K: Sud #c ebrace flying embryo J
    n_D:
      in: |
        S.J = { from => ar.i };
        S.J.trav = ar.t if ar.t;
        S.monod = ar.monod if ar.monod;
        
        sayyl $S->pi."\tsuddenly ".gp(ar.i);
    
  - K: Jmood #c + du + humms
    babz:
        'S 1.8': | 
          S.mod = {%{S.mood||{}}};
          if (my $onetime = delete S.monod) {
              S.mod = {%{S.mod}, %$onetime};
          }
        'S#du 3.3': |
          $d = w $R du;
        'S#hum 4.444': |
          my $humm = S.mod.humm || 'adu';
          w $R $humm/humms[$S, $a, $d];
          
          
  - K: Jmoves #c
    babz:
        'S 2.3': |
            R.lastS = $S;
            S.K eq "D" || die || "D?";
            
            S.J ||= { from => [ do { H.G K Gs:*; } ] };
            
            sayyl "Doing S.K S.name hmmmmmmmm ".slim
            (S.J.from)." S.J.trav"; 
            my $i = S.J.from || die;
            my $t = S.J.trav || '';
            ($t, S.a.travly) = split /\^/, $t, 2;
            
            S.a.i = $R->suets($i, $t);
            
            a.s = S.S.s || w $R dus;
            a.s.HASH.oh = 0.2;
            a.tr.rowlimit = S.S.rowlimit || 9*4;
            a.e ||= S.S.e;
            defined a.i || die;
            my $d = {};
            
  - K: Jtwo #c
    babz: 
        'S 2.4': |
          
          a.fro->('Rl 0.01' => [$H,R.G,$R,$S], {cv=>0.4});
          
          if (S.J.trav) {
              a.fro->('S_J_from 0.12' => S.J.from, 0.4, '%css' => '-webkit-filter:hue-rotate(35deg);');

              a.bz->('S_J_trav 0.13' => S.J.trav, '%sf' => 'black_fs120'); 
          }

          a.bz->('S_S_e 0.2' => S.S.e, '%sf' => 'white');

          a.fro->('S_a_i 0.21' => S.a.i, 0.2);

          a.bz->('Js 0.29' => "\n");
          if (S.mod && %{S.mod}) {
              a.bz->('mod 0.31' => $H->ejson(S.mod)."\n");
          }

