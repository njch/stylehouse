C:
 - K: Con #c waiting for tension
R_Jz:
 - K: ii/Jhead #c J _
   D: |
       my $out = ar.out || 0.01;
         J.lev->("J\t$out", sub {
             my $J2 = shift;
             my $M = [
                 ['J', 'hull/mk:Jself', {fo=>[$J,0.1]}],
                 ['ඬ', 'hull/mk:kapow', {}, {co=>(J.ent.1 > 5 ? 'f85':'126')}],
                 ['ƾ', 'hull/mk:jin oot', {}, {co=>'8ff'}],
                 ['G', 'sur/to:G'],
                 ['x', 'hull/mk:X', {}, {co=>'f34',fs=>7}],
                 ['Jung', 'sur/to:Jung', {}, {co=>'68d', fs=>5}],
             ];
             Rw mo/pwth $J:J2 $M 0.1-0.3;
         }, '%css'=>'font-size:200%');
 - K: ii/ornate #c arabic ornate parenthesis
   D: |
       my $gl = ar.out ? '﴿' : '﴾';
       my $at = ar.out || 0.01;
       my $M = [];
       # do the pwth parse into an $M too
       push @$M, Load <<"";
        - ornate
        - at: $at
        - s: $gl
        - fs: 100
          zip: 3
          blr: 5
          zi: 3
          rad: 1
       
       # 3
       
       Rw mo/pwth $J $M 0.1-0.3;
       # 
       
 - K: ii/cap #c ha zom
   D: |
       my ($vli) = grep{_.style eq 'traveli'} @{rr.sjs};
       my $M = [
           ['_', '', {s=>rr.j.l}, {fs=>18, co=>'38f'}],
           ['=','', {}, {fs=>12,co=>'000'}],
           ['i', 'sur/to:/', {fo=>[vli.s,0.1]}],
       ];
       my ($vly) = grep{_.style eq 'travely'} @{rr.sjs};
       if ($vly && @{vly.s}) {
           my $s = " ".join(" ",@{vly.s})." ";
           push @$M,
               ['travely', '', {s=>$s, wsp=>1}],
               ['S', '', {fo=>[rr.j.s, 0.2]}],
       }   
       # ^ all that within v
       my $lev = sub {
           my $J2 = shift;
           Rw mo/pwth $J:J2 $M 0.1-0.3;
       };
       ['cap','', {lev=>$lev}]
 - K: ii/bod #c boodle am
   D: |
       my $in = rr.in;
       my $out = rr.out;
       my $phi = ($out - $in) * rr.thi; # normal lines per 0.1
       my $thi = $phi * 2; # oundo big window, bod small
       
       my $j = rr.j;
       my $sjs = rr.sjs;
       my $u = j.s;
       say "bod $in <--> $out  $thi     j.r"; # TODO say big
       
       # how to what = @{rr.sjs}
       my $o = Rw oundo $thi $u;
       
       # between here and oundo is:
       # the art of extracting segments like pi/HASH etc
       # anything you want more than a list for
       # hive of piish style joined by opportunism to oundo pipe
       # must be offered & consumed
       # like diffusing a bomb
       # through quantum vectors to rate things
       # explode enthusiastically the things inside
       # and the alterations too,
       # like why don't you combine this this way
       # so things are things
       # but there's real datastructurey first order things
       # and all the other stuff on top
       # then it flushes out reality by ways it wants
       # by sorting by yay style then etc.
       # making pods
       # here are lots of pods:
       warn "More o.more" if o.more;
       my @M;
       for my $r (@{o.r}) {
           my $M = [];
           
           # SZOOOOOOOOOOOM
           push @$M, Rw sur/labegy $r;
           
           push @$M, Rw sur/pi $r;
           
           my $lev = sub {
               my $J2 = shift;
               my $q = 1;
               Rw mo/pwth $J:J2 $M 0.1-0.3 $q;
               # chain that ^ into c of that v to fractionate by 0
               # pyramoid the tape nice by this chaining
           };
           
           push @M, [r.r, r.path, {lev=>$lev}];
       }
       @M

