name: psych synth
dials:
  uM_styles: oogabooga
  ux_Ss: [X]
  _Ss: [ooo]
C:
 - K: Ims
   perc_B:
     dir: /s/public/i
   flows_D: |
      my @finds = grep { !/gif$/ } map { 0->fs_find($_) } $dir;
      for my $file (@finds) {
          0->TafuBl(Im => { file => $file });
      }
   print: $dir
   styles: Ims
   tag: Ims
   ux:
     spawn:
      - K: i
      - K: t
      
 - K: Im
   print: $file
   flows_D: |
     (B.href) = $file =~ /(i\/.+$)/;
     Sw opa;
   opa: |
     B.Z.opacity = "0.".int(rand(9));
   Anim:
     opacity: 7
   S:
     style_D: |
       Sw opa if int(rand 5) > 3;
       { 'background-image',"url('$href')",
         'background-size',"100%",
         %{B.Z||{}} }
   styles: Im
   tag: Im
   ux:
     spawn: []
   E:
     _D: |
       Z.opacity -= 0.5 * -1;
    
 - K: Ooogida
   perc_B:
     whatcha: Woogie
   styles: sativo reson 
hooks:
  keys:
   t: |
     w uxd;
  ooo_S:
    - K: te
      css: 
        - border-bottom:1px solid black
#        - float:left
        - position:relative
        - width:100%
        - background:rgba(150,100,50,0.7)
    - K: yi
      css:
        - font-size:77%
        - z-index:300000
    - K: yo
      css: 
        - color:#fff
        - font-size:40%
        - z-index:5000
        - padding:1em
    - K: yt
      css: 
        - color:#873
        - font-size:80%
        - padding:1em
    - K: yw
      css: 
        - font-size:60%
        
    - K: Im #c
      css:
       - border:0.03em solid black
       - width:49%
       - background:url(i/mol2.jpg)
       - background-size:20% 30%
       - padding:1em
       
       - opacity:0.3
    - K: Ims
    - K: Ooogida
      css:
       - width:100%;
       
    - K: reson
      css:
       - background:rgba(255,23,55,0.3)
       - border:0.03em solid rgba(140,120,50,0.8)
       - padding:0.1em
       
    - K: underline
      css: [text-decoration:line-through]
       
    - K: blue
      css:
       - background:rgba(23,23,125,0.1)
       - padding:1em
    
    - K: sativo
      css:
       - -webkit-filter:brightness(1.5) saturate(2)
    - K: blur2
      css: 
       - -webkit-animation:blur 3s infinite;
    - K: blur
      keif:
       - K: 0%, 100%
         css:
          - -webkit-filter:blur(0px)
       - K: 50%
         css:
          - -webkit-filter:blur(10px)
  event: |
    sayyl "Event relating to ".pint(L.i);
    0->visTp({L=>$L},'Fun');
    #sw ($ar);
    # try and hit E/elabourateness and then blunten until whatever
    if (e.S) {
        w $u zoum;
    }
    else {
        w $u E/_D;
    }
    waylay uxd;
    
  recoded_init: |
    for my $i (map {_.i} @{G.T.W.script}) {
        my $up = 0->CsK({K=>i.K});
        $i->from($up);
    }
  ux_receive: |
    G.ux = $GG;
    my $uW = 0->CsK({K=>'W'}, G.ux);
    
  percolate: |
    my $Cs = $G->anyway('C');
    for my $w (@$Cs) {
        if (my $B = w.perc_B) {
            0->TafuB(w.K => $B);
        }
    }
    # alright so... see styles run around
    # mod styles to mod waves of stuff
  uxd: |
    G.ux->w('ux', {W=>$G->W});
  

