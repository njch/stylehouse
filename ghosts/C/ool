name: psych synth
dials:
  uM_styles: oogabooga
  ux_Ss: [X]
  _Ss: [ooo]
C:
 - K: Ims
   flows_D: |
      my @finds = grep { /gif$/ } map { 0->fs_find($_) } $dir;
      for my $file (@finds) {
          0->TafuBl(Im => { file => $file });
      }
   print: $dir
   styles: Ims
   tag: Ims
   ux:
     spawn:
      - K: i
      - K: t
      
 - K: Im
   print: $file
   flows_D: |
     (B.href) = $file =~ /(i\/.+$)/;
   S:
     style_D: |
       qq {background-image:url('$href'); background-size:30%; }
   styles: Im
   tag: Im
   ux:
     spawn: []
    
 - K: Ooogida
   styles: sativo reson Ooogida
hooks:
  ooo_S:
    - K: te
      css: 
        - border-bottom:5px solid white
        - padding-left:2em
        - width:calc(100% - 2em)
        - background:rgba(0,100,50,0.5)
    - K: yi
      css: 
        - border-left:0.5em solid rgba(100,150,240,0.9)
        - color:#fff
        - font-size:66%
        - padding:1em
    - K: yo
      css: 
        - color:#fff
        - font-size:40%
        - z-index:5000
        - padding:1em
    - K: yt
      css: 
        - color:#873
        - font-size:80%
        - padding:1em
    - K: yw
      css: 
        - font-size:60%
        
    - K: Im #c
      css:
       - border:0.03em solid white
       - width:40%
       - background:url(i/mol1.jpg);
       - background-size:20% 30%
       - padding:0.8em
       
       - opacity:1
    - K: Ims
    - K: Ooogida
      css:
       - width:100%;
       
    - K: reson
      css:
       - background:rgba(255,23,55,0.3)
       - border:0.03em solid rgba(140,120,50,0.8)
       - padding:0.1em
       
    - K: blue
      css:
       - background:rgba(23,23,125,0.1)
       - padding:1em
    
    - K: sativo
      css:
       - -webkit-filter:brightness(1.2) saturate(2)
    - K: blur2
      css: 
       - -webkit-animation:blur 3s infinite;
    - K: blur
      keif:
       - K: 0%, 100%
         css:
          - -webkit-filter:blur(0px)
       - K: 50%
         css:
          - -webkit-filter:blur(10px)
  event: |
    sw($ar);
    
  recoded_init: |
    for my $i (map {_.i} @{G.T.W.script}) {
        my $up = 0->CsK({K=>i.K});
        $i->from($up);
    }
  ux_receive: |
    G.ux = $GG;
    my $uW = 0->CsK({K=>'W'}, G.ux);
    
  percolate: |
    0->TafuB(Ooogida => {whatcha => "Woogie"});
    0->TafuB(Ims => {dir => '/s/public/i'});
    
    # alright so... see styles run around
    # mod styles to mod waves of stuff
  uxd: |
    G.ux->w('ux', {W=>$G->W});
  

