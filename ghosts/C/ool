name: psych synth

GG:
 - K: xI
   way: T/ux
   W_Ss: [X]
   M_Z: {font-size: 500%}
C:
 - K: Ims
   perc_B:
     dir: /s/public/i/
   flows_D: |
      my @finds = grep { !/MANY/ && !/gif$/ } map { 0->fs_find($_) } $dir;
      #die sw \@finds;
      for my $file (@finds) {
          0->TafuBl(Im => { file => $file });
      }
   print: $dir
   styles: Ims
   tag: Ims
   ux:
     spawn:
      - K: i
      - K: t
      
 - K: Im
   print: $file
   flows_D: |
     (B.href) = $file =~ /(i\/.+$)/;
     Sw opa;
   opa: |
     Z.opacity = "0.".int(rand(9));
   sa: |
     B.Z->{'padding'} = int(rand 8).'em';
   Anim:
     opacity: 7
   S:
     style_D: |
       Sw opa if int(rand 5) > 2;
       Sw sa if int(rand 5) > 3;
       { 'background-image',"url('$href')",
         %{B.Z||{}} }
   styles: Im -te resize
   tag: Im
   ux:
     spawn: []
   E:
     _D: |
       Z.opacity -= 0.5 * -1;
S:
 - K: ooo #c
   Ss:
    - K: te
      css: 
        - border-bottom:1px solid black
        - float:left
        - position:relative
        - width:100%
        - background:rgba(150,100,50,0.7)
    - K: yi
      css: [font-size:77%]
    - K: yo
      css: [font-size:40%]
    - K: yt
      css: [color:#873, font-size:80%, padding:1em]
    - K: yw
      css: [font-size:60%]
      
    - K: resize
      css:
        overflow:hidden
        -moz-resize:both
        resize:both
    - K: Im
      css:
       - border:0.03em solid black
       - width:49%
       - padding:2em
       - background-size:100%
    - K: Ims
    - K: Ooogida
      css:
       - width:100%
       
    - K: reson
      css:
       - background:rgba(255,23,55,0.3)
       - border:0.03em solid rgba(140,120,50,0.8)
       - padding:0.1em
       
    - K: underline
      css: [text-decoration:line-through]
       
    - K: blue
      css:
       - background:rgba(23,23,125,0.1)
       - padding:1em
    
    - K: sativo
      css:
       - -webkit-filter:brightness(1.5) saturate(2)
    - K: blur2
      css: 
       - -webkit-animation:blur 3s infinite
    - K: blur
      keif:
       - K: 0%, 100%
         css:
          - -webkit-filter:blur(0px)
       - K: 50%
         css:
          - -webkit-filter:blur(10px)
hooks:
  keys:
   t: |
     w uxd;
  index_clickspace: |
    my $Mid = G.T.W.uuid;
    my ($x, $y) = (e.x, e.y);
    my $what = ar.what || "ux.Im" || "ux";
    $H->JS(" var hit = [];
    \$('#$Mid > $what').filter(function() {
        return \$(this).offset().left < $x
            && \$(this).offset().left + \$(this).width() > $x
            && \$(this).offset().top < $y
            && \$(this).offset().top + \$(this).height() > $y
    }).each(function() {
        hit."."push(this."."id())
    });
    ws."."send({i=>hit});"); # TODO makes the server hang or something?
  event: |
    sayyl "Event relating to ".pint(L.i);
    0->visTp({L=>$L},'Fun');
    #sw ($ar);
    # try and hit E/elabourateness and then blunten until whatever
    if (e.S) {
        w $u zoum;
    }
    else {
        w $u E/_D;
    }
    waylay uxd;
    
  recoded_init: |
    for my $i (map {_.i} @{G.T.W.script}) {
        my $up = 0->CsK({K=>i.K});
        $i->from($up);
    }
  percolate: |
    my $Cs = $G->anyway('C');
    for my $w (@$Cs) {
        if (my $B = w.perc_B) {
            0->TafuB(w.K => $B);
        }
    }
    # alright so... see styles run around
    # mod styles to mod waves of stuff
  uxd: |
    G.GG.xI->w('ux', {W=>$G->W});
  

