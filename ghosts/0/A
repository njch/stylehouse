
0:
 A:
  - K: new # link the thing A in
    D: |
      my $i = shift;
      A.i = $i;
      i.A = $A;
      
      # return if dark
      # links() injects, via accum, itself
      
      
  - K: pi
    D: |
      "A A.id ".A.i->pi();
      
  - K: spawn # make down
    D: |
      $H->spawn({uA => $A, r=>[@_]});
      
  - K: An # link down
    D: |
      my $n = shift;
      push @{A.n}, $n;
      
  - K: Au # link up
    D: |
      my $u = $A->fiA(shift);
      my $t = shift;
      die "KNow ".G::ki(A.ut)."  ". G::sw(A.u.i) if A.u;
      A.ut->{$t} = $u;
      A.u = $u;
  
  - K: fiA
    D: |
      my $u = shift;
      $u = u.A if ref $u ne 'A';
      die "no A finding" if ref $u ne 'A';
      $u
  
  - K: to # move
    D: |
      my $to = shift;
      grep { _.K =~ /^$to$/ } @{A.n}

  - K: path
    D: |
      my $up;$up = sub {
          my $u = shift;
          return $u, $up->(u.A.u) if u.A && u.A.u && $u ne u.A.u;
      };
      my @path = reverse $up->(A.u);
      return join "/", map { ref $_ } @path;

