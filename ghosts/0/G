
name: other stuff...
H:
  - K: head
    D: |
        use Ghost;
        sub wdump{Ghost::wdump(@_);}
    
  - K: new
    D: |
      die wdump($H);
  
  - K: spawn0
    D: |
      my $nb = shift;
      my $u = bless {}, $nb;
      $nb::H = $H;
A:
  - K: new
  
  - K: spawn0
    D: |
      $H
C:
  - K: head
    D: |
      use base 'Way';
  - K: new
G:
  - K: head
    D: |
      use base 'Ghost';
      use feature 'say';
      
  - K: new
    D: |
      my (@ways) = @_;
      
      G.name ||= G.A->path(name => 'G');
      
      G.W ||= G.A->spawn0('W');
      
      $G->load_ways(@ways);
      
  - K: Av
    de: |
      tractory, making perl objects from Ghost
      H pretends to be A singularity to boot ze Objs
    D: |
      my $nb = shift;
      my $u = bless {}, $nb;
      $nb::H = $H;
      G.A->t($u) if G.A; # installs u.A
      $H->intro->($u); # which replaces that
      delete u.hostinfo;
      $u->new(@_);
W:
  - K: new
    D: |
      W.name = W.A.O.name;
      W.s = set();
hooks:

  any_init: |
    my $w = G.ways->[0];
    for my $nb (grep { /^[A-Z]$/ } keys %$w) {
        my $co = $G->anyway($nb);
        next unless $co;
        my @code = (
            join "\n",
            "package $nb;",
            "our \$H;",
            map { "use $_;" }
                "strict", "warnings", "utf8", "lib 'lib'"
        );
        for my $ch (@$co) {
            my $D = $G->parse_babble(ch.D);
            ch.styles .= "bare" if ch.K eq "head";
            unless (ch.styles =~ /bare/) {
                $D = "my \$$nb = shift;\n$D" unless ch.styles =~ /func/;
                $D = "$D\n\$$nb"              if ch.K eq "new";
                $D = ind('    ', $D);
                $D = "sub ch.K {\n$D\n}\n";
            }
            push @code, $D;
        }
        push @code, "'stylehouse'";
        my $file = "l/${nb}.pm";
        write_file($file, join("\n", @code));
        
        run "perl -c $file";
        
    }
    
    waylay try;

  
  try: |
    use lib 'l';
    use H;
    my $nH = H->new();
    die "Hello";
    my $nG = $nH->spawn0( G => 'E/h' );
      
    die sw($nG->A('G'));

