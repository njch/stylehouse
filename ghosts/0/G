
name: other stuff...
H:
  - K: head
    libglob: 'l/?.pm'
    D: |
        use UUID;
        sub wdump{Ghost::wdump(@_);}
    
  - K: new
    D: |
      $H = $H->spawn0('H');
      ___LIBGLOBETC
      
      $H->spawn0('A')->new($H); 
      
      H.G = H.A->spawn($H, 'G');
      
  - K: spawn
    D: |
      my $uu = shift;
      my $u = $H->spawn0(@_);
      ref $u ne 'A' &&
          $H->spawn($u, 'A');
      $u->new(@_);
      
      
  - K: spawn0
    D: |
      my $nb = shift;
      my $u = bless {}, $nb;
      $nb::H = $H;
      u.id = mkuid(); # LEG .uuid
      $u
  #Hmisc #c
  - K: mkuid # H wide unique id
    style: func
    D: |
        (mkuuid() =~ /^(\w+)-.+$/)[0];
        
  - K: mkuuid # make a number bigger than the universe
    style: func
    D: |
      UUID::generate(my $i);
      UUID::unparse($i, my $s);
      $s
A:
  - K: new
    D: |
      my $u = shift;
      A.u = $u;
      u.A = $A;
      
  - K: spawn
    D: |
      $H->spawn(@_);
      
    
C:
  - K: head
    D: |
      use base 'Way';
  - K: new
G:
  - K: head
    D: |
      use base 'Ghost';
      use feature 'say';
      
  - K: new
    D: |
      my (@ways) = @_;
      
      G.name ||= G.A->path(name => 'G');
      
      G.W ||= G.A->spawn0('W');
      
      $G->load_ways(@ways);
      
  - K: Av
    de: |
W:
  - K: new
    D: |
      W.name = W.A.O.name;
      W.s = set();
hooks:

  any_init: |
      $G->timer(0.2,sub{waylay code;});
  code: |
    my $w = G.ways->[0];
    for my $nb (grep { /^[A-Z]$/ } keys %$w) {
        my $co = $G->anyway($nb);
        next unless $co;
        my @code = (
            join "\n",
            "package $nb;",
            "our \$H;",
            map { "use $_;" }
                "strict", "warnings", "utf8", "lib 'lib'"
        );
        my $btw = {};
        for my $ch (@$co) {
            my $D = $G->parse_babble(ch.D || ch.SD);
            
            if (ch.K eq "head") {
                ch.styles .= "bare";
                if (my $lg = ch.libglob) {
                    my @l = map { /\/(.+?)\.pm$/ } glob $lg;
                    my ($l) = $lg =~ /^(.+)\/.+?$/;
                    push @code, "use lib '$l';";
                    push @code, "use $_;" for @l;
                    btw.s.___LIBGLOBETC = join "\n",
                        map { "\$${_}::H = \$H;" } @l;
                }
            }
            
            if (ch.styles !~ /bare/) {
                $D =~ s/$_/btw.s->{$_}/seg for keys %{btw.s};
                
                # setup self
                $D = "my \$$nb = shift;\n$D" if ch.styles !~ /func/;
                
                # return self
                $D = "$D\n\$$nb"             if ch.K eq "new" || ch.SD;
                
                $D = ind('    ', $D);
                $D = "sub ch.K {\n$D\n}\n";
            }
            push @code, $D;
        }
        push @code, "'stylehouse'";
        my $file = "l/${nb}.pm";
        write_file($file, join("\n", @code));
        
        run "perl -c $file";
        
    }
    
    waylay try;

  
  try: |
    use lib 'l';
    use H;
    my $oh = $H;
    
    my $nH = H->new();
    my $nG = $nH->spawn0( G => 'E/h' );
    
    $H = $oh;
    die sw(nH.G->hi);

