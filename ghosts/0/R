
Oi:
  includome: R/sur R/ivm
Ds:
  - K: head #c
    D: |
      our $f = {};
      f.fs150 = "font-size:150%;";
      f.fs120 = "font-size:120%;";
      f.fs80 = "font-size:80%;";
      f.fs60 = "font-size:60%;";
      f.white = "color:white;";
      f.blue = "color:blue;";
      f.red = "color:#fca;";
      f.lightblue = "color:#44f;";
      f.black = "color:black;";
 
  - K: new #c
    D: |
      R.name = shift;
      R.G = R.A->fiu('G');
      (R.startF) = @G::F;
      my $Ru = R.G->CsK({s=>'R',K=>R.name});
      # ^ really a space of way from K to reag
      $R->from($Ru) if $Ru;
      $R->instyle(@_);
      
  - K: from #c
    D: |
      my $u = shift;

      # adopted from C::from, wants to do du/S inject for non-1 indentity...
      for my $k (keys %$u) {
          next if $k eq "uuid" || $k eq "id" || $k eq "G" || $k eq "A" || $k eq "T";
          my $t = $R->{$k};
          my $f = $u->{$k};

          $f = { %$t, %$f } if $t && $f && $k =~ /^(B|S)$/;

          $R->{$k} = $f;
      }
      return $R;
  - K: instyle #c  
    D: |
      return unless @_;
      # inject from @_ and make     braids
      # probably a named bunch of stuff to do like
      # to mix up
      # and mix something else down...
      
      # first simply switch tiny codes on and off
      
      say "instyle";
      if (@_ == 1) {
        my $a = shift;
        if (ref $a) {
          if (a.timer) {
              R.timer = Mojo::IOLoop->recurring(a.timer => sub { $R->wtf });
          }
          else {
              die "R in...".$R->pi."  \n\n". wdump($a);
          }
        }
        else {
            say "got $a";
        }
      }
        
    
 
  - K: pi #c 
    D: |
      "R R.name"  
   
  - K: f #c
    D: |
      my @styles = split "_", shift;
      my $t = shift;
      @styles = map { $f->{$_} || die "no style $_" } @styles;
      qq{<span style="@styles">$t</span>};


 
  - K: du #c style grab
    D: |
      my $a = shift || R.a;
      $a || die;
      defined a.i || die;
      # how to get around the Objs' data
      my $s = a.s ||= $R->dus();
      my $i = a.i;
      my $n = a.n;
      a.e = 2 if !defined a.e;
      
      my $c = {};
      a.as ||= [];
      push @{a.as}, $a;
      a.ds = [@{a.ds||[]}, $a];
      
      return {} if @{a.ds} > 12 || 2 < grep {ref _.i && _.i eq $i} @{a.as};
      
      my $ref = ref $i;
      my $is = $s->{$ref} || $s->{default};
      $is ||= $s->{HASH} if "$i" =~ /^\w+=HASH\(/;
      $is ||= $s->{default} || return {};
      
      # sw is a channel
      # the way in the splat...
      
      # snapping branches off the concept of ^ for now
      
      # we sculpt data as fractions of energy that enlightens the 1-9 meanings
      
      # an.s, etc can be modded as meaning builds down
      # but only for 
      # (separado until much future brings everything together)
      
      my $mustb = { map { $_ => 1 } split ',', is.mustb } if is.mustb;
      
      for my $j (is.it->($i)) {
          my $k = delete j.k;
          my $K = delete j.K;
          my $v = delete j.v;
          
          $j = {%$is, %$j};
          my $an = {%$a, i => $v};
          
          my $ohms = defined j.oh ? j.oh : 1;
          
          an.e -= $ohms;
          
          my $rk = "$k \t an.e";
          $c->{$rk} = $v;
          a.tr.rows++;
          last if a.tr.rowlimit && a.tr.rows >= a.tr.rowlimit;
          
          if (an.e >= 1 && ref an.i) {
              my $cu = $R->du($an);
              while (my ($ku, $vu) = each %$cu) {
                  my $nk = $k.$ku;
                  next if grep { $_->($_, $an, $cu) } @{s.notZ||[]};
                  $c->{$nk} = $vu;
              }
          }
          elsif (an.e > 0 && an.e < 1 && $mustb && !$mustb->{$K}) {
              delete $c->{$rk};
          }
      }
      
      if (R.a == $a) {
          R.a.d = $c;
      }
      
      $c
      
  - K: dus #c G style schema
    D: |
        my $h = {
          ARRAY => {
            it => sub {
              my $h = shift;
              my $i = 0;
              map { { k => "[".$i++, v => $_ } } @$h
            },
            oh => 0,
          },
          HASH => {
            it => sub {
              my $h = shift;
              map { { K=>$_, k=>"{".$_, v=>$h->{$_} } } sort keys %$h
            },
          },
        };
        my $an = sub {
            my $k = shift;
            my $i = $h->{$k} ||= {it => h.HASH.it};
            %$i = (%$i, @_);
        };
        $an->(qw'A oh 0.2');
        $an->(qw'Ghost oh 0.8');
        $an->(qw'G oh 0.8');
        $an->(qw'W oh 0.8 mustb','id,hash,file,G');
        $h
  - K: loadup #c du in reverse
    D: |
      my ($a, $k, $v) = @_;
      my $s = $R->snapple($k); # chunks {G{GG{etc 3
      s.e = $v;
      my $i = $R->suets($a, $s);
      
  
  - K: suets
    D: |
      my ($i, $s) = @_;
      my @s = @{s.s};
      my $end = pop @s if exists s.e;
      my $last;
      while (1) {
            my $ac = shift @s || do {exists s.e || last; $last=1; $end};
          $ac =~ /^(\W)(\w+)$/ || die;
          if (!$last) { # TODO know about insto hash or array...
              $i = $i->{$2} ||= {} if $1 eq "{";
              $i = $i->[$2] ||= {} if $1 eq "[";
          }
          else {
              $i->{$2} = s.e if $1 eq "{";
              $i->[$2] = s.e if $1 eq "[";
              last;
          }
      }
  - K: snapple
    D: |
      my $k = shift;
      $DB::single = 1;
      ($k, my $v) = $k =~ /^(\S+)(?: (.+))?$/;
      my $a = {k => $k, v => $v};
      my @s;
      while ($k =~ m/(\W\w+)/sg) {
            push @s, $1;
      }
      a.s = \@s;
      $a
      

