#!/usr/bin/env perl
    package S;
    use Mojolicious::Lite;
    use common::sense;
    
    use lib 'l';
    use H;
    our $H;
    
    my $listen = readlink('listen');
        my ($host,$port, $wa) = split ':', $listen;
        die "too much listen" if $wa;
        ($port, $host) = (2000, undef) if !$port && $host =~ /^\d+$/;
        $port ||= 2000;
        $host ||= '127.0.0.1';
        $port += 1; # TODO
    $listen = "http://$host:$port";
    
    get '/' => sub{
       my $self = shift;
       $self->stash(ws_location => $self->url_for('ws')->to_abs);
       $self->render(template=>'ws_page')
    };
    get '/pub' => sub{
       my $pubsub = Mojo::Redis->new;
       $pubsub->publish(g => 'foo',sub{$pubsub});
       shift->render(text=>'published')
    };

    # This action will render a template
    websocket '/ws' => sub {
        my $mojo = shift;
        
        # MOVE some old stuff tries to ->send stuff on init, ux saves..
        $H = H->new();
        
        $H->{G}->w(websocket => { M => $mojo });
        
        $H->{G}->w('getbusy');
    };
    app->start('daemon', '--listen' => "$listen");
__DATA__
@@ws_page.html.ep
<!DOCTYPE html>
<html><head>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js" type="text/javascript"></script>
</head><body>

    <h1>websocket.</h1>
    <div id='msgs'> </div>

    <script type="text/javascript">
    var conn;
    var C;
    $(document).ready(function(){
       conn = new WebSocket('<%= $ws_location %>');

       conn.onmessage = function  (event) {
          $('#msgs').append('msg: '+event.data +"<br />");
       };
       conn.onopen = function () {
          $('#msgs').append("connected.\n");
       };
       conn.onclose = function () {
          $('#msgs').append("closed.\n");
       };
    });
    </script>

    <a href="/pub">pub</a>


    </body></html>

