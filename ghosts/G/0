
name: Ghost
hooks:
  _load_ways_post: |
    $S->w("load_ways_post");
    $G->Flab("$S->{name} +$S->{load_ways_count}+   ".
        join" , ", map { $_->{_wayfile} } @$w);
    
    w _fresh_init if $S->{load_ways_count} == 1;
    w _recoded_init if $S->{load_ways_count} != 1;
    $S->w("any_init");
    
  _recoded_init: |
    $S->w("recoded_init");
    my $g = $S;
    while ($g->{O} && ref $g->{O} eq "Ghost") {
        $g->w("child_recoded_init", {S => $S}) if $g eq $S;
        $g = $g->{O};
        $g->w("any_child_recoded_init", {S => $S});
    }
  _fresh_init: |
    $G->{S} = $S;
    w V/init[$S];
    w include_init;
    $S->w("fresh_init");
    delete $G->{S};
  V: 
    init: |
      for my $V ($S->findway('V')) {
          my $Vf = $S->{floozal} || $H->{sky};
          
          while (my ($i, $t) = each %$V) {
                my $styles = $t->{styles};
                my $style = w styles[$styles];
                $G->{V}->{$i} = $Vf->spawn_floozy($G, "$i", $style);
          }
      }
    blur: |
      my $blur = ++$G->{_blur} % 2 ? 'blur(8px) brightness(0.7)' : '';
      $H->JS($_, "css('-webkit-filter', '$blur');") for values %{G.V};

    toginvis: |
      $_->togcl('invis') for values %{G.V};
  include_init: |
    for my $include ($S->anyway('include')) {
        $G->load_ways(split ' ', $include);
    }
  styles: |
    my @styles;
    for my $style (split ' ', $styles) {
          push @styles, w style[$style];
    }
    join ' ', @styles;
  style: |
    join "", map { /;$/ ? $_ : "$_;" } $G->{S}->w("styles/$style")
  sing: |
    $G->{singing} ||= {};
    return say "$name BLOCKED" if $G->{singing}->{$name} && $G->{singing}->{$name}++; # ignore sing until...
    $G->{singing}->{$name} = 1;
    my $t = $ar->{block_for} || $ar->{again_after} || 0.04;
    my $d = $ar->{begin_after} || 0.001;
    $G->timer($d, sub {
        $G->timer($t, sub {
            my $splatter = delete $G->{singing}->{$name};
            if ($splatter > 1 && $ar->{again_after}) {
                $S->Flab("Sig reps $splatter... "
                    .($ar->{again_after} ? "again!" : ".")
                    ."  $name");
                w sing(%$ar);
            }
        }, "sing-block        $name");
        $G->{singing}->{$name} = 1;
        $code->();
    }, "pre-sing     $name");
    
    

