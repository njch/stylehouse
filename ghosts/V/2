R_Jz:
 - K: ii/infrom #c
   D: |
     Mn('_', '', "x.j.l", '{co:38f}');
     Mn('=', '', {}, '{fs:22,co:000,sha:3 3 3 fff}');
     
     if (my $ori = x.sc.ori) {
         # eye/ghosts etc
         Mn('ori','',
           {s=>$ori, pi=>'', gp=>{cv=>0.2}, pwth=>'sur/to:/'},
           '{hue:100,ab:1,left:1em}');
         
     }
     
     # quick reverse, snap bits off i
     Mn('<','',{pwth=>'whack'},'{fs:16,co:314,sha:1 1 3 fff}');
     
     
     my $in = {%{x.sc}};
     delete in.ori;
     delete in.travely if ref in.travely eq 'ARRAY' && !@{in.travely};
     if (%$in) {
         Mn('x-sc','',{pi=>'capstyle',s=>$in},{fs=>13 ,co=>'314',sha=>'1 1 3 fff'});
     }
     if (my $time = x.sc.ts) { # can't be zero, so relative
         Rw ii/time + $time;
     }
 - K: pi/lab #c round corner, where one bit/type/hum of noise splits others
   D: |
     my $r = J.d.g.r;
     Jn(wtf => '', $u, '{zi:15,sha:2 3 6 ccf,fw:6,co:3f4}');
     
 - K: pi/capstyle #c the sc attachment
   D: |
     Jn( intersc => '',
       {pi=>'',s=>$u,gp=>{cv=>0.7}},
       '{fs:3,co:314,sha:1 1 3 fff}');

     
 - K: ii/time #c
   D: |
     # say # ago and js hookup increment into human
     my $rtime = sprintf '%.2f', $time - H.uptime;
     # time since H started? since the J started?
     Rw Mn + $n:_ for
     ['zetime', '', {s=>$rtime}, {co=>'33f5'}];
 - K: ii/Jhead #c J _
   D: |
       my $M = [];
       my $cv = ar.cv || 0.4;
       
       my $name = J.name;
       my ($nas, $nameb) = split '-', $name, 2;
       Mn(nas => '', "$nas",
           '{sha:3 5 2 330,fs:15}');
       Mn(nameb => '', "$nameb", 
           '{sha:3 5 2 330,co:a359,fs:9}');
       
       if (H.name ne 'C') {
           Mn(Hname => '', "H.name", 
               '{sha:3 5 2 330,co:ff59,fs:12,ab:1,ml:0.3em}');
       }
       
       my $xc = {pwth=>'hull/mk:X'};
       my $xsc = {co=>'f34',fs=>'13'};
       if ($cv < 0.3) {
           xsc.fs = 14;
           xsc.ab = 1;
           xsc.left = '0.3em';
           xsc.zi = 44;
       }
       Mn(x => '', $xc, $xsc);
       
       # TODO collapse upwards button
       
       #Rw Mn $J $n;
       # TODO wtf that onto $M overwrites others
       #Rw wtf $M ITsa 0.03 $s $sc;
       if ($cv > 0.3) {
           Rw the + $M Jhead; 
           Rw the + $M Jim;
           Rw doc $M;
       }
       my $at = ar.out || 0.001;
       my $sc;
       sc.fs = $cv > 0.2 ? 19 : 9;
       Rw om/lev + $oM:M Jhead $at $sc;
 - K: sur/geon #c J into
   D: |
     Rw surf $name=mash $i:J;
 - K: sur/Jhead #c
   D: |
       MZ pwth
       ඬ  sur/geon      {} {co:f85}
       ƾ  jin:oot       {} {co:8ff}
       G  sur/to:G
       Js sur/to:Jung {} {co:68d,fs:5}

