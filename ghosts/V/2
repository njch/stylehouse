R_Jz:
 - K: ii/infrom #c
   D: |
     Rw Mn + $n:_ for
     ['_', '', {s=>x.j.l}, {co=>'38f'}],
     ['=', '', {}, {fs=>12,co=>'000',sha=>'3 3 3 fff'}];
     
     if (my $ori = x.sc.ori) {
         Rw Mn + $n:_ for
         ['i', '', {s=>$ori, pi=>'', pwth=>'sur/to:/', gp=>{cv=>0.1}}, {hue=>100}];
     }
     
     # quick reverse, snap bits off i
     Rw Mn + $n:_ for
     ['<','',{pwth=>'whack'},{fs=>16,co=>'314',sha=>'1 1 3 fff'}];
     
     
     my $in = {%{x.sc}};
     delete in.ori;
     delete in.travely if ref in.travely eq 'ARRAY' && !@{in.travely};
     if (%$in) {
         Rw Mn + $n:_ for
         ['x-sc','',{pi=>'capstyle',s=>$in},{fs=>26,co=>'314',sha=>'1 1 3 fff'}];
     }
     if (my $time = x.sc.ts) { # can't be zero, so relative
         Rw ii/time + $time;
     }
 - K: pi/capstyle #c
   D: |
     Rw Mn + $n:_ for
     ['intersc','',{pi=>'',s=>$u,gp=>{cv=>0.7}},{fs=>10,co=>'314',sha=>'1 1 3 fff'}];

     
 - K: ii/travely #c
   D: |
     return unless $vl && @$vl;
     Rw Mn + $n:_ for
     ['travely', '', {s=>join(" ",'',@$vl,'')}],
     ['S', '', {pi=>'',s=>x.js,gp=>{cv=>0.2}}];
     
 - K: ii/time #c
   D: |
     # say # ago and js hookup increment into human
     my $rtime = sprintf '%.2f', $time - H.uptime;
     # time since H started? since the J started?
     Rw Mn + $n:_ for
     ['zetime', '', {s=>$rtime}, {co=>'33f5'}];
 - K: ii/Jhead #c J _
   D: |
       my $M = [];
       my $cv = ar.cv || 0.4;
       
       my $name = J.name;
       my ($nas, $nameb) = split '-', $name, 2;
       Rw Mn $M $n:_ for
       ['nas', '', {s=>$nas}, {sha=>'3 5 2 330',fs=>15}],
       ['nameb', '', {s=>$nameb}, {sha=>'3 5 2 330',co=>'a359',fs=>9}];
       
       
       my $xc = {pwth=>'hull/mk:X'};
       my $xsc = {co=>'f34',fs=>'13'};
       if ($cv < 0.3) {
           xsc.fs = 14;
           xsc.ab = 1;
           xsc.left = '0.3em';
           xsc.zi = 44;
       }
       Rw wtf $M x $c:xc $sc:xsc;
       
       # TODO collapse upwards button
       
       #Rw Mn $J $n;
       # TODO wtf that onto $M overwrites others
       #Rw wtf $M ITsa 0.03 $s $sc;
       if ($cv > 0.3) {
           Rw the + $M Jhead; 
           Rw the + $M Jim;
           Rw doc $M;
       }
       my $at = ar.out || 0.001;
       my $sc;
       sc.fs = $cv > 0.2 ? 19 : 9;
       Rw om/lev + $oM:M Jhead $at $sc;
 - K: sur/Jhead #c
   D: |
       MZ pwth
       ඬ  shed:eye      {} {co:f85}
       ƾ  jin:oot       {} {co:8ff}
       G  sur/to:G
       Js sur/to:Jung {} {co:68d,fs:5}

