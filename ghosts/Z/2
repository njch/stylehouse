C may:
 - # ompu
  - jsc
  - 5
  - |
    my $args = d.cs.args || 'A,C,G,T';
    if (0) {
        at.tag = 'script';
        at.type ||= 'text/javascript';
        at.src = d.cs.src if d.cs.src;
    }
    at.c = 'e';
    d.s = "a.".j.l." = function (".$args.") {\n".d.s."};\n";
    sayre "Javascript compression: j.r        ";
    
    saygr "Some j.l :::: ". join' ', split /\s+/, d.s;
 - # ompu
  - js
  - 5
  - |
    at.c = 'o';
    d.s = [J.id, 'do', d.s];
    sayre "JS: j.r        ";
    saygr "JS j.l :::: ". join' ', split /\s+/, d.s;
R_Jz:
 - K: scr/canvas #c
   D: 
   - MZ: js
   -
    - ps #
    - 3
    - {}
    #type: text/paperscript
    #  canvas: display
    - |
      var pa = A.p;
      console.log(pa);
      with (paper) {
         console.log(project.clear());
         var shape = new Path.RegularPolygon(new Point(180, 170), 4, 100);
          console.log(shape);
         shape.fillColor = '#339e92'; 
         shape.selected = true;
         shape.animate(1, paper.uplg, true)
              .shear(0.1,0.2) 
              .translate(new Point(200,100))
              .rotate(60)
              .scale(2);
              
         paper.view.draw();
              
      }
      
 - K: nonrrrrrrrrr
   D: |
     
 
         paper.uplg = new PaperAnimate.Updater();
        
        
            var shape = new Path.RegularPolygon(new Point(180, 170), 4, 100);
            shape.fillColor = '#e9e9ff';
            shape.selected = true;
            shape.animate(1, paper.uplg, true)
                 .shear(0.1,0.2)
                 .translate(new Point(200,100))
                 .rotate(60)
                 .scale(2);

            var dupe = new Path.RegularPolygon(new Point(180, 170), 4, 100);
            dupe.fillColor = '#3949ff';
            dupe.selected = true;
            dupe.shear(0.1,0.2);
            dupe.translate(new Point(700,100));
            dupe.rotate(60);
            dupe.scale(2);
            

         function onFrame(e) { paper.uplg.update(e); }     
              
     
 - K: scr/comprsc #c
   D:
   - MZ: jsc
   -
    - pep
    - 1
    - args: Wid
   -
    - wu
    - 1
    - args: wwid, Wid, s
    - |
     $('ww#'+wwid+' > #'+Wid).fadeOut(1000, function() { $(this).remove(); });
     $('ww#'+wwid).append(s);
   -
    - WW
    - 1
    - args: Wid
    - |
      var W = ww[Wid];
      if (!W) {
          W = ww[Wid] = {};
          W.Wid = Wid;
          
          W.A = {};
          //var canvas = document.getElementById('myCanvas');
          //paper.setup(canvas);
          //W.A.p = paper.project;
          //W.A.p.up = paper.uplg;
          W.A.W = W;
      }
      //W.A.p.activate();
      
      return W;
   -
     - o
     - 1
     - args: Wid, K, C
     - |
       var W = a.WW(Wid);
       var A = W.A;
       if (!A) {
           A = W.A = {};
       }
       var C = C;
       if (C.constructor == 'Array') {
           var M = C;
           C = {};
           C.t = M[0];
           C.y = M[1];
           C.c = M[2];
           C.sc = M[3];
       }
       if (typeof C == 'string') {
           var s = C;
           C = {};
           C.c = s;
       }
       var G = a; // should be receiver, W.G, auto locals + uni
       var T = {};
       
       a[K](A, C, G, T);
   -
    - do
    - 3
    - |
      eval(C.c);
   -
     - el
     - 3
     - |
       // gets (A,C,G,T
       // the index t, tag?
       // 
       // c thingy
       // sc styley

