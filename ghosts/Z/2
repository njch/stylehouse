not: yes
C may#sent: # ENVELOPES, 
 -
  - args
  - 5
 - # ompu
  - jsc
  - 5
  - |
    my $args = cs.args || 'A,C,G,T';
    at.c = 'e';
    at.s =  "a.".j.l." = function (".$args.") {\n".at.s."};\n";
 - # ompu
  - js
  - 5
  - |
    if (1 || cs.src) {
        at.tag = 'script';
        at.type = cs.type || 'text/javascript';
        at.title = undef;
        at.src = cs.src if cs.src;
    }
    else {
        at.c = 'o';
        at.s =   [J.id, 'do', at.s];
    }
 -
  - st
  - 5
  - |
    at.tag = 'style';
    at.type = 'text/css';
    
 - # ompu
  - ps
  - 5
  - |
    at.c = 'o'; # etc
    at.s = [J.id, 'ps', at.s];
    at.pur = 1; # TODO local lumi
 -  # trubl
  - yt
  - 5
  - |
    my $n = {};
    (n.t, my $ma) = split /\?/, $v;
    $ma = {map{split '=', $_, 2}split '&', $ma};
    
    n.c.autoplay = 1 if ma.t;
    n.c.start = ma.t if ma.t;
    
    #die "$v   :". wdump $n;
    at.pur = 1; # TODO local lumi
    at.c = 'o';
    at.s = [J.id, yt => [n.t,n.y,n.c,n.sc]];
      #<iframe width="420" height="315" src="https://www.youtube.com/embed/DyVnwKcb0YY#t=958" frameborder="0" autoplay="1" start="958" allowfullscreen></iframe>
R_Jz:
 - K: knobbies #c
   n_D:
     not: |
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift; 
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       }); 
     stylesheet: |
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
 - K: ym/cc #c
   D: |
     if (ref n.c && !ref n.sc) {
         (n.c,n.sc) = (n.sc,n.c);
     }
     n.sc->{$v} ||= 'y';
 - K: scr/other #c
   D:
   - MZ: cc:ps # paperscope (with (paper) {...}) FUN STUFF! spines!
   -
    - funstuff
    - 7
    - |
      project.clear(); 
      a.pzl();
      //a.sitandspin();
 - K: scr/youtube #c
   D:
   -
    - Hi
    - 9.3
    - ''
    - yt: pAaq2_PkypY?t=24
   -
    - Re # http://jsfiddle.net/M78zz/
    - 0.2
    - |
      <div id="ytplayer"></div>
    - ishtml: 1
   - MZ: cc:jsc
   -
    - yt
    - 2
    - |
      var d = {};
      d.playerVars = C.c || {};
      d.height = '390';
      d.width = '640';
      d.videoId = C.t;
      console.log(' yepeppp', C);
      etc.pla = A.player = new YT.Player('ytplayer', d);
      console.log(' yepeppp', d, A.player);
      

   - MZ: cc:js
   -
    - yt
    - 1
    - src: https://www.youtube.com/player_api
    
   -
    - ytr
    - 1
    - |
      //$('canvas#display').attr('width'=>'100%', height=>'100%');
      function onYouTubeIframeAPIReady() {
          etc.ytread = 1;
      }
        
     
 - K: scr/canvas #c & sitting
   D: 
   - MZ: cc:jsc # yet papers
   -
    - doya # animation frame
    - 1
    - args: e
    - |
      console.log('de rock'); 
      // and!
      // etc https://github.com/tweenjs/tween.js/blob/master/docs/user_guide.md
   -
    - pzl #
    - 3
    - |
      with(paper){
      var shape = new Path.RegularPolygon(view.center,3, 100);
      
      shape.fillColor = '#8C8A00';
      //shape.animate(2, paper.uplg, true)
      //    .translate(new Point(200,100))
      //    .rotate(60)
      //    .scale(3);
      view.onFrame = function (event) {
      //    paper.uplg.update(event);
          shape.rotate(1);
          shape.fillColor.hue += 1;
      }
      }
   -
    - sitandspin #
    - 4
    - |
      with(paper){
      var mousePoint = view.center;
      var amount = 30;
      var colors = ['red', 'black', 'blue', 'black'];

      for (var i = 0; i < amount; i++) {
          var rect = new Rectangle([5, 0], [25, 25]);
          rect.center = mousePoint;
          var path = new Path.Rectangle(rect, 6);
          path.fillColor = colors[i % 4];
          var scale = (1 - i / amount) * 25;
          path.scale(scale);
      }

      view.onMouseMove = function (event) {
          mousePoint = event.point;
      }

      var children = project.activeLayer.children;
      view.onFrame = function (event) {
          paper.uplg.update(event);
          
          for (var i = 1, l = children.length; i < l; i++) {
              var item = children[i];
              var delta = (mousePoint - item.position) / (i + 5);
              item.rotate((Math.sin((event.count + i) / 10)+1.617) * 3);
              if (delta.length > 0.1)
                  item.position += delta;
              item.fillColor.hue += 1;
          }
      }
      }
      
 - K: scr/comprsc #c
   D:
   - MZ: cc:jsc
   -
    - wu #c ww append a thing, cancel its Wid before
    - 1
    - args: wwid, Wid, s
    - |
     $('ww#'+wwid+' > #'+Wid).fadeOut(1000, function() { $(this).remove(); });
     $('ww#'+wwid).append(s);
   -
    - WW #c contextualise to W
    - 1
    - args: Wid
    - |
      var W = ww[Wid];
      if (!W) {
          W = ww[Wid] = {};
          W.Wid = Wid;
          
          W.A = {};
          //W.A.p = new paper.Project();
          W.A.W = W;
      }
      //W.A.p.activate();
      
      return W;
   -
     - o #c
     - 1
     - args: Wid, K, C
     - |
       var W = a.WW(Wid);
       var A = W.A;
       if (C.constructor == 'Array') {
           var M = C;
           C = {};
           C.t = M[0];
           C.y = M[1];
           C.c = M[2];
           C.sc = M[3];
       }
       if (typeof C == 'string') {
           var s = C;
           C = {};
           C.c = s;
       }
       var G = a; // should be receiver, W.G, auto locals + uni
       // looks in W.G, W.G.incs, a
       // passes ACGT
       var T = {};
       
       a[K](A, C, G, T);
   -
    - do #c
    - 3
    - |
      try {
        eval(C.c);
      }
      catch (er) {
        a.er(C.c, er);
      }
   -
    - ps #c
    - 3
    - |
      with (paper) {
        try {
          eval(C.c);
        }
        catch (er) {
          a.er(C.c, er);
        }
      }
   -
    - el #c
    - 3
    - |
       // gets (A,C,G,T)
       // should 
       // the index t, tag?
       // 
       // c thingy
       // sc styley

