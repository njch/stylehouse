
R_Jz:

 - K: shv #c  and to compile J5 rounds ahead
   n_D:
     yJ: |
       'shv gui geoex'
     curves: | 
       spun 0 0.15
       zoom 0 2
       y    0  0
       x    0  0.33
       curve 0 -0.4
     defon: |
       #twang 0.1 Z/2 
       #twong 0.1 Z/3
     up: | # if the in up, pha wakeups out - all response to editing
       my $coi = Rw pha $J $k=shvs; 
        
       my $oJ = Rw oJ $J je;
       if (my $i = ar.i) {
          oJn(i.name, 0.3, {s=>$i,J=>$i});
       }
       
       my $vs = Rw tyv $J:oJ;
       my $M=[];
       for my $lv (@$vs) {
           my $j = lv.j;
           next if j.s.dead;
           Mn(j.l,'',j.l,{J=>j.s,enid=>j.s.id});
       }
       Rw om/bal $J $oM:M $in=0.001 $out=0.9;
       
       
       coi.qui=1;
       coi.exactl->(); 
 - K: gui #c
   n_D:
     yJ: |
       J.cv = 20;
       J.most.mody = 'ano';
       J.most.eo = 'chuv';
       'gui quigeo uppy'
     out: |
       #saygr "GEO J.name    GEO J.name    GEO J.name GEO J.name GEO J.name" for 1..5;
       Rw oJ $J geo &up $noesc=1;
       Rw chuv $J;
 - K: heag #c
   n_D:
     yJ: |
       'headi'
     up: |
       Rw Jhead;
 - K: osca #c unsolved c
   D: |
     my $als = {};
     $als->{_.style}->{_.com||''} = _.s for values %{lv.sj};
     my $sc = {};
     
       for my $k (keys %$als) {
           my $ck = $als.>$k;
           my @ks = sort keys %$ck;
           
           my $one = shift @ks; # probly ''
           my $v = $ck.>$one;
           ($sc.>$k) = $v;
           
           for my $com (@ks) {
               next if $ck.>$com eq $v;
               #die wdump [@ks];
               die "multiple @ks".wdump[$als,$sc];
           }
       }
     $sc
 - K: ym/sticks #c
   D: |
     n.sc.nx = $v =~ s/^x//;
     n.sc.ct = $v;
     n.sc.args = join',',map{'$'.$_}split',',n.sc.args
         if n.sc.args && n.sc.args !~ /\$/;
     n.sc->{"ct_${v}_args"} = n.sc.args || '$A,$C,$v,$g,$at,$J,$j';
     #'$X,$wJ,$J,$j,$lv,$v,$sc,$at,$aj,$aJ';
 - K: chuv/flows/chov #c
   D: |
     #MZ pa:geomo
     flow 1
     nesting 4
     sticks 5
     wonga 5
     outs 7
     Wout 8
 - K: chov/Wout #c
   D:
    -
     - begin
     - 8.5
     - |
       if (J.yt.uppy) {
           my $c = aj.c;
           die 'scs' if @{aj.sc};
           die 's' if aj.s;
           my $M = ['','',{W=>G.Wid},{M=>$c}];
           aj.c = [" a\.om({},".sjson($M).",a,{});"];
       }
 - K: chov/flow #c
   D: |
     # 1
     G.oin.idJy->{J.id} ||= $J;
     
     # 3 spewing two-step
     my $vs = Rw tyv $J;
     my @s;
     
     # 3.9
     for my $lv (@$vs) {
         push @s, $lv;
         my $j = lv.j;
         die "reffy j.s in j.l ON J.name".wdump 3, [ar.ip, $j] if ref j.s;
         
         # 4 figure floor
         my $coi = Rw pha $J:aJ $k:j.r;
         coi.qui = 1;
         my $xat = do {
             Rw lv_same $lv $x:coi $J:aJ;
         } if aJ.bb->{"j.l%at\t".j.cv} && j.l !~ /\//;
         
         
         my $at;
         my $pat;
         my $plv;
         if (!$xat) {
             $at = {};
             at.s = j.s;
             # may be creating, overhead thought
             at.__ajid1 = aj.id;
             # 5
             
             # 5.9
         }
         # gets self aware in waves: 5 busi, 6 traj, 7 scoops
         # above can now trust lvs to have iter-sane E{s,}c[] impulses / same s
         $pat = aJ.bb->{"j.l%at\t".j.cv};
         $plv = aJ.bb->{"j.l%lv\t".j.cv};
         if (!$xat) {
             aJ.bb->{"j.l%lv\t".j.cv} = $lv;
             aJ.bb->{"j.l%at\t".j.cv} = $at;
             
             coi.exactl->();
         }
         else {
             aJ.bb->{"j.l%lv\t".j.cv} = $lv;
             $at = $pat;
         }
         at.__ajid2 = aj.id;
         lv.at = $at;
         # 6
         
         # 7.9 # T ^
     }
     # 8 check lv up cover
     if (J.yy.may.noroot) {
         die 'noroot ag has s'.wdump($_) for grep {_.s} @s;
         aj.c = [map{@{_.Ec||[]}}@s];
         aj.sc = [map{@{_.Esc||[]}}@s];
     }
     else {
         my $lv = aJ.bb->{"/%lv\t0.9"};
         aj.s = lv.s;
         delete aj.s if lv.scon; # no repeat emit
         aj.c = lv.Ec || [];
         aj.sc = lv.Esc || [];
     }
     # 8.8
     if (!ar.catj) {
         Rw Em $aj;
     }
     # 9
     $aj
     
 - K: chov/sticks #c 5 cs oscacts rejoin the pipelining - form style trance
   D:
    -
     - STYCKS #
     - 5.3
     - |
       #J.V=1;
       if (J.V && !aj.geko++) {
           sayre "am ".gp($J).": ".join ' ', sort keys %{J.yt};
           sayyl "has V: ".join' ',map{_.t}@{wJ.cts.V};
       }
       sayyl "STICKS :   j.r    ".join' ', sort keys %{lv.sc} if J.V;
       my $sc = Rw osca $J $lv;
       
       my $stc = {};
       my $st = sub {
           my $k = shift;
           exists $sc->{$k} || return ();
           $stc->{$k}++;
           return $sc->{$k}
       };
       
       my $g = wJ.ctx.V;
       for my $ct (@{wJ.cts.V}) {
           my @v = st&ct.t;
           @v || next;
           for my $v (@v) {
               saygr "V j.r ct.t ".gp $v if J.V;
               my $A = {J=>$J,j=>$j};
               my $C = {c=>$v,sc=>$sc}; # bendy stick throw
               wJ.ctx.V->{ct.x}->($A,$C,$v,$g,$at,$J,$j);
               #,$wJ,$J,$j,$lv,$v,$sc,$at,$aj,$aJ);
               die "j.r ct.t $v  make css" if ref at.css eq 'ARRAY';
           }
       }
       my $mys = {};
       for my $k (keys %$sc) {
           next if $k =~ /^_/;
           next if $stc->{$k};
           $mys->{$k} = $at->{$k};
       }
       sayre "! j.r $_ $sc->{$_}" for #grep { $_ !~ /^(t|y|c|sc)$/ }
       keys %$mys;
 - K: chov/wonga #c
   D:
   - EZ: chov/Go
   - EZ: chov/sharp
   - EZ: chov/sharpish
 - K: chov/Go #c
   D:
   - MZ: sticks:xV
   -
    - w # do wandering to point
    - 5
    - |
      my $A = {};
      my $C = r.C || {};
      my $T = {};
      C.c = r.s if exists r.s;
      C.sc = r.sc if exists r.sc;
      my $z = $g.>$way;
      #sayyl "gwa $way";
      $z || warn "no $way ".gp($g);
      $z && $z ->($A,$C,$g,$T);
      return $T;
    - args: way,r,g
      way: 1
   - 
    - mksc # 
    - 5
    - |
      my $t = g.w->(mos=>{s=>C.c},$g);
      while(my($k,$v) = each %$t) {
          C.sc.>$k = $v;
      }
      return;
    - args: A,C,g,T
   -
    - mos # language expansion
    - 3
    - |
      my @t = split ',', C.c;
      for (@t) {
          my ($k, $v) = split ':', $_;
          $T.>$k = $v;
      }
    - args: A,C,g,T
   -
    - cole # it
    - 5
    - |
      my $v = shift;
      my $h;
      (h.r, h.g, h.b, h.a) = ($1, $2, $3, $4)
          if $v =~ /^(\w)(\w)(\w)(\w)?$/ || die "not cole: $v";

          if (defined h.a) {
             # do an rgba(255,255,255,1)
             for my $k (qw'r g b a') {
                 my $e = $h->{$k};
                 $e = "$e$e" if length $e == 1; # out of 255
                 $h->{$k} = hex $e;
             }
             h.la = sprintf '%.2f', h.la / 255; # out of 1
             return "rgba(h.r,h.g,h.b,h.a)";
          }
          else {
             return sprintf "#%s%s%s", h.r, h.g, h.b;
          }
   -
    - hsle # ray lih, unhassley
    - 5
    - |
      my $v = shift;
          my $h;
          if ($v =~ /^(\S+) (\S+) (\S+)(?: (\S+))?$/) {
              (h.h, h.s, h.l, h.a) = ($1, $2, $3, $4);
          }
          elsif ($v =~ /^(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?$/) {
              (h.h, h.s, h.l, h.a) = ('0.'.$1, '0.'.$2, '0.'.$3, '0.'.$4);
          }
          else {
              die "not hsle : $v";
          }
          h.h = h.h * 360 if h.h < 1;
          $h->{$_} = ($h->{$_}*100).'%' for 's','l';

          my $al = ", h.a" if defined h.a;
          "hsl".($al?'a':'')."(h.h, h.s, h.l$al)";
          # 1423
   -
    - empc # decide space unit TODO init soon
    - 5
    - |
      my $v = shift;
      $v .= 'em' if $v !~ /(%|em|px)/;
      $v =~ s/^-?0em$/0%/;
      $v;
 - K: chov/sharp #c
   D:
   - MZ: sticks:V
   -
    - geo
    - 3
    - |
      at.sc.geo = $v={%$v};
      C.sc.ab = delete v.ab if v.ab;
   - 
    - enid
    - 5.9 
    - |
      at.id = $v;
      at.c.nobody = 1;
   -
    - css
    - 5.55
    - |
      $v = join ';', map{"$_:$v->{$_}"} sort keys %$v if ref $v eq 'HASH';
      for my $set (split ';', $v) {
          my ($k,$v) = split ':', $set;
          at.sc.css->{$k} = $v;
      }
   - #
    - cm
    - 5.8
    - |
      my $wt = ejson {id=>at.id, value=>at.s};
      at.id || die;
      at.dig = C.sc.dig || die "no diggy";
      acum $at, Esc => " a\.cod($wt);";
      at.s = '';
   - #
    - J
    - 5
    - |
       at.ishtml = 1;
   - #
    - pi
    - 5
    - |
       die "Pi v.r has s" if v.s;
       die "Pi v.r no .Ec" if !@{v.Ec};
       acum $at, 'Esc', $_ for @{v.Ec};
   -
    - idly
    - 5.8
    - |
      my $id = mkuid();
      at.id && die "arl";
      at.id = $id;
      J.idyl->($J, $id, $j);
      #die wdump 2, A.J
      #
   - WZ: /stwa


    
 - K: chov/sharpish #c
   D:
   - MZ: sticks:V  
   - [lp,     5, "at.ishtml = 1;"]
   - [ishtml, 5, "at.ishtml = 1;"]
   -
    - id
    - 5
    - |
      at.id = $v;
   -
    - tt
    - 5
    - |
      at.title = $v;
   -
    - canvas
    - 5
    - |
      at.canvas = $v;
   -
    - type
    - 5.1
    - |
      at.type = $v;
      at.ishtml = 1;
      at.title = undef;
   -
    - tag
    - 5
    - |
      at.tag = $v;
   -
    - at
    - 5
    - |
      die;
      $v =~ /^(?:(\S+):)?(\S+)$/;
      $at->{$1} = $2;
   - #
    - atrp
    - 5
    - |
      die "heloarp";
       at.rp = $v;
    - way: 1
   - [path, 5, ''] # TODO compile J.ys
   - [origin, 5, '']
   - [pwar, 5, '']
   - [Joint, 5, '']
 - K: chov/ou #c
   D:
   - EZ: chov/ouf
   - MZ: sticks:O
 - K: chov/ouf #c
   D:
    -
     - Esc
     - 6.4
     - |
       my $c = at.c ||= {};
       my $sc = at.sc ||= {};
       my $note = {};
       my $not = sub {
           my $k = shift;
           $note->{$k} = 1;
           return $at->{$k} if exists $at->{$k};
           return ();
       };
       my $MM = sub {
           map {[
               (defined _.t ? _.t : ''),
               (defined _.y ? _.y : ''),
               _.c,_.sc
           ]} @_
       };
       
       if (j.l eq 'ei') {
        saybl wdump 2, $at;
       }
       
       if (c.nobody) {
           c.nobody = $not->('id');
           $not->($_) for 's', 'ishtml';
       }
       else {
           my $tag = not&tag || do {
             (my $ts = j.l)  =~ s/[^\w]/ñ/sg; "$ts"
           };
           $tag = "Z$tag" if $tag !~ /^[a-z]/i;
           at.t = "$tag";
           
           c.id = $_ for not&id;
           
           not&name;
           not&title;
           
           my $s = not&s;
           $s = encode_entities($s) unless not&ishtml;

           c.s = $s;
           
           die 'attr $something>' if at.rp;
           my $of = {map{$_=>1}qw's ishtml t y c sc Esc Ec id css tag rp'};
           
           c.attr->{$_} = $at->{$_} for 
               sort grep {!/^_/ && !$of->{$_} } keys %$at;
           
           c.el = 1;
           sc.M = [@{not&Esc||[]}];
           # here hangs loose, we would want to conduct at.c/sc business cleanly
       }
       my $to = {};
       for my $k (keys %$at) {
           next if $k =~ /^_/;
           next if $note->{$k};
           $to->{$k} = $at->{$k};
       }
       warn "Got $_" for grep { $_ !~ /^(t|y|c|sc)$/ } keys %$to;
       if (J.V) {
           saybl "=------ ".ki 2, $to;
           if (my $cM = to.sc.M) {
              saybl " M  ".$_->[0]."\t".ki $_->[2]."\t((( ".ki $_->[3] for @$cM;
              saybl "MMMM ".@$cM;
           }
       }
       acum $lv, 'Ec', $MM->($to);
       # so we add here locally ^
       # and 
       #sayyl sjson lv.Ec;# if j.l eq '/';
 - K: scr/nobody #c
   D:
   - MZ: cc:jsc
   -
     - om #
     - 2
     - args: A,C,G,T
     - |
       A = $.extend({},A);
       C = G.inC(C); 
       if (!T.d)
           T.d=1;
       if (typeof C.c === 'string')
           return a.er('c string');
       
       var see = 'w'+T.d+' '+C.t+' '+a.ks(C.c)+'%'+a.ks(C.sc);
       a.m(see);
       
       if (C.c.W)
           A.on = $('#'+C.c.W);
       if (C.c.el)
           G.el(A,C,G,T);
       if (C.c.nobody)
           A.on = $('#'+C.c.nobody);
       
       if (!C.sc)
           C.sc = {};
       
       if (C.sc.M) {
           //T.d++;
           $.each(C.sc.M, function(i,v) {
               var nC = G.inC(v);
               a.yl(5, function () { 
                G.om(A,nC,G,{d:T.d+1});
               });
           });
       }
       
       if (C.sc.geo) {
           var nC = {c: C.sc.geo, sc: C.sc};
           G.sc_geo(A,nC,G,T);
       }
       
       
       if (C.sc.css) {
           $.each(C.sc.css, function(i,v) {
                $(A.on).css(i, v);
           });
       }
       if (C.sc.anc) {
           $(A.on).animate(C.sc.anc, (C.sc.ant||900));
       }
   -
    - sc_geo # A,C,G,T
    - 3
    - |
      if (!C.sc.css)
          C.sc.css = {};
      if (!C.sc.anc)
          C.sc.anc = {};
      C.sc.css.top = (C.c.y * 100)+'%';
      C.sc.css.left = (C.c.x * 100)+'%';
      C.sc.css['transform-origin'] = '0% 0%';
      C.sc.css['transform'] = 'rotate('+C.c.radial+'rad)';
       
      console.log(C);
   -
    - el # A,C,G,T
    - 3
    - |
      if (!C.c.attr)
          C.c.attr = {};
      if (C.c.id) { 
          C.c.attr.id = C.c.id;
          var aid = $(A.on).attr('id');
          if (aid && C.c.id) { 
              var to = '#'+aid+' #'+C.c.id;
              var ex = $(to);
              if (ex) {
                  a.m('rm '+ex.prop('tagName')+' '+to);
                  $(ex).remove();
              }
          }
      }
      var div = $("<"+C.t+">", C.c.attr);
      var el;
      $(div).appendTo(A.on).each(function(i,v){el=v});
      if (C.c.s)
          $(el).html(C.c.s);
      A.on = el;
      
 - K: chov/outs #c
   D:
    -
     - Esc
     - 6.4
     - |
       my $c = at.c ||= {};
       my $sc = at.sc ||= {};
       my $note = {};
       my $not = sub {
           my $k = shift;
           $note->{$k} = 1;
           return $at->{$k} if exists $at->{$k};
           return ();
       };
       my $MM = sub {
           map {[
               (defined _.t ? _.t : ''),
               (defined _.y ? _.y : ''),
               _.c,_.sc
           ]} @_
       };
       
       if (j.l eq 'ei') {
          saybl "EI EI".wdump 2, $at;
       }
       
       if (c.nobody) {
           c.nobody = $not->('id');
           $not->($_) for 's', 'ishtml';
       }
       else {
           my $tag = not&tag || do {
             (my $ts = j.l)  =~ s/[^\w]/ñ/sg; "$ts"
           };
           $tag = "Z$tag" if $tag !~ /^[a-z]/i;
           at.t = "$tag";
           
           c.id = $_ for not&id;
           
           not&name;
           not&title;
           
           my $s = not&s;
           $s = encode_entities($s) unless not&ishtml;

           c.s = $s;
           
           die 'attr $something>' if at.rp;
           my $of = {map{$_=>1}qw's ishtml t y c sc Esc Ec id css tag rp'};
           
           c.attr->{$_} = $at->{$_} for 
               sort grep {!/^_/ && !$of->{$_} } keys %$at;
           
           c.el = 1;
           sc.M = [@{not&Esc||[]}];
           # here hangs loose, we would want to conduct at.c/sc business cleanly
       }
       my $to = {};
       for my $k (keys %$at) {
           next if $k =~ /^_/;
           next if $note->{$k};
           $to->{$k} = $at->{$k};
       }
       warn "Got $_" for grep { $_ !~ /^(t|y|c|sc)$/ } keys %$to;
       if (J.V) {
           saybl "=------ ".ki 2, $to;
           if (my $cM = to.sc.M) {
              saybl " M  ".$_->[0]."\t".ki $_->[2]."\t((( ".ki $_->[3] for @$cM;
              saybl "MMMM ".@$cM;
           }
       }
       acum $lv, 'Ec', $MM->($to);
       # so we add here locally ^
       # and 
       #sayyl sjson lv.Ec;# if j.l eq '/';
stwa: # STASHINGS
 - #c absolute # ORDER uglies
  - ab 
  - 3.3
  - |
     $v = 'width:100%,height:100%' if $v eq '100';
     if ($v =~ /^.+:.+/) {
         g.w->(mksc=>{s=>$v,sc=>C.sc},$g );
         $v = 1;
     }
     elsif ($v ne '1') {
         die "whatab:$v";
     }
     $v = "absolute" if $v eq '1';
     at.sc.css->{"position"} = $v;
  - way: 1
 -
  - deco # splurge many, get this pipe sorted...
  - 3.2
  - |
    at.sc.css->{"text-decoration"} = "underline";
 -
  - poi # pointer-events
  - 3.2
  - |
    at.sc.css->{"pointer-events"} = ($v =~ /^([1ay])/ ? 'all' : 'none');
 -
  - at #
  - 3
  - |
     $at.>$_ = $v.>$_ for keys %$v;
 -
  - tag #
  - 3
  - |
     at.tag = $v;
 -
  - sha # it
  - 3
  - |
     my @m = split m/\s/, $v;
     $m[-1] = g.cole->($m[-1]);
     at.sc.css->{"text-shadow"} = sprintf '%dpx %dpx %dpx %s', @m;
 -
  - co # it
  - 3
  - |
    at.sc.css->{"color"} = g.cole->($v)
 -
  - hs # color: hsla
  - 3
  - |
    at.sc.css->{"color"} = g.hsle->($v)
 - #c ground etc
  - zi 
  - 3
  - |
    at.sc.css->{"z-index"} = 0+$v;
 -
  - zig # it alley, primary, ground
  - 3
  - |
    at.sc.css->{"z-index"} = 0+($v-20);
 -
  - zie # suuuuuu, ether
  - 3
  - |
     at.sc.css->{"z-index"} = 0+($v-10);
 -
  - bgi # background image
  - 3.2
  - |
     at.sc.css->{"background-image"} = "url('$v')";
 -
  - bg # background something
  - 3.2
  - |
     at.sc.css->{"background"} = "$v";
 -
  - bgh # background hsla
  - 3.2
  - |
     at.sc.css->{"background-color"} = g.hsle->($v);
 -
  - fs # it
  - 3
  - |
     $v *= 9;
     at.sc.css.>font-size = int($v).'%';
 -
  - fw # it
  - 3.5
  - |
    at.sc.css->{"font-weight"} = int($v*100);
 -
  - ws # it
  - 3
  - |
    if ($v eq 'p') { 
        $v = 'pre';
    }
    if ($v eq 'n') {
        $v = 'nowrap';
    }
    at.sc.css->{"white-space"} = $v;
 - #c filterszzzz weird style using com to agg.
  - opa # seetrhu
  - 3
  - |
     at.sc.css->{"opacity"} = $v;
 -
  - tro #
  - 3.6
  - |
    at.sc.css->{"transform-origin"} = $v;
 -
  - rad # radial tr
  - 3.6
  - |
    C.sc.tr.rotate = $v.'rad' if $v;
 -
  - tr # filterszzzz weird style using com to agg.
  - 3.7
  - |
    at.sc.css->{"-webkit-transform"} = join' ', map {"$_($v->{$_})"} keys %$v;
 -
  - of
  - 3.7
  - |
    C.sc.css->{"-webkit-filter"} = join' ', map {"$_($v->{$_})"} keys %$v;
 -
  - blr # it
  - 3.6
  - |
    C.cs.of.blur = $v.'px';
 -
  - sat # it saturation
  - 3.6
  - |
    C.cs.of.saturate = $v;
 -
  - con # it contrast
  - 3.6
  - |
    C.cs.of.contrast = $v;
 -
  - bri # it bright
  - 3.6
  - |
    C.cs.of.brightness = $v;
 -
  - hue # it bright
  - 3.6
  - |
    C.cs.of->{'hue-rotate'} = $v.'deg';
 -
  - sep # it old
  - 3.6
  - |
    C.cs.of.sepia = $v;
 -
  - inv # it old
  - 3.6
  - |
    C.cs.of.invert = $v;
 -
  - gray # it old
  - 3.6
  - |
    C.cs.of.grayscale = $v;
 - #c limbic space
  - ls # it
  - 3
  - |
    C.sc.css->{"letter-spacing"} = g.empc->($v);
 -
  - ml # it
  - 3
  - |
    C.sc.css->{"margin-left"} = g.empc->($v);
 -
  - mr # it
  - 3
  - |
    C.sc.css->{"margin-right"} = g.empc->($v);
 -
  - mt # it
  - 3
  - |
    C.sc.css->{"margin-top"} = g.empc->($v);
 -
  - mb # it
  - 3
  - |
    C.sc.css->{"margin-bottom"} = g.empc->($v);
 -
  - m # margrin
  - 3
  - |
    C.sc.css->{margin} = $v;
 -
  - right # yep
  - 3.4
  - |
    C.sc.css->{right} = $v;
 -
  - left # yep
  - 3.4
  - |
    C.sc.css->{left} = $v;
 -
  - top # yep
  - 3.4
  - |
    C.sc.css->{top} = $v;
 -
  - bottom # yep
  - 3.4
  - |
    C.sc.css->{bottom} = $v;
 -
  - mw # y
  - 3.4
  - |
    C.sc.css->{"max-width"} = $v;
 -
  - mh # y
  - 3.4
  - |
    C.sc.css->{"max-height"} = $v;
 -
  - miw # y
  - 3.4
  - |
    C.sc.css->{"min-width"} = $v;
 -
  - width # y
  - 3.4
  - |
    C.sc.css->{"width"} = $v;
 -
  - height # y
  - 3.4
  - |
    C.sc.css->{"height"} = $v;
 -
  - over # y 
  - 3.4
  - |
    C.sc.css->{"overflow"} = $v;
 -
  - float # y 
  - 3.4
  - |
    C.sc.css->{"float"} = $v;
 -
  - bo # border
  - 3.4
  - |
    C.sc.css->{"border"} = $v;

