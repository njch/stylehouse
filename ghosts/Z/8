R_Jz:
 - K: on #c
   n_D:
     yJ: |
       J.yl.nojb = 1;
       'on';
     up: | # tak tlv J.on into iterations of upgoing clever
       Rw thy $oJ:J $J:J.Jo defon;
       
       my $vs = Rw tyv $J $ip:ar.ip;
       
       sayyl "ON J.Jo.name";
       my $nc = -1;
       for my $lv (@$vs) {
           $nc = 0 if $nc == -1;
           my $j = lv.j;
           my $coi = Rw pha $J $k=j.r;
           coi.off=100;
           my $lnc = Rw lv_same $lv $j $x:coi $J;
           $nc = 0 if !$lnc;
           if ($lnc) {
               sayyl "LINEHUM SAME";
               #next;
           }
           
           my $sc = {};
           if (!lv.sc) {
               say "INIT STYLO ". lv.j.r ."     ".ki lv.sc;
               if (j.s =~ /^[A-Z0]\/./) {
                   sc.ou = 'file';
                   sc.dir = 'ghosts/';
               }
               # upgrade strings to thoughts
               # drag in
               Rw jamsc $J $j $sc;
           }
           
           coi.end->();
       }
       $nc;
       
       


 - K: oundo #c hound god from a crux of inness $x
   D: |
     my $o = {r=>[]};
     # fills up @r to $thi
     # also $plucky to select hash key order
     # a space for tiny-part-of-huge-set access
     
     my $u = x.j.s;
     my $sc = x.sc;
     
     # $plucky could rate the things it gets passed
     # and the $thi yins up out here
     
     sc.ou ||= 'text' if !ref $u;
     sc.ou ||= 'array' if ref $u eq 'ARRAY';
     sc.ou ||= 'code' if ref $u eq 'CODE';
     sc.ou ||= 'hash';
     
     # further dimensional sc if {} or something?
     # so the spec can curve data all the way
     my $thi = x.thi || die;
     Rw ou/sc.ou + $u $o $x $sc $thi;
     
     sc.grp &&
     Rw og/sc.grp + $u $o $x $sc;
     
     # $r rows over the contents
     # r.c probably for pi, other stuff may pick stuff up...
     
     o.thi = @{o.r};
     $o
 - K: pi/infrom #c
   D: |
     my $x = $u;
     
     Jn('onl', 0.1, "x.j.l", '{co:38f,fs:12}');
     
     Jn('is',0.102,{s=>':',pwth=>'whack'},'{fs:20,co:eee}');
     
     Jn('s', 0.11, {pi=>'',s=>x.j.s},'{fs:15}');
     
     
     
     my $in = {%{x.sc||{}}};
     Jn('sc',0.3, {pi=>'scbund',s=>x.sc},
         {fs=>23 ,co=>'314',sha=>'1 1 3 fff'});
     
     if (my $time = x.sc.ts) { # can't be zero, so relative
         Rw ii/time + $time;
     }

