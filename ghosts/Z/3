R_Jz:


 - K: clw #c
   n_D:
     curves: |
       #spun 0  2
       zoom 0 0.5
       y    0  0
       x    0  0
       curve 0 -0.1
     
 - K: wam #c 
   n_D:
     yJ: |
       'awm'
     defon: |
       twzng 0.1 J/2
       twzng 0.6 0/g
     upl: | # if the in up, pha wakeups out - all response to editing
       #Rw pi/showgoin;
       #Rw pi/shivoo;
       Jn('it',0.95,'o','{co:fca}');
 - K: pi/showgoin #c
   D: |
       my $vs = Rw tyv $J:G.oin;
       my $M=[];
       map {
           Mn($_ => '', {s=>$_,pwth=>"J5:$_"});
       } sort map { _.j.s.name } @$vs;
       Rw om/bal $J $oM:M $in=0.2 $out=0.6;
 - K: pi/shivoo #c
   D: |
       J.V = 1;
       Jn('win',0.21,{pi=>'text',s=>"THI"},'{fs:22,hs:4.9.5.9}');
       Jn('wi',0.2,"WITH",'{fs:22,hs:4.9.5.9}');
       Jn('wii',0.22,"KNUCJK",'{fs:22,hs:4.9.5.9}');
       J.V = 0;
       #Rw Jhead $J;
       
       Jn('someri',{thi=>4},'s','{fs:30,co:4c9}');
       
       Jn('some',0.3,'thing!');
       Jn('ee',0.4,'THINGS!'); 
       
       
       Rw thi afghanrug/mods;
       #Rw thi unicrowd/mods;
       
 - K: awm #c 
   n_D:
     yJ: |
       'awm clw gui heag'
     up: |
       my $coi = Rw pha $J $k=jo;
       Rw suck */upl;
       Rw nx + $J;
       coi.exactl->();
       
       
 - K: cod #c code piece, frontal lobe to the coiled lies
   n_D:
     yJ: |
       'gui heag';
     in: |
       # GARSP 8 xor flippering tubeway, $e compiling
       
       # could be legit use of B
       my $oJ = J.cc.oJ;
       my $r = J.cc.r;
       my $u; # thruster
       
       u.t = r.t;
       u.y.cv = r.y.cv;
       u.sc.dig = e.dig;
       u.c.s = e.code || return sayre "Some kindao ".ki$e;
       
       Rw in $J:oJ $u;
     up: |
       my $lv = Rw r_lv $J:e.J $r:J2.r;
       my $J2 = lv.sc.pi;
       my $oJ = lv.sc.oJ;
       my $r = J2.u;
       J.cc = {oJ=>$oJ,r=>$r};
       sayyl "cod: ".wdump $r;
       
       
       Jn('srcvector',0.1,{pi=>'',s=>$oJ});
       
       Jn('row',0.2,{s=>r.c.s},{idly=>1,cm=>'perl',dig=>r.sc.dig,height=>'10em'});
     curves: |
       x 0 0.5
       y 0 0.5
 - K: pi/xor #c cast catch
   D: |
     my $c = J.d.c;
     my ($x,$o,$r) = (c.x,c.o,c.r);
     my $pi = o.pig || 'rune';
     my $cv = r.cv || 0.8;
     Jn(r.t,'',{pi=>$pi,s=>$r,gp=>{cv=>$cv}});
    
 - K: pi/lie #c s = d/C for a file
   D: |
     my $sc = u.sc;
     
     sayyl "dwkokdwoo ". ki J.d.y;
     J.d.c.pwth='J5:cod';
     J.d.sc.opa=0.2;  
       
     #Jn(catch => 0.03, {pi=>'hangleft',s=>{pi=>'text',s=>sc.r},scwa=>'right:0em'}, '{ab:1,hs:3 9 7 9,fs:13}');
     Jn(lines => 0.07, {pi=>'hangleft',s=>sc.lines}, '{ab:1,co:f42,fs:13}');
     Jn(linein => 0.034, {pi=>'hangleft',s=>sc.in,scwa=>'right:3em'}, '{ab:1,co:e72,fs:10}');
     
     
     my $ind = $1 if sc.h =~ /^(.+?)\Qsc.K\E/;
     
     
     my $al = $1 if sc.h =~ /\Qsc.K\E(.+)$/;
     Jn(ind => 0.09, $ind, "{co:38e,fs:12}");
     Jn(K => 0.1, sc.K, "{co:f42,fs:17}");
     # go look for the right side of /K
     Jn(al => 0.11, {fadwi=>$al,s=>slm(20, $al)}, "{co:5ae,fs:12}");
     
     
     #Jn(com => 0.3, {s=>sc.com}, '{co:f42,fs:9}');
     #Jn(
 - K: pi/hangleft #c
   D: |
     my $sq = J.d.c.scwa || 'right:1em';
     Jn(lines => 0.1, $u, "{ab:1,$sq}");

