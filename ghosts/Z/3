R_Jz:
 - K: shv #c 
   n_D:
     yJ: |
       'shv clw headi geomoss'
     curves: | 
       spun 0  2
       zoom 0 0.5
       y    0  0
       x    0  0.2
       curve 0 -0.1
     defon: |
       #twang 0.1 Z/2
       #twong 0.1 Z/3
     up: | # if the in up, pha wakeups out - all response to editing
       J.cv = 20;
       
       Rw mo $J mooj;
       
       Jn('some',0.3,'thing!');
       J.V = 1;
       Rw thi afghanrug/mods;
       Jn('ee',0.4,'THINGS!');
       Rw on_xor_geo $J $nomay=1;  
        
       Rw flow $J geomo;   
 - K: mo #c prod modus operandi   J ( J:mooJ ) S )
   D: |
     my ($name) = @{delete ar.m};
     my $oJ = Rw J5 - mooJ;
     J.V = 1;
     Rw flow $J:oJ $name $oJ:J;
 - K: mooJ #c splex
   n_D:
     yJ: |
       'mooJ'
     flows:
       mooj: |
         flow 1
         i 4
         
       

      
 - K: mooj/flow #c
   D: |
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     # 1
     my $n;
     # 2

     my $dd = $d;
     for my $is (@is) { # THE TIR drop at hands
           # 3
           
           # 8

           #sayre "G.jumb.yos - ------ d.y.i:    d.r" if ar.V;
           saybl "G.jumb.yos Post:  "
           ."d.r  \t\t  d.s       ".wdump({@{d.css}}) if ar.V || ar.J.V;
           
           if (c.lev) {
               J.lev->(
                   d.r => c.lev,
                   @{d.css},
               );
           }
           else {
               J.bz->(
                   d.r => d.s,
                   @{d.css},
               );
           }
     }
 - K: mooj/i #c
   D:
   -
    - yinvo #c build wave manifold
    - 1.5
    - |
       d.y = {thi => d.y} if !ref d.y;
       
       my $y = d.y;
       y.thi = @{y.bal} if y.bal;
       
       die if y.cv && y.in;
       y.in ||= 0.1; 
       y.out ||= 0.9; # up to
       y.thi ||= 1;
       y.space = y.out - y.in; # could spiral much space away from spine
       y.space *= -1 unless y.space > 0;
       y.aspace = y.space / y.thi;
       
       # twist, lay into segment
       my @is;
       my $csv = defined y.cv ? y.cv : defined y.in ? y.in : die "no yiny".ki$y;
       my $muav;
       for (1..y.thi) {
           my $iy;
           iy.i = $_-1;
           iy.cv = sprintf '%.6f', $csv;
           iy.pcv = sprintf '%.6f', $_ / y.thi;
           s/0+$/0/ for iy.cv, iy.pcv;
           push @is, $iy;
           my $mu = 1;
           if (y.bal) {
               if (!defined $muav) {
                   my $s = sum map{_.y.thy} @{y.bal};
                   my $ov = @{y.bal};
                   $muav = $s/($ov||1);
                   $muav ||= 1;
               }
               my $b = y.bal->[iy.i];
               $mu = b.y.thy if exists b.y.thy;
               $mu = $mu / ($muav||1);
               #saybl " _ iy.cv @ @ @ this thy: $mu y.thi";
               #my $muc = y.aspace * $mu;
               #sayyl "y.aspace * $mu == $muc";
           }
           my $muc = y.aspace * $mu;
           $csv += $muc;
       }
   - 
    - yangtycsc #c inwave, background language expansion, dewey mezrow   YANG
    - 2.1
    - |
       my $d = {%$dd}; # first only & then yangy
       
       d.y = {%{d.y||die}, %$is};
       d.cv = d.y.cv || die;
       d.pcv = d.y.pcv;
       if (d.y.thi > 1) {
           d.t = d.t;#."_not_".d.pcv; # TODO delicate? y.bal overs, but not always wanna
       }
   -
    - csboxen #c the framework... bolts as variables, glowing unevenly recurring hereness
    - 2.2
    - | 
       d.c || die;
       d.sc = {%{d.sc||{}}};
       #^v  ^v
       #  ^v
       d.cs = {%{d.cs||{}}};
       #  ^v esc
       d.css = [@{d.css||[]}];
       #   d.c.$modk = the unravelling mod
       # + d.sc.$esck = outwards, parafin
       # =
       #   d.cs.$modk.$esck = the outwards
       # + d etc
       # ^ yanging mods attach style, main accum fet: cs.$modk.$ck = $c
       # ^ fed to esc which packs styles (default %css) with com: #$cometc$modk
       # some vaguely different piping there for P... grabbed from above I reckon...
   -
    - yangbal #c    suddenly somewhere, pretend to be more somewhere
    - 2.3
    - |
       my $y = d.y;
       if (d.y.bal) {
           # locality
           my $b = d.y.bal->[d.y.i];
           say "G.jumb.yos BAL d.y.i at d.cv    --- d.y.uyiv   ".ki 1, $b if ar.V;
           for my $k (keys %$b) { # c etc merg in per row
               my $v = $b->{$k};
               if (ref $v) {
                   $d->{$k} = {%{$d->{$k}||{}}, %$v};
               }
               else {
                   $d->{$k} = $v;
               }
           }
       }
   -
    - yango #c
    - 2.7
    - |
       # bal may mod t, this may wannab 
       d.r = join "\t", d.t, (d.cv+0); # always update trio
       
       
       my $c = d.c; # <v contation
       die "notrefc  $c" if !ref $c;
   -
    - yangist #c art
    - 2.3
    - |
       n.um = sprintf '%.3d', d.y.uiv;
       
   -
    - dsc #c cs on d, outside mod twistor pipe, modline 4th
    - 7
    - |
       # non-thinking modulatios
       # you could say more compressed
       # usu static-ish spec, ie make this button green.
       
       # the sea of synapse we datum
       # mod spec lines go: [$l, $thi, 
       # they were found 
       # also any $sc maybe be like {$k => $sc, $k2 => $sc2}
       # for comments like v
       # so comp is the very last hash, the rest is where etc.
       #push @{d.css}, '%css#'.$_ => d.cs->{$_}
       #    for sort keys %{d.cs};
       if (d.sc && %{d.sc}) {
           push @{d.css}, Rw esc $d $sc:d.sc SC;
       }
   -
    - dcs #c cs in da pipe, modulating or so
    - 7
    - |
       # cs.$k.$sc -> squiggly first style compressions
       # the wilder pole, coming from mods
       # there's stuff across the whole line too
       # and what's between...
       # exp to css for now...
       if (d.cs && %{d.cs}) { 
           push @{d.css}, Rw esc $d $sc:d.cs CS;
       }

