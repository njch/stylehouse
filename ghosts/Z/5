R_Jz:
modulapi:
 -
  - pi # modulapi
  - 3.3
  - |
     ref $cs && die wdump $cs;
     my $y = $cs;
     $cs = d.c.pi = Rw spinash $J;
     cs.y = $y;
     cs.d = $d;
     cs.most->{$_} = cs.d.g->{$_} for keys %{cs.d.g||{}};
     # be adjusting this:
     cs.r = cs.d.r;
     Rw mkJid $J:cs;
     cs.bz->("/\t0.9" => "y");
 -
  - pi # modulapi
  - 3.4
  - |
     cs.cv = d.c.gp.cv || 0.6;
     cs.u = d.s;
     die'csnod' if cs.d ne $d;
     
     Rw pir $cs;
 -
  - pi #
  - 3.7
  - |
     # can pin/ping light source of con
     cs.s = Rw maka $J:cs;
     d.s = cs.s;
     #sayyl "itlbe: ".slim 130, d.s;
     d.cs.pi.pi = $cs;
 -
  - pi # fork... when mod swivels its nice.
  - 3.8
  - |
    # koobla
 -
  - pwth # -> !some/path exp. 8ery, 8ing
  - 3.1
  - |
     my $path = $cs;
     $path = "!$path" unless $path =~ /^\W/;
     c.path && die;
     c.path = $path;
     
 -
  - path # install cs path
  - 3.2
  - |
     d.cs.pwth.path = $cs;
     d.cs.pwth.idly = 1 unless c.fo; # will prov
     d.cs.pwth.tt = "$cs";
     # later style %idly when %path but no /%id
 -
  - pwar # take $ar cs path
  - 3.2
  - |
     d.cs.pwar.pwar = $cs;
 -
  - id #
  - 3
  - |
    d.cs.id.id = $cs;
 -
  - J #
  - 3
  - |
     d.cs.J.J = $cs;
     
C esc:
 -
  - pi # ag
  - 3.5
  - |
     die if !v.r;
     '%gp' => $v 
 -
  - pwar #
  - 3
  - |
     '%pwar'=>$v
 -
  - path #
  - 3
  - |
     '%path'=>$v
 -
  - idly #
  - 3
  - |
     '%idly'=>$v
 -
  - id #
  - 3
  - |
     '%id'=>$v
 -
  - J #
  - 3
  - |
     '%J'=>$v

