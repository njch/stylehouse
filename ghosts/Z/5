R_Jz:

 - K: wo1 #c 
   n_D:
     yJ: |
       'clw headi gui'
     up: | # if the in up, pha wakeups out - all response to editing
       J.d.c.cv = 20;
       J.most.mody = 'ano';
       J.most.eo = 'chiv';
       
       Rw Jhead;
       
       my $coi = Rw pha $J $k=jo;
       #Rw pi/fol $J $u=eye;
       my $M=[];
       Mn(fu => {thy=>3}, {pi=>'fol',s=>'eye/fug'});
       Mn(e => {thy=>1}, {pi=>'fol',s=>'eye/o'});
       
       Rw om/bal $J $oM:M $in=0.2 $out=0.9;
       
       J.V = 1;
       coi.exactl->();
       
 - K: pi/fol #c
   D: |
     # LOOK FOR KNOWNS, scoped in wormhole
     die if ref $u;
     Jn(ei => 0.0008, "<br/>", {ishtml=>1});
     Jn(name => 0.1, {pi=>'text',s=>J.d.t,cv=>0.2});
     
     my $c = J.d.c;
     sayyl "is looking $u  J.cv c.cv";
     
     
     
     my @m = map{fixutf8($_);chomp;$_}`/bin/ls -lHh '$u'`
      unless c.mode && !c.dir;
     #die gp J.most.J;
     
     my $tot = shift @m if $m[0] =~ /^total/;
     if ($tot) {
         $tot = $1 if $tot =~ /^total (.+)$/;
         Jn(D => 0.22, "D ".@m." $tot", '{hs:5.5.3.8,fs:5}');
     }
     my @o;
     my $i = 0;
     for my $n (@m) {
         my $d;
         $n =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s+\S+\s+\S+)\s+(.+)$/;
         if (!$tot && @m == 1 && $7 eq $u) {
             Jn(Size => 0.24, $5, '{hs:4.5.3.8,fs:7}');
             Jn(Time => 0.25, $6, '{hs:5.5.3.8,fs:5}');
             last;
         }
         return if J.cv < 0.4;
         d.t = "$7";
         my $sc;
         sc.mode = $1;
         sc.size = $5;
         sc.time = $6;
         sc.dir = 1 if sc.mode =~ /^d/;
         
         d.y.i = $i++;
         d.c.pi = "fol";
         d.sc.ml = '3em';
         d.c.s = "$u/d.t";
         d.c.sc = $sc;
         #d.c.cv = J.cv / 2;
         #push @o, $d;
         
         last if @o > 2;
     }
     
     # ire culture suggestions
     # make d.y.thi for the 3-6 M bal
     # where it shrinks if we pan missing
     # or if theres light bringing up the ab
     # 
     my $M = [@o];
     Rw om/bal $J $oM:M;
     #die wdump $M;
     #Rw vary $J $M;#
     
 - K: vary #c tak tlv into space, ready for lx/suro
   D: |
       my $out = ar.out || 0.9;
       my $in = ar.in || 0.1;
       my $sec = $out - $in; # <-0.8->
       my $thi = $sec / (@$M||1); # or indi
       
       # thi of $lv individuality
       my $tin = $in;
       for my $x (@$lvs) {
           # go higher and pipe mods to squish space, vary $thi (other ways to)
           x.thi = $tot * $thi;
           x.phi = $thi;
           x.in = $tin;
           x.out = $tin + $thi;
           $tin = x.out; # next
           # space volve, indi...
           saybl "blbl x.j.r   $tot * $thi =  x.thi    ($tot $sec)";
           
           my $j = x.j;
           if (!J.q) {
               say "up on ".gp($J)."    j.r    ".slim 200, gp(j.s);
               say "   * _.r          => ".gp(_.s) for values %{x.sj};
               say "up around x.in <-> x.out"
           }
       }
       $lvs
       
 - K: jf #c
   D: |
     my $o = Rw pul name;
     my $ip = {t=>o.name};
     my $vs = Rw tyv $J $ip;
     return shift @$vs if @$vs;

