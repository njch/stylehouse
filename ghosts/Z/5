R_Jz:

 - K: wo1 #c 
   n_D:
     yJ: |
       'awm'
     defon: |
       twzng 0.1 w {ou:fol}
     upl: | # if the in up, pha wakeups out - all response to editing
       my $coi = Rw pha $J $k=jo;
       #Rw pi/fol $J $u=eye;
       my $M=[];
       Mn(fu => {thy=>3}, {pi=>'fol',s=>'eye/fug'});
       Mn(e => {thy=>1}, {pi=>'fol',s=>'eye/o'});
       
       Rw om/bal $J $oM:M $in=0.2 $out=0.9;
       
       J.V = 1;
       coi.exactl->();
       
 - K: nx #c
   D: |
       my $oJ = Rw oJ $J on;
       
       my $nc = Rw up $J:oJ;
       
       my $oM = Rw very $J:oJ;
       
       say wdump $oM;
       
       Rw om/bal $J $oM $t=hihi $in=0.1 $out=0.9 $V=1;
       
       say "comat ".F_delta;
     
 - K: very #c tak tlv into space, ready for lx/suro
   D: |
     my $N = Rw tyc $J;
     for (@$N) {
     # mod to space volve, indi... lifeupstyle
         _.y = {};
         _.c.pi = _.sc.ou if _.sc.ou;
         #_.y.thy=_.sc.thy # from on
     }
     $N;
 - K: pi/file #c
   D: |
     my $file = $u;
     defined $file || die 'nofile';
     if (my $dir = C.sc.dir) {
         $dir .= '/' if $dir !~ /\/$/;
         $file = "$dir$file";
     }
     
     my $f = Rw fil/e $file;
     
     sayyl "oufile: $file";
     
     Rw around $J $o $x;
 - K: fil #c index of files?
   n_D:
     yJ: |
       'fil'
     e: |
       my $J = Rw J5 - fil;
       my $fid = slm 8, dig $file;
       my $fJ = J.bb->{"$fid\t0.1"};
       if (!$fJ) {
           $fJ = Rw oJ $J $name=lie.$fid $style=lie;
           fJ.bz->("file\t0.1" => $file);
           J.bz->("$fid\t0.1", $fJ, '%file'=>$file);
       }
       $fJ
 - K: lie #c one file vector, expanding reconvening substructure of io mess to artifacts and stuff in 0.8
   n_D:
     yJ: |
       'lie'
     in: |
       my $o = {};
       Rw around $J $o;
       my ($it) = grep { _.t eq u.t && _.cv eq u.cv } @{o.r};
       $it || die "u.t   u.cv not found!";
       it.sc.dig eq u.dig || die "NOT UP";
       it.s = u.s;
       
       my $file = J.bb->{"file\t".0.1};
       
       write_file($file, join("\n", map {_.s} @{o.r})."\n\n");
       
       Rw around;
       
       say "Saved?";
     around: |
       J.cv ||= 0.3;
       
       #Rw lief $J;
       
       # $o put
       Rw out
       if ar.o;
     out: |
       my $ip = {cv=>0.4};
       my $vs = Rw tyv $J $ip;
       
       push @{o.r||=[]}, sort { a.sc.in <=> b.sc.in } map { {
          r => _.j.r,
          t => _.j.t,
          cv => _.j.cv,
          s => _.j.s,
          sc => _.sc,
       } } @$vs;
       
       o.oJ = $J;
       o.pig = 'lie';
 - K: lief/flows/folate #c
   D: |
     flow 0.1  {} {}
     stat 0.61 {} {tv:file,et:0}
     read 0.62 {} {tv:file,et:130}
     jam  0.63 {} {tv:read,et:340}
 - K: folate/flow #c
   D: |
     # 2
     for my $c (@{wJ.tvs}) {
         my $coi = Rw pha $J $k=c.K/c.v;
         
         coi.off = c.sc.et if defined c.sc.et;
         sayyl "Trying c.K    c.v        off=coi.off";
         
         my $ip;
         ip.l = c.sc.tv if c.sc.tv;
         my $vs = Rw tyv $J $ip;
         
         my $nc = Rw lv_same $vs $x:coi $J $V=1;
         next if $nc;
         
         die if @$vs > 1;
         for my $lv (@$vs) {
             my $j = lv.j;
             # resolve $offness, add $and to lv_same
             # if change exactl swoops an init linehum wd
             
             sayyl "c.v Effect: c.K ";
             saybl "In: j.r   => ".slim 20, j.s;
               
             my $at = {};
             Rw c.wa $J $j $at $c $sc:lv.sc;
               # ^
               # at travels fast
               # v
               Rw jamsc $J $j $sc:at;
               
               # STYLE
          }
          coi.same_wd ||= do { # catchup (all wong)
              my $vs = Rw tyv $J $ip;
              delete coi.off;
              Rw lv_same $vs $x:coi $J $ret=1 $V=1;
          };
          
          coi.V = 1;
          my $y = coi.exactl->();
       }
 - K: folate/stat #c
   D: |
     at.is_file = -f j.s;
     my @s = stat j.s;
     at.size = $s[7];
     at.mtime = $s[9];
     at.ctime = $s[10];
 - K: folate/read #
   D: |
     my $s = read_file(j.s);
     my $dig = dig $s;
     Jn('read' => 0.3 => $s, {dig=>$dig});
     at.dig = $dig;
 - K: folate/jam #
   D: |
         my $i = 0;
         my $l = {map { $i++ => $_ } split "\n", j.s};
         Jn('lines' => 0.3 => $l);
         my @bu;
         my @nol;
         for my $li (sort {$a<=>$b} keys %$l) {
             my $n = {in=>$li};
             n.s = $l->{$li};
             n.h = n.s;
             
             if (n.s =~ /^.?.?\w/) {
                 n.r = 'low';
             }
             if (n.s =~ /#(c)(.*)$/) {
                 n.r = 'c';
                 n.com = $2 if $2;
             }
             
             n.K = $1 if n.s =~ /K: (\w+[^#]+)/; 
             n.K ||= $1 if n.s =~ /^[^#]*?(\w+[^#]+)/;
             n.K =~ s/\s+$// if n.K;
             if (n.r && n.K) {
                 if (@nol) {
                     n.s = join"\n",@nol,n.s;
                     @nol = ();
                     n.in = 0;
                 }
                 push @bu, $n;
             }
             elsif (@bu) {
                 my $las = $bu[-1]; 
                 las.s .= "\n".n.s;
                 las.out = $li;
             }
             else {
                 push @nol, n.s
             }
         }
         for my $n (@bu) {
             my $s = delete n.s;
             $s||die;
             n.dig = slm 7, dig $s;
             n.lines = split "\n", $s;
             my $j;
             j.l = n.K||n.h;
             j.cv = 0.4;
             Jn(j.l, j.cv, $s);
             Rw jamsc $J $j $sc:n;
             #saybl "N: n.K        ".slim 40, ki $n;
         }
 - K: pi/fol #c
   D: |
     # LOOK FOR KNOWNS, scoped in wormhole
     die if ref $u;
     Jn(ei => 0.0008, "<br/>", {ishtml=>1});
     Jn(name => 0.1, {pi=>'text',s=>J.d.t,cv=>0.2});
     
     my $c = J.d.c;
     sayyl "is looking $u  J.cv c.cv";
     
     
     
     my @m = map{fixutf8($_);chomp;$_}`/bin/ls -lHh '$u'`
      unless c.mode && !c.dir;
     #die gp J.most.J;
     
     my $tot = shift @m if $m[0] =~ /^total/;
     if ($tot) {
         $tot = $1 if $tot =~ /^total (.+)$/;
         Jn(D => 0.22, "D ".@m." $tot", '{hs:5.5.3.8,fs:5}');
     }
     my @o;
     my $i = 0;
     for my $n (@m) {
         my $d;
         $n =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s+\S+\s+\S+)\s+(.+)$/;
         if (!$tot && @m == 1 && $7 eq $u) {
             Jn(Size => 0.24, $5, '{hs:4.5.3.8,fs:7}');
             Jn(Time => 0.25, $6, '{hs:5.5.3.8,fs:5}');
             last;
         }
         return if J.cv < 0.4;
         d.t = "$7";
         my $sc;
         sc.mode = $1;
         sc.size = $5;
         sc.time = $6;
         sc.dir = 1 if sc.mode =~ /^d/;
         
         d.y.i = $i++;
         d.c.pi = "fol";
         d.sc.ml = '3em';
         d.c.s = "$u/d.t";
         d.c.sc = $sc;
         #d.c.cv = J.cv / 2;
         #push @o, $d;
         
         last if @o > 4;
     }
     
     # ire culture suggestions
     # make d.y.thi for the 3-6 M bal
     # where it shrinks if we pan missing
     # or if theres light bringing up the ab
     # 
     my $M = [@o];
     Rw om/bal $J $oM:M $V=1;

