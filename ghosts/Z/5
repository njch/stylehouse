R_Jz:
 - K: awm #c 
   n_D:
     yJ: |
       'awm clw gui heag'
     up: |
       my $coi = Rw pha $J $k=jo;
       
       Jn(',',0.9,',');
       Rw suck */upl;
       
       my $M=[];
       Rw the + on $M;
       Jn('hihi',{o=>$M});
       say "comat ".F_delta;
       
       coi.exactl->();
       
       
 - K: wo1 #c 
   n_D:
     yJ: |
       'awm'
     on: |
       twzng 0.1 ghosts/J {ou:eye}
       
 - K: wam #c 
   n_D:
     yJ: |
       'awm'
     on: |
       twang 0.1 w {ou:eye}
       #twzng 0.5 J/2 {dir:ghosts,ou:file}
 - K: very #c tak tlv into space, ready for lx/suro
   D: |
       my $N = Rw tyc $J;
       for (@$N) {
           # mod to space volve, indi... lifeupstyle
           _.y = {};
           _.c.pi = _.sc.ou if _.sc.ou;
           #_.y.thy=_.sc.thy # from on
       }
       $N;
 - K: pi/eye #c
   D: |
     my $file = $u;
     J.V = 1;
     J.d.c.path = 'amp';
     Jn('ey',0.09,"ey",'{hs:636}');
     Jn('file',0.1,"$file",'{hs:277}');
     Jn($file,{o=>{}},{pi=>'ls',s=>$file});
     J.V = 0;
 - K: pi/ls #c
   D: |
     my $file = $u;
     
     J.V = 1 if J.d.t =~ /bol/;
     my @ma = map{fixutf8($_);chomp;$_}`/bin/ls -1 '$file'`;
     Jn('fiule',0.1,"J.d.t",'{hs:7579}');
     
     return  if J.d.y.spc < 0.02;
     J.d.c.pwth = 'somewhere';
     
     my $oM=[];
     if (@ma == 1 && $ma[0] eq $u) {
         Jn('-f',0.2,'-f');
         oMn('.','',{pi=>'fi',s=>$file});
     }
     elsif (!@ma) {
         Jn("not",0.2,"!:$!",'{co:fca}');
     }
     else {
         Jn('diry',0.2,'/','{hs:3555}');
         my $rl = int(14 * (J.d.y.spc / 0.3 * J.d.y.spc));
         $rl = 3 if $rl < 3;
         @ma = @ma[0..$rl] if @ma > $rl;
         oMn($_,{},{pi=>'ls',s=>"$u/$_"}) for @ma;
     }
     Jn('ls',{o=>$oM},{});
     
 - K: somewhere #c
   D: |
     my $J = J2.sc.pi;
     die join"\n", reverse map{gp $_} $J, J.Jiter, J.Jiter.Jiter;
 - K: pi/fi #c -f
   D: |
     my $file = '`?';#`file '$u'`;
     $file =~ s/^\Q$u: \E//;
     chomp $file;
     $file ||= "/?";
     Jn('mimey',0.2,$file,'{fs:7}');
 - K: pi/file #c
   D: |
     my $file = $u;
     defined $file || die 'nofile';
     if (my $dir = C.sc.dir) {
         $dir =~ s/\/?$/\//;
         $file = "$dir$file";
     }
     sayyl "oufile: $file";
     
     Jn("filename",0.1,$file,'{fs:20,hs:5563}');
     
     my $o = Rw fil/o $file;
     
     Jn('nmyd',{o=>$o});
     sayre J.r."   ".ki J.d.y;
 - K: anno/o #c
   D:
   -
    - el
    - 2
    - |
      if (my $o = d.y.o) {
         if (ref $o eq 'ARRAY') {
             $o = d.y.o = {M=>$o};
         }
         else {
             o.M ||= [$d];
             o.M = [map{
                 my $d;
                 d.t = _.t;
                 d.y = {%{_.y}};
                 d.c = _.c;
                 delete d.y.cv;
                 if (o.ou) {
                     d.c.pi = o.ou;
                     d.c.s = $_;
                 }
                 if (o.oJ) {
                      d.sc.oJ = o.oJ;
                 }
                 $d
             }@{o.M}]
         }
         d.y.bal = o.M || die"nomo";
         
         my $Jy = J.d.y;
         d.y.o.J = J.most.J if $Jy && Jy.o && Jy.aspace > 0.2;
         d.y.over = (Jy.o && Jy.over && Jy.over || 0) + 0.06 if d.y.o.J;
         d.y.in ||= $Jy ? Jy.cv + 0.03 : 0.1;
         d.y.out ||= $Jy ? Jy.ov - 0.03 : 0.9;
         d.c.lumfa = 1;
         
      }
      if (d.c.lumfa) {
         my $lum = 3;
         my $i = 0;
         for (@{d.y.bal}) {
             _.y.thy=$lum;
             $i++;
             $lum = 2 if $i == 4;
             $lum = 1 if $i == 7;
         }
      }
   -
    - yongbal
    - 2.1
    - |
       d.y.thi = @{d.y.bal} if d.y.bal;
   -
    - yang 
    - 2.7
    - |
           if (y.bal) {
               if (!defined $muav) {
                   my $s = sum map{_.y.thy} @{y.bal};
                   my $ov = @{y.bal};
                   $muav = $s/($ov||1);
                   $muav ||= 1;
               }
               my $b = y.bal->[iy.i];
               $mu = b.y.thy if exists b.y.thy;
               
               
               $mu = $mu / ($muav||1);
               
               #saybl wdump 2, $b;
               do {
               say "J.d.c.cv * y.aspace * $mu  === ". (J.d.c.cv * y.aspace * $mu);
              b.c.cv ||= J.d.c.cv * y.aspace * $mu
               } if J.d.c.cv && b.y.thy;
           }
   -
    - yangbalin # 
    - 3.21
    - |
       my $y = d.y;
       if (d.y.bal) {
           # locality
           my $b = d.y.bal->[d.y.i];
           say "G.jumb.yos BAL d.y.i at d.cv    --- d.y.uyiv   ".ki 1, $b if J.V;
           # mergins... maybe theres a weird lma in b saying replaceall or so
           # anything could be alive
           for my $k (keys %$b) { # c etc merg in per row
               my $v = $b->{$k};
               if (ref $v) {
                   $d->{$k} = {%{$d->{$k}||{}}, %$v};
               }
               else {
                   $d->{$k} = $v;
               }
           }
       }
       d.r = join "\t", d.t, (d.cv+0);
       d.y.spc = d.y.ov - d.y.cv;
       d.y->{$_} = 0+sprintf('%.6f',d.y->{$_}) for qw'cv ov aspace spc';
       
       if (d.c.lumfa) {
           my $fl = (d.y.spc / 0.02) * 4;
           #sayyl "d.t   d.y.ov - d.y.cv  ::: d.y.spc d.y.aspace \t\t $fl";
           d.sc.fs = $fl if $fl < 9;
           d.sc.tt="d.t at d.y.cv for d.y.spc";
       }
       if (d.y.over) {
           d.sc.ml = (d.y.over * 40)."%"; 
       }
 - K: inmid #c
   D: |
     my $y = J.d.y;
     my $oM = [];
     oMn("what",{thy=>1},"y.cv out=".(0+y.ov),'{fs:8,hs:3.5.6.9}');
     
     my $lum = 3;
     my $i = 0;
     for (@{o.M}) {
         oMn(_.t, {thy=>$lum,%{_.y}}, {pi=>o.ou,s=>$_},{oJ=>o.oJ});
         $i++;
         $lum = 2 if $i == 4;
         $lum = 1 if $i == 7;
     }
     
     oMn("what",
     {thy=>1},
     "");
     
     delete _.y.cv for @$oM;
     
     my $thic = y.ov - y.cv;
     warn "THICKNESS of J.r : y.ov - y.cv    (".$thic;
     my $y = {in => y.cv+0.06, out => y.ov};
     
     Rw om/bal $J:J.Jiter $oM $t=thelov $y;
     
 - K: pi/lie #c s = d/C for a file
   D: |
     my $sc = u.sc;
     
     J.d.c.pwth='J5:cod';
       
     #Jn(catch => 0.03, {pi=>'hangleft',s=>{pi=>'text',s=>sc.r},scwa=>'right:0em'}, '{ab:1,hs:3 9 7 9,fs:13}');
     #Jn(lines => 0.07, {pi=>'hangleft',s=>sc.lines}, '{ab:1,co:f42,fs:13}');
     #Jn(linein => 0.034, {pi=>'hangleft',s=>sc.in,scwa=>'right:3em'}, '{ab:1,co:e72,fs:10}');
     
     
     #my $ind = $1 if sc.h =~ /^(.+?)\Qsc.K\E/;
     #my $al = $1 if sc.h =~ /\Qsc.K\E(.+)$/;
     #Jn(ind => 0.09, $ind, "{co:38e,fs:12}");
     Jn(K => 0.1, sc.K, "{hs:347,fs:17}");
     # go look for the right side of /K
     #Jn(al => 0.11, {fadwi=>$al,s=>slm(20, $al)}, "{co:5ae,fs:12}");
     
     
     #Jn(com => 0.3, {s=>sc.com}, '{co:342,fs:9}');
     #Jn(
 - K: fil #c index of files?
   n_D:
     yJ: |
       'fil'
     o: |
       my $f = Rw fil/e;
       my $o = {};
       Rw around $J:f $o;
       $o;
     e: |
       my $J = Rw J5 - fil;
       my $fid = slm 8, dig $file;
       my $fJ = J.bb->{"$fid\t0.1"};
       if (!$fJ) {
           $fJ = Rw oJ $J $name=lie.$fid $style=lie;
           fJ.bz->("file\t0.1" => $file);
           J.bz->("$fid\t0.1", $fJ, '%file'=>$file);
       }
       $fJ
 - K: lie #c one file vector, expanding reconvening substructure of io mess to artifacts and stuff in 0.8
   n_D:
     yJ: |
       'lie'
     in: |
       my $o = {};
       Rw around $J $o;
       my ($it) = grep { _.t eq u.t && _.y.cv == u.y.cv } @{o.M};
       $it || die "u.t   u.y.cv not found!";
       it.sc.dig eq u.sc.dig || die "NOT UP";
       it.c.s = u.c.s;
       #die wdump [$it, $u];
       my $file = J.bb->{"file\t".0.1};
       
       write_file($file, join("\n", map {_.c.s} @{o.M})."\n\n");
       
       Rw around;
       
       say "Saved?";
     around: |
       J.cv ||= 0.5;
       Rw lief $J;
       ar.o &&
       Rw out;
       sayyl "Doof ". F_delta;
     out: |
       my $out = Rw tyc $J;
       my @hum = sort {a.sc.in<=>b.sc.in} grep{_.y.cv == 0.4} @$out;
       o.M = \@hum;
       o.oJ = $J;
       o.ou = 'lie';
 - K: lief/flows/folate #c
   D: |
     flow 1  {} {}
     stat 6.1 {} {tv:file,et:0}
     read 6.2 {} {tv:file,et:130}
     jam  6.3 {} {tv:read,et:340}
 - K: folate/flow #c
   D: |
     # 2
     for my $c (@{wJ.tvs}) {
         my $coi = Rw pha $J $k=c.K/c.v;
         
         coi.off = c.sc.et if defined c.sc.et;
         sayyl "Trying c.K    c.v        off=coi.off";
         
         my $ip;
         ip.l = c.sc.tv if c.sc.tv;
         my $vs = Rw tyv $J $ip;
         
         my $nc = Rw lv_same $vs $x:coi $J $V=1;
         next if $nc;
         
         die if @$vs > 1;
         for my $lv (@$vs) {
             my $j = lv.j;
             # resolve $offness, add $and to lv_same
             # if change exactl swoops an init linehum wd
             
             sayyl "c.v Effect: c.K ";
             saybl "In: j.r   => ".slim 20, j.s;
               
             my $at = {};
             Rw c.wa $J $j $at $c $sc:lv.sc;
               # ^
               # at travels fast
               # v
               Rw jamsc $J $j $sc:at;
               
               # STYLE
          }
          coi.same_wd ||= do { # catchup (all wong)
              my $vs = Rw tyv $J $ip;
              delete coi.off;
              Rw lv_same $vs $x:coi $J $ret=1 $V=1;
          };
          
          coi.V = 1;
          my $y = coi.exactl->();
       }
 - K: folate/stat #c
   D: |
     at.is_file = -f j.s;
     my @s = stat j.s;
     at.size = $s[7];
     at.mtime = $s[9];
     at.ctime = $s[10];
 - K: folate/read #
   D: |
     my $s = read_file(j.s);
     my $dig = dig $s;
     Jn('read' => 0.3 => $s, {dig=>$dig});
     at.dig = $dig;
 - K: folate/jam #
   D: |
         my $i = 0;
         my $l = {map { $i++ => $_ } split "\n", j.s};
         Jn('lines' => 0.3 => $l);
         my @bu;
         my @nol;
         for my $li (sort {$a<=>$b} keys %$l) {
             my $n = {in=>$li};
             n.s = $l->{$li};
             n.h = n.s;
             
             if (n.s =~ /^.?.?\w/) {
                 n.r = 'low';
             }
             if (n.s =~ /#(c)(.*)$/) {
                 n.r = 'c';
                 n.com = $2 if $2;
             }
             
             n.K = $1 if n.s =~ /K: (\w+[^#]+)/; 
             n.K ||= $1 if n.s =~ /^[^#]*?(\w+[^#]+)/;
             n.K =~ s/\s+$// if n.K;
             if (n.r && n.K) {
                 if (@nol) {
                     n.s = join"\n",@nol,n.s;
                     @nol = ();
                     n.in = 0;
                 }
                 push @bu, $n;
             }
             elsif (@bu) {
                 my $las = $bu[-1]; 
                 las.s .= "\n".n.s;
                 las.out = $li;
             }
             else {
                 push @nol, n.s
             }
         }
         for my $n (@bu) {
             my $s = delete n.s;
             $s||die;
             n.dig = slm 7, dig $s;
             n.lines = split "\n", $s;
             my $j;
             j.l = n.K||n.h;
             j.l =~ s/[^\w]+//sgm;
             j.cv = 0.4;
             Jn(j.l, j.cv, $s);
             Rw jamsc $J $j $sc:n;
             #saybl "N: n.K        ".slim 40, ki $n;
         }
 - K: pi/fol #c
   D: |
     # LOOK FOR KNOWNS, scoped in wormhole
     die if ref $u;
     Jn(ei => 0.0008, "<br/>", {ishtml=>1});
     Jn(name => 0.1, {pi=>'text',s=>J.d.t,cv=>0.2});
     
     my $c = J.d.c;
     sayyl "is looking $u  J.cv c.cv";
     
     
     
     my @m = map{fixutf8($_);chomp;$_}`/bin/ls -lHh '$u'`
      unless c.mode && !c.dir;
     #die gp J.most.J;
     
     my $tot = shift @m if $m[0] =~ /^total/;
     if ($tot) {
         $tot = $1 if $tot =~ /^total (.+)$/;
         Jn(D => 0.22, "D ".@m." $tot", '{hs:5.5.3.8,fs:5}');
     }
     my @o;
     my $i = 0;
     for my $n (@m) {
         my $d;
         $n =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s+\S+\s+\S+)\s+(.+)$/;
         if (!$tot && @m == 1 && $7 eq $u) {
             Jn(Size => 0.24, $5, '{hs:4.5.3.8,fs:7}');
             Jn(Time => 0.25, $6, '{hs:5.5.3.8,fs:5}');
             last;
         }
         return if J.cv < 0.4;
         d.t = "$7";
         my $sc;
         sc.mode = $1;
         sc.size = $5;
         sc.time = $6;
         sc.dir = 1 if sc.mode =~ /^d/;
         
         d.y.i = $i++;
         d.c.pi = "fol";
         d.sc.ml = '3em';
         d.c.s = "$u/d.t";
         d.c.sc = $sc;
         #d.c.cv = J.cv / 2;
         #push @o, $d;
         
         last if @o > 4;
     }
     
     # ire culture suggestions
     # make d.y.thi for the 3-6 M bal
     # where it shrinks if we pan missing
     # or if theres light bringing up the ab
     # 
     my $M = [@o];
     Rw om/bal $J $oM:M $V=1;

