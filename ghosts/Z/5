R_Jz:

 - K: wo1 #c 
   n_D:
     yJ: |
       'clw headi mooJ shav'
     flows:
       xorg: |
         flow 1
         onx 3
         may 7
     up: | # if the in up, pha wakeups out - all response to editing
       J.d.thi = 20;
       J.mody = 'anno';
       J.most.eo = 'geomo';
       
       J.V = 1;
       J.d.t = 'www';
       my $coi = Rw pha $J $k=jo;
       #Rw pi/fol $J $u=eye;
       Jn(eye => 0.1, '{pi:fol,s:eye/fug}');
       
       J.V = 0;
       coi.exactl->();
       
       Rw flow $J xorg;
       
 - K: pi/fol #c
   D: |
     # LOOK FOR KNOWNS, scoped in wormhole
     die if ref $u;
     Jn(name => 0.1, {pi=>'text',s=>J.d.t,cv=>0.2});
     
     my @m = map{$H->fixutf8($_);chomp;$_}`/bin/ls -lh '$u'`;
     #die gp J.most.J;
     
     my $tot = shift @m if $m[0] =~ /^total/;
     if ($tot) {
         Jn(D => 0.22, 'D');
         Jn(tot => 0.22, $tot);
     }
     my @o;
     my $i = 0;
     for my $n (@m) {
         my $d;
         $n =~ /^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+\s+\S+\s+\S+)\s+(.+)$/;
         if (!$tot && @m == 1 && $7 eq $u) {
             Jn(Size => 0.24, $5, '{hs:4.5.3.8,fs:7}');
             Jn(Time => 0.25, $6, '{hs:5.5.3.8,fs:5}');
             last;
         }
         d.t = $7;
         d.y.i = $i++;
         d.c.s = "$u/$7";
         d.c.pi = "fol";
         d.c.sc.size = $5;
         d.c.sc.time = $6;
         push @o, $d;
         last if @o > 5;
     }
     
     # ire culture suggestions
     # make d.y.thi for the 3-6 M bal
     # where it shrinks if we pan missing
     # or if theres light bringing up the ab
     # 
     my $M = [@o];
     Rw om/bal $J $oM:M;
     #die wdump $M;
     #Rw vary $J $M;#
     Jn(ei => 0.8, "<br/>", {ishtml=>1});
     
 - K: vary #c tak tlv into space, ready for lx/suro
   D: |
       my $out = ar.out || 0.9;
       my $in = ar.in || 0.1;
       my $sec = $out - $in; # <-0.8->
       my $thi = $sec / (@$M||1); # or indi
       
       # thi of $lv individuality
       my $tin = $in;
       for my $x (@$lvs) {
           # go higher and pipe mods to squish space, vary $thi (other ways to)
           x.thi = $tot * $thi;
           x.phi = $thi;
           x.in = $tin;
           x.out = $tin + $thi;
           $tin = x.out; # next
           # space volve, indi...
           saybl "blbl x.j.r   $tot * $thi =  x.thi    ($tot $sec)";
           
           my $j = x.j;
           if (!J.q) {
               say "up on ".gp($J)."    j.r    ".slim 200, gp(j.s);
               say "   * _.r          => ".gp(_.s) for values %{x.sj};
               say "up around x.in <-> x.out"
           }
       }
       $lvs
       
 - K: jf #c
   D: |
     my $o = Rw pul name;
     my $ip = {t=>o.name};
     my @f = Rw tvo $J $ip;
     scalar @f;
 - K: xorg/flow #c
   D:
   -
    - flow
    - 1
    - |
       my $coi = Rw pha $J $k=upix;
       Rw Jhead $J;
    
   -
    - flowered
    - 4.9
    - |
       coi.exactl->();
    
 - K: xorg/onx #c
   D:
   -
    - onx
    - 2.2
    - |
       my $oJ = Rw oJ $J onx;
       my $nc = Rw up $J:oJ;
       return sayre(("ABABAN") x 5) && coi.abandon->('same on') if $nc;
       
       Rw nxor $J $oJ;
       
       Rw oJ $J geo &up;
 - K: xorg/may #c
   D:
   -
    - may
    - 8
    - |
       Rw may $J;
       say "comat ".F_delta;
     
 - K: nxor #c
   D: |
       my $onl = Rw very $in=0.1 $out=0.9 $J:oJ $tot:J.cv;
       for my $x (@$onl) {
           my $M = [];
           Mn(x.j.l.'-cap' => {thy=>x.thi/5},{pi=>'infrom',s=>$x});
           
           my $o = Rw oundo $x;
           say "   oundoof: ".F_delta;
           my $thy = x.thi / (o.thi||1);
           
           
           for my $r (@{o.r}) {
               #say join " ", sort keys %$r;
               my $fs = sprintf '%.2f', $thy * 9;
               #say " This n x.thi  o o.thi   ==  $thy      $fs";
               Mn( "xor/r.t", {thy=>$thy},
                  {pi=>'xor',x=>$x,o=>$o,r=>$r,cv=>0.6,pwth=>'J5:cod'},
                  {fs=>$fs});
           }
           if (o.more) {
               Rw ii/more $x $o $M;
           }
           Rw om/bal $J $oM:M $t:x.j.l $thi:x.thi $in:x.in $out:x.out;
       }

