R_Jz:
 - K: flow #c K-flow
   D: |
     my $name = $m->[0];
     my $oJ = Rw oJ $J $name $style=fl;
     Rw up $J:oJ;
 - K: fl #c stitch at/cs solvents via $oJ/flows/M(Carbony patchbay)
   n_D:
     yJ: |
       'fl'
     up: |
       # later shoot out only changed words
       my $h = slm 8, dig ejson[J.Jo.style,J.name];
       
       my $cJ = G.drop.flows->{$h} ||= Rw fl/op;
       
       R.way.hooks.fl->{$h} = cJ.way;
       
       Rw fl/$h/flow $J:J.Jo $fJ:J $cJ;
       #   this ^ for ^ bits ^ loaf ^
     op: |
       # 
       Rw thy $J:J.Jo $oJ:J flows/J.name;
       
       my $vs = Rw tyv $J;
       
       my $cJ = Rw oJ $J way;
       Rw suJ $J:ctJ;
       
       # all these ways
       # "Bloody Zipper" plays
       @$vs||die"novs J.name";
       for my $lv (@$vs) { 
           my $j = lv.j;
           sayre "Stitchup j.r    ".ki lv.sc;
           
           my $Z = Rw muck - J.name/j.l;
           my ($s,$no) = values %$Z;
           say $s;
           
           die "wtf".wdump$Z if $no || ref $s eq 'HASH';
           if (ref $s eq 'ARRAY') {
               # mod styley into j.l
           }
           next;
           #wJ.bz->(j.
               
               die wdump $s;
               die "J.flow/j.l $Z";
               die wdump R.way.hooks.folate;
               #J.way = j.s if 
       }
       say wdump [ J.name." styled way: "=>J.way ];
       
       $cJ

