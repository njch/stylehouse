R_Jz:
 - K: onx #c
   n_D:
     yJ: |
       'on';
     up: | # tak tlv J.on into iterations of upgoing clever
       Rw thy $oJ:J $J:J.Jo defon;
       
       
 - K: wo1 #c 
   n_D:
     defon: |
       #twang 0.1 Z/2
       #twong 0.1 Z/3
       twzng 0.1 Z/7
     yJ: |
       'clw headi'
     flows:
       xorg: |
         flow 1
         onx 3
         may 7
     up: | # if the in up, pha wakeups out - all response to editing
       J.cv = 20;
       Rw flow $J xorg;
       
 - K: xorg/flow #c
   D:
   -
    - flow
    - 1
    - |
       my $coi = Rw pha $J $k=upix;
       Rw Jhead $J;
    
   -
    - flowered
    - 4.9
    - |
       coi.exactl->();
    
 - K: xorg/onx #c
   D:
   -
    - onx
    - 2.2
    - |
       my $oJ = Rw oJ $J onx;
       my $nc = Rw up $J:oJ;
       return sayre(("ABABAN") x 5) && coi.abandon->('same on') if $nc;
       
       Rw nxor $J $oJ;
       
       Rw oJ $J geo &up;
 - K: xorg/may #c
   D:
   -
    - may
    - 8
    - |
       Rw may $J;
       say "comat ".F_delta;
     
 - K: nxor #c
   D: |
       my $onl = Rw very $in=0.1 $out=0.9 $J:oJ $tot:J.cv;
       for my $x (@$onl) {
           my $M = [];
           Mn(x.j.l.'-cap' => {thy=>x.thi/5},{pi=>'infrom',s=>$x});
           
           my $o = Rw oundo $x;
           say "   oundoof: ".F_delta;
           my $thy = x.thi / (o.thi||1);
           
           
           for my $r (@{o.r}) {
               #say join " ", sort keys %$r;
               my $fs = sprintf '%.2f', $thy * 9;
               #say " This n x.thi  o o.thi   ==  $thy      $fs";
               Mn( "xor/r.t", {thy=>$thy},
                  {pi=>'xor',x=>$x,o=>$o,r=>$r,cv=>0.6,pwth=>'J5:cod'},
                  {fs=>$fs});
           }
           if (o.more) {
               Rw ii/more $x $o $M;
           }
           Rw om/bal $J $oM:M $t:x.j.l $thi:x.thi $in:x.in $out:x.out;
       }

