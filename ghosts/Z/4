R_Jz:

 - K: yo #c     yrec $d
   D: |
     G.jumb.yos .= '    ';
     aft { G.jumb.yos =~ s/    $//; };
     if (!ar.q && !J.q && ar.V || J.V) {
         sayyl "G.jumb.yos@@@@   yo:  ar.k     d.t   ".ki(d.y)."     %  "
             .ki(d.c||{})."      %  ".ki(d.sc||{})
     }
     
     my $nam;
     if ($nam = J.mody || J.most.mody) {
         Rw $nam;
     }
     else {
         Rw mod +;
     }
     
     
 - K: ano/flows/anno #c
   D: |
     #MZ pa:mooj
     flow 1
     Y 2
     i 2
     a 2
     o 2
     b 7
     C 5
     pi 3
 - K: mani/flows/anno #c
   D: |
     #MZ pa:mooj
     flow 1
     Y 2
     i 2
     a 2
     o 2
     b 7
     C 5
     opi 3
 - K: anno/flow #c
   D: |
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     my $A = {J=>$J,is=>[]};
     my $C = $d; # moves inside
     
     # 2.8
     my $dd = $d;
     @{A.is}||die'nois'.wdump[$C,$A];
     my @d;
     for my $is (@{A.is}) { # THE TIR drop at hands
           my $d = $is; # first only & then yanga
           push @d, $d;
           
           # 2.9
           
           # 7.9
     }
     # 9
     return @d
 - K: anno/C #c
   D:
    -
     - cts_C #
     - 5
     - |
       my $g = wJ.ctx.C;
       for my $ct (@{wJ.cts.C}) {
           next unless ct.any or exists $d->{ct.t_k}->{ct.t};
           my $v = $d->{ct.t_k}->{ct.t} unless ct.any;
           my $at = {};
           my $A = {J=>$J,d=>$d}; 
           my $C = $d; # bendy stick throw
           my $T = $at;
           
           wJ.ctx.C->{ct.x}->($A,$C,$g,$T,$J,$d,$v,$at);
           
           for my $k (keys %$at) {
               d.sc->{$k} = $at->{$k};
           }
       }
    - EZ: anno/pathy
    - EZ: anno/nots
 - K: ym/sticks #c
   D: |
     n.sc.nx = $v =~ s/^x//;
     n.sc.dat.any = 1 if $v =~ s/any//;
     delete n.sc.t_k if n.sc.any;
     $v =~ s/\s+//g;
     n.sc.ct = $v;
     n.sc.args = join',',map{'$'.$_}split',',n.sc.args
         if n.sc.args && n.sc.args !~ /\$/;
     n.sc->{"ct_${v}_args"} = n.sc.args || '$A,$C,$g,$T,$J,$j,$v,$at';
     #n.sc.way = 1 unless n.sc.nx;
 - K: ym/moz #c
   D: |
     n.sc.args ||= '$A,$C,$g,$T,$J,$d,$v,$at';
     n.sc.t_k ||= 'c';
     #n.sc.way = 1;
     Rw ym/sticks;
 - K: ym/isway #c
   D: |
     n.sc.way = 1;
 - K: ym/ensc #c
   D: |
     n.sc.t_k ||= 'sc';
     Rw ym/moz;
 - K: ym/Cy #c
   D: |
     n.sc.t_k ||= 'y';
     n.sc.args ||= '$A,$C,$g,$T,$y,$v';
     Rw ym/moz;
 - K: ym/Cc #c
   D: |
     Rw ym/moz;
 - K: ym/Csc #c
   D: |
     Rw ym/ensc;
 - K: anno/nots #c
   D: |
   - MZ: ensc:C
   -
    - ou
    - 3
    - |
      C.c.pi = $v;
   -
    - oJ
    - 3
    - |
      v.WWsub = $J;
      
 - K: anno/pathy #c
   D:
   - MZ: moz:C
   -
    - pwth # -> !some/path exp. 8ery, 8ing
    - 7.1
    - |
       $v = "!$v" unless $v =~ /^\W/;
       C.c.path = $v;

   -
    - path # install cs path
    - 7.2
    - |
      at.path = $v;
      at.idly = 1 if !C.c.fo;
   -
    - pwar # take $ar cs path
    - 7.2
    - |
      at.pwar = $v;
   -
    - id #
    - 3
    - |
      at.id = $v;
 - K: anno/pi #c
   D:
   - MZ: moz:C
   -
    - J #
    - 3
    - |
      C.t ||= v.name;
      C.y.cv ||= 0.3;
      at.J = $v;
   -
    - s # d.c.s -> d.s
    - 2
    - |
      d.s = $v;
   -
    - pi # d.c.s -> d.s
    - 2
    - |
      d.s = "ou?$v";

   -
    - pi # modulapi
    - 3
    - |
       my $oJ = $J;
       #Ajr("BLAH");
       
       $J = Rw spinash $J;
       at.J = $J;
       at.pi = J.y = d.c.pi;
       J.d = J.C = $d;
       J.u = d.c.s;
       ; # jo ma in lo
       J.r = d.r; # be adjusting this xor
       Rw mkJid $J;
       J.bz->("/\t0.9" => "y");
    - way: 1
   -
    - pi # modulapi
    - 6
    - |
       my $oJ = $J;
       $J = C.sc.J||die;
       my $A = J.most.A||{};
       $A = J.A = {%$A};
       A.in = $G->gip(J.Jiter.A.in, C.t)||{};
       
       my $T = {};
       
       my $M=[];
       my $y = {o=>$M};
       
       $v = C.sc.J||die;
       v.cv = C.c.gp.cv || C.c.cv || 0.6;
       die'csnod' if v.d ne $d || v.d.c ne d.c;
       


       J.yg = Rw pipathg $J; 
       
       
       # G is... suck */etc with trails
       # 
       
       Rw J.yg $A $J $u:J.u $C:J.C $M $y; 
       
       Jn('zoo',$y) if @$M;
       
    - way: 1
   -
    - pi #
    - 7
    - |
       $v = C.sc.J||die;
       # can pin/ping light source of con paral
       my $name = v.most.eo || die "noeo";
       
       my $aj = Rw $name $J:v $catj=1;
       die aj.s if aj.s;
       
       #sayre "Upto J.r go ".slim 70, sjson aj.c if @{aj.c};
       v.Ec = [@{aj.c}];
       die wdump $aj if @{aj.sc};
    - way: 1
 - K: mooj/b #c
   D:
   - 
    - yango # form of d.r, 
    - 7
    - |
       # bal may mod t, this may wannab 
       d.r = join "\t", d.t, (d.y.cv+0); # always update trio
       my $J = d.y.o && d.y.o.J || $J;
       Rw jamsc $J $d $s:d.s $sc:d.sc;
 - K: mooj/a #c
   D:
   -
    - yanga # flicker inwave, background language expansion, dewey mezrow
    - 3.1
    - |
       d.c || die;
       d.y.cv || die "nod d.y.cv  .. ".wdump 3, [$C,$d];
       d.r = join "\t", d.t, (d.y.cv+0); # always update trio
       
       d.sc = {%{d.sc||{}}};

