R_Jz:

 - K: yo #c     yrec $d
   D: |
     G.jumb.yos .= '    ';
     if (!ar.q && !J.q && ar.V || J.V) {
         sayyl "G.jumb.yos@@@@   yo:  ar.k     d.t   ".ki(d.y)."     %  "
             .ki(d.c||{})."      %  ".ki(d.sc||{})
     }
     
     my $nam;
     if ($nam = J.mody || J.most.mody) {
         Rw $nam;
     }
     else {
         Rw mod +;
     }
     G.jumb.yos =~ s/    $//;
     
 - K: ano/flows/anno #c
   D: |
     #MZ pa:mooj
     flow 1
     i 2
     a 2
     su 3
       
 - K: anno/su #c
   D:
    -
     - cts_C #
     - 3.3224
     - |
       for my $ct (@{wJ.cts.C}) {
           next unless exists d.c->{ct.t};
           my $v = d.c->{ct.t};
           my $at = {};
           wJ.ctx.C->{ct.x}->($J,$d,d.t,$c,d.sc,$at,$v);
           for my $k (keys %$at) {
               d.cs->{"$k#".ct.x} = d.sc->{$k} = $at->{$k};
           }
       }
       for my $cs (d.sc, d.cs) {
           push @{d.css}, map { '%'.$_ => $cs->{$_} } sort keys %$cs;
       }
    - EZ: anno/pi
    - EZ: anno/pathy
 - K: anno/pathy #c
   D:
   - MZ: dorp:ct_C
   -
    - pwth # -> !some/path exp. 8ery, 8ing
    - 7.1
    - |
       $v = "!$v" unless $v =~ /^\W/;
       c.path = $v;

   -
    - path # install cs path
    - 7.2
    - |
      at.path = $v;
      at.idly = 1 if !c.fo;
      at.tt = "$v";
   -
    - pwar # take $ar cs path
    - 7.2
    - |
      at.pwar = $v;
   -
    - id #
    - 3
    - |
      at.id = $v;
   -
    - J #
    - 3
    - |
      d.t ||= v.name;
      d.cv ||= 0.3;
      d.s ||= $v;
      at.J = $v;
     
 - K: anno/pi #c
   D:
   - MZ: dorp:ct_C
   -
    - s # d.c.s -> d.s
    - 2
    - |
      d.s = $v;
   -
    - ou # d.c.s -> d.s
    - 2
    - |
      d.s = $v;

   -
    - pi # modulapi
    - 3.2
    - |
       $v = at.pi = Rw spinash $J;
       v.u = d.c.s;
       v.y = d.c.pi; # jo ma in lo
       d.c.pi = $v; # becom pipey
       v.d = $d;
       v.r = d.r; # be adjusting this xor
       Rw mkJid $J:v;
       v.bz->("/\t0.9" => "y");
    - way: 1
   -
    - pi # modulapi
    - 3.4
    - |
       v.cv = c.gp.cv || c.cv || 0.6;
       die'csnod' if v.d ne $d || v.d.c ne $c;

       Rw pir $J:v;
    - way: 1
   -
    - pi #
    - 3.7
    - |
       # can pin/ping light source of con paral
       my $J = $v;
       if (my $name = J.most.eo) {
           my $aj = Rw $name $J $catj=1;
           die aj.s if aj.s;
           d.s = undef;
           
           
           #sayre "Upto J.r go ".slim 70, sjson aj.c if @{aj.c};
           J.Ec = [@{aj.c}];
           
           die wdump $aj if @{aj.sc};
       }
       else {
         die 'hi';
           d.s = v.s = Rw maka $J:v;
       }
    - way: 1
 - K: anno/flow #c
   D: |
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     my @is;
     my $n;
     
     # 1.9
     my $dd = $d;
     @is||die'nois';
     for my $is (@is) { # THE TIR drop at hands
           my $d = {%$dd}; # first only & then yanga
           # 2
           
           # 8
           my $ch = {@{d.css}};
           #die d.r if d.r !~ /\w\s/;
           saybl ind("G.jumb.yos ",join"\n","Post:  "
           ."d.r  \t\t  'd.s'       ",map{
           " $_ => ".slim 140, gp($ch->{$_})
           }sort keys %$ch) if J.V;
           if (c.lev) {
               J.lev->(
                   d.r => c.lev,
                   @{d.css},
               );
           }
           else {
               J.bz->(
                   d.r => d.s,
                   @{d.css},
               );
           }
     }
 - K: mooj/i #c
   D:
   -
    - yinvo #c build wave manifold, fore loop
    - 1.4
    - |
       d.y = {thi => d.y} if !ref d.y;
       my $y = d.y;
       y.thi = @{y.bal} if y.bal;
       
       die if y.cv && y.in;
       y.in ||= 0.1; 
       y.out ||= 0.9; # up to
       y.thi ||= 1;
       y.space = y.out - y.in; # could spiral much space away from spine
       y.space *= -1 unless y.space > 0;
       y.aspace = y.space / y.thi;
       
       
       # twist, lay into segment
       my $csv = defined y.cv ? y.cv : defined y.in ? y.in : die "no yiny".ki$y;
       my $muav;
       for (1..y.thi) {
           my $iy;
           
           iy.i = $_-1;
           iy.cv = sprintf '%.6f', $csv;
           iy.pcv = sprintf '%.6f', $_ / y.thi;
           
           s/0+$/0/ for iy.cv, iy.pcv;
           push @is, $iy;
           
           my $mu = 1;
           if (y.bal) {
               if (!defined $muav) {
                   my $s = sum map{_.y.thy} @{y.bal};
                   my $ov = @{y.bal};
                   $muav = $s/($ov||1);
                   $muav ||= 1;
               }
               my $b = y.bal->[iy.i];
               $mu = b.y.thy if exists b.y.thy;
               
               
               $mu = $mu / ($muav||1);
               
               #saybl wdump 2, $b;
               do {
               say "J.d.c.cv * y.aspace * $mu  === ". (J.d.c.cv * y.aspace * $mu);
               b.c.cv ||= J.d.c.cv * y.aspace * $mu
               } if J.d.c.cv && b.y.thy;
           }
           my $muc = y.aspace * $mu;
           $csv += $muc;
           iy.ov = sprintf '%.6f', $csv;
       }
 - K: mooj/a #c
   D:
   -
    - yanga #c flicker inwave, background language expansion, dewey mezrow
    - 2.1
    - |
       d.c || die;
       d.y = {%{d.y||die}, %$is};
       d.cv = d.y.cv || die;
       d.pcv = d.y.pcv;
       
       d.sc = {%{d.sc||{}}};
       # same structure:
       d.cs = {%{d.cs||{}}};
       # ^ yanging mods attach style, main accum fet: cs.$modk.$ck = $c
       # ^ fed to esc which packs styles (default %css) with com: #$cometc$modk
       # some vaguely different piping there for P... grabbed from above I reckon...
       # and then it piles into the end of J.bz r, s, ...
       d.css = [@{d.css||[]}];
   -
    - yangbal #c    suddenly somewhere, pretend to be more somewhere
    - 2.2
    - |
       my $y = d.y;
       if (d.y.bal) {
           # locality
           my $b = d.y.bal->[d.y.i];
           say "G.jumb.yos BAL d.y.i at d.cv    --- d.y.uyiv   ".ki 1, $b if ar.V;
           # mergins... maybe theres a weird lma in b saying replaceall or so
           # anything could be alive
           for my $k (keys %$b) { # c etc merg in per row
               my $v = $b->{$k};
               if (ref $v) {
                   $d->{$k} = {%{$d->{$k}||{}}, %$v};
               }
               else {
                   $d->{$k} = $v;
               }
           }
       }
   -
    - yango #c form of d.r, 
    - 2.7
    - |
       # bal may mod t, this may wannab 
       d.r = join "\t", d.t, (d.cv+0); # always update trio
       
       
       my $c = d.c; # <v contation
       die "notrefc  $c" if !ref $c;

