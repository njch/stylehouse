R_Jz:
 - K: shv #c  and to compile J5 rounds ahead
   n_D:
     yJ: |
       'shv geomoss'
     curves: | 
       spun 0  2
       zoom 0 0.5
       y    0  0
       x    0  0.2
       curve 0 -0.1
     defon: |
       #twang 0.1 Z/2
       #twong 0.1 Z/3
     up: | # if the in up, pha wakeups out - all response to editing
       J.cv = 20;
       J.mody = 'anno';
       my $coi = Rw pha $J $k=shvs;
       Rw Jhead $J;
       
       Jn('someri',{thi=>4},'s','{fs:30,co:4c9}');
       
       Jn('some',0.3,'thing!');
       Jn('ee',0.4,'THINGS!'); 
       
       
       coi.exactl->();
       
       J.V = 1;
       Rw thi afghanrug/mods;
       #Rw thi unicrowd/mods;
       J.V = 0;
       
       
       Rw oJ $J geo &up;
        
       Rw flow $J geomo;   
 - K: mooj/o #c rejoin the pipelining - form style trance
   D:
   - 
    - dsc #c cs on d, outside mod twistor pipe, modline 4th
    - 7
    - |
       # non-thinking modulatios
       # you could say more compressed
       # usu static-ish spec, ie make this button green.
       
       # the sea of synapse we datum
       # mod spec lines go: [$l, $thi, 
       # they were found 
       # also any $sc maybe be like {$k => $sc, $k2 => $sc2}
       # for comments like v
       # so comp is the very last hash, the rest is where etc.
       #push @{d.css}, '%css#'.$_ => d.cs->{$_}
       #    for sort keys %{d.cs};
       
       sayyl wdump 2, d.cs;
       if (d.sc && %{d.sc}) {
           push @{d.css}, Rw esc $d $sc:d.sc SC;
       }
       # cs in da pipe, modulating or so
       # cs.$k.$sc -> squiggly first style compressions
       # the wilder pole, coming from mods
       # there's stuff across the whole line too
       # and what's between...
       # exp to css for now...
       if (d.cs && %{d.cs}) { 
           push @{d.css}, Rw esc $d $sc:d.cs CS;
       }
 - K: yo #c     yrec $d
   D: |
     G.jumb.yos .= '    ';
     if (!ar.q && !J.q && ar.V || J.V) {
         sayyl "G.jumb.yos@@@@   yo:  ar.k     d.t   ".ki(d.y)."     %  "
             .ki(d.c||{})."      %  ".ki(d.sc||{})
     }
     if (my $name = J.mody) {
         # mooJ keeps domey illusion, holy code
         my $wJ = Rw mo $name;
         Rw wJ.hw/flow + $wJ;
         saybl "mo ... ".F_delta();
     }
     else {
         Rw mod +;
     }
     G.jumb.yos =~ s/    $//;
     
 - K: mo #c prod modus operandi   J ( J:mooJ ) S )
   D: |
     my $oJ = Rw J5 - mooJ $noround=1;
     oJ.V = 1; 
     Rw flow + $J:oJ $re=1;
 - K: mooJ #c keeps common ground, set J.mody to yo via mo (mooJ)
   n_D:
     yJ: |
       'mooJ'
     flows:
       mooj: |
         flow 1
         i 2
         a 2
         u 2
         o 3
       anno: |
         #MZ pa:mooj
         flow 1
         i 2
         a 2
         u 2
         o 3
       
 - K: mooj/flow #c
   D: |
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     my @is;
     my $n;
     
     # 1.9
     my $dd = $d;
     @is||die'nois';
     for my $is (@is) { # THE TIR drop at hands
           my $d = {%$dd}; # first only & then yanga
           # 2
           
           # 8
           
           saybl "G.jumb.yos Post:  "
           ."d.r  \t\t  'd.s'       ".wdump({@{d.css}})
               if ar.V || ar.J.V;
           
           if (c.lev) {
               J.lev->(
                   d.r => c.lev,
                   @{d.css},
               );
           }
           else {
               J.bz->(
                   d.r => d.s,
                   @{d.css},
               );
           }
     }
 - K: mooj/u #c
   D:
    - MZ: dorp:cK
    - WZ: /C mod#pi
    - WZ: /C mod#fun
    -
      - s #c d.c.s -> d.s
      - 3.1
      - |
       d.s = $cs;
 - K: mooj/i #c
   D:
   -
    - yinvo #c build wave manifold, fore loop
    - 1.4
    - |
       d.y = {thi => d.y} if !ref d.y;
       my $y = d.y;
       y.thi = @{y.bal} if y.bal;
       
       die if y.cv && y.in;
       y.in ||= 0.1; 
       y.out ||= 0.9; # up to
       y.thi ||= 1;
       y.space = y.out - y.in; # could spiral much space away from spine
       y.space *= -1 unless y.space > 0;
       y.aspace = y.space / y.thi;
       
       # twist, lay into segment
       my $csv = defined y.cv ? y.cv : defined y.in ? y.in : die "no yiny".ki$y;
       my $muav;
       for (1..y.thi) {
           my $iy;
           
           iy.i = $_-1;
           iy.cv = sprintf '%.6f', $csv;
           iy.pcv = sprintf '%.6f', $_ / y.thi;
           
           s/0+$/0/ for iy.cv, iy.pcv;
           push @is, $iy;
           
           my $mu = 1;
           if (y.bal) {
               if (!defined $muav) {
                   my $s = sum map{_.y.thy} @{y.bal};
                   my $ov = @{y.bal};
                   $muav = $s/($ov||1);
                   $muav ||= 1;
               }
               my $b = y.bal->[iy.i];
               $mu = b.y.thy if exists b.y.thy;
               $mu = $mu / ($muav||1);
           }
           my $muc = y.aspace * $mu;
           $csv += $muc;
       }
 - K: mooj/a #c
   D:
   -
    - yanga #c flicker inwave, background language expansion, dewey mezrow
    - 2.1
    - |
       d.c || die;
       d.y = {%{d.y||die}, %$is};
       d.cv = d.y.cv || die;
       d.pcv = d.y.pcv;
       
       d.sc = {%{d.sc||{}}};
       # same structure:
       d.cs = {%{d.cs||{}}};
       # ^ yanging mods attach style, main accum fet: cs.$modk.$ck = $c
       # ^ fed to esc which packs styles (default %css) with com: #$cometc$modk
       # some vaguely different piping there for P... grabbed from above I reckon...
       # and then it piles into the end of J.bz r, s, ...
       d.css = [@{d.css||[]}];
   -
    - yangbal #c    suddenly somewhere, pretend to be more somewhere
    - 2.2
    - |
       my $y = d.y;
       if (d.y.bal) {
           # locality
           my $b = d.y.bal->[d.y.i];
           say "G.jumb.yos BAL d.y.i at d.cv    --- d.y.uyiv   ".ki 1, $b if ar.V;
           # mergins... maybe theres a weird lma in b saying replaceall or so
           # anything could be alive
           for my $k (keys %$b) { # c etc merg in per row
               my $v = $b->{$k};
               if (ref $v) {
                   $d->{$k} = {%{$d->{$k}||{}}, %$v};
               }
               else {
                   $d->{$k} = $v;
               }
           }
       }
   -
    - yango #c form of d.r, 
    - 2.7
    - |
       # bal may mod t, this may wannab 
       d.r = join "\t", d.t, (d.cv+0); # always update trio
       
       n.um = sprintf '%.3d', d.y.uiv;
       
       
       my $c = d.c; # <v contation
       die "notrefc  $c" if !ref $c;

