R_Jz:

 - K: yo #c     yrec $d
   D: |
     G.jumb.yos .= '    ';
     if (!ar.q && !J.q && ar.V || J.V) {
         sayyl "G.jumb.yos@@@@   yo:  ar.k     d.t   ".ki(d.y)."     %  "
             .ki(d.c||{})."      %  ".ki(d.sc||{})
     }
     
     my $nam;
     if ($nam = J.mody || J.most.mody) {
         Rw $nam;
     }
     else {
         Rw mod +;
     }
     G.jumb.yos =~ s/    $//;
     
 - K: ano/flows/anno #c
   D: |
     #MZ pa:mooj
     flow 1
     i 2
     a 2
     o 2
     b 7
     su 3
 - K: anno/flow #c
   D: |
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     my @is;
     my $n;
     
     # 2.8
     my $dd = $d;
     @is||die'nois';
     for my $is (@is) { # THE TIR drop at hands
           my $d = {%$dd}; # first only & then yanga
           # 2.9
           
           # 7.9
     }
     # 8
 - K: anno/su #c
   D:
    -
     - cts_C #
     - 3.3224
     - |
       my $c = d.c; # <v contation
       die "notrefc  $c" if !ref d.c;
       #die wdump [$dd,@is] if d.t eq 'twzng';
       my $g = wJ.ctx.C;
       for my $ct (@{wJ.cts.C}) {
           next unless exists $d->{ct.t_k}->{ct.t};
           my $v = $d->{ct.t_k}->{ct.t};
           my $at = {};
           my $A = {J=>$J,d=>$d};
           my $C = $d; # bendy stick throw
           
           wJ.ctx.C->{ct.x}->($A,$J,$C,$c,$d,$v,$g,$at);
           
           for my $k (keys %$at) {
               d.cs->{"$k#".ct.x} = d.sc->{$k} = $at->{$k};
           }
       }
       for my $cs (d.sc, d.cs) {
           push @{d.css}, map { '%'.$_ => $cs->{$_} } sort keys %$cs;
       }
    - EZ: anno/pi
    - EZ: anno/pathy
    - EZ: anno/nots
 - K: ym/moz #c
   D: |
     n.sc.args ||= '$A,$J,$C,$c,$d,$v,$g,$at';
     n.sc.t_k ||= 'c';
     n.sc.way = 1;
     Rw ym/sticks;
 - K: ym/ensc #c
   D: |
     n.sc.t_k ||= 'sc';
     Rw ym/moz;
 - K: anno/nots #c
   D: |
   - MZ: ensc:C
   -
    - ou
    - 3
    - |
      C.c.pi = $v;
      
 - K: anno/pathy #c
   D:
   - MZ: moz:C
   -
    - pwth # -> !some/path exp. 8ery, 8ing
    - 7.1
    - |
       $v = "!$v" unless $v =~ /^\W/;
       C.c.path = $v;

   -
    - path # install cs path
    - 7.2
    - |
      at.path = $v;
      at.idly = 1 if !c.fo;
   -
    - pwar # take $ar cs path
    - 7.2
    - |
      at.pwar = $v;
   -
    - id #
    - 3
    - |
      at.id = $v;
   -
    - J #
    - 3
    - |
      d.t ||= v.name;
      d.cv ||= 0.3;
      d.s ||= $v;
      at.J = $v;
     
 - K: anno/pi #c
   D:
   - MZ: moz:C
   -
    - s # d.c.s -> d.s
    - 2
    - |
      d.s = $v;
   -
    - pi # d.c.s -> d.s
    - 2
    - |
      d.s = "ou?$v";

   -
    - pi # modulapi
    - 3.2
    - |
       $v = at.pi = Rw spinash $J;
       v.u = d.c.s;
       v.y = d.c.pi; # jo ma in lo
       d.c.pi = $v; # becom pipey
       v.d = $d;
       v.r = d.r; # be adjusting this xor
       Rw mkJid $J:v;
       v.bz->("/\t0.9" => "y");
    - way: 1
   -
    - pi # modulapi
    - 3.4
    - |
       v.cv = c.gp.cv || c.cv || 0.6;
       die'csnod' if v.d ne $d || v.d.c ne $c;

       Rw pir $J:v;
    - way: 1
   -
    - pi #
    - 3.7
    - |
       # can pin/ping light source of con paral
       my $J = $v;
       if (my $name = J.most.eo) {
           my $aj = Rw $name $J $catj=1;
           die aj.s if aj.s;
           d.s = undef;
           
           
           #sayre "Upto J.r go ".slim 70, sjson aj.c if @{aj.c};
           J.Ec = [@{aj.c}];
           
           die wdump $aj if @{aj.sc};
       }
       else {
         die 'hi';
           d.s = v.s = Rw maka $J:v;
       }
    - way: 1
 - K: mooj/b #c
   D:
   - 
    - yango # form of d.r, 
    - 7
    - |
       # bal may mod t, this may wannab 
       d.r = join "\t", d.t, (d.cv+0); # always update trio
       
           my $ch = {@{d.css}};
           saybl ind("G.jumb.yos ",join"\n","Post:  "
           ."d.r  \t\t  'd.s'       ",map{
           " $_ => ".slim 140, gp($ch->{$_})
           }sort keys %$ch) if J.V;
           
           J.bz->(d.r => d.s, @{d.css});
 - K: mooj/i #c
   D:
   -
    - yinvo # build wave manifold, fore loop
    - 2.3
    - |
       d.y = {thi => d.y} if !ref d.y;
       my $y = d.y;
       
       die if y.cv && y.in;
       y.in ||= 0.1; 
       y.out ||= 0.9; # up to
       y.thi ||= 1;
       y.space = y.out - y.in; # could spiral much space away from spine
       y.space *= -1 unless y.space > 0;
       y.aspace = y.space / y.thi;
       
       
       # twist, lay into segment
       my $csv = defined y.cv ? y.cv : defined y.in ? y.in : die "no yiny".ki$y;
       my $muav;
       for (1..y.thi) {
           my $iy;
           
           iy.i = $_-1;
           iy.cv = sprintf '%.6f', $csv;
           iy.pcv = sprintf '%.6f', $_ / y.thi;
           
           s/0+$/0/ for iy.cv, iy.pcv;
           push @is, $iy;
           
           my $mu = 1;
   -
    - yinvout # build wave manifold, fore loop
    - 2.7
    - |
       # some
           my $muc = y.aspace * $mu;
           $csv += $muc;
           iy.ov = sprintf '%.6f', $csv;
       }
 - K: mooj/a #c
   D:
   -
    - yanga # flicker inwave, background language expansion, dewey mezrow
    - 3.1
    - |
       d.c || die;
       d.y = {%{d.y||die}, %$is};
       d.cv = d.y.cv || die;
       d.pcv = d.y.pcv;
       d.r = join "\t", d.t, (d.cv+0);
       
       d.sc = {%{d.sc||{}}};
       # same structure: 
       d.cs = {%{d.cs||{}}};
       d.css = [@{d.css||[]}];

