R_Jz:

 - K: filey #c note uplv for the from $lv, projecting flavour
   n_D:
     yJ: |
       'filey'
     uplv: |
       my $sc;
       if (!lv.sc) {
           say "INIT STYLO ".ejson $lv;
           if (j.s =~ /^[A-Z0]/) {
               sc.ou = 'file';
               sc.dir = 'ghosts/';
           }
           # looking at this J's abilities to upgrade string input with ou thinkg/crawl
       }
       Rw jamsc $J $j $sc;
 - K: ou/file #c
   D: |
     my $file = x.j.s;
     defined $file || die 'nofile';
     if (my $dir = sc.dir) {
         $dir .= '/' if $dir !~ /\/$/;
         $file = "$dir$file";
     }
     my $lJ = Rw J5 fil;
     my $fJ = Rw around $J:lJ $file;
     say ki $fJ;
     my @o = Rw around $J:fJ;
     
     say "Around say: ". wdump \@o;
     
 - K: fil #c index of vectors about files
   n_D:
     yJ: |
       'fil'
     around: |
       ar.file ?
          Rw fil/ile
       :();
     ile: |
       my $fid = slm 8, dig $file;
       my $fJ = J.bb->{"$fid\t0.1"};
       if (!$fJ) {
           $fJ = Rw oJ $J $name=lie.$fid $style=lie;
           fJ.bz->("file\t0.1" => $file);
           J.bz->("$fid\t0.1", $fJ, '%file'=>$file);
       }
       $fJ
 - K: lie #c one file vector, expanding reconvening substructure of io mess to artifacts and stuff in 0.8
   n_D:
     yJ: |
       'lie'
     flows:
       folate: |
         file/situ 0.1
         file/open 0.2
         file/jam 0.3
         yaam 0.9
     around: |
       J.cv ||= 0.3;
       
       Rw flow $J folate;
       
       return map { "_.r           _.s" }
       Rw tvo;
 - K: flu #c index: creativity is a disease - hang them on G.drop
   n_D:
     yJ: |
       'flu'
     around: |
       ar.cJ ?
           Rw flu/cod
       :();
     cod: |
       # look at this word in the context of yay style
       my $h = slm 6, dig ejson[cJ.style,$name];
       #return G.drop.flows->{$h} ||= do {
           my $oJ = Rw oJ $J $name=flz.$h $style=flz;
           
           Rw thy $oJ $J:cJ flows/$name;
           # ^nc ||
           Rw around $J:oJ;
           $oJ;
       #};
 - K: flz #c created
   n_D:
     yJ: |
       'flz'
     around: |
       sayyl "Around of J.name !" for 1..2;
       my $oJ = Rw oJ $J way;
       
       my $vs = Rw tyv $J;
       for my $lv (@$vs) { 
           my $j = lv.j;
           #my $coi = Rw pha $J $k=j.r;
           #my $xat = Rw lv_same $lv $x:coi $J;
           #my $y = coi.exactl->();
           sayyl "j.r   is j.s";
       }
  
 - K: flow #c K-flow
   D: |
     my $name = $m->[0];
     my $uJ = Rw J5 flu;
     my $oJ = Rw around $J:uJ $cJ:J $name;
     
     sayre "oJ.name !\n oJ.way";
     
     sayyl "_.r        => _.s" for
     Rw tvo $J;
     return "BOLLOX";
     #fol
     
     
     
     
     
     
     
     
     
     #fol

