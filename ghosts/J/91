R_Jz:
 - K: down #c TODO to have maintained down by what comes up from 7 via 8 in motion, tune in values
   D: |
       my $ordy = Load(<<'');
       {A: 13, id: 11, K: 17, name: 185,
       G: 15, R: 15, B: 23, more: 543}
       
       my $ydro = {};
       push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
       my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
       
       { order => \@order,
            ordy => $ordy,
       }

     
 - K: sur #c SURish rondo: on -> square ->
   n_D:
     styJup: | #c
       'thesurf', 'sur'
     up: | #c upper level gplumb
       Rw inness;
       
       # TODO 2real joint, like sur
       # finds on, near in, ups
       # traction gets to 1 TODO antlerdaptory
       # move impression of ^ to v, then round
       J.lum = Rw tent lum;
       # TODO replace last
       
       my $u = J.on.bb->{"u\t".0.1};
       # META
       J.lum.fro->("J\t"."0.01" => $J, {cv=>0.1,untitled=>1});
       
       J.lum.fro->("Jonei\t"."0.03" => J.onei, {cv=>0.4,untitled=>1});
       
       J.lum.fro->("u\t"."0.03" => $u, {cv=>0.2,untitled=>1});
       
       say "U: ".$J->pi."   ".gp($u);
       
       my $y = w $R down; # 2ish aggd knowledge, instructions?
       
       my @r;
       if (!ref $u) {
           die 'stringy';
       }
       elsif (ref $u eq 'ARRAY') {
           my $i = 0;
           my $warp = @$u; # TODO or less?
           my @warp = Rw cv/oe off1 $v:warp;
           for (@$u) {
               my $cv = "0.". shift @warp;
               push @r, { r=>$i, path=>"[".$i++, v=>$_, cv=>$cv};
           }
       }
       else {
           my $r = {map{$_=>1} keys %$u};

           # bunch of keys... ^ interpret, compress knowledge
           # TODO ^make itv like two indexes, polars
           # any sorta layout knowhow...
       
           my @or = grep { delete $r->{$_} } @{y.order};
           push @or, sort keys %$r;
           
           for (@or) {
               my $cv = y.ordy->{$_} || 4;
               $cv = "0.$cv";
               push @r, { r=>$_, path=>"{$_", s=>$u->{$_}, cv=>$cv };
           }
       }
       
       
       for my $r (@r) { # %{ r, path, v, cv
            
           next if r.r eq 'load_ways_count';
           
           J.lum.lev->("r.r/\t".r.cv => sub {
               my $a = shift;
               
               my $fs = length(r.r) > 9 ? 60 : 80;
               
               my $guec = $2 if r.cv =~ /^(0\.)?(\d)/;
               my $col = G.jumb.cos->{$guec} || die "was r.cv so $guec";
               
               # TODO curve ^ # make sf of a Q factor that can see $v somehow
               a.bz->(
                    "lable 0.1" => r.r,
                    #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    "%css#laob" => 'position:absolute;right:0.5em;',
                    "%css#lableg" => "font-size:$fs%",
                    "%css#labcoat" => "color:$col", # TODO unwind cv into colour
                    "%tt#\cv" => r.cv,
               );
               
                  
               a.fro->("gp\t"."0.6" => r.s,
                 {cv=>0.2, makaz=>{ # hooky
                    "/%css#jit 0.1" => 'position:absolute;left:1em;width:30em',
                 }}, # ^ v in out sameish
                 (r.path ? ('%path' => r.path) : ()),
               );
           });
            #J.bz->("$r\t"."0.$cv" => ''.$v, '%css'=>'white-space:pre');
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # ad what kind of cursor, fro delays/syncs
             # start culture
             # the middle
             # start cuddle
       }
       Rw round $J4:J.lum $J5:J;
       
       #sayyl _.r for 
       
       my @oooo = Rw tvo $J;
       for my $j (@oooo) {
           say j.r;
       }

