R_Jz:
 - K: down #c TODO to have maintained down by what comes up from 7 via 8 in motion, tune in values
   D: |
       my $ordy = Load(<<'');
       {A: 12, id: 11, K: 17, name: 18,
       G: 14, R: 14, B: 23, more: 543}
       
       my $ydro = {};
       push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
       my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
       
       { order => \@order,
            ordy => $ordy,
       }

     
 - K: sur #c SURish rondo: on -> square ->
   n_D:
     styJup: | #c
       'thesurf', 'sur'
     up: | #c upper level gplumb
       Rw inness;
       
       # TODO 2real joint, like sur
       # finds on, near in, ups
       # traction gets to 1 TODO antlerdaptory
       # move impression of ^ to v, then round
       J.lum = Rw tent lum;
       # TODO replace last
       
       my $u = J.on.bb->{"u\t".0.1};
       # META
           J.lum.fro->("J\t"."0.01" => $J, 0.1);
           J.lum.fro->("Jonei\t"."0.03" => J.onei, 0.4);
           J.lum.fro->("u\t"."0.03" => $u, 0.2);
       
       say "U: ".$J->pi."   ".$u->pi;
     
       my $r = {map{$_=>1} keys %$u};
       
       # bunch of keys... ^ interpret, compress knowledge
       # TODO ^make itv like two indexes, polars
       
       my $y = w $R down; # 2ish aggd knowledge, instructions?
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       
       for $r (@r) {
           my $v = $u->{$r};
            
           my $cv = y.ordy->{$r} || 4;
            
           J.lum.lev->("$r/\t0.$cv" => sub {
               my $a = shift;
               my $fs = length($r) > 9 ? 60 : 80;
               # TODO curve ^ # make sf of a Q factor that can see $v somehow
               a.bz->(
                    "lable 0.1" => $r,
                    #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    "%css#laob" => 'position:absolute;right:0.5em;',
                    "%css#lableg" => "font-size:$fs%",
                    "%css#labcoat" => "color:black", # TODO unwind cv into colour
                    "%tt#\cv" => $cv,
                    );
               
                  
               a.fro->("gp\t"."0.6" => $v,
                 {cv=>0.2, makaz=>{ # hooky
                    "/%css#jit 0.1" => 'position:absolute;left:1em;width:30em',
                 }},
                 '%path' => '{'.$r,
               );
           });
            #J.bz->("$r\t"."0.$cv" => ''.$v, '%css'=>'white-space:pre');
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # and what kind of cursor, fro delays/syncs
             # start culture
             # the middle
       }
       Rw round +;

