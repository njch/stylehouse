R_Jz:
 - K: Jun #c find named J, may return nothing
   D: |
     my $n = Rw Jung;
     my $name = ar.name || ar.m->[0];
     $n->{$name};
 - K: Jung #c find all J
   D: |
     my @aw = K J;
     @aw = grep { !_.A.u_tent } @aw;
     my $na;
     map {
         my $name = $1 if _.name =~ /(^\w+)-J\d+$/ || die;
        $na->{$name} && die "rep of $name";
        $na->{$name} = $_;
     } @aw;
     $na
 - K: Jux #c goto
   D: |
     my $J = Rw Jun;
     $J || die 'no';
     
     if (ar.in || ar.r) { 
         my $r = ar.in? {i=>ar.in} : ar.r;
         Rw inness $J $r;
     }
     $J;
 - K: jin #c replace: find named J -> del -> hiJ   # poss replace namedo 
   D: |
     my $m = ar.m ||= [];
     my $name = ar.name ||= shift(@$m);
     
     Rw Jundel $name;
     
     my $J = Rw hiJ +;
     
     if (ar.in || ar.r) { 
         my $r = ar.in? {i=>ar.in} : ar.r;
         Rw inness $J $r;
     }
     $J;
 - K: Jundel #c ye
   D: |
     my $u = Rw Jun $name;
     $u || return;
     w G.R del[$u];
 - K: onJ #c replace namedo 
   D: |
     my $oJ = Rw Jun $name;
     $oJ ||
     Rw hiJ +;
 - K: Jup #c
   D: |
     my $style = J.style;
     J.yt = {};
     my @blyl;
     my @style;
     for (@$style) {
         my $pin = "$_/yJup";
         my @wk = Rw suck + $pin;
         push @blyl, join '+', uniq @wk;
         for (@wk) {
             push @style, $_;
             J.yt->{$_} ||= {};
             
             my $stick = "$_/life";
             Rw suck + $stick;
         }
     }
     saygr "J.name yJup: @style  -> @blyl";
 - K: hiJ #c add to space # ipv6 goes in
   D: |
     my $u = ar.u ||= {};
     my $m = ar.m ||= [];
     my $name = ar.name ||= shift(@$m) || ar.u.name;
     
     push @$m, $name if !@$m; # def style = name
     
     u.name ||= $name;
     u.name .=  "-J".G.jumb.Jnumb++; # additively, paranoid # individualise
     u.style = [@$m];
     
     my $J = Rw makeJ $u;
     
     Rw Jup $J;
     
     w mux(u=>$J);
     
     $J
 - K: loJ #c les con tent
   D: |
     my $u = ar.u ||= {};
     my $m = ar.m ||= [];
     my $name = ar.name ||= shift(@$m) || ar.u.name;
     
     # etc $m
     u.name ||= $name;
     
     say "loJ: u.name";
     my $J = Rw makeJ $u;
 - K: makeJ #c
   D: |
     u.K ||= 'J';
     u.name || die;
     #life J $u    # carbon
     # ^ babz to:
     my $J = w G.R fuu[$u];
     # ^ has flows_D to suJ, only first time
     $J
 - K: tent #c pearlesque kings of the J...
   D: |
     my $na = shift @$m;
     
     my $name = J.name.'-'.$na;
     
     my $conJ = Rw loJ $name;
     
     $J->{$na} = $conJ;
     conJ.A->umk($J, 'tent');
     conJ.Jmost = J.Jmost || $J;
     #say "Tent of ".$conJ->pi."  ".join"    ",map{_.point}@F[2,4,6,8]; 
     $conJ;

 - K: conroll #c rolling con tents, the C Js, away into shadow TIME
   D: |
     my @con = map{_.i} @{J.A.n_tent||[]};
     @con = grep { !_.yy.conroll.dont } @con;
     
     unshift @con, $J;
     
     @con = grep { keys %{_.bb} } @con;
     return if !@con;
     
     say "conrolling ".$J->pi."   tents ".join "    ",
         map { _.name =~ /^(J.name\-)?(.+)$/; "$2 * ".
         do {
             my @log = sort keys %{_.bb};
            @log > 5 ? scalar(@log)
            : join "'", @log;
         };
         } @con;
     
     # dont mention mods? sum mods?
     #sayre "Jmost bb goners: ".join " ", grep { s/\t(.+?)$// || 1 } 
     #    sort grep {!/\%/} keys %{J.bb};

     for my $tent (@con) {
         #say "Scraping out the ".$tent->pi;
         Rw suJ $J:tent;
     }
 - K: inness #cc soy packets everywhere # THINGNESS as onness
   D: |
      # right handed receiver of 8, informs to humm etc.
      # would involve many uish and the types of perception we want to see
      # laying out the plane of attack
      # just has to find a corner of it as 3
      J.on = Rw tent on;
      J.on.yy.conroll.dont = 1;
      # ^ recursor... incubator
      # v def
      my $o = J.onei ||= {i=>$G};
      
      my $r = ar.r;
      
      w mux(u=>$J) if $r; # slower reintro - calc entropy
      
      # ^ inject 6
      # but first...
      # t distributable, listy compressible pass space
      
      %$o = (i => r.i) if r.i;
      o.t||=[];
      
      if (ref r.t eq 'ARRAY') {
          o.t = [@{r.t}];
      }
      else {
          push @{o.t}, r.t if r.t;
      }
      
      # get there
      my $i = o.i;
      for my $t (@{o.t}) {
          sayyl "   -trav $i       $t";
          $i = $R->suets($i, $t);
      }
      sayyl "Inness: ".gp(o.i)."     "
        .join("   ", @{o.t})." ----> ".gp $i
            if $i ne o.i;

      # on ventrickles already, look at the path for clues
      # if last t was {bb 55 stylse
      # the tree of loveliness to hook in as things fly by again soon...
      
      # like J.yy.inness.wants to fold back all the uninteresting stuff
      # also show the groups of phases etc
      # styles from on become humming/rounding protocols
      # 
      
      J.on.bz->("u%travely\t".0.1 => J.onei);
      J.on.bz->("u\t".0.1 => $i);
      

