R_Jz:
 - K: down #c maintain down by what comes up
   D: |
       my $ordy = Load(<<'');
       {A: 1, id: 15, K: 17, name: 18,
       G: 14, R: 14, B: 23, more: 543}
       
       my $ydro = {};
       push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
       my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
       
       { order => \@order,
            ordy => $ordy,
       }

     
 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} sort keys %$u};
       
       # ^ interpret # compress knowledge
       
       my $y = w $R down;
       
       # TODO ^ v wanna make it like two indexes, polars
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            # TODO grab l cursor and style
            # and what kind of cursor, fro delays/syncs
            J.bz->("$_\t"."0.$cv" => '       '.$v);
            
            J.bz->("$_%css#uff\t"."0.$cv" =>
                #'border-bottom: 2px solid white'
                'opacity:0.3;margin-left:3em;'
                )
                if /^stuff(\d+)/;
            
            $_ eq 'name' &&
            J.bz->("$_%css#wa\t"."0.$cv" =>
                'border-bottom: 3px solid white');
       }
 - K: howge #c
   D: |
     J.geo = w $R makeJ(name=>J.name.'-geo');
     
     J.geo.bz->(@$_) for
         ["curve\t"."0.2" => 0.12],
         ["curve\t"."0.3" => 0.82 ],
         ["curve\t"."0.5" => -0.30 ],
         ["faster\t"."0.6" => 0.32 ], # this'll cuvre tighter and tigher
         # redistribute from/with the shap of the = as upside down T
         # 1 circle and another kinda axis thing, making a dynamic
         # a 2 circle may involev magnetic fishing rod relay hivi too
         # pulling aspects out of the braid bed, 
     ; # rad per 0.1cv? who knows
     

