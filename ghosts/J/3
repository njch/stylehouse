R_Jz:

 - K: jin #c replace namedo 
   D: |
     my $name = $m->[0];
     my $n = Rw Jung;
     w G.R del(u=>$_) for $n->{$name};
     Rw hiJ +;
 - K: Jun #c Jung with name, or not
   D: |
     my $n = Rw Jung;
     my $name = shift @$m;
     return $n->{$name};
 - K: onJ #c replace namedo 
   D: |
     my $name = $m->[0];
     my $n = Rw Jung;
     $n->{$name} ||
     Rw hiJ +;
 - K: hiJ #c
   D: |
     my $r;
     r.name = shift @$m;
     r.name .=  "-J".G.jumb.Jnumb++; # additively, paranoid
     r.style = [@$m];
     
     my $J = Rw makeJ $r;
     
     Rw Jup $J;
     
     waylay mux(u=>$J);
     
     $J
 - K: Jup #c
   D: |
     my $style = J.style;
     J.yt = {};
     my @style = map {
         saygr "J.name seeking $_...";
         my $pin = "$_/yJup";
         Rw suck + $pin;
        } @$style;
     
     J.yt->{$_} ||= 1 for @style;
     saygr "J.name yJup: @style";
 - K: makeJ #c
   D: |
      my $r = ar.r || $ar; # pass through q, passes out the madeness
      my $u = {K=>'J',%$r}; 
      u.name ||= "J".G.jumb.Jnumb++; # additively
      
      my $r = {q=>1};
      my $J = w G.R fuu[$u, $r];
      # ^ has flows_D to suJ, only first time
      
      my $wa = r.new?" made + + ":" - J - ";
      sayyl $wa.$J->pi;
      $J
 - K: tent #c pearlesque kings of the
   D: |
     my $na = shift @$m;
     
     my $name = J.name.'-'.$na;
     
     my $conJ = Rw makeJ $name;
     
     $J->{$na} = $conJ;
     conJ.A->umk($J, 'tent');
     conJ.Jmost = J.Jmost || $J;
     #say "Tent of ".$conJ->pi."  ".join"    ",map{_.point}@F[2,4,6,8]; 
     $conJ;
 - K: Jung #c
   D: |
     my @aw = K J;
     @aw = grep { !_.A.u_tent } @aw;
     my $na;
     map {
         my $name = $1 if _.name =~ /(^\w+)-J\d+$/ || die;
        $na->{$name} && die "rep of $name";
        $na->{$name} = $_;
     } @aw;
     $na
        
     
 - K: conroll #c rolling con tents, the C Js, away into shadow TIME
   D: |
     my @con = map{_.i} @{J.A.n_tent||[]};
     @con = grep { $_ ne J.on } @con;
     
     unshift @con, $J;
     
     @con = grep { keys %{_.bb} } @con;
     return if !@con;
     
     say "conrolling ".$J->pi."   tents ".join "    ",
         map { _.name =~ /^(J.name\-)?(.+)$/; "$2 * ".
         do {
             my @log = sort keys %{_.bb};
            @log > 5 ? scalar(@log)
            : join "'", @log;
         };
         } @con;
     
     # dont mention mods? sum mods?
     #sayre "Jmost bb goners: ".join " ", grep { s/\t(.+?)$// || 1 } 
     #    sort grep {!/\%/} keys %{J.bb};

     for my $tent (@con) {
         #say "Scraping out the ".$tent->pi;
         Rw suJ $J:tent;
     }

