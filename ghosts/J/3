R_Jz:




 - K: hijack #c hit J
   D: |
      my $J = Rw hiJ below hull;
      my $J2 = Rw hiJ bollox sur;
      
      Rw fitin $J $J6:J2;
      
      $J
 - K: thesurf #c CURVE curver
   n_D:
     curves: |
         ["spun 0" => 0.025],
         ["curve 0" => -0.211],
         ["zoom 0" => 0.2],
         ["zoom 0.21" => -0.09],
         ["curve 0.3" => 0.11],
         
         ["curve 0.712" => -0.05],
     mods: |
       [sq   => 10,  '~~~'],
       [sqat   => 20,  '^', {}, 'color:blue', in => 10, ],
       [sqat   => 20,  'v', {}, 'color:blue', out => 10, ],
 - K: hull #c whole screen iraga
   n_D:
     styJup: |
       'hull',
     curves: |
         ["spun 0" => 0.12],
         ["curve 0" => 0.09],
         ["zoom 0" => 0.2],
     mods: |
       [sqw   => 10,  '~~~', {}],
       [sq   => 40,  '.', {}, 'color:blue'],
 - K: fitin #c
   D: |
     my @so = sort grep {/^J.+/} keys %$ar;
     my $J = ar.J;
     for (sort keys %$ar) {
         /^J(\d+)$/ || next;
         my $cvb = $1;
         my $Jo = $ar->{$_};
         J.bz->(Jo.name."\t"."0.".$cvb => '>:D', '%Joint' => $Jo);
     }
     Rw jtrbg $J;
     Rw Joints $J;
 - K: Joints #c
   D: |
     my @things = Rw tvy $J;
     for my $thing (@things) {
         my ($tj, @sjs) = @$thing;
         if (my ($Joi) = grep{_.style eq 'Joint'} @sjs) {
             my @jcss = grep{_.style eq 'css' && _.com =~ /^pha/} @sjs;
             my $J2 = $Joi->{s};
             
             Rw oven $J $J2;
             # J2 now disposed to a part of J, all within L
             
             
             my ($Z, $N);
             for my $N (map { _.s } @jcss) {
                 $Z->{$_} = $N->{$_} for keys %$N;
             }
             saybl " hoping ".$J2->pi." istyle:".wdump($Z);
             
             if ($Z->{'-webkit-transform'} =~ /rotate\((.+?)rad\)/) {
                 $Z->{'-webkit-transform'} = 'rotate('.($1 + -$RADIAN).'rad)',
             }
             
             
             my $beef = J2.S.Z;
             Z.width = '100%';
             Z.height = '100%';
             Z.border = '2px solid rgba(0,0,0,0.3)';
             J2.S.Z = $Z;
             say "YES". wdump 2,[tj.r, $beef, map { "   _.r" } @jcss];
         }
     }
 - K: oven #c
   D: |
     J.L ||= Rw JL $J;
     
     sayyl "OVENATING";
     
     w mux(u=>J.L);
     for my $k (grep {/^J/} keys %$ar) {
         my $JJ = $ar->{$k};
         JJ.A->umk(J.L => 'S');
         # does that tidy^ TODO
         w mux(u=>$JJ);
     }
     

