R_Jz:
 - K: hiss #c esque pingas
   D: |
      # 2
      Rw entropia;
      # 3
      my $html = Rw jitterbug;
      # 9
      return $html
 - K: entropia #c the mess, hashe
   D: |
     
     my $of = { map { $_,1 } qw'curves mods entropia' };
     # the entropics, a fruit
     
     $of->{$_} = [
         Rw suck */$_,
     ] for sort keys %$of;
     
     my $wd = wdump(4,$of); #\
     sayyl "gentropia: ".slim 400, $wd;
     J.ent.of = $of;
     J.ent.wd = $H->dig($wd); #/ 
     J.ent.ti = $H->hitime;
     my $ent = 1; 
     J.ent.ti =~ /(\d)\.?(\d)\.?(\d)\.?(\d)\.?(\d)\.?/;
     J.ent->{$ent++} = $_ for reverse ($1,$2,$3,$4,$5);
     
     say "entropy: ".ki(J.ent);
     
 - K: jitterbug #c depasoi
   D: |
     J.Jmost = $J;
     
     say "Jitt J.waltzd";
     Rw conroll if J.waltzd;
     
     sayyl ''.`figlet J.name`; #ind " $F[0]->{point} ", "\n  J.name\n ";
     
     Rw up;
      
       Rw howge;
       # V
       Rw geolo;
     
     Rw geoves;
      
     Rw stev;
     
     # map what you got onto geoloJn, perhaps unwholy, resolving around poles
     Rw phairo;
     
     Rw outhere;
     
     return if ar.cv && ar.cv < 0.8;
     # maka is really 8 cos its making external
     my $html = Rw maka;
     # stuff of 7 with 8 -> 1
     
     saygr "JITTERBUGJITTERBUG waltzd J.name ".F_delta, "";
     J.waltzd = $H->hitime;
     
     $html
 - K: lplumb #c abomdin, a level, subby plumbing, tin gplumb
   babz:
     'suJ 3.2': |
       J.lev = $by->(sub {
           my $j = shift;
           j.sub = delete j.s;
           Rw lplumb $J:j;
       });
   D: |
     J.bz->("/\t0.9" => "yep");
     J.isJid = J.replaceJid || $H->mkuid;
     J.idyl->($J, J.isJid) if J.isJid;
     
     J.sub->($J);
     J.s = Rw maka $a:J;
     J.Jiter.bz->(J.r => J.s,
         '%lp' => $J,
         @{J.etc},
     );
 - K: gp #c R_sur gp
   babz:
     'suJ 3.1': |
       # another little con tent, backeting a harmonic sur-ish portal
       J.fro = $by->(sub {
           my $j = shift;
           j.u = delete j.s;
           j.cv = shift @{j.etc};
           %$j = (%$j, %{delete j.cv}) if ref j.cv;
           Rw gp $J:j;
       });
   D: |
     G.jumb.gp_inarow++;
     aft { G.jumb.gp_inarow-- };
     J.cv = 0.1 if J.cv < 0.1;
     J.bz->("/\t0.9" => "yep");
     # 2
     J.isJid = J.replaceJid || $H->mkuid;
     undef J.isJid if G.jumb.gp_inarow > 1;
     J.idyl->($J, J.isJid) if J.isJid;
     # 3
     
     # TODO J pass over # maka suction
     # don't need to close it up right now...
     # top down injection gos
     
     my $u = J.u;
     my $wa = J.wa || do {
         J.c = $R->cgp($u);
         # ^
         
         # v
         my ($wa) = grep { J.c->{$_} } qw'canpi ARRAY HASH ref undef text';
         $wa = ref $u if $wa eq 'canpi';
         $wa ||= 'wtf';
         $wa;
     };
     # can stick $wa on J.wa for thrashing maths
     # funcy fuzz fields
     # mutating spiral code
     
     R.way->find("pi/$wa") || die "not $wa equip"; # more
     
     # 5 forking swivel injecty redis, etc etc
     # set up more consciously the stylepliers of 5

     # 6
     Rw pi/$wa $J $u;
     
     # next floatation device...
         for my $k (%{J.bb}) {
             if ($k =~ /^(\S*(?:oB|Bo|Bi|Bs))\s+(.+)$/) {
                 J.bb->{"$1\%css#maka25\t$2"} = "color:black";
             }
             if ($k =~ /^thi\s+(.+)$/) {
                 J.bb->{"thi\%css#maka25\t$1"} = "text-decoration:underline";
             }
             if ($k =~ /^name\s+(.+)$/) {
                 J.bb->{"name\%css#maka25\t$1"} = "color:#f93;";
             }
             if ($k =~ /^K\s+(.+)$/) {
                 J.bb->{"K%css#maka25\t$1"} = "color:#3f3";
             }
         }
     
     # 7
     J.s = Rw maka $J $u;
     # can pin/ping light source of con
     
     # 8
     
     # 9
     J.Jiter.bz->(J.r => J.s,    '%gp' => $J,    @{J.etc});
     

