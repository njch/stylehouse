R_Jz:

 - K: hiss #c esque pingas
   D: |
      my $html = w $R jitterbug[$J];
      return $html
 - K: jitterbug #c depasoi
   D: |
     
     ''.$H->hitime =~ /(\d)(\d)(\d)\.(\d)(\d)/;
     my $ent = 1;
     J.ent->{$ent++} = $_ for reverse ($1,$2,$3,$4,$5);
     J.Jmost = $J;
     
     Rw conroll + if J.waltzd;
     
     w $R up;
      
       w $R howge;
       # V
       w $R geolo;
     
     w $R geoves;
     
     w $R stev;
     
     # map what you got onto geoloJn, perhaps unwholy, resolving around poles
     w $R phairo;
     sayre "phairod";
     w $R outhere;
     sayre "outhere";
     
     my $html = w G.theR maka; # stuff of 7 with 8 -> 1
     
     say "waltzd J.name ".F_delta;
     J.waltzd = 1;
     
     $html
 - K: jtrbg #c do
   D: |
     w $R howge;
     # V
     w $R geolo;
     
     w $R geoves;
     
     w $R stev;
     
     w $R phairo;
     
     w $R outhere;
 - K: setup #c sets up $a with bb-domin & accessors
   D: |
     Rw suJ $J;
 - K: suJ #c a sudo J, %{ r:sets up $a (J or not quite J hash $a, phro etc) with bbdomin stuff
   D: |
     J.bb = {};
     J.ord = [];
     J.bz = Rw as $bb:J.bb $ord:J.ord;
     
     my $by = sub {
         my $that = shift;
         sub {
             my $j = {etc=>[]};
             (j.r, j.s, @{j.etc}) = @_;
             j.Jiter = $J; # easy reverse
             # drifter, expecting 8 (forks & events) approp.
             # this is a tent it is
             j.Jmost = J.Jmost;
             Rw suJ $J:j;
             $that->($j); 
         };
     };
     
     # 3
     # 4
 - K: lplumb #c abomdin, a level, subby plumbing, tin gplumb
   babz:
     'suJ 3.2': |
       J.lev = $by->(sub {
           my $j = shift;
           j.sub = delete j.s;
           Rw lplumb $J:j;
       });
   D: |
     J.sub->($J);
     J.s = Rw maka $a:J;
     J.Jiter.bz->(J.r => J.s,
         '%lp' => $J,
         @{J.etc},
     );
 - K: gp #c R_sur gp
   babz:
     'suJ 3.1': |
       # another little con tent, backeting a harmonic sur-ish portal
       J.fro = $by->(sub {
           my $j = shift;
           j.u = delete j.s;
           j.cv = shift @{j.etc};
           Rw gp $J:j;
       });
   D: |
     G.jumb.gp_inarow++;
     aft { G.jumb.gp_inarow-- };
     %$J = (%$J, %{delete J.cv}) if ref J.cv;
     J.cv = 0.1 if J.cv < 0.1;
     
     # 3
     
     J.isJid = J.replaceJid || $H->mkuid;
     if (G.jumb.gp_inarow > 1) {
         undef J.isJid;
     }
     #sayyl join(" ", ("  ") x G.jumb.gp_inarow)." ooooo ".gp(J.u);
     J.Jmost.gpa.pis->{J.isJid} = $J if J.isJid;
     # TODO J pass over # maka suction
     # don't need to close it up right now...
     # top down injection gos
     
     my $a = $J; # pretend, sli C7
     my $u = J.u;
     
     my $wa = J.wa || do {
         J.c = $R->cgp($u);
         # ^
         
         # v
         my ($wa) = grep { J.c->{$_} } qw'canpi ARRAY HASH ref undef text';
         $wa = ref $u if $wa eq 'canpi';
         $wa ||= 'wtf';
         $wa;
     };
     # can stick $wa on J.wa for thrashing maths
     
     R.way->find("pi/$wa") || die "not $wa equip"; # more
     
     # 5 forking swivel injecty redis, etc etc

     # 6
     Rw pi/$wa $a:J $u:J.u;
     
     
     # 7
     J.s = Rw maka $a:J $u;
     
     
     # 8
     
     # 9
     a.Jiter.bz->(J.r => J.s,    '%gp' => $J,    @{J.etc});
     
 - K: inness #cc soy packets everywhere # THINGNESS as onness
   D: |
      J.on = Rw tent on;
      
      J.onei ||= {i=>$G};
      J.onei = {i=>ar.i} if ar.i;
      push @{J.onei.t||=[]}, ar.t if ar.t;
      
      my $i = J.onei.i;
      for my $t (@{J.onei.t}) {
          $i = $R->suets($i, $t);
      }
      
      J.on.bz->("u%travely\t".0.1 => J.onei);
      
      J.on.bz->("u\t".0.1 => $i);
      

