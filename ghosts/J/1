R_Jz:
  - K: setup #c sets up $a with bb-domin & accessors
    D: |
      S.bb = {};
      S.ord = [];
      S.bz = w $R as(bb=>S.bb, ord=>S.ord);
      
      # 3
      
  - K: gp #c fatten, by # cv maybe  hash, etc is more for bz
    babz:
      'setup 3.67': |
        S.fro = sub {
            my $fro = [S.bz, @_];
            w $R gp/fro(a=>$fro);
        };
    n_D:
      fro: |
        my ($bz, $l, $u, $cv, @etc) = @$a;

        my $gp = {u=>$u, cv=>$cv};
        %$gp = (%$gp, %{delete gp.cv}) if ref gp.cv;

        my $v = w $R gp(a => $gp);

        $bz->($l => $v,
            '%gp' => $gp,
            @etc,
        );
    
  - K: as #c get abulator # TODO sink hashy hooks all over
    D: |
        my $j = {};
        my $do;
        $do = sub {
            my $j = {%$j};
            my $ad = [@_];
            my %j = %$j;
            while (@$ad) {
                my ($k, $v) = (shift @$ad, shift @$ad);
                
                my $comp = $k =~ /^(%|\+)/;
                my $j = {%j} if $comp;
                if ($comp) {
                    $k =~ s/^\+// if $comp;
                    j.t .= $k if $comp;
                }
                else {
                    (j.t, j.cv) = split /\s+/, $k, 2;
                    %j = %$j;
                }
                j.cv || die "NOSEYV";
                j.r = j.t."\t".j.cv;
                j.s = $v;
                
                $bb->{j.r} = j.s;
                push @$ord, {%$j} if $ord;
            }
            sub{$do->(%$j, @_)} # TODO fucked, get some weed and fix it
        };
        $do
  - K: shj #c pronounce $j{r,s,t,cv,ev} from given $r and $d # post abulator but similar
    D: |
      my ($r, $d) = @_;
      my $j;
      j.r = $r;
      j.s = ref $d eq 'HASH' ? $d->{$r} : $d; # carbon in
      (j.t, j.cv) =
          j.r =~ /^(.+)\t(.+?)$/ ? ($1, $2)
          :
          split /\s+/, j.r, 2;
      (j.cv, my @e) = split /\s+/, j.cv;
      j.ev = \@e if @e;
      $j

