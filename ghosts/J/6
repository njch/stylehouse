R_Jz:
 - K: hiss #c esque pingas
   D: |
      my $u = {
          id => "not",
          name => "ches",
          G => $G,
          more => "more",
          Bee => "stuff",
      };
      my $arr = {
          a => $J,
          J => $J,
          u => $u,
      };
      
      w $R up(%$arr);
      
      #J.bz->("dot$_"."\t"."0.".(60 + $_) => '.') for 1..20;
      J.bz->("000000000_$_/s"."\t"."0.$_" => $_."-------", '%css' => 'color:red') for 1..3;
      
      J.spiral || die;
      sayre "Spiral del J.spiral";
      w $R J.spiral(%$arr);
      
      
      my $html = w G.theR maka(%$arr); # stuff of 7
      
      saybl "hissings";#:\n".slim(250,250,$html)."\n";
      return $html
        
 - K: jitterbug #c depasoi
   D: |
     J.geo = w G.theJ makeJ(name=>J.name.'-geo');
     
     J.geo.bz->(@$_) for ["curve\t"."0.28" => 0.5]; # rad per 0.1cv? who knows
     
     # set up archeology site, anything you want
     w $R geolo[$J];
     # map what you got onto geoloJn, perhaps unwholy, resolving around poles
     w $R phairo[$J];
 - K: geolo #c begin digging - smiling egg cup
   D: |
     my $Jeo = J.geo; # woo
     sayyl '.' for 1..5;
     
     my $tvs = w $R ytv(J=>J.geo);
     my $tr = {};
     for my $jkv (sort keys %$tvs) { 
         sayyl "at $jkv";
         for my $j (@{$tvs->{$jkv}}) {
             $tr->{$jkv}->{j.t} = j.s;
             saybl "yep j.r          j.s";
         }
     }
     
     my @br = map{$_ * 0.1} 1..9;
     @br = uniq @br, keys %$tr;
     for my $b (sort @br) {
         J.geo.bz->("b%tr\t".$b => $tr->{$b} || {});
     }
     
     my @be = w $R tvo(J=>J.geo);
     my $last = {x=>0.5, y=>0, cv=>0, rad=>0};
     for my $j (@be) { # will be first order...
         next if !j.style;
         say "j.r                 ".$H->ejson(j.s);
         
         my $here = {%{j.s}};
         
         w $R atom[$j, $here, $last];
         here.cv = j.cv;
         
         saygr "going     ".ki($here);
         J.bz->("b%ge\t".j.cv => $here);
         $last = $here;
     }
     
     # etc
 - K: atom #c 
   D: |
         # spacin
         here.dist = here.cv - last.cv;
         # twistin
         here.rad = last.rad; # + 
         if (here.curve) {
             sayyl "got here.curve";
             here.rad += here.curve; # + complic
         }
         # move
         here.x = last.x + (here.rad ? cos(here.rad) : 0) * here.dist;
         here.y = last.y + (here.rad ? sin(here.rad) : 1) * here.dist;
         
 - K: phairo #c
   D: |
     my @d = w $R tvo[$J];
     my @be = w $R tvo(J=>J.geo);
     
     my ($left,$right) = (undef,shift @be);
     my $being = sub {
         my $j = shift;
         if (j.cv > $right->{cv}) {
             # end $left
             $left = $right;
             $right = shift @be;
             # start $right
         }
         
     };
     for my $j (@d) {
         sayyl "at j.cv";
         $being->($j);
         my $here = {%{j.s}};
         my $last = $left;
         w $R atom($here, $last);
         J.bz->(
     }
         for my $j (@{$tvs->{$jkv}}) {
             my $phia = {n=>$phi_n};
             phia.ai = 0.16;
             phia.modi = { map { $_ => 0.5 } 18..$phi_n };
             w $R phi(%$phia);
     
     
     
     
     
     
     
     
     
     
         }
     }
     
 - K: phism #c re/progressive proJammable petalis
   D: |
          my $n = ar.n || 9;
          my $width = 100;
          my $height = 100;
          my $cx = $width / 2;
          my $cy = $height / 2;
          my $lg_diam = $width * 0.85;
          my $lg_rad = $lg_diam / 2; 
          my $outer_rad = $width*0.45;
          my $angle_incr = ar.ai || 9 / $n;
          
          my $xy = [];
          for my $i (1..$n) {
              my $ratio = $i/$n;
              my $spiral_rad = ($ratio *1.3) * $outer_rad;
              my $angi = $angle_incr + 0.15;
              $angi *= ar.modi->{$i} if ar.modi->{$i};
              my $angle = 1.2+$i*$angi;
              my $x = $cx + cos($angle) * $spiral_rad;
              my $y = $cy + sin($angle) * $spiral_rad;
              push @$xy, {
                  radial => sprintf('%.2f', atan2($x - $cx, $y - $cy)),
                  angle => sprintf('%.3f', $angle),
                  x => sprintf('%.2f', $x),
                  y => sprintf('%.2f', $y),
              };
          }
          $xy
 - K: up #c
   D: |
            my $r = {map{$_=>1} sort keys %$u};
            
            my $ordy = {
                A => 1,
                id => 11,
                K => 12,
                name => 13,
                G => 14,
                R => 14,
                W => 24,
                B => 23,
            };
            my $ydro = {};
            push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
            my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
            
            my @r = grep { delete $r->{$_} } @order;
            push @r, sort keys %$r;
            
            my $ki = 0;
            my $i = 0;
            for my $k (@r) {
                my $v = $u->{$k};
                
                my $ord = $ordy->{$k} || 4;
                
                my $tee = "$k\t".'0.'.$ord;
                a.bz->($tee, ''.$v);
                
                if ($k eq 'name') {
                    a.bb->{"$k%css#wa\t"."0.$ord"} = 'border-bottom: 3px solid white';
                }
                
                $i++;
            }

