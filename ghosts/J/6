R_Jz:






 - K: geolo #c begin digging - smiling egg cup
   D: |
     my $Jeo = J.geo; # woo
     sayyl '.' for 1..5;
     
     for my $j (do{ grep { !_.style } w $R tvo(J=>J.geo); }) {
         saybl "               ^^^^ yep j.cv j.t          j.s ";
         
         J.geo.bz->("b%tr\t".j.cv => {
             %{J.geo.bb->{"b%tr\t".j.cv} || {}}, # compile trs
            j.t => j.s,
         });
     }
     
     for my $pcv (map{$_ * 0.1} 1..9) {
         my $w = "b%tr\t".$pcv;
         J.geo.bz->($w => {}) if !J.geo.bb->{$w};
         # extra stick pole, sparsitor to trace by, blank as tr(ansf)
     }
     
     # and lay out
     my $last = {x=>0.5, y=>0, cv=>0, rad=>$RADIAN, spin=>0}; # downy
     for my $j (do{ grep { _.style eq 'tr' } w $R tvo(J=>J.geo); }) {
         sayyl "       <<<< yep j.cv j.t          ".ki j.s;
         
         my $here = {};
         here.cv = j.cv;
         here.spin = j.s.curve if j.s.curve; # on the level
         here.creatin = j.s;#$H->ejson(j.s);
         
         w $R atom[$j, $here, $last];
         
         J.geo.bz->("b%ve\t".j.cv => $here);
         $last = $here;
     }
     # etc
 - K: atom #c may +atomb? without compare you are dead
   D: |
         # spacin
         here.dist = here.cv - last.cv;
         # twistin spin inherit
         here.spin += last.spin;
         # scale local-local change
         here.rad = here.spin * here.dist * 10;
         # builds rad on rad
         here.rad += last.rad;
         # and move
         here.x = last.x + (here.rad ? cos(here.rad) : 0) * here.dist;
         here.y = last.y + (here.rad ? sin(here.rad) : 1) * here.dist;
         
 - K: phairo #c re/progressive proJammable petalis, frequency convogation
   D: |
     J.pha = w G.theJ makeJ(name=>J.name.'-pha');
     
     my @d = grep { _.t eq _.l } w $R tvo[$J]; # not style or com
     my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
     
     my ($left,$right) = (undef,shift @be);
     
     for my $j (@d) {
         my $here = {};
         here.cv = j.cv;
         
         if ($right && here.cv >= $right->{cv} ) { # adjust to poli
             # mix a pool of ways, magnetic fishing rods
             # end $left
             $left = $right;
             $right = shift @be;
             # start $right
         }
         
         my $last = left.s || {};
         w $R atom[$here, $last];
         
         # unwind # TODO wind blowing crazy
         my $swish = $RADIAN*4;
         $swish *= -1 if here.rad < 0;
         # coil something something
         here.rad -= $swish until here.rad < $swish;
         
         # random angle like L, find the \ direction at least
         # its mass would be good too
         # share space with curves
         my $rad = here.rad;
         my $radleg = -$RADIAN;
         
         # from O- is it in the left hemisphere etc
         $radleg *= -1 unless $rad < -$RADIAN && $rad > $RADIAN;
         $rad -= $radleg; 
         
         ''.$H->hitime =~ /(\d)(\d)(\d)\.(\d)(\d)/;
         my @ent = reverse ($1,$2,$3,$4,$5);
         
         my $ere = {
             left => $left,
             radial => sprintf('%.4f', $rad),
             angle => sprintf('%.4f', here.rad),
             x => sprintf('%.4f', here.x),
             y => sprintf('%.4f', here.y),
         };
         
         sayre ">>>> yep @ent "
             .sprintf('%-4s', j.cv)." "
             .sprintf('%-16s', j.t)."   "
         #    .sprintf('%-19s', " * ere.radial  ere.angle here.dist")
         #    ." ".slim(j.s)
         ;
         
         J.pha.bz->(j.r => $here);
         
         J.bz->("j.t%css#pha\t".j.cv =>  # concert per emportar
             'top:'.(ere.y * 100).'%;'
             .'left:'.(ere.x * 100).'%;'
             .'position:absolute;'
               .'-webkit-transform:rotate('.ere.radial.'rad);'
               .'transform-origin:0% 50%;' # animate that bit
         );
         J.bz->("j.t%tt\t".j.cv =>  # concert per emportar
             "*".ere.radial
         );
     }

