R_Jz:
 - K: hiss #c esque pingas
   D: |
      my $J = $S;
      my $u = {
          id => "not",
          name => "ches",
          G => $G,
          more => "more",
          Bee => "stuff",
      };
      my $arr = {
          a => $J,
          J => $J,
          u => $u,
      };
      
      w $R up(%$arr);
      
      w $R round(%$arr);
      
      
      my $html = w G.theR maka(%$arr); # stuff of 7
      
      saybl "hissings:\n$html\n";
      return $html
        
 - K: round #c
   D: |
     my $tvs;
     
     # sort by voltage
     map { push @{$tvs->{_.cv}||=[]}, $_ }
       grep{ _.t eq _.l } map{ w $R shj(r=>$_,d=>a.bb); }
       $G->stylekeysort(a.bb);
       
       sayyl "\n\n\n\n";
       
     my $where = w $R phi;
       
       sayyl "\n\n\n\n";
       
     for my $jkv (sort keys %$tvs) {
         sayyl "at $jkv";
         for my $j (@{$tvs->{$jkv}}) {
             sayyl "    It's j.t !";
             my $whe = shift @$where;
             J.bz->(j.t."%css#phi"."\t".j.cv =>
               'position:absolute;'
               .'top:'.whe.x.'%;'
               .'left:'.whe.y.'%;'
             );
             # + font-size fit + whe.angle
         }
     }
       sayyl "\n\n\n\n";
 
 - K: phi #c re/progressive proJammable petalis
   D: |
          my $n = ar.n || 9;
          my $width = 100;
          my $height = 100;
          my $cx = $width / 2;
          my $cy = $height / 2;
          my $lg_diam = $width * 0.85;
          my $lg_rad = $lg_diam / 2; 
          my $outer_rad = $width*0.45;
          my $angle_incr = ar.ai || 9 / $n;
          
          my $xy = [];
          for my $i (1..$n) {
              my $ratio = $i/$n;
              my $spiral_rad = $ratio * $outer_rad;
              my $angle = 1+$i*$angle_incr;
              my $x = $cx + cos($angle) * $spiral_rad;
              my $y = $cy + sin($angle) * $spiral_rad;
              push @$xy, {
                  angle => sprintf('%.3f', $angle),
                  x => sprintf('%.3f', $x),
                  y => sprintf('%.3f', $y),
              };
          }
          $xy
 - K: up #c
   D: |
            my $r = {map{$_=>1} sort keys %$u};
            
            my $ordy = {
                A => 1,
                id => 11,
                K => 12,
                name => 13,
                G => 14,
                R => 14,
                W => 24,
                B => 23,
            };
            my $ydro = {};
            push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
            my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
            
            my @r = grep { delete $r->{$_} } @order;
            push @r, sort keys %$r;
            
            my $ki = 0;
            my $i = 0;
            for my $k (@r) {
                my $v = $u->{$k};
                
                my $ord = $ordy->{$k} || 4;
                
                my $tee = "$k\t".'0.'.$ord;
                a.bz->($tee, ''.$v);
                
                if ($k eq 'name') {
                    a.bb->{"$k%css#wa\t"."0.$ord"} = 'border-bottom: 3px solid white';
                }
                
                $i++;
            }

