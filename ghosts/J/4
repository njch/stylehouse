     
R_Jz:
 - K: up #c scan
   D: |
     Rw suck */up;
 - K: cv #c mod cove
   n_D:
     oe: |
       my $v = ar.v || ar.thi || 9;
       my $wi = length($v);
       my $thi = join '', ('9') x $wi;
       my $n = 1;
       
       my $squidge;
       if (ar.off) { # offs both ends? plot shit
           $squidge = int(ar.off * ($thi / ($v))); # TODO not quite
           $n += $squidge;
           $v += $squidge; 
       }
       
       my @is = map { sprintf '%0'.$wi.'d', $_  }
           map { $_ - $squidge }
           map { int($_ * ($thi / $v)) } $n..$v;
       
       #sayyl "thehehehhe $squidge $n $v thi $thi". wdump[@is]; 
       die "numbe rdist ".wdump(2,[$v,$wi,$thi,@is]) if uniq(@is) != @is;
       @is;
       
 - K: howge #c
   D: |
     Rw tent geo;
     J.geo.bz->(@$_) for
     Rw suck */curves,
     ;
     
 - K: geoves #c dpaw
   D: |
     my $tw = Rw muck */mods;
     # 6
     for my $k (sort keys %$tw) {
          my $M = $tw->{$k};
          # coul be entropated all the way to per geomodiff...
          # 7
          for my $m (@$M) {
              Rw modstick $J $m $k;
          }
     }
 - K: modstick #c api layer between project and hive
   D: |
     my $d = {};
     (d.t, d.thi, d.c, d.sc) = @$m;
     die if !ref d.c;
     d.c = { s => delete d.c } if !ref d.c;
     say "$k  @  d.t d.thi   ".ki(d.c||{})."    ".ki(d.sc||{});
     
     #die R.way.hooks.modn;
     Rw mod/n $J $d;
     
 - K: moss #c api layer between project and hive
   D: |
     my $d = {};
     (d.t, d.thi, d.c, d.sc) = @$m;
     d.c = { s => delete d.c } if !ref d.c;
     say "$k  @  d.t d.thi   ".ki(d.c||{})."    ".ki(d.sc||{});
     
     #die R.way.hooks.modn;
     Rw mod/n $J $d;
     
 - K: mod #c modi
   n_D:
     dosc: | #c shunt, suck, J maint wayfile story
       Rw Con mod mod/u mod/n;
     u: | #c make pool, synth space, want arches
       my $M = G.jumb.modi;
       # lop^

       # YIN
       die if d.css;
       d.css ||= [];
       d.css = ['%css', d.css] if !ref d.css;


       d.c ||= {};
       d.cs ||= {};
       d.sc ||= {};
       # d.* is arg line to mod from, from */mods
       # $c=d.c is a whole little phase, language
       # this magnet would have a thrust
       my $n; # drop values through with
       my $c = d.c; # <v contation
       die if !ref $c;
       $c = {} if !ref $c;

       my $dd = $d;
       for my $i (@is){ # THE TIR

           my $d = {%$dd, i => $i, css => [@{d.css}]};

           # YANG

           # CARBON

           # CITOZINE

           #saybl "Post: d.s       @{d.css} ";
           my $r = d.t."$i\t0.".sprintf('%03d',$i);
           # 7.1
           J.bz->(
           # 7.2
           $r => d.s,
           # 7.25
           @{d.css},
           # 7.9
           );
       }
mod c:
 - K: carbcap #c jel like language # n.gl gravity, implosi
   MZ: {}
   mod 3.9: |
     if (n.gl && @{n.gl}) {
         d.s = join'',@{n.gl};
         delete n.gl;
         # roll ^ dough, the gel that gl may be
         # now snaps off a branch
         # continuous notation we still pick up as chunks of lingo geom
     }
     # ^ es also like looking for most magnity n.thee value heading for $s
     # carbdome...
 - K: yinvis #c what it means to be here                    YIN
   mod 1: |
     # an extremity at one point
     # two places at once to pack d.in, overallness of loop
     # hex round sweepage
     d.in ||= 1;
     d.out ||= d.thi;
     my @is = map { int($_ * (999/d.thi)) } d.in..d.out;
 - K: yangco #c background language expansion, time can be grabbed, twisted
   mod 2: |
     # yang may pass arounJ komp struc intact for a while
     my $v = $i / (999 - d.in);
     n.um = sprintf '%.3d', ($i * $v + 5);
     
 - K: dsc #c cs on d, outside mod twistor pipe
   mod 7: |
     # sc.$sc -> (stable compressions), specd by the */mods vac
     # also any $sc maybe be like {$k => $sc, $k2 => $sc2}
     # for comments like v  # so comp is the very last hash, the rest is where etc.
     #push @{d.css}, '%css#'.$_ => d.cs->{$_}
     #    for sort keys %{d.cs};
     if (d.sc && %{d.sc}) {
         push @{d.css}, Rw escn $sc:d.sc sc;
     }

