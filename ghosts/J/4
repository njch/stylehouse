R_Jz:

 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} sort keys %$u};
       
       # ^ interpret # compress knowledge
       
       my $y = w $R down;
       
       # TODO ^ v wanna make it like two indexes, polars
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            # TODO 5er grab l cursor and style
            # and what kind of cursor, fro delays/syncs
            J.bz->("$_\t"."0.$cv" => '       '.$v);
            
       }
 - K: mod #c make pool
   D: |
     my $in = 1;
     
     if (ar.over) {
         $in += ar.over;
        $thi += ar.over;
     }
     
     J.bz->("$t$_\t0.".sprintf('%03d',$_) =>
         (ar.c ? ar.c->($_) : ar.s),
        @{ar.css}
        )
        for
        map {  int($_ * (999/$thi)) }
        $in..$thi
 - K: geoves #c dpaw
   D: |
     # make .......................
     # the throat
      # doubling circuit starts to 6
      # to 6 - one atom at a time as far as needs subs
      
      # the = is the mod of T, wavedd
      # TODO babble like u.stuff$_ so \w+#\w+
      # bits of this world's language compress away to geometry
     
     for (
          {
            thi => 10, t=>'sq', s => '~~~~~~~~~~~',
            css=> ['%css' => 'color:blue'],
          },
          {
            thi => 30, t=>'sqw', s => '~~~',
            css=> ['%css' => 'color:blue'],
          },
         )
         {
         w $R mod(J=>$J, %$_);
     }
         
     my $thin = 233;
     J.bz->(
        "dot$_"."\t"."0.".sprintf('%03d',$_) =>
        '.',
         '%css' => 'color:blue')
        for
        map { int($_ * (999/$thin)) }
        1..$thin;
     J.bz->(
         "0000_$_/s"."\t"."0.$_" =>
         $_."-------",
         '%css' => 'color:red')
         for 1..9;
      
     # GP PHATNESS
     my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
     for my $j (@be) {
         J.fro->("being".j.cv."\t".j.cv =>
             j.s,
             {cv=>0.2, makaz=>{ # hooky
                "/%css#jit\t"."0.1" => 'margin-left:14em;',
             }},
            '%css', 'white-space:pre;'
            );
     }

