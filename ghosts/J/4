     
R_Jz:
 - K: up #c scan
   D: |
     Rw suck */up;
 - K: cv #c mod cove
   n_D:
     oe: |
       my $v = ar.v || ar.thi || 9;
       my $wi = length($v);
       my $thi = join '', ('9') x $wi;
       my $n = 1;
       
       my $squidge;
       if (ar.off) { # offs both ends? plot shit
           $squidge = int(ar.off * ($thi / ($v))); # TODO not quite
           $n += $squidge;
           $v += $squidge; 
       }
       
       my @is = map { sprintf '%0'.$wi.'d', $_  }
           map { $_ - $squidge }
           map { int($_ * ($thi / $v)) } $n..$v;
       
       #sayyl "thehehehhe $squidge $n $v thi $thi". wdump[@is]; 
       die "numbe rdist ".wdump(2,[$v,$wi,$thi,@is]) if uniq(@is) != @is;
       @is;
       
 - K: howge #c
   D: |
     Rw tent geo;
     J.geo.bz->(@$_) for
     Rw suck */curves,
     ;
     
 - K: geoves #c dpaw
   D: |
     my $tw = Rw muck */mods;
     # 6
     for my $k (sort keys %$tw) {
          my $M = $tw->{$k};
          # coul be entropated all the way to per geomodiff...
          # 7
          for my $m (@$M) {
              Rw modstick $J $m $k;
          }
     }
 - K: modstick #c api layer between project and hive
   D: |
     my $d = {};
     (d.t, d.thi, d.c, d.sc) = @$m;
     d.c = { s => delete d.c } if !ref d.c;
     say "duck food   from  $k
           d.t d.thi   ".ind '    ',ddump(d.c)."    ".ddump(d.sc);
     
     #die R.way.hooks.modn;
     Rw modn $J $d;
     
 - K: modu #c make pool, synth space, want arches
   D: |
     my $M = G.jumb.modi;
     # lop^
     d.css ||= [];
     d.css = ['%css', d.css] if !ref d.css;

     d.in ||= 1;
     d.out ||= d.thi;

     d.cs ||= {};
     d.c ||= {};
     # d.* is arg line to mod from, from */mods
     # $c=d.c is a whole little phase, language
     # this magnet would have a thrust
     my $n; # drop values through with
     my $c = d.c; # <v contation
     $c = {} if !ref $c;
     
     my @is = map { int($_ * (999/d.thi)) } d.in..d.out;

     sayyl "atyl";
     my $dd = $d;
     for my $i (@is){ # THE TIR
     
         my $d = {%$dd, i => $i, css => [@{d.css}]};
         
         # YIN
         
         # YANG
         
         # CARBON
          
          say "Citoi $i ";
         # CITOZINE

         saybl "Post: d.s       @{d.css} ";
         my $r = d.t."$i\t0.".sprintf('%03d',$i);
         # 7.1
         J.bz->(
         # 7.2
         $r => d.s,
         # 7.25
         @{d.css},
         # 7.9
         );
     }
 - K: mod #c modi
   n_D:
     any_init: | #c
       Rw suck - */modi;
     modi: | #c shunt, suck, J maint wayfile story
       Rw Con mod modu modn;

