R_Jz:

 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} keys %$u};
       
       # ^ interpret # compress knowledge
       
       my $y = w $R down; # TODO ^make itv like two indexes, polars
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            J.bz->("$_\t"."0.$cv" => '       '.$v);
            # has l cursor stashed as a 1shj
            # TODO 5er grab l cursor and style
            # and what kind of cursor, fro delays/syncs
            # start culture
            # the middle
       }
 - K: mod #c make pool
   D: |
     a.in = 1;
     if (a.over) {
         a.in += a.over;
         a.thi += a.over;
     }
     a.css ||= [];
     
     J.bz->(a.t."$_\t0.".sprintf('%03d',$_) =>
         (a.c ? a.c->($_, $ar) : a.s),
         @{a.css||=[]}
        )
        for
        map {  int($_ * (999/a.thi)) } # THE TIR
        a.in..a.thi;
 - K: e #c
   D: |
     my $num = $i.'0' + 1250;
     my $v = $i / (a.thi / (300 - a.in));
     my $col = (/(\d)$/)[0].''.J.ent.2.''.J.ent.3;
     
     
     my @gl = map{
         unico($num+$_*10)
         .(rand(7) > 5 ? "\n".join("", (" ") x $_ ) : "");
     } 1..14;
     
     #die wdump(2,$J);
     push @{a.css},
        '%tt#ee' => "JAMTHATFUELTANK",
         '%css#egy' => 'font-size:'.($v * 0.016 + 100).'%;',
        
        '%css#olo' => 'color:#'.$col.';white-space:pre;',
        ;
     # add style tio 
     " ~".join'', @gl;
     
 - K: geoves #c dpaw
   D: |
     for (
          {
            thi => 6, t=>'sq', c => sub{
                my ($i, $ar)  = @_;
                w $R e(i=>$i, %$ar);
             },
             css=>[],
          },
          {
            thi => 30, t=>'sqw', s => '~~~',
            css=> ['%css' => 'color:blue;font-size:200%;-webkit-filter:blur(3px);'],
          },
          {
            thi => 123, t=>'dots', s => '.',
            css => ['%css' => 'color:yellow'],
          }
         )
         {
         w $R mod(J=>$J, a=>$_);
     }
     # make .......................
     # the throat
      # doubling circuit starts to 6
      # to 6 - one atom at a time as far as needs subs
      
      # the = is the mod of T, wavedd
      # TODO babble like u.stuff$_ so \w+#\w+
      # bits of this world's language compress away to geometry
     
     # TODO inmod to img
     #(B.href) = $file =~ /(i\/.+$)/;
     #S.S.Z->{'background-image'} = "url('$href')";
     
     # GP PHATNESS
     my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
     for my $j (@be) {
         J.fro->("being".j.cv."\t".j.cv =>
             j.s,
             {cv=>0.2, makaz=>{ # hooky
                "/%css#jit\t"."0.1" => 'margin-left:14em;',
             }},
            '%css', 'white-space:pre;'
            );
     }

