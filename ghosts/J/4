c: # pile of stuff on the ceiling
 - K: unico #c
   mod 3: |
      my $c = ref $cs ? $cs : {};
      my $ent = d.s =~ /^(d+)$/ ? $1 : J.ent.2;
      for my $i (1..(c.thi||24)) {
          my $entoi = $1 if ($ent * $i) =~ /(\d)$/;

          my ($b, $d) = unico($num+$i* 100 * $entoi, 1);
          my $pa = $entoi > 7 ? "  " : $entoi > 3 ? " " : "";
          push @gl, $pa.$b;
      } 1..34;
 - K: numb #c
   mod 3.1: |
     my $num = sprintf '%.3d', ($i * $v + 5);
 - K: colourins #c
   mod 3: |
     $i =~ /(\d)?(\d)?(\d)?$/;
     my $col = join'',
       map { /^.*(\d+).*$/; $1 }
       map { J.ent.3 > 6 && $_ > 5 && -4 + J.ent.3 || $_ }
       map{J.ent.1 > 6 ? $1 * (J.ent.3 / 4) :$_}
       # art this shit proply ^
     d.cs.olo = 'color:#'.$col.';white-space:pre;';
 - K: fs #c MOD MOD MOD 1=stable 2=sweep # SWIM
   mod 3: |
     my $mod = $1 if c.fs =~ s/_(\d+)$//;
     c.fs =~ s/^0(\d+)/0.$1/; # leading zeroes, etc ssquihs
     my $siz = c.fs * 9;
     $siz -= $num / $mod if $mod;
     d.cs.fsgy = 'font-size:'.$siz.'%;';
 - K: sh #c
   mod 3: |
     d.cs.awl = 'text-shadow:2px 2px 7px rgb(0,255,205)'
 - K: jamit #c
   mod 3: |
     d.cs.awl = "JAMTHATFUELTANK";
R_Jz:
 - K: up #c scan
   D: |
     Rw suck */up;
 - K: cv #c mod cove
   n_D:
     oe: |
       my $v = ar.v || ar.thi || 9;
       my $wi = length($v);
       my $thi = join '', ('9') x $wi;
       my $n = 1;
       
       my $squidge;
       if (ar.off) { # offs both ends? plot shit
           $squidge = int(ar.off * ($thi / ($v))); # TODO not quite
           $n += $squidge;
           $v += $squidge; 
       }
       
       my @is = map { sprintf '%0'.$wi.'d', $_  }
           map { $_ - $squidge }
           map { int($_ * ($thi / $v)) } $n..$v;
       
       #sayyl "thehehehhe $squidge $n $v thi $thi". wdump[@is]; 
       die "numbe rdist ".wdump(2,[$v,$wi,$thi,@is]) if uniq(@is) != @is;
       @is;
       
 - K: howge #c
   D: |
     Rw tent geo;
     J.geo.bz->(@$_) for
     Rw suck */curves,
     ;
     
 - K: geoves #c dpaw
   D: |
     J.yy.gemod = [
     Rw suck */mods,
     ];
     # 6
     for my $d (@{J.yy.gemod}) {
          $d || next;
          # coul be entropated all the way to per geomodiff...
          # 7
          w $R modu[$J, $d];
     }
 - K: modu #c make pool, synth space, want arches
   D: |
     my $M = G.jumb.modi;
     if (ref $d eq 'ARRAY') {
         my $m = $d;
         $d = {};
         (d.t, d.thi, d.s, d.c, d.css, my @etc) = @$m;
         %$d = (%$d, @etc) if @etc;
     }
     if (!ref d.c) {
         d.css = d.c; # m
         delete d.c;
     }
     # lop^
     d.css ||= [];
     d.css = ['%css', d.css] if !ref d.css;

     d.in ||= 1;
     d.out ||= d.thi;

     d.cs ||= {};
     d.c ||= {};
     my $c = d.c; # <v contation
     $c = {} if !ref $c;

     d.c = sub {
         my ($i)  = @_;
         my $v = $i / (999 - d.in);
         my @gl;
           
         # CARBON
         # 6 add style tio 
          
         @gl = d.s if !@gl;
         d.s = join'', @gl; # hmmmmmmmmm
     };

     my @is = map { int($_ * (999/d.thi)) } d.in..d.out;

     my $dcss = d.css;
     for my $i (@is){ # THE TIR
         d.css = [@{$dcss}];
         d.s = d.c ? d.c->($i, $d) : d.s;
           
         # CITOZINE
         push @{d.css}, '%css#'.$_ => d.cs->{$_}
             for sort keys %{d.cs};

         # 7
         my $r = d.t."$i\t0.".sprintf('%03d',$i);
         # 7.1
         J.bz->(
         # 7.2
         $r => d.s,
         # 7.25
         @{d.css},
         # 7.9
         );
     }
 - K: mod #c modi
   n_D:
     any_init: | #c
       my $m = G.jumb.modi = {};
       %$m = (
         Rw suck - */modi,
       );
     modi: | #c shunt, suck, J maint wayfile story
       my @mosd = 0->CsK({s=>'c'});
       my $J = Rw Carbonja c;
       # shove togeth modn
       # get a cv sorter  that puts 3 > 32, since 3 is 3 all the way down > 3232323...
       # tesalation
       my @daw = Rw tvo $J;
       my @CARBON;
       for my $j (@daw) {
           j.cv >= 3 && j.cv < 4 ? do{
                say "   CARBON JJJ ".j.r;
           } : j.cv >= 7 && j.cv < 4 ? do{
                say "   CITOZINE JJJ ".j.r;
           } : die j.cv;
       }
       
       
       return %$di
 - K: Carbonja #c 3ish
   D: |
       my $J = {};
       Rw suJ $J;
       for my $c (@mosd) {
           say "M c: c.K";
           my @wsy = grep {/ /} keys %$c;
           for my $zk (@wsy) {
               my $z = $c->{$zk};
               my ($k, $v) = split ' ', $zk;
               my $D = $z;
               my $ome = c.K;
               my $com = "# $zk @ $ome  ";
               my (@l,@r);
               # if for c.cs, for implant condits # sche
               
               # lets assume K is it
                   $com .= "cs=c.K  ";
                   unshift @l, 'if (my $cs = c.'.c.K.') {';
                   $D = ind '     ', $D;
                   push @r, '}';
               
               
               $D = join "\n", $com, @l, $D, @r;
               J bz $k#$ome $v $D
           }
       }
       $J;

