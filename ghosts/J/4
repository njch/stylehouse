R_Jz:
 - K: down #c TODO to have maintained down by what comes up from 7 via 8 in motion, tune in values
   D: |
       my $ordy = Load(<<'');
       {A: 1, id: 15, K: 17, name: 18,
       G: 14, R: 14, B: 23, more: 543}
       
       my $ydro = {};
       push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
       my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
       
       { order => \@order,
            ordy => $ordy,
       }

     
 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} keys %$u};
       
       # bunch of keys... ^ interpret, compress knowledge
       # TODO ^make itv like two indexes, polars
       
       my $y = w $R down;
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            J.bz->("$_\t"."0.$cv" => '  '.$v, '%css'=>'white-space:pre');
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # and what kind of cursor, fro delays/syncs
             # start culture
             # the middle
       }
 - K: mod #c make pool, synth space, want arches
   D: |
     if (ref $d eq 'ARRAY') {
         my $m = $d;
         $d = {};
         (d.t, d.thi, d.s, d.c, d.css, d.and) = @$m;
         %$d = (%$d, @{d.and}) if d.and;
     }
     if (!ref d.c) {
         d.css = d.c; # m
         delete d.c;
     }
     d.css ||= [];
     d.css = ['%css', d.css] if !ref d.css;
     
     d.in = 1;
     if (d.over) {
         d.in += d.over;
         d.thi += d.over;
     }
     
     if (d.c) {
         my $c = d.c;
         $c = {} if !ref $c;
         d.c = sub {
             my ($i)  = @_;
             my $v = $i / (999 - d.in);
             # 3.2
             my @gl;
             # 3.3
             # 3.4
             # 3.5
             # add style tio 
             # 3.6
             @gl = d.s if !@gl;
             d.s = join'', @gl;
         };
     }
     
     my @is = map { int($_ * (999/d.thi)) } d.in..d.thi;
     
     my $dcss = d.css;
     for my $i (@is){ # THE TIR
         d.css = [@{$dcss}];
         d.s = d.c ? d.c->($i, $d) : d.s;
         
         my $r = d.t."$i\t0.".sprintf('%03d',$i);
         
         J.bz->(
         # 7.2
         $r => d.s,
         # 7.25
         @{d.css},
         # 7.9
         );
     }
 - K: geoves #c dpaw
   D: |
     J.yy.gemod = [
     # 3.2
     Rw suck */mods,
     # 3.3
     ];
     for my $d (@{J.yy.gemod}) {
          $d || next;
          w $R mod[$J, $d];
     }
     # 4
     # 5
     # 6

