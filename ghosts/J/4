
R_Jz:
 - K: mm #c mthem
   D: |
     my $peel = sub { # simple hash from string
        my $s = shift;
        $s =~ s/^{//;
        $s =~ s/}$// || die "unpealable $s";
        my @t = split ',', $s;
        my $t = {};
        for (@t) {
            my ($k, $v) = split ':', $_;
            $t->{$k} = $v;
        }
        return $t;
     };
     my @mm=();
     my $fl={};
     for my $s (@$m) {
         my $n = {};
         if (!ref $s) {
             die "string: $s";
         }
         elsif (ref $s eq 'ARRAY') {
             # to four
             if (@$s eq 1) {
                 my ($i) = @$s;
                 if (!ref $i) {
                     my $ci = $i;
                     for (qw,t y c sc,) {
                         if ($ci =~ s/^(\S+)\s*//) {
                             my $v = $1;
                             $v = $peel->($v) if $v =~ /^{/;
                             $n->{$_} = $v;
                         }
                     }
                 }
                 else {die $i}
             }
             else {die'@>2'}
         }
         elsif (ref $s eq 'HASH') {
             if (s.MZ) {
                 for (split /\s+/, s.MZ) {
                     /^(.+?)(?::(.+))?$/ || die;
                     $fl->{$1} = $2 || 1;
                     sayre "MZfilter: $1 and $2";
                 }
                 next;
             }
             else {
             die 'hash: ';
             }
         }
         else { die "mmtype:$s" }
         for my $k (keys %$fl) {
             my $v = $fl->{$k};
             die if $v ne '1';
             Rw ym/$k $n;
         }
         push @mm, $n;
     }
     @mm
 - K: ym/pwth #c
   D: |
     n.c.pwth = delete n.y
 - K: om/bal #c enclose $whateverM into $M also balanced   # o grabs space off 2sphere
   D: |
     my ($d,$oM) = Rw iot +;
     d.y.bal = [ map {
         ref $_ eq 'HASH' || die'nothash';
         _.t || die"not: ".ki $_;
         $_
     } @$oM ];
     say "ombl:". wdump $d; 
     Rw shu + $d;
 - K: shu #c     light
   D: |
     push @{ar.M}, $d if ar.M;
     $d;
 - K: iot #c
   D: |
     my $d;
     
     my $o = Rw pul + $cs:ar.m t y c sc;
     for (qw't y c sc') { 
          exists $o->{$_} || next;
          $d->{$_} && die;
          $d->{$_} = $o->{$_};
     }
     
     if (d.y && !ref d.y) {
         d.y =~ /^($NUM)(?:-($NUM))?/ || die;
         d.y = {in=>$1};
         d.y.out = $2 if $2;
     }
     
     if (!defined d.y.in) {
         d.y.in = 0.3;
         d.y.out = 0.4;
     }
     
     d.c ||= {};
     d.sc ||= {};
     
     my $oM;
     for (grep{/^\w+M$/ || /^_$/}keys %$ar) {
         $oM && die "many oM: $_";
         $oM = $ar->{$_};
         die $oM if ref $oM ne 'ARRAY'
     }
     $d, $oM
 - K: yo #c yo
   D: |
     d.yin = d.y || die;
     if (!ar.q && !J.q) {
         sayyl "ar.k   d.t   @ @ @ @   ".ki(d.yin)."     %  "
             .ki(d.c||{})."      %  ".ki(d.sc||{})
     }
     my $V = 1;
     Rw mod/n + $V;
     
 - K: mo/m #c mod outgoing # general yinyang komprendonator, vis $M ^v^v^v^v^v
   D: |
     my $d = Rw iot +;
     d.y.bal = [ map {
           my ($t,$thing,$c,$sc) = @$_;
           my $p = {};
           p.t = $t;
           p.c = $c || {};
           p.c.s = $t if !exists p.c.s;
           p.c->{$sty} = $thing if $thing ne '';
           p.sc = $sc if $sc;
           $p
       } @$M ];
       
     d.t = $sty.'y'; 
     d.c = {%{ar.c||{}}};
     d.sc = {%{ar.sc||{}}};

     Rw yo $J $d;
 - K: mo/pwth #
   D: |
       my $sty = 'pwth';
       Rw mo/m + $sty;
 - K: modstick # api layer between project and hive # 4d
   D: |
     my $d = {};
     (d.t, d.yin, d.c, d.sc) = @$m;
     
     die if !ref d.c;
     my $wtf = ar.k || $F[4]->{point}.'ᣝ'.$F[2]->{point};
     if (!ar.q && !J.q) {
         sayyl "$wtf @ @ @ @ @ @ @ @  d.t d.yin   "
             .ki(d.c||{})."    ".ki(d.sc||{})
     }
     
     Rw mod/n + $J $d;
     
 - K: mod #c modi
   n_D:
     el:
       CARBON: | #c
         {csfrm => 'cK'}
     dosc: | #c
       Rw Con mod;
     u: | #c make pool, synth space, want arches
       # fork & rejoin to exciting place
       sayre ki $ar;
       
       # YIN

       my $n;

       my $dd = $d;
       my $i = 0;
       for my $is (@is) { # THE TIR drop at hands

           # YANG

           # CARBON

           # CITOZINE

           sayre " - ------ d.i :    d.r" if ar.V;
           #saybl "Post: d.s       @{d.css} " if ar.V;
           
           if (c.lev) {
               J.lev->(
                   d.r => c.lev,
                   @{d.css},
               );
           }
           else {
               J.bz->(
                   d.r => d.s,
                   @{d.css},
               );
           }
           $i++;
       }
mod c:
 - K: yinvis # the valley - what it means to be here in here YIN
   mod 1: |
     # sub-dome and super-modloop
     # find beginning, end, thickness of loop atmosphere
     # so thi is where the manifolds can attach in the stackening
     # the modulation piles them in evenly (todo)
     my $y = d.yin;
     if (!ref $y) {
         $y = d.yin = {thi => $y};
     }
     else {
        if (my $bs = y.bal) {
            y.thi = @$bs;
        }
     }
     y.in ||= 0.1; 
     y.out ||= 0.9; # up to
     y.thi ||= 1;
     y.space = y.out - y.in; # could spiral much space away from spine
     y.space *= -1 unless y.space > 0;
     y.aspace = y.space / y.thi;
     # twist, lay into segment
     my @is;
     my $csv = y.in;
     for (1..y.thi) {
        my $wide = sprintf '%.6f', $csv;
        my $narr = sprintf '%.6f', $_ / y.thi;
        push @is, [$wide, $narr];
        $csv += y.aspace;
     }
 - K: yangbal # background language expansion, dewey mezrow   YANG
   mod 2: |
     my $d = {%$dd};
     
     (d.cv, d.pcv) = @$is;
     d.t = d.t."".d.pcv; # delicate? y.bal overs
     
     d.css = [@{d.css||[]}];
     
     # d.c.$modk = the unravelling
     # d.cs.$modk.$esck = the outwards
     # d.sc.$esck = outwards, passed
     d.cs = {%{d.cs||{}}};
     # ^ yanging mods attach style, main accum fet: cs.$modk.$ck = $c
     # ^ fed to escitozer returns a string for '%css#$cometc$modk'=>$string
     # ^ or a bunch of ('%style'=>$value)+s, will get $cometc so all play nice
     # v this should be overkill, supposed ro or yinbal merges to new
     d.sc = {%{d.sc||{}}};
     # 
     d.c || die;
     
     my $y = d.yin;
     if (y.bal) {
         # locality
         my $b = y.bal->[$i];
         say "BAL $i at d.cv    --- d.cvint   ".ki 1, $b if ar.V;
         for my $k (keys %$b) { # c etc merg in per row
             my $v = $b->{$k};
             if (ref $v) {
                 $d->{$k} = {%{$d->{$k}}, %$v};
             }
             else {
                 $d->{$k} = $v;
             }
         }
     }
     # bal may mod t, this may wannab 
     d.r = join "\t", d.t, d.cv; # always update trio
     
     
     my $c = d.c; # <v contation
     die "notrefc  $c" if !ref $c;

 - K: yangist #c art
   mod 2.3: |
     n.um = sprintf '%.3d', d.cvint;
     
 - K: s #c yes
   mod 3.1: |
     acum $n, gl => $cs; # some funky magnation
 - K: i #c  $i is the osc, attach on $v to $n
   mod 3.1: |
     d.t = d.t."-".n.iii->{$cs}++; 
     d.r = join "\t", d.t, d.cv;
 - K: carbcap #c jel like language # n.gl gravity, implosi # agg from chaos
   MZ: {}
   mod 3.9: |
     if (n.gl && @{n.gl}) {
         my $was = d.s;
         d.s = join'',@{n.gl};
         #saybl "carb capin (was '$was') --> d.s" if ar.V;
         delete n.gl;
         # roll ^ dough, the gel that gl may be
         # now snaps off a branch
         # continuous notation we still pick up as chunks of lingo geom
     }
     # ^ es also like looking for most magnity n.thee value heading for $s
     # carbdome...
 - K: dsc #c cs on d, outside mod twistor pipe, modline 4th
   mod 7: |
     # non-thinking modulatios
     # you could say more compressed
     # usu static-ish spec, ie make this button green.
     
     # the sea of synapse we datum
     # mod spec lines go: [$l, $thi, 
     # they were found 
     # also any $sc maybe be like {$k => $sc, $k2 => $sc2}
     # for comments like v
     # so comp is the very last hash, the rest is where etc.
     #push @{d.css}, '%css#'.$_ => d.cs->{$_}
     #    for sort keys %{d.cs};
     if (d.sc && %{d.sc}) {
         push @{d.css}, Rw esc/n $d $sc:d.sc DSC;
     }
 - K: dcs #c cs in da pipe, modulating or so
   mod 7: |
     # cs.$k.$sc -> squiggly first style compressions
     # the wilder pole, coming from mods
     # there's stuff across the whole line too
     # and what's between...
     # exp to css for now...
     if (d.cs && %{d.cs}) { 
         push @{d.css}, Rw esc/n $d $sc:d.cs DCS;
     }

