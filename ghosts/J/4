R_Jz:
 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} keys %$u};
       
       # bunch of keys... ^ interpret, compress knowledge
       # TODO ^make itv like two indexes, polars
       
       my $y = w $R down;
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            J.bz->("$_\t"."0.$cv" => '       '.$v);
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # and what kind of cursor, fro delays/syncs
             # start culture
             # the middle
       }
 - K: mod #c make pool, synth space, want arches
   D: |
     if (ref $d eq 'ARRAY') {
         my $m = $d;
         $d = {};
         (d.t, d.thi, d.s, d.css, d.c, d.and) = @$m;
     }
     d.in = 1;
     if (d.over) {
         d.in += d.over;
         d.thi += d.over;
     }
     
     if (d.c) {
         my $c = d.c;
         d.c = sub {
             my ($i)  = @_;
             my $num = $i.'0' + 1250;
             my $v = $i / (d.thi / (300 - d.in));
             
             my $lastnumber = ($i =~ /(\d)$/)[0];
             
             my $col = join'',$lastnumber,J.ent.2,J.ent.3;

             my @gl;
             if (c.unico) { # some J to mod from 9
                 push @gl, map{
                     unico($num+$_*10)
                     .(rand(7) > 5 ? "\n".join("", (" ") x $_ ) : "");
                 } 1..14;
             }
             @gl = d.s if !@gl;

             #die wdump(2,$J);
             push @{d.css},
                '%tt#ee' => "JAMTHATFUELTANK",
                 '%css#egy' => 'font-size:'.($v * 0.016 + 100).'%;',
                '%css#olo' => 'color:#'.$col.';white-space:pre;',
                ;
             # add style tio 
             d.s = " ~".join'', @gl;
         };
     }
     
     my @is = map { int($_ * (999/d.thi)) } d.in..d.thi;
     
     my $dcss = d.css || [];
     for my $i (@is){ # THE TIR
         d.css = [@{$dcss}];
         d.s = d.c ? d.c->($_, $d) : d.s;
         
         my $r = d.t."$i\t0.".sprintf('%03d',$i);
         
         J.bz->($r => d.s, @{d.css});
     }
 - K: geoves #c dpaw
   D: |
     for my $d (
          { thi => 6, t=>'sq', c => {}, css=>[], },
          {
            thi => 30, t=>'sqw', s => '~~~',
            css=> ['%css' => 'color:blue;font-size:200%;-webkit-filter:blur(3px);'],
          },
          {
            thi => 123, t=>'dots', s => '.',
            css => ['%css' => 'color:yellow'],
          },
          {
            thi => 123, t=>'dotsg', s => ' z',
            css => ['%css' => 'color:black;opacity:0.4;white-space:pre;font-size:1900%;font-family:serif;'],
          }
          # 3.3 # is goni^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          ) {
          w $R mod[$J, $d];
     }
     # make .......................
     # the throat
      # doubling circuit starts to 6
      # to 6 - one atom at a time as far as needs subs
      
      # the = is the mod of T, wavedd
      # TODO babble like u.stuff$_ so \w+#\w+
      # bits of this world's language compress away to geometry
     
     # TODO inmod to img
     #(B.href) = $file =~ /(i\/.+$)/;
     #S.S.Z->{'background-image'} = "url('$href')";
     
     # GP PHATNESS
     my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
     for my $j (@be) {
         J.fro->("being".j.cv."\t".j.cv =>
             j.s,
             {cv=>0.2, makaz=>{ # hooky
                "/%css#jit\t"."0.1" => 'margin-left:14em;',
             }},
            '%css', 'white-space:pre;'
            );
     }

