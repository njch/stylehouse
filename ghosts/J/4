R_Jz:

 - K: up #c scan
   D: |
       my $u = J.on.bb->{"u\t".0.1};
       my $r = {map{$_=>1} keys %$u};
       
       # ^ interpret # compress knowledge
       
       my $y = w $R down; # TODO ^make itv like two indexes, polars
       
       my @r = grep { delete $r->{$_} } @{y.order};
       push @r, sort keys %$r;
       
       for (@r) {
            my $v = $u->{$_};
            
            my $cv = $1 if /^stuff(\d+)/;
            $cv ||= y.ordy->{$_};
            $cv ||= 4;

            J.bz->("$_\t"."0.$cv" => '       '.$v);
            # has l cursor stashed as a 1shj
            # TODO 5er grab l cursor and style
            # and what kind of cursor, fro delays/syncs
            # start culture
       }
 - K: mod #c make pool
   D: |
     ar.in = 1;
     if (ar.over) {
         ar.in += ar.over;
         ar.thi += ar.over;
     }
     ar.css ||= [];
     
     J.bz->("$t$_\t0.".sprintf('%03d',$_) =>
         (ar.c ? ar.c->($_, $ar) : ar.s),
        @{ar.css}
        )
        for
        map {  int($_ * (999/ar.thi)) } # THE TIR
        ar.in..ar.thi;
 - K: e #c
   D: |
                my @gl = map{
                    my $num = $i.'0' + 1250;
                    
                    
                    my $v = $i / (ar.thi / (300 - ar.in));
                    
                    #$v *= $v * (9 %% $i);
                    
                    push @{ar.css},
                        '%css#egy' =>
                        'font-size:'.($v * 0.006 + 200).'%;'
                        
                        ;
                    
                    # 🐵
                    # 🀐
                    ar.s = unico($num+$_*10);
                    sayre "ar s: ar.s";
                    my $od = $_ / 4;
                    
                    ar.s .= "\n" if int($od) == $od;
                    ar.s
                    
                } 1..16;
                # add style tio 
                "@@".join' ',
                #    wdump(2,{@{$_[1]->{css}}}),
                    @gl;
     
 - K: geoves #c dpaw
   D: |
     for (
          {
            thi => 10, t=>'sq', c => sub{
                my ($i, $ar)  = @_;
                w $R e(i=>$i, %$ar);
             },
            css=> ['%css' => 'color:#acf;opacity:0.2;'],
          },
          {
            thi => 30, t=>'sqw', s => '~~~',
            css=> ['%css' => 'color:blue;font-size:500%;-webkit-filter:blur(3px);'],
          },
          {
            thi => 123, t=>'dots', s => '.',
              
          }
         )
         {
         w $R mod(J=>$J, %$_);
     }
     # make .......................
     # the throat
      # doubling circuit starts to 6
      # to 6 - one atom at a time as far as needs subs
      
      # the = is the mod of T, wavedd
      # TODO babble like u.stuff$_ so \w+#\w+
      # bits of this world's language compress away to geometry
     
     # TODO inmod to img
     #(B.href) = $file =~ /(i\/.+$)/;
     #S.S.Z->{'background-image'} = "url('$href')";
     
         
     my $thin = 233;
     J.bz->(
        "dot$_"."\t"."0.".sprintf('%03d',$_) =>
        '.',
         '%css' => 'color:blue')
        for
        map { int($_ * (999/$thin)) }
        1..$thin;
     J.bz->(
         "0000_$_/s"."\t"."0.$_" =>
         $_."-------",
         '%css' => 'color:red')
         for 1..9;
      
     # GP PHATNESS
     my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
     for my $j (@be) {
         J.fro->("being".j.cv."\t".j.cv =>
             j.s,
             {cv=>0.2, makaz=>{ # hooky
                "/%css#jit\t"."0.1" => 'margin-left:14em;',
             }},
            '%css', 'white-space:pre;'
            );
     }

