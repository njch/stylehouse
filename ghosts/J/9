R_Jz:
 - K: uphere #c curve curver
   n_D:
     defauJ: |
       'geote';
     makeJ: |
       my @style = (
           'geote',
        #'unicrowd',
        #'squi',
        #'mooz', 
       ); # J.something -> something ^ -> that
       J.yt = { map{$_=>1} @style};
       
    
 - K: geote #c CURVE curver
   n_D:
     curves: |
         ["spun 0" => 0.025 ],
         ["curve 0" => -0.211],
         ["zoom 0" => 0.2 ],
         ["curve 0.21" => 0.011],
         ["zoom 0.31" => -0.09 ],
         
         ["curve\t".0.712 => -0.05],
     mods: |
       [sq   => 10,  '~~~'],
       [sqat   => 20,  '^', 'color:blue'],
 - K: unicrowd #c CURVE curver
   n_D:
     mods: |
       [zqeq => 50, J.ent.2, {unico => {thi=>9}, fs=>1_2}],
       [zqeq => 20, J.ent.2, {unico => {thi=>6}, fs=>3_2}],
       [zqeq => 10, J.ent.2, {unico => {thi=>3}, fs=>4_2}],
 - K: mooz #c
   n_D:
     mods: |
       [dotz => 22, 'z', 'color:black;opacity:0.4;white-space:pre;font-size:3200%;font-family:serif;margin-top:-25%'],
       [dots => 10, '             .', '', 'color:yellow;font-size:300%;opacity:0.5'],
       [dots => 11, '___', '', 'color:blue;font-size:300%;opacity:0.5'],
 - K: squi #c ~~~~~~~~~~~~~
   spesh: 0
   n_D:
     mods: |
       [sqw  => 25, '~~`, ~', {fs=>5_3},
       'color:#59d;-webkit-filter:blur(3px);'],
       [sqww => 13, '   ~~', {fs=>8_2},
       'color:#8ff;-webkit-filter:blur(3px);'],
     noms: |
       [sqw  => 6, ' `, `, `,', {fs=>06_2},
       'color:#05d;-webkit-filter:blur(1px);'],
       [sqw  => 3 + J.ent.2, '  ~~`, ~', {fs=>1_2},
       'color:#09d;-webkit-filter:blur(3px);'],
       [sqww => int(13 *(J.ent.2/4)), ' ??  ??', {},
       'color:#8ff;font-size:1100%;-webkit-filter:blur(3px);'],
     
 - K: geophat #c
   spesh: 0
   babz:
     'geoves 8.867738': |
       my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
       for my $j (@be) {
           my $s = j.s;
           my $creat = s.creatin;
           J.fro->("being".j.cv."\t".j.cv =>
               j.s.creatin,
               {cv=>0.8, makaz=>{ # hooky
                  "/%css#jit\t"."0.1" => 'margin-left:14em;',
               }},
              '%css', 'white-space:pre;'
              );
       }
 - K: fLan #c LOCAL AETA NETWORK
   n_D:
     flam: |
         sayre "YEp fLan";
     # redistribute from/with the shap of the = as upside down T
     # 1 circle and another kinda axis thing, making a dynamic
     # a 2 circle may involev magnetic fishing rod relay hivi too
     # pulling aspects out of the braid bed, 
     # rad per 0.1cv? who knows
 - K: nuym #c MOD MATSHUP
   babz:
     'mod#nuym 3.12345': |
             my $num = $i * $v + 5;
             $num = sprintf '%.3d',$num;
 - K: olours #c MOD MOD
   babz:
     'mod#olour 3.32345': |
             $i =~ /(\d)?(\d)?(\d)?$/;
             my $col = join'',
             map { /^.*(\d+).*$/; $1 }
             map { J.ent.3 > 6 && $_ > 5 && -4 + J.ent.3 || $_ }
             map{J.ent.1 > 6 ? $1 * (J.ent.3 / 4) :$_}
             
             $1,$2,$3;

             push @{d.css}, '%css#olo' => 'color:#'.$col.';white-space:pre;';
 - K: spfx #c MOD MOD MOD
   babz:
     'mod#olour 3.32345': |
             $i =~ /(\d)?(\d)?(\d)?$/;
             my $col = join'',
             map { /^.*(\d+).*$/; $1 }
             map { J.ent.3 > 6 && $_ > 5 && -4 + J.ent.3 || $_ }
             map{J.ent.1 > 6 ? $1 * (J.ent.3 / 4) :$_}
             
             $1,$2,$3;

             push @{d.css}, '%css#olo' => 'color:#'.$col.';white-space:pre;';
 - K: unico #c UNICO MOD MOD MOD
   babz:
     'mod#wt 3.32344': |
             if (my $un = c.unico) { # some J to mod from 9
                 $un = {} if !ref $un;
                 my $ent = d.s =~ /^(d+)$/ ? $1 : J.ent.2;
                 #push @gl, $ent;
                 # TODO abundance
                 for my $i (1..(un.thi||24)) {
                     my $entoi = $1 if ($ent * $i) =~ /(\d)$/;
                     
                     my ($b, $d) = unico($num+$i* 100 * $entoi, 1);
                     #die wdump($d) TODO
                     my $pa = $entoi > 7 ? "  " : $entoi > 3 ? " " : "";
                     push @gl, $pa.$b;
                 } 1..34;
             }
 - K: fs #c MOD MOD MOD
   babz:
     'mod#fs 3.532332': |
             if (c.fs) {
                 my $mod = $1 if c.fs =~ s/_(\d+)$//;
                 c.fs =~ s/^0(\d+)/0.$1/; # leading zeroes, etc ssquihs
                 my $siz = c.fs * 9;
                 $siz -= $num / $mod if $mod;
                 push @{d.css}, '%css#egy' => 'font-size:'.$siz.'%;';
             }
 - K: shtackedo #c
   babz:
     'mod#shtakc 7.5263': |
       '%css#awl', 'text-shadow:2px 2px 7px rgb(0,255,205)'
 - K: jam #c
   babz:
     'mod#jam 3.43232': |
             if (c.jamit) {
                 push @{d.css}, '%tt#ee' => "JAMTHATFUELTANK"
             }
 - K: jextr #c 
   babz:
     'stev#jext 5.7': |
       # add conditional: if J.yp.jextr # woosh
       J.bz->("$_%css#uff\t".j.cv => 'opacity:0.7;') when /^stuff(\d+)/;
 - K: namebo #c
   babz:
     'stev#namebo 5.77': |
        J.bz->("$_%css#wa\t".j.cv => 'border-bottom: 3px solid white')
        when 'name';

 - K: tout #c ~~~~~~~~~~~~
   fishes:
     oly: fan
   D: |
     my $dis = int(rand 5);
     my $win = join '', (" ") x $dis;
       #my $tout = sub {
       #    my $c = shift;
         [sqw  => 33, $win.' 1 0 1 0',
           'color:#95d;font-size:'.($dis * (1800/5)).'%;-webkit-filter:blur(1px);white-space:pre;'],
       #};

