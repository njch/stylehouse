R_Jz:
 - K: geote #c CURVE
   babz howge 2.24357: |
     # some day
   n_D:
     curves: |
         ["curve\t"."0.6" => 0.12],
         #["curve\t"."0.7" => -0.45 ], 
         ["curve\t"."0.8" => 0.22 ],
         #["faster\t"."0.6" => 0.32 ], # this'll cuvre tighter and tigher
 - K: fLan #c
   n_D:
     flam: |
         sayre "YEp fLan";
     # redistribute from/with the shap of the = as upside down T
     # 1 circle and another kinda axis thing, making a dynamic
     # a 2 circle may involev magnetic fishing rod relay hivi too
     # pulling aspects out of the braid bed, 
     # rad per 0.1cv? who knows
 - K: nuym #c
   babz:
     'mod#nuym 3.12345': |
             my $num = $i * $v + 5;
             $num = sprintf '%.3d',$num;
             #saygr "nuym $v   \t\t d.s ";
 - K: fs #c
   n_D:
     fis: |
       sayre "Yo";
   babz:
     'mod#fs 3.532332': |
             if (c.fs) {
                 my $mod = $1 if c.fs =~ s/_(\d+)$//;
                 c.fs =~ s/^0(\d+)/0.$1/; # leading zeroes, etc ssquihs
                 my $siz = c.fs * 9;
                 $siz -= $num / $mod if $mod;
                 push @{d.css}, '%css#egy' => 'font-size:'.$siz.'%;';
             }
 - K: shtackedo #c
   babz:
     'mod#shtakc 7.5263': |
       '%css#awl', 'text-shadow:2px 2px 7px rgb(0,255,205)'
 - K: olours #c
   babz:
     'mod#olour 3.32345': |
             $i =~ /(\d)?(\d)?(\d)?$/;
             my $col = join'',$1,$2,$3;

             push @{d.css}, '%css#olo' => 'color:#'.$col.';white-space:pre;';
 - K: unico #c UNICO
   babz:
     'geoves#unico 3.233': |
       [zqeq => 20, J.ent.2, {unico => {thi=>10}, fs=>6_4}],
     'mod#wt 3.32344': |
             if (my $un = c.unico) { # some J to mod from 9
                 $un = {} if !ref $un;
                 my $ent = d.s =~ /^(d+)$/ ? $1 : J.ent.2;
                 push @gl, $ent;
                 for my $i (1..(un.thi||24)) {
                     my $entoi = $1 if ($ent * $i) =~ /(\d)$/;
                     my ($b, $d) = unico($num+$i* 100 * $entoi, 1);
                     #die wdump($d) TODO
                     $b .= "  " if $entoi > 7;
                     push @gl, $b;
                 } 1..34;
             }
 - K: jam #c
   babz:
     'mod#jam 3.43232': |
             if (c.jamit) {
                 push @{d.css}, '%tt#ee' => "JAMTHATFUELTANK"
             }
 - K: squaga #c ~~~~~~~~~~~~~~~~
   spesh: 0
   babz:
     'geoves#squa 3.2433': |
       [sq   => 9,  '~~~'],
       
       #Rw tout + sqw variat ~~fs1600%s3,
       
       #Rw squi qw,
 - K: moogafoog #c
   spesh: 1
   babz:
     'geoves#moo 3.2': |
       [dotz => 22, ' z', '', 'color:black;opacity:0.4;white-space:pre;font-size:1000%;font-family:serif;'],
       [dots => 10, '.', '', 'color:yellow;font-size:300%;opacity:0.5'],
       [dots => 11, '___', '', 'color:blue;font-size:300%;opacity:0.5'],
 - K: jextr #c 
   babz:
     'stev#jext 5.7': |
       # add conditional: if J.yp.jextr # woosh
       J.bz->("$_%css#uff\t".j.cv => 'opacity:0.7;') when /^stuff(\d+)/;
 - K: namebo #c
   babz:
     'stev#namebo 5.77': |
        J.bz->("$_%css#wa\t".j.cv => 'border-bottom: 3px solid white')
        when 'name';
 - K: geophat #c
   spesh: 1
   babz:
     'geoves 8.867738': |
       my @be = grep { _.style eq 've' } w $R tvo(J=>J.geo); # poli
       for my $j (@be) {
           J.fro->("being".j.cv."\t".j.cv =>
               j.s,
               {cv=>0.2, makaz=>{ # hooky
                  "/%css#jit\t"."0.1" => 'margin-left:14em;',
               }},
              '%css', 'white-space:pre;'
              );
       }
 - K: marqueeze #c
   quee: |
     # GP PHATNESS
         my $lies = join '', qw'
          overflow-x:-webkit-marquee;
          -webkit-marquee-direction:backwards;
          -webkit-marquee-style:slide;
          -webkit-marquee-speed:fast;
          -webkit-marquee-increment:large;
          -webkit-marquee-repetition:6;
          font-size:1.4em;
          ';
 - K: squi #c ~~~~~~~~~~~~~
   spesh: 1
   D: |
       [sqw  => 25, '~~`, ~',
       'color:#59d;font-size:1400%;-webkit-filter:blur(3px);white-space:pre;'],
       [sqww => 13, '   ~~', {},
       'color:#8ff;font-size:1100%;-webkit-filter:blur(3px);white-space:pre;'],
       [sqw  => 6, ' `, `, `,',
       'color:#05d;font-size:600%;-webkit-filter:blur(1px);white-space:pre;'],
   D: |
       [sqw  => 35, '  ~~`, ~',
       'color:#09d;font-size:1400%;-webkit-filter:blur(3px);white-space:pre;'],
       [sqww => 13, ' ??  ??', {},
       'color:#8ff;font-size:1100%;-webkit-filter:blur(3px);white-space:pre;'],
     
 - K: tout #c ~~~~~~~~~~~~
   fishes:
     oly: fan
   D: |
     my $dis = int(rand 5);
     my $win = join '', (" ") x $dis;
       #my $tout = sub {
       #    my $c = shift;
         [sqw  => 33, $win.' 1 0 1 0',
           'color:#95d;font-size:'.($dis * (1800/5)).'%;-webkit-filter:blur(1px);white-space:pre;'],
       #};

