R_Jz:
 - K: foot #c fo9od
   n_D:
     yJup: |
       'foot', 'food',
     curves: |
       ["spun 0" => .55],
       ["y 0" => 1],
       ["x 0" => 0.1],
       ["zoom 0" => 0.06],
       ["curve 0.1" => -0.024],

       #["zoom 0.4" => -0.12],
       ["curve 0.4" => 0.3],

       ["curve 0.7" => 1.1],
     mods: |
       [sqww => 23, 'ஓ୶', #{fs=>5_2},
       'color:#8ff;-webkit-filter:blur(3px);margin-left:3em'],
 - K: food #c
   n_D:
     entropia: | #c
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl "ollox has: ". @yt;
       return 'drone';
     up: | #c
       my $cra = 9;
       saybl "YAYAAAYAYAAAYAYAAAYAYAAAYAYAAA" for 1..2;
       my $curves = J.ent.of.curves;
       # intent of which curve line the bz is for
       # bz inted
       # 
       my $n = Rw Jung;
       
       my $J3 = n.Hull;
       
       my @what = Rw huck */mods $J:J3;
       
       J.bible ||= [split /\n/, $H->slurp('not')];
       
       my @l = (shuffle @{J.bible})[0..8];
       my $thi = @l;
       
       say @l;
       # be anchoring a spiral uncoiling against/with this hull
       #my $off = 1;
       my @cvs = Rw cv/oe $thi;
       say "cv food: @cvs"; 
       
       for my $l (@l) {
            my $cv = shift @cvs || die;
                 J.bz->("lab$cv 0.$cv" => "$l",
                        #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    #    "%css#laob" => 'margin-left:2em',
                 ); 
       }
       

       
       #c
       # know to relab the ups... unless up is all innessed
       # which is the next level from entropia
       # which is working with the index
       # chucking things in in phases
       # watching whatever divisible patch of code bzs
       # by way of bz hooking phase relations into an index
       
       # bzl linked cache of time-div things
       
       # content and intent indexed through time
       # by babz in the data pipeline analyzing them
       
       # specifying things
       # anything can yJup some styles to J.ywhatever
       # that babz on the ground talk about
       
       
       # mods be mutable
       # J.yy.gemod
           #    mutable 
        #        unless the particular suckage J.yz.immu
       # J.yy.round
       #    depends on everything but probably triplets of balance around new stuff
       #    req new/old wtf-ish 
       #     have lost that one bit of code that divided space
       
       # probably tries harder to not try hard to get it just right
       # but make it easy to fit in
       
       # so round would care about new & old particles
       # but only from the new ones
       # as would 6 & 7
       # maka messplit off with /s
       # replacing the whole thing down the last id or maybe further
       # so it could say append after the last of the whatever types of things
       # schools of thought hanging in groups like so
       
       # or the whole $id thing reconcat with various updates
       
       # the concat could be yet another structure, not html
       # which compresses somewhere to js
       
       # then all these images can go as one toof jump
       # so each compressor starts in jumb
       # joins what we want to express skinny, the tool for unpacking that in js
       # so its json
       
       # pass a json J across the wire
       # but it's just {einkomp:[... idless... elvin
       # unpack argv plan into hash behind the way
       #   senJ:
       #     whereto x how x what
       #     #ux.append(c.Jwip->(what))
       #   Jwip:
       #     bunch of elements to make # from json?
       #     tag, id, style (c even), class
       #     + recursion, belated above 
       #   someJ:
       # 
       # 
       
       
       
       
       
       # round does layout with fatter humming style
       # gaps can be bent into
       
       
       # here's the mux less id again
       
       # what are the intent levels
       # 6 is the easiest where everything is the same
       # when would some 5 need too..
       # 
       # 
       
       # framerate of the projection
       # of curves, mods, etc
       # from their nooks
       # from up
       # label each intent, where time comes from
       # so there's inside and outsideness
       # anything cradled by projection
       # and sometimes there's a new one
       # there's probably a state for outsideness
       # and nativity waiting, accepting things
       # mapping to concept
       # and sticking out
       
       # so any bz action is bound to be while the bzl
       # is somewhere
       # it is the bezeling of the J embryo
       # embezzling particles in time
       
       # we can know about their radial sources like ghost files
       # and hang their immutability from there
       
       # so each and everything gets renoticed
       
       # pat if few extra things come along
       # can know how to round faster
       # by dividing space with poles again
       # and trying to fill up 1-4 like 1-2, 3-4 like water in the swamp around 3 up 4
       # the right hemisphere of the 4-5
       # the ropes descending down cliffs of time in 6
       # so what you pour in the top can be shunted
       # also forked away for miles
       
       
       # curves, mods, etc get intent (sucked data)
       # mapped before/after
       
       # inness affects intent
       # 
       # if function mutable
       # style with immutable curves chucks a flag in yJup
       # by naming and $i++ each phase
       
       
       
       # shift click gp to open ways to the path, next
       #  could js lamb out to a little directory of other spirals that can play with it
       # then just maintain that directory...
       # and the whole non-tent J directory
       
       
       
       # and some jumbles of words like a tool shelf
       # pile of stuff in Egypt
       
       # 0 is always, 1 is first etc
       # the iter by name and 
       # so first bb is 0 and 1
       #  then rejhi iter
       # bb is 0
       # old bb is 1
       # bb is 2
       
       # so there's a whole set of language to do with which phase...
       # you want to look at
       # J.py.i could be 5, so J.yu.
       
       # J.yit.
       
       # C V FOOD.
       
       # since 
       
       
       
       
       
       
       # index J.yii  so .0 is the now, same hash as bb
       # 
 - K: cv #c mod cove
   n_D:
     oe: |
       my $v = ar.v || ar.thi || 9;
       my $wi = length($v);
       my $thi = join '', ('9') x $wi;
       my $n = 1;
       
       my $squidge;
       if (ar.off) {
           $squidge = int(ar.off * ($thi / ($v))); # TODO not quite
           $n += $squidge;
           $v += $squidge; 
       }
       
       my @is = map { sprintf '%0'.$wi.'d', $_  }
           map { $_ - $squidge }
           map { int($_ * ($thi / $v)) } $n..$v;
       
       #sayyl "thehehehhe $squidge $n $v thi $thi". wdump[@is]; 
       die "numbe rdist ".wdump(2,[$v,$wi,$thi,@is]) if uniq(@is) != @is;
       @is;
       
 - K: foody #c
   n_D:
     fresh_init: |
       push @{G0.recoded_cbs}, sub {
         my $Gd = shift;
         sayre "FOOOOT ".wdump(2,$Gd);
       };
       return ;
     nothing: |
       
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift;
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       }); 
     stylesheet: |
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
       # y

