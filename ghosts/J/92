R_Jz:
 - K: foot #c fo9od
   n_D:
     styJup: |
       'foot', 'food',
     curves: |
       ["spun 0" => .45],
       ["y 0" => 1],
       ["x 0" => 0.1],
       ["zoom 0" => 0.06],
       ["curve 0.1" => -0.4],

       ["zoom 0.4" => -0.12],
       ["curve 0.4" => -0.7],

       ["curve 0.8" => -1.4],
     mods: |
       [sqww => 23, 'ஓ୶', #{fs=>5_2},
       'color:#8ff;-webkit-filter:blur(3px);margin-left:3em'],
     stylesheet: | #c
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
       # y
 - K: food #c
   n_D:
     entropia: |
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl _.r for @yt;
       return 'drone';
     up: | #c
       my $cra = 9;
       sayyl "RAWR";
       saybl "YAYAAAYAYAAAYAYAAAYAYAAAYAYAAA" for 1..4;
       my $curves = J.ent.of.curves;
       my $wd = wdump((J.oone ||= 2), $curves);
       my @l = split /\n/, $wd;
       my $thi = @l;
       
       # be anchoring a spiral uncoiling against/with this hull
       #J.lev->("wiggle 0.4", sub { # become obvio overlay to content
       #    my $J2 = shift;
           my $off = 4;
           my @cvs = Rw cv/oe $off $thi;
           say "cv food: @cvs"; 
           for my $l (@l) {
               my $cv = shift @cvs || die;
               J.bz->("lab$cv 0.$cv" => "   $cv $l",
                        #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                        "%css#laob" => 'margin-left:4em',
                         '%css#ttt' => 'white-space:pre;'
               );
           }
       #},); 
       
 - K: foody #c
   n_D:
     fresh_init: |
       push @{G0.recoded_cbs}, sub {
         my $Gd = shift;
         sayre "FOOOOT ".wdump(2,$Gd);
       };
       return ;
     nothing: |
       
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift;
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       });
       
 - K: cv #c mod cove
   n_D:
     oe: |
       my $v = ar.v || ar.thi || 9;
       my $wi = length($v);
       my $thi = join '', ('9') x $wi;
       my $n = 1;
       
       my $squidge;
       if (ar.off) {
           $squidge = int(ar.off * ($thi / ($v))); # TODO not quite
           $n += $squidge;
           $v += $squidge; 
       }
       
       my @is = map { sprintf '%0'.$wi.'d', $_  }
           map { $_ - $squidge }
           map { int($_ * ($thi / $v)) } $n..$v;
       
       #sayyl "thehehehhe $squidge $n $v thi $thi". wdump[@is]; 
       die "numbe rdist ".wdump(2,[$v,$wi,$thi,@is]) if uniq(@is) != @is;
       @is;
       

