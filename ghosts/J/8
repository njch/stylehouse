R_Jz:
 - K: event #c ITS COMING BACK AROUND # care bout acJuatoring
   D: |
     my $id = e.id;
     sayyl "ID: $id";
     
     my $fro = J.gpa.pis->{$id} || return warn "non $id";#.wdump(2,J.gpa);
     # path must be somewhere around here...
     # on the gp's / which is inside yet outsideness, or the lev... whatev.
     # TODO look-around-for %whatever
     # way is a weird uri-ish string, like {key
     
     my ($the) = my @pathy = Rw uptopathway $lim:J $J:fro;
     die wdump(\@pathy) if @pathy != 1;
     my $t = the.s;
     
     # look for whole l ness
     Rw conty $t, $J3:J;
     
     waylay 3 mux(u=>$J);
     
 - K: uptopathway #c up from J until a %path, but not too far
   D: |
     my $i = 0;
     until ($J eq $lim) {
         my $Jit = J.Jiter;
         my $j = $R->shj(J.r, Jit.bb);
         my $ip = {l => j.l, style => 'path'};
         my @junk = Rw tvo $J:Jit $ip;
         return @junk if @junk;
         die if $i++ > 9;
         $J = $Jit;
     }
     
 - K: conty #c hit J bit, somethingsomething
   D: |
     my $J = J3.jointed;
     say "Finding ".$J->pi."\njoitnted from ".$J3->pi;
     
     my $J2 = Rw suck $J */hijack;
     
     say "Got new ".$J2->pi;
     J2.onei = {%{J3.onei}};
     J2.onei.t = [@{J2.onei.t}] if J2.onei.t;
     
     Rw inness $J:J2 $t;

