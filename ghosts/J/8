R_Jz:
 - K: event #c ITS COMING BACK AROUND # care bout acJuatoring
   D: |
     saybl (join("      ", (" JJJ ".$J->pi) x 7)) x 3;
     sayyl "ID: e.id";
     
     if (e.type =~ /^key/) {
          my $dont = 0;
          for (e.k) {
              when ('G') {
                  return if fork();
                  sayre `figlet GIT`;
                  # TODO forking pyramid isolator with error report
                  `ssh v 'export DISPLAY=":0"; ssh s "cd styleshed; git gui"'`;
                  exit;
              }
              when ('C') {
                  H.G w reexec;
              }
              when ('J') {
                  w jak;
              }
              default { $dont = 1}
          }
          return sayyl "Served e.k" if !$dont;
     }
     
     Rw suck + */conty;
     
      # auth between ^ v
      
     waylay 0.3 mux(u=>$J);
      
 - K: keys #c click
   D: |
     Rw suck */keys $J $e;
 - K: upath #c find %path or so between J and J2, a subj, FUZZ
   D: | # it's making spirals of looking for things to jump forward with
     my $py = {Jr=>J.r||J.name, J2r=>J2.r||J2.name};
     
     sayyl "upthy: ".gp($J)."          <->   ".gp($J2);
     # probly wanna start on the random little thing
     
     my $Jo = $J2;
     while (1) { # lurch upwards towards the...
         saybl "  ? ".gp(Jo.Jiter);
         saybl "has: Jo.r";
         sayre("hno Jitter") && last if !Jo.Jiter;
         # see if this Jo thing has any styles above
         # .r was a phro/lev thing , blend J j
         my $j = Rw shj $r:Jo.r $J:Jo.Jiter;
         my $ip = {l => j.l};
         my @junk = Rw tvo $J:Jo.Jiter $ip;
         my (@path) = grep { _.style eq 'path' } @junk;
         sayyl "lolking through ".join" ", map{_.t} @junk;
         
         die @path if @path > 1;
         unless (@path) {
             sayre "nothing in...";
         }
         else {
            my ($path) = @path;
            py.pathy = path.s;
            push @{py.paths||=[]}, \@junk;
         }
         last if $Jo eq $J; # complete
         $Jo = Jo.Jiter; # move up
     }
     return $py;
     

