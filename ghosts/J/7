R_Jz:


 - K: outhere #c out
   D: |
     my @d = grep { _.t eq _.l } w $R tvo(J=>J.pha); # !style||com
     
     for my $j (@d) {
         my $here = j.s;
         # unwind # TODO wind blowing crazy
         my $swish = $RADIAN*4;
         $swish *= -1 if here.rad < 0;
         # coil something something
         here.rad -= $swish until here.rad < $RADIAN*4;
         
         # random angle like L, find the \ direction at least
         # its mass would be good too
         # share space with curves
         my $rad = here.rad;
         my $radleg = -$RADIAN;
         # and pan to hemisphere...#
         # from O- is it in the left hemisphere etc
          $radleg *= -1 unless $rad < -$RADIAN && $rad > $RADIAN;
         $rad -= $radleg; 
         
         my $ere = {
             left => here.left,
             radial => sprintf('%.5f', $rad),
             angle => sprintf('%.5f', here.rad),
             x => sprintf('%.5f', here.x),
             y => sprintf('%.5f', here.y),
         };
         
         #sayre ">>>> yep @ent  j.cv    ". j.t;
         
         # loses its compressibility as csz
         # unless we use %css#omments to spread em
         for (
         [ XY => {
           top => (ere.y * 100).'%',
           left => (ere.x * 100).'%',
         } ],
         [ Ro => {
           '-webkit-transform' => 'rotate('.ere.radial.'rad)',
         } ],
         [ R => {
           position => 'absolute',
           'transform-origin' => '0% 0%',
         } ],
         ) {
             J.bz->("j.t%css#pha-$_->[0]\t".j.cv => $_->[1]); # concert per emportar
         }
         
         J.bz->(
             "j.t%tt\t".j.cv =>  # concert per emportar
             "*".ere.radial
         );
      }
      Rw suck */outhere;
      sayre join " ", (">") x scalar(@d);

 - K: occie #c style komerp # occasional (page) global aggregate
   spesh: 0
   babz:
     'maka 6': |
       do {
       my (@css,@class);
       for my $cs (@$css) {
           # saybl " a bit $cs";
           G.jumb.shtuuyle->{$cs}++; #<in vout
           if (my $class = G.jumb.shtdc->{$cs}) {
               say "HAVE $class for $cs";
               push @class, $class;
               #at.tag = $class; # TODODORORO
           }
           else {
               push @css, $cs;
           }
       }
       at.class = join' ',@class if @class;
       # and redo:
       at.style = join '', map{"$_;"}
       grep{defined} map { split ';' } @css;
       };
   n_D:
        komp: |
            my $dc = G.jumb.shtuuyle || return;
            my $sd;
            my $byii;
            push @{$byii->{$dc->{$_}}||=[]}, $_ for keys %$dc;
            my $limit = 250;
            my $bored = 5; # bored lower than 5, or as ratio once rolling
            my @order = reverse sort {$a<=>$b} keys %$byii;
            for my $usk (@order) {
                my $us = $byii->{$usk};
                say "usk $usk  of ".scalar(@$us);
                last if $usk < $bored;
                for my $u (@$us) {
                    last if $limit-- < 1;
                    my $sty = join '', map{"$_;"} grep{defined} split ';', $u;
                    die unless $sty;
                    my ($heex) = $H->dig($sty) =~ /^(...)/;
                    $heex =~ tr/0123456789/ghijklmnop/; # no numbers
                    # TODO pack hex into unibabl
                    $sd->{"s".$heex} = $sty;
                }
            }
            if (!$sd) {
                # TOO MUCH NOTHING
                sayyl "NOTHING TO COMPRESS" for 1..20;
                return;
            }
            sayyl "compression is ".scalar(keys %$sd)." wide";
            G.jumb.shtdc = {reverse %$sd};

            # ^ to maka
            # v to elvis

            my $as = {K=>'style', B=>{am=>'styleyo'}};
            my $st = w G.R fuu(u=>$as);
            my $was = st.sheet;
            # TODO more accumo, and compress the compression
            st.sheet = join "\n", map { ".$_ { $sd->{$_} }" } sort keys %$sd;
            # TODO style order massively important
            # for regrouping s;t;y;l;e into sma;ll;er st;yles
            # need well oiled J to do it right
            # also may compress sheet updates with text append...
            # and many sheets at levels of holiness
            w mux(u=>$st) if st.sheet ne $was;

      
 - K: retile #c # TODO use L & J
   D: | 
    my @m = map { /W\/(.+)$/ } H.r->keys("W/*");
    @m = map { $H->djson(H.r->get("W/$_")) } @m;
    
    H.G w TODOWhack(meta=>$_) for grep { _.dead } @m;
    @m = grep { !_.dead } @m;
    
    @m = grep { _.styles =~ /\bNZ\b/ } @m;
    @m = sort { a.hol cmp b.hol } @m;
    
    my $space = 1;
    $space += 0.5 until $space * $space >= @m;
    my $r = floor $space;
    my $l = ceil $space;
    my $div = ["width:left $l", "height:top $r"];
    
    say "needed ".@m." so $space is $l $r";
    
    my $grid = {};
    for my $p (@$div) {
        my ($iv, $parts) = split ' ', $p;
        my ($mags, $ax) = split ':', $iv;
        # magnitudes of width
        # axed from unified by left, etc.
        my $in = sprintf("%.3f", 1 / $parts);
        
        my @ground = map { [$_ => $grid->{$_} ] } sort keys %$grid;
        @ground = [] if !@ground;
        my $pole = [];
        $grid = {};
        
        my $here = 0; # in accum
        for my $i (1..$parts) {
            my $ox = {};
            ox.part = $i;
            $ox->{$ax} = $here;
            $here += $in;
            $ox->{$mags} = $in;
            push @$pole, $ox;
        }
        
        for my $g (@ground) {
            my ($k, $v) = @$g;
            $v ||= {};
            for my $ox (@$pole) {
                my $K = (defined $k?"$k ":"") . ox.part;
                my $x = $grid->{$K} = {%$v, %$ox};
                delete x.part;
            }
        }
    }
    
    my @holes = sort keys %$grid;
    say "Got ".@m." pegs for ".@holes." holes: ".wdump[@m];
    for my $meta (@m) {
        my $h = shift @holes;
        my $o = {%{$grid->{$h}}};
        
        $o->{$_} = ($o->{$_} * 100)."%" for keys %$o;
        
        meta.ces = $o;
        H.r->set("W/meta.Wid" => $H->ejson($meta));
        
        my $cssset = ".animate(".$H->ejson($o).", 0)";
        my $unhide = ".removeClass('NZ')";
        
        $H->send(" \$('#".meta.Wid."')$cssset$unhide".";");
    }
 - K: maka #c
   D: |
     die if ar.hello;
     my $J = ar.J || ar.a;
   babz:
     'maka 1': | #c should be J/1 in gpasm
       if (my $id = J.isJid || J.replaceJid) {
           J.bz->("/%id\t0.9" => $id);
       }
       if (my $tod = J.makaz) {
           for (keys %$tod) {
               J.bz->($_ => $tod->{$_})
           }
       }
     'maka 2.5': | #c zurp stylepliers
         for my $k (%{J.bb}) {
             if ($k =~ /^(\S*(?:oB|Bo|Bi|Bs))\s+(.+)$/) {
                 J.bb->{"$1\%css#maka25\t$2"} = "color:black";
             }
             if ($k =~ /^thi\s+(.+)$/) {
                 J.bb->{"thi\%css#maka25\t$1"} = "text-decoration:underline";
             }
             if ($k =~ /^name\s+(.+)$/) {
                 J.bb->{"name\%css#maka25\t$1"} = "color:#f93;";
             }
             if ($k =~ /^K\s+(.+)$/) {
                 J.bb->{"K%css#maka25\t$1"} = "color:#3f3";
             }
         }
     'maka 4': | #c thingness <-> appearance
       J.o = {};
       # shall create "/ 0.99" => something for this element
       # so that things last, embeds contooz
       # maybe J.by.maka.whol describes it, and provides its contooz (@s)
           # execution order in J.o is ev
           # / thing knows how to suck up others
       my @things = Rw tvy $J;
       my @s;
       J.ty.maka.s = \@s;
       for my $thing (@things) {
           my ($j, @sjs) = @$thing;
           my $s = j.s;
           my $l = j.l;
           sayre "y hello ".wdump(1,$thing) if j.l ne j.t;
           
           my $cssdb = 0;
           
           sayyl " thji: j.r" if $cssdb;
           die if j.cv == 0.9 && j.l ne '/';
           die "reffy $s in $l".wdump(2,$j) if ref $s;
           
           # top volt for thing selection?: # whattage
           # skip overlap of K + name
           next if $l eq 'K' && J.bb->{"name 0.1"} eq $s
              && $s ne J.bb->{"K 0.2"};

           my $ishtml;
           my $at = {};
           # my $cs = {}; # %(style) / #(comment) / $translation ?
           # trying with @$css
           my $css = []; # TODO harder, like style / comment = $v
           # , can know how to accum/comrpess nice
           
                   # < >< >< >?
                   # < >< >< >?
                   # < >< >< >?
     'maka 5.3': | #c thingness
           if ($l eq '/') { # swoosh, swallows up the rest of @s
               # could know this is coming and defer tiny contents
               # favour big picture, only need to surf by...
               # water keeps watering anywhere you look at it
               # the @s gets too big for one message too
               $ishtml = 1;
               $s = join "", @s;
               @s = ();
           }
     'maka 5.5': | #c appearance
           for my $oj (@sjs) {
               # TODO here Jung Cs have injected langauge to grab themselves by...
               for (oj.style) {
                   # < >< >< >?
                   # < >< >< >?
                   # < >< >< >?
                   $ishtml = 1 when 'gp';
                   $ishtml = 1 when 'lp';
                   $ishtml = 1 when 'ishtml';
                   # has a way to $a the gp action within...
                       
                   when ('sf') {
                       my @cs = map { $R::f->{$_} || die "no style $_"}
                           split '_', oj.s;
                       push @$css, @cs;
                       say "bit of sf: oj.s := @cs" if $cssdb;
                   }
                   when ('css') {
                       my $cs = oj.s;
                       $cs = join ';', map{"$_:$cs->{$_}"}
                           sort keys %$cs
                           if ref $cs;
                       push @$css, $cs;
                       say "bit of css: $cs" if $cssdb;
                   }

                   at.id = oj.s when 'id';
                   at.title = oj.s when 'tt';
                   at.tag = oj.s when 'tag';

                   # TODO compile J.ys
                   1 when 'path';
                   1 when 'origin';
                   1 when 'waves';
                   1 when 'Joint';
                   1 when 'lp';
                   default {
                       die "style oj.style = oj.s \t for $l";
                   }
               }
           }
           @$css = map {
               join '', map{"$_;"} grep{defined} split ';', $_
           } @$css;
           # TODO hold things in pockets relative to origin css comment
           # to help things break down into styles better
           at.style = join '', map{"$_;"}
               grep{defined} map { split ';' } @$css;
           
           # /////////////////////////////////////////////////////
           
     'maka 7': | #c thingness <-> appearance
       # stylecompressor 3s6 aboves
       # hooch
           if (at.title || !a.untitled) {
               at.title = join " ", grep{defined}
                   (!a.untitled ? "j.cv $l" : undef),
                   (at.title ? at.title : undef);
           }
           my $tag = delete at.tag;
           saybl "Tag! $tag" if $tag;
           $tag ||= "añ";
           $at = join " ", $tag,
               map { saybl " : $_ " if $cssdb; $_ }
               map { $_.'="'.$at->{$_}.'"' } # attra
               grep { $at->{$_} } sort keys %$at;
           
           $s = encode_entities($s) if !$ishtml;
           $s = "<$at>$s</$tag>" if defined $s;
           push @s, $s;
       }
       @s = "no?" if !@s;
       my $html = join '', @s;
       $html;
         

