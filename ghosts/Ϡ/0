name: Ï 
etc: intoraction...
tractors:
  - K: 'Ï t'
    max_populi: 2
    arr_if: |
      $name && $name ne "0" && $name ne "1" || die;
    B_: |
      $name
    print: |
      $S->{B}->{_}      
hooks:
  V:
    ux:
      styles: cardboard ux
  styles:
    cardboard: |
      qw{
         position:absolute overflow:hidden
          background:#235
         -webkit-transform:scale(0.7,0.5)
         color:#3bc 
      }
      
    ux: |
      qw{
          left:0em top:1em     font-size:24pt
      
              min-height:20em min-width:30em
              max-width:30%
      }
  GG:
    C/odon: 1
    T/crawl: 1
    T/yle: 1
    T/uxt: 1
    T/ux: 1
  any_child_recoded_init: |
    w wux;
  recoded_init: |
    w wux;
  ux: |
    my $g = G(odon)
    ||
    return Say "No Codon?";
    
    $g->RW;
    $g->T("/s", undef, $G->nw(K=>"styledir"));
    $g->T("somemmmm", undef, $G->nw(K=>"whatever"));
    
    #$g = w crawl(thing => $g);
    
    my $gux = $G->Gf('ux$');
    gux.view = G.V.ux;
    g.ux = $gux;
    $gux->RW;
    
    w wux;
    
    Info "ux ".$G->F_delta();
  wux: |
    $G->Gf('ux$')->w('ux', {Ls=>G(odon)->W->CS});
  arr: |
    my ($name, $thing) = %$ar; 
    my $S = Arr[$name, $thing];
    
    my $g = w crawl[$thing];
    w uxtou(g=>$g);
  crawl: |
    my $g = G crawl;
    g.max_depth = 1;
    $g->RW;
    $g->T($thing);
    $g;
  uxtou: |
    my $yG = G yle;
    $yG->RW;
    $yG->T(    $g->W );
    
    my $uG = G uxt;
    $uG->RW;
    my $html = $uG->T->T($yG->W);
    
    $html || die;
    
    G.V.ux ->takeover($html);
    
    Say "uxtoun ".$G->F_delta();
    say $html;
    return $html
  gestarted: |
    #die;

