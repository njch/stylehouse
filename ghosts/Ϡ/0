name: Ï 
etc: intoraction...
C:
  - K: GG
  - K: nothing
hooks:
  V:
    ux:
      styles: cardboard ux
  styles:
    cardboard: |
      qw{
         position:absolute
         color:#3bc 
      }, 'border:2px solid #003'
      
    ux: |
      qw{ width:80% height:80% top:10% left:10%    font-size:10pt
      }
    xu: |
      qw'left:90% background:#513'
  Arr: |
    my ($what) = keys %$ar;
    my $u = 0->TafuB($what => $ar);
    die sw($u);
  mkGG: |
    my $GG = G TT ->G($way);
    $GG || die "no $way?";
    w uxGG[$GG];
    my $uG = 0->TafuB(GG => {GG=>$GG});
    uG.B.GG;
    
  uxGG: |
    return if GG.way =~ /ux$/;
    my $ux = w mkGG(way=>'T/ux');
    GG.ux = $ux;
  fresh_init: |
    G.ux = w mkGG(way=>'T/ux');
    G.pG = w mkGG(way=>'C/ool');
  any_child_recoded_init: |
    w wux;
  recoded_init: |
    w wux;
  ux: |
    my $GG = G.pG || die "not pGd!?";
    $GG->RW;
    GG.ux->RW;
    $GG->w('percolate');
    w wux;
    saybl "ux ".$G->F_delta();
  wux: |
    G.pG->w('uxd');
  Codon_ux: |
    my $g = G(odon)
    ||
    return Say "No Codon?";
    sayre "REE E E EEE" for 1..4;
    $g->RW;
    $g->w('percolate');
    
    my $gux = $G->Gf('ux$');
    gux.view = G.V.ux;
    g.ux = $gux;
    $gux->RW;
    w wux;
    saybl "ux ".$G->F_delta();

