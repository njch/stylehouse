name: Ϡ
etc: intoraction...
tractors:
  - K: 'Ϡt'
    max_populi: 2
    arr_if: |
      $name && $name ne "0" && $name ne "1" || die;
    B_: |
      $name
    print: |
      $S->{B}->{_}
styles:
hooks:
  styles:
    dimen: |
      qw{
        position:relative overflow:hidden
          top:20em left:10em background:#765
          -webkit-transform:scale(0.7,0.7)
      }
  fresh_init: |
    $G->Gc("T/crawl", "T/ravel");
    $G->Gc("T/yle", "T/ravel");
    $G->Gc("T/uxt", "T/ravel", "T/erse");
    
    my $style = $G->_0('style',{K=>'dimen'});
    my $Vf = $G->{floozal} || $H->{sky};
    $G->{View} = $Vf->spawn_floozy($G, "Ϡ1", $style."left: 40em;background:#987");
    $G->{View3} = $Vf->spawn_floozy($G, "Ϡ3", $style);
    $G->{View2} = $Vf->spawn_floozy($G, "Ϡ2", $style."left: 55em;background:#334;");
  any_child_recoded_init: |
    w anduxt;
    w dumptrail;
  arr: |
    my ($name, $thing) = %$ar;
    my $S = Arr[$name, $thing];
    
    start_timer();
    my @time;
    G crawl ->{max_depth} = 1;
    
    G crawl ->RW;
    my $CW = G crawl ->T->T($thing);
        push @time, "Crawl: ".$CW->desize()." ".show_delta();
    
    G yle ->RW;
    my $YW = G yle ->T->T($CW);
        push @time, "Style: ".$YW->desize()." ".show_delta();
    
    my $html = w anduxt;
    
    waylay dumpall;
  anduxt: |
    G uxt ->{_trail} = [];
    G uxt ->RW;
    my $YW = G yle ->W;
    my $html = G uxt ->T->T($YW);
    
    $G->{View3}->takeover($html);
    
    return $html
  dumpall: |
    w dumptrail;
    w dumpyleW;
  dumptrail: |
    my $t = {};
    $t->{t} = G uxt ->{_trail};
    $t->{G} = G uxt ->{name};
    
    $O->w(somewhere=>{thing=>$t,max_depth=>7});
  
  dumpyleW: |
    for ([ "unxoϠ1", sub {
            $H->Gf("T/splat") Tw Splat(Ϡ1 => G(crawl)->W, view => $G->{View} );
      }],[ "unxoϠ2", sub {
            $H->Gf("T/splat") Tw Splat(Ϡ2 => G(yle)->W,   view => $G->{View2});
      #}],#[ "unxoϠ3", sub {
        #    $H->Gf("T/splat") Tw Splat(Ϡ3 => G(uxt)->W,   view => $G->{View3});
      }]) {
    $G->_0(sing => { 
        name => $_->[0],
        block_for => 7,
        begin_after => 3,
        code => $_->[1],
    });
    }
  views: |
    $G->{View},$G->{View2},$G->{View3}
  blur: |
      my $blur = ++$G->{_blur} % 2 ? 'blur(8px) brightness(0.7)' : '';
      $H->JS($_, "css('-webkit-filter', '$blur');") for w views;

