name: Ϡ
etc: intoraction...
C:
  - K: GG
  - K: nothing
hooks:
  V:
    ux:
      styles: cardboard ux
  styles:
    cardboard: |
      qw{
         position:absolute
         color:#3bc 
      }, 'border:2px solid #003'
      
    ux: |
      qw{ width:80% height:80% top:10% left:10%    font-size:10pt
      }
    xu: |
      qw'left:90% background:#513'
  Arr: |
    my ($what) = keys %$ar;
    my $u = 0->TafuB($what => $ar);
    die sw([Ϡwhatnow => $u]);
  mkGG: |
    my $GG = G TT ->G($way) || die "no $way?";
    w uxGG[$GG];
    my $uG = 0->TafuB(GG => {GG=>$GG});
    return uG.B.GG;
    
  uxGG: |
    return if GG.way =~ /T\/ux/;
    my $ux = w mkGG(way=>'T/ux');
    GG.ux = $ux;
    $ux->w(GeeG => {GG=>$GG});
  fresh_init: |
    #G.ux = w mkGG(way=>'T/ux'); # this G's ux, onto #sky or so
    G.pG = w mkGG(way=>'C/ool');
  any_child_recoded_init: |
    w wux;
  recoded_init: |
    w wux;
  ux: |
    my $GG = G.pG || die "not pGd!?";
    sayre "RWRWRWRW GG.name" for 1..5;
    $GG->RW;
    GG.ux->RW;
    $GG->w('percolate');
    w wux;
    saybl "ux ".$G->F_delta();
  wux: |
    my $GG = G.pG || die "not pGd!?";
    $GG->w('uxd');

