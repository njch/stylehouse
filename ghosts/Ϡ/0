name: Ï 
etc: intoraction... magnetic fishing rod, guy playing guitar cave art


C:
  - K: GG
  - K: nothing
hooks:
  Arr: |
    my ($what) = keys %$ar;
    my $u = 0->TafuB($what => $ar);
    G.GG.Be->w(ion => {u=>$u});
  fresh_init: |
    w scribe_js;
    
    Say "Busking H.style";
    $G->w("busk/H.style");
  recoded_init: |
    H.h && H.G->w('re/exec');
  busk:
    styleshed: |
      # if top
      $H->JS("\$('#ground').remove();");
      $H->JS("\$('#sky').css('overflow', 'hidden');");
      my $style = join ";", qw{  
          position:absolute color:#3bc
          width:100% height:100% font-size:10pt pointer-events:none
      };
      $H->JS(qq{\$('#sky').append('<div id="ux" style="$style"></div>');});

      0->GAK(xI =>     G!T/ux);
      0->GAK(ool => G!C/ool);   
      0->GAK(L =>     G!L/0);  
      0->GAK(0 =>     G!0);
      #0->GAK(Eh => G!E/h);
      
      0->su(sw => sub { G:L/0 ->w(sw => $_[0]); });
      0->su(elvac => sub { w elvac(%{$_[0]}); });
      
      waylay percolations;
    stylehut: |
      # if not top, contact top and get wired on any Elvi up there
      
      #$H->send(" \$('#ux > *').remove();");
      
      0->GAK(background => G!C/ool);
      #0->GAK(ood => G!C/odon);
      w envac;
      
      
      waylay percolations;
  elvac: |
    saygr "H.style`elvac $top $m";
  envac: |
    H.r->publish("elvac", "H.style H.name H.id = H.wslisten");
  aj: |
    j._ && saygr "j.G.name unified field! see for ".@{j.s};
    
    
    for my $l (reverse @{j.s}, reverse @{j.c}) {
        ref $l && die "reff $l";
        $l = " $l" if H.h;
        $H->send($l);
    }
    # after U - direct to tape instead of catching JS in H
    
  scribe_js: |
    $G->timer(0.3, sub { w scribe_js; });
    
    my $new = G.js || [];
    return unless @$new;
    G.js = [];
    
    my $now = $H->hitime();
    G.jslast ||= $now;
    my $d = sprintf("%.3f",$now - G.jslast);
    G.jslast = $now;
    
    my $script = join"","[$d,function(){", @$new, "}],\n";
    write_file("o/o", {append=>1}, Hostinfo::encode_utf8($script));
    
  ux: |
    for my $GG (@{G.GGs}) { # could ar into GG=$K orso
        next if GG.K =~ /L|ux/;
        
        sayre "RWRWRWRW GG.name";
        for my $ux ($GG->Gf("T/ux")) {
            0->RW($ux);
        }
        0->RW($GG);
        $GG->w('percolate');
    }
    w wux;
    saybl "ux ".$G->F_delta();
  percolations: |
    for my $GG (@{G.GGs}) { # could ar into GG=$K orso
        saygr "to perc GG.name";
        $GG->w('percolate');
    }
  wux: |
    for my $GG (@{G.GGs}) { # could ar into GG=$K orso
        $GG->w('uxd');
    }
    

