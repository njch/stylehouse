name: Ϡ
etc: intoraction...
C:
  - K: GG
    flows_D: |
      w uxGG[$GG];
  - K: nothing
dials:
  pG_way: C/ool
hooks:
  V:
    ux:
      styles: cardboard ux
  styles:
    cardboard: |
      qw'position:absolute color:#3bc', 'border:2px solid #003'
      
    ux: |
      qw'width:80% height:80% top:10% left:10% font-size:10pt'
  Arr: |
    my ($what) = keys %$ar;
    my $u = 0->TafuB($what => $ar);
    die sw([Ϡwhatnow => $u]);
  keys:
    n: |
      G:Ϡ ->_0('V/blur');
    N: |
      Say "TOGIN";
      G:Ϡ ->_0('V/toginvis');
  mkGG: |
    my $GG = G!$way || die "no $way?";
    my $uG = 0->TafuB(GG => {GG=>$GG});
    return uG.B.GG;
    
  uxGG: |
    return if GG.way =~ /T\/ux/;
    my $ux = w mkGG(way=>'T/ux');
    w sync[$ux, $GG];
  sync: |
    $GG->w(ux_receive => {GG=>$ux});
    $ux->w(GG_receive => {GG=>$GG});
    
    ux._Ss = GG.ux_Ss;
  fresh_init: |
    #G.ux = w mkGG(way=>'T/ux'); # this G's ux, onto #sky or so
    G.pG = w mkGG(way=>G.pG_way);
  any_child_recoded_init: |
    w wux;
  recoded_init: |
    w wux;
  ux: |
    my $GG = G.pG || die "not pGd!?";
    my $ux = GG.ux;
    sayre "RWRWRWRW GG.name" for 1..5;
    $GG->RW;
    $ux->RW;
    w sync[$GG, $ux];
    $GG->w('percolate');
    w wux;
    saybl "ux ".$G->F_delta();
  wux: |
    my $GG = G.pG || die "not pGd!?";
    $GG->w('uxd');

