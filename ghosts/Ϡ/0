name: Ï 
etc: intoraction... magnetic fishing rod, guy playing guitar cave art


C:
  - K: GG
  - K: nothing
hooks:
  Arr: |
    my ($what) = keys %$ar;
    my $u = 0->TafuB($what => $ar);
    G.GG.Be->w(ion => {u=>$u});
  fresh_init: |
    w scribe_js;
    
    $G->w("busk/H.style");
  recoded_init: |
    w reperc;
  z:
    uxsky: |
      $H->JS("\$('#sky').css('overflow', 'hidden');");
      my $style = join ";", qw{  
          position:absolute color:#3bc
          width:100% height:100% font-size:10pt pointer-events:none
      };
      $H->JS(qq{\$('#sky').append('<div id="ux" style="$style"></div>');});
    coninto: |
      Say "CONING IN $conin";
      $H->send(" a\.con({conin: '$conin'});");
  busk:
    styleshed: |
      Say "SttyleSHEDing        H.name";
      
      w z/uxsky; # make a thing (huts have #ux in page);
      
      w transam;
      
      0->su(sw => sub { G:L/0 ->w(sw => $_[0]); }); # suck splats
      
      0->su(elvac => sub { w elvac(%{$_[0]}); }); # deal elvi
      
    stylehut: |
      # H w/conz reconzoiters existing conz with H w z/conz
      # looks up stuff
      w transam;
      
      w envac; # chase down elvis
  transam: |
    G.am = $G->findway("am/H.style/H.name")
        || die "what am? H.style/H.name";
    w stylo;
    waylay percs;
  stylo: |
    while (my ($k, $v) = each %{G.am}) {
        next if $k =~ /s$/;
        saygr "to make $k";
        $v = {way => $v} if !ref $v;
        my $w = v.way || $k;
        my $ug = 0->GAK($k => G!$w);
        die "ug nok ug.name" if !defined ug.K;
    }
  percs: |
    my @GGs = ar.GG || @{G.GGs};
    for my $g (@GGs) {
        my $K = g.K;
        defined $K || die "no K? g.name".sw($G);
        my $BS = G.am->{"${K}s"};
        saygr "to perc ".gpty($g)."   ".gpty($BS);
        sayre "found no percos via g.K\s in G.name G.am" if !$BS;
        #g.name =~ /ool/ && die sw[$G,$g];
        $g w percolate[$BS];
    }
  reperc: |
    # coded way diff/inject/retravel above percolations
  ux: |
    my @GGs = ar.GG || grep { _.K !~ /L|ux/ } @{G.GGs};
    Say "ux! ".gpty(@GGs);
    for my $GG (@GGs) {
        sayre "RWRWRWRW GG.K\t GG.name";
        
        0->RW($_) for $GG->Gf("T/ux");
        
        0->RW($GG);
        
        w percs[$GG];
    }
    w wux;
    saybl "ux ".$G->F_delta();
  am:
    styleshed:
      SHED:
        L: {}
        0: {}
        ool: C/ool
        ools: 
          - K: Ims
            B:
              dir: /s/public/i
        #E # brack wall # cake?

    stylehut:
      S:
        bacg: C/ool
        bacgs: 
          - K: Ims
            B:
              dir: /s/public/i
      O:
        ood: C/odon
        oods:
            - K: IF
              B:
                href: http://s:2001
              S:
                Z:
                  height: 20%
                  width: 40%
                  left: 10%
                  bottom: 20%
                  position: absolute
  elvac: |
    saygr "H.style/H.name\t\t`elvac\t\t$top\t\t$m";
    my ($style, $name, $id, $conin) = split ' ', $m;
    w z/coninto[$conin];
    
  envac: |
    H.r->publish("elvac", "H.style H.name H.id H.listen_ws");
  elvis_enters: |
    saygr "jump on the j train ".$E->pi;
    for my $j (@{G.J}) {
        w sEnj[$E, $j];
    }
  aj: |
    if (j._) {
        saygr "j.G.name unified field! see for ".@{j.s};
        H.G.A.W->{j._.at.id} = j.G.W
    }
    
    0->accum($G, J => $j);
    
    my @Es = H.G->w("Elvi");
    for my $E (@Es) {
        w sEnj[$E, $j];
    }
    sayg "j to the ".@Es;
  sEnj: |
    for my $l (reverse @{j.s}, reverse @{j.c}) {
        ref $l && die "reff $l";
        $l = " $l" if H.h;
        $E->send(" ".$l);
    }
    # after U - direct to tape instead of catching JS in H
    
  scribe_js: |
    $G->timer(0.3, sub { w scribe_js; });
    
    my $new = G.js || [];
    return unless @$new;
    G.js = [];
    
    my $now = $H->hitime();
    G.jslast ||= $now;
    my $d = sprintf("%.3f",$now - G.jslast);
    G.jslast = $now;
    
    my $script = join"","[$d,function(){", @$new, "}],\n";
    write_file("o/o", {append=>1}, Hostinfo::encode_utf8($script));
    
  wux: |
    for my $GG (@{G.GGs}) { # could ar into GG=$K orso
        $GG->w('uxd');
    }
    

