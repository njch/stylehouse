R_Jz:
 - K: foot #c fo9od
   n_D:
     yJup: |
       #J.yy.voltuck->{'foot/curves'} = 1;
       'foot', 'food',
     curves: |
       ["spun 0" => .55],
       ["y 0" => 1],
       ["x 0" => 0.1],
       ["zoom 0" => 0.07],
       ["curve 0.1" => -0.024],

       #["zoom 0.4" => -0.12],
       ["curve 0.4" => 0.3],

       ["curve 0.7" => 1.1],
     mods: | 
       [sqww => 23, 'ஓ୶', #{fs=>5_2},
       'color:#8ff;-webkit-filter:blur(3px);margin-left:3em'],
 - K: food #c
   n_D:
     recoded_init: | #c
       my $Gd = H.G.lastGd;
       Rw food/ofghost $Gd;
     entropia: | #c con shadowing in a word
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl "ollox has: ". @yt;
       return 'drone';  
     ofghost: | #c
       my $n = Rw Jung;
       n.oot && n.oot.hox || return sayre "No oot, no ghostfood";
       my $J = n.oot.hox;
       
       say "gulped git changes ".join"  ", map {
           J bz $_ 0.1 "yep"
           $_
       } keys %$Gd;

     conty: | #c
       for ($y) {
           when ('ash') {
               my $th = Rw onJ thrash thrash;
               r.i = $J;
               Rw inness $J:th $r;
           }
       }
     up: | #c
       my $cra = 9;
       # intent of which curve line the bz is for
       # bz inted
       # 
       my $n = Rw Jung;
         
       
       my $ox = J.hox ||= {};
       ox.bb ||
           Rw suJ $J:ox;
       
       my $curves = Rw wuck $J */curves;
       my $wtf;
       
       my $doof = sub {
           my $and = shift;
           for my $k (sort keys %$curves) {
               my $d = $curves->{$k};
               my $coi = Rw pha $J:ox $k;
                
               # only when immutable: isn't tucking in some flux
               if (!J.yy.voltuck->{$k}) {
                   next if
                   Rw ph_defaff $J $x:coi $d;
               }
               
               @{$d=[]} = w $R $k;
               
               shift @$d while $and--;

               ox.bz->(@$_) for @$d;

               my $y = coi.end->();
               $wtf = Rw ph_exactl $J $y;
           }
       };
       
       
       #shift @$_ for values %$curves;
       
       my $y = $doof->();
       
       
       Rw pha $J:ox outs;
       # more crazyness in every direction
       # NUTIN
       # add pha curtaining and look at diffs in ducky
       # be anchoring a spiral uncoiling against/with this hull
       my $tw; # babel
       
       
       
       my @oxn = Rw tvo $J:ox;
       
       my $i = 0; 
       for my $j (@oxn) {
           my $intents = Rw from_phys $J:ox $r:j.r;
           $tw->{$i++ ."_".j.r} = "j.s  ".join",", sort keys %$intents;
       }
       
       Rw jin duck $in:tw;
       
       
       my $wd = wdump(2,$wtf);
       my @l = split /\n/, $wd;
       my $i = 1;
       @l = map{$_.$i++}("-------========-") x 13;
       my $thi = @l;
       say $wd; 
       my $off = 2;
       my @cvs = Rw cv/oe $off $thi;
       say "cv food: @cvs"; 
       
       for my $l (@l) {
            my $cv = shift @cvs || die;
            J.bz->("lab$cv 0.$cv" => "$l",
                #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                #    "%css#laob" => 'margin-left:2em',
            ); 
       }
       

       J.lev->("raash\t0.1" => sub {
           my $J2 = shift;
           J2 bz boot 0.1 "ƾrash", '%path'=>'ash', '%idly'=>1, '%css'=>'color:#f3a;-webkit-filter:blur(1px)'
       });
       
 - K: foody #c
   n_D:
     nothing: |
       
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift; 
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       }); 
     stylesheet: |
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
       # y

