R_Jz:
 - K: oot #c to the kitchen
   n_D:
     yJ: |
       qw'
       oot food mayo
       headi clw
       ghostch timeloop
       oci afghanrug flax'
     etc:
       - spun 0 0.51
     curves: |
       spun 0  4
       #y    0  0.6
       #x    0  0.061
       zoom 0.1 0.8
       curve 0.1 -0.2
 - K: headi #c
   n_D:
     Jhead: | #
       MZ pwth
       t      cl/tidy    {} {co:ffff}
       C      cl/reC     {} {co:b238}
       #
       #z  J5:zoy       {} {co:48d}
       #ඬ  J5:wam      {} {co:f85}
       #ƾ  J5:oot       {} {co:8ff}
 - K: duck #c food expansion
   n_D:
     yJ: |
       J.q = 1;
       'duck sur faot'
     curves: |
       spun 0  0.9
       y    0  0.5
       x    0  0.5
       zoom 0   0.35
       curve 0.1 0.024
     up: |
       Rw inness;
       my $onl = Rw very $in=0.1 $out=0.9 $tot=18 $J:J.on;
       
       # header fin at in - cell wall division, things squished up to
       
       die if ar.M;
       # ii yos if $J && !$M
       # will yo J up:
       my $he = 0.05;
       Rw ii/Jhead + $cv=0.4 $at=0.3;
       Rw ii/ornate + $at=0.4;
       
       # here looking at cones of junk
       # collections of junk
       # pur inness
       
       for my $x (@$onl) {
           Rw ix/suro + $x;
       }
       sayre "==\n== delt ".F_delta."\n==";
 - K: imagery #c a eye/
   n_D:
     yJ: |
       'ghosts sur oci'
     curves: |
          zoom 0 0.870
          y 0 0.01
          x 0 0.8
          #x 0.1 0.46
          curve 0.3 -0.041
     mods:
        - 
          - sq
          - 10
          - s: ~
            fs: 7_3
          - co: 8ff
            blr: 3
            ml: 3em
 - K: food #c FOOD #cc
   n_D:
     entropia: | # con shadowing in a word
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl "ollox has: ". @yt;
       return 'drone';  
     conty: | #
       die "$y conty";
     hedo: | #c
       my $name = 'ollox';
       my $jo = Rw Jon $name;
       my $Jung = Rw Jung;
       say wdump [$jo,$Jung];
     up: | #c
       # or functions sucking more stuff... suck chain shunting 
       # thy
       
       my $coi = Rw pha $J $k=up;
       
       
       Rw the mods $J;
       
       Rw ii/Jhead $J $cv=0.4;
       
       my $M = [];
       my $Jy = Rw wuck - */yJ;
       
       my @Jn = map { /^(.+)\/yJ/; $1 } sort keys %$Jy;
       
       Mn($_, '', {pwth=>"J5:$_"},'{fs:7,ml:13em}') for @Jn;
       
       Rw om/bal $J $oM:M yJable 0.2-0.7;
       
       
       $M = [];
       Rw the + left $M;
       _.sc.hs ||= '1.4.5.9' for @$M;
       
       _.sc.hs ||= '3.3.9.5' for @$M;
       
       my $sc;
       sc.fw = 6;
       sc.con = 6;
       sc.bri = 5;
       Rw om/lev + $oM:M tractorfood 0.2-0.4 $sc;
       
       $M = [];
       Rw the + right $M;
       # need a little more /ness, not as much as pi really...
       Rw om/bal + $oM:M tractorfood 0.0015-0.2;
       
       coi.exactl->();
       
       Rw oJ $J geo &up;
     
     left: | #c or ii/some further
       # MZ pwth
       #h!o!x  food/hoxdrop
       #hox    food/hoxy
       BƾB    jin:mash
       #hull   jin:hull
       sur    surf  {} {fs:14,co:a3a}
       eye    eye  {} {fs:24,hs:4.2.4.8}
       Tarf   eye:Pic/Tyr   {} {fs:12,co:5e7}
       life   eye:Pic/life   {} {fs:12,co:3f6}
       
       W      shed:wormhole  {} {fs:24,hs:4.2.4.8}
       
       occie  J5:occie {} {fs:12,co:ff6}
     hoxy: | #c 
         my $ox = J.hox ||= {};
         ox.bb ||
             Rw suJ $J:ox;

         my $curves = Rw wuck $J */curves;
         my @wt;

             for my $k (sort keys %$curves) {
                 my $d = $curves->{$k};
                 my $coi = Rw pha $J:ox $k;

                 # only when immutable: isn't tucking in some flux
                 if (!J.yy.voltuck->{$k}) {
                     my $able = 
                     Rw ph_same $J $x:coi $d;
                     say "able to defaf" if $able;
                     next if $able;
                 }

                 @{$d=[]} = w $R $k;

                 ox.bz->(@$_) for @$d;

                 my $y = coi.end->();
                 my $ex = Rw ph_exactl $J $y;
                 push @wt, {ex=>$ex, y=>$y};
                 sayre "\n\n############## $k and ".ki $ex;
             }

         my $wtf = \@wt;

         Rw pha $J:ox outs;

         Rw food/ducking + $ox;
         Rw food/wtfing + $wtf;

     hoxdrop: |
       delete J.hox
     wtfing: | #c
       my $wtf = ar.wtf;
       $wtf ||= Rw wuck $J */curves;
       
       my $wd = wdump(2,$wtf);
       sayyl "wad: $wd";
       my @l = split /\n/, $wd;
       my $M = [map{
           ["SO", '', {s=>$_,i=>1}, {co=>'4fc',ws=>'p'}],
       }@l];
       my $in = 0.5;
       my $out = 0.9;
       Rw mo/pwth $J $M $in $out;
       
     ducking: | #c 
       my $tw;
       
       my @oxn = Rw tvo $J:ox;
       my $i = 0; 
       for my $j (@oxn) {
           my $intents = Rw from_phys $J:ox $r:j.r;
           $tw->{$i++ ."_".j.r} =
             "j.s  ".join",", sort keys %$intents;
       }
       
       Rw jin duck $in:tw;
 - K: vimcolor #c
   D: |
      my $string = shift;
      my $h = dig($string);
      my $k = "vimcolor-$h";
      H.r.gest->($k, sub {
          use Text::VimColor;
          my $syntax = Text::VimColor->new(
              string => $string,
              filetype => 'perl',
          );
          return $syntax->html;
      });
 - K: spawnge #c spew arm when getting full - 
   D: |
     # looks at tobecurves and distills away sharpness
     # intermediates inness unfoldment to cellular structure
     # like if e.S we want shift in it, sprouting
     $J; # or return the arm instead

