R_Jz:
 - K: oot #c fo9od
   n_D:
     yJup: |
       qw'
       oot food
       ghostch timeloop
       oci afghanrug flax'
     etc:
       - spun 0 0.51
     curves: |
       spun 0  0.51
       y    0  0.98
       x    0  0.061
       zoom 0.1 0.8
       curve 0.1 0.3
       y    0.5 0.6
       x    0.5 0.721
       spun 0.5 0.11
 - K: duck #c food expansion
   n_D:
     yJup: |
       J.q = 1;
       'duck', 'sur', 'faot'
     curves: |
       spun 0  0.9
       y    0  0.5
       x    0  0.5
       zoom 0   0.35
       curve 0.1 0.024
 - K: timeloop #c
   n_D:
     fresh_init: | #c
       my $to = sub {
         Rw timeloop/ocur;
       };
       recur 24 { $to->() }
     ocur: | #c
       sayre "OC!" if !H.busy;
       # H.G w cyc; 
 - K: ghostch #c watching food
   n_D:
     recoded_init: | #c
       Rw ghostch/ofghost;  
     ofghost: | #c
       my $Gd = H.G.lastGd;
       my $n = Rw Jung;
       
       
       n.oot && n.oot.hox || return sayre "No oot/hox, no ghostfood";
       my $J = n.oot.hox;
       
       
       say "gulped git changes ".join"  ", map {
           J bz $_ 0.1 "yep"
           $_
       } keys %$Gd;



 - K: food #c FOOD #cc
   n_D:
     entropia: | # con shadowing in a word
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl "ollox has: ". @yt;
       return 'drone';  
     conty: | #
       die "$y conty";
     hedo: | #c
       my $name = 'ollox';
       my $jo = Rw Jon $name;
       my $Jung = Rw Jung;
       say wdump [$jo,$Jung];
     up: | #c
       # or functions sucking more stuff... suck chain shunting 
       # thy
       Rw ii/Jhead $J $cv=0.2;
       
       my $time = hitime();
       Rw ii/time $J $time;
       
       my $sc;
       sc.fw = 6;
       my $M = [];
       Rw the + left $M;
       for (@$M) {
           _.c.pi = 'lablfa';
           _.sc.co ||= 'b3a';
       }
       sc.con = 6;
       sc.bri = 5;
       Rw om/bal + $oM:M tractorfood 0.2-0.4 $sc;
       
       $M = [];
       Rw the + right $M;
       _.c.pi = 'labback' for @$M;
       # need a little more /ness, not as much as pi really...
       Rw om/bal + $oM:M tractorfood 0.0015-0.2;
     left: | #c or ii/some further
       # MZ pwth
       h!o!x  food/hoxdrop
       hox    food/hoxy
       BÆ¾B    jin:mash
       hull   jin:hull
       sur    surf  {} {fs:14,co:a3a}
       eye    eye  {} {fs:24,hs:4.2.4.8}
       occie  occie/komp {} {fs:12,co:ff6}
       Tarf   eye:Pic/Tyr   {} {fs:12,co:5e7}
       life   eye:Pic/life   {} {fs:12,co:3f6}
     right: | #c 
       # MZ pwth
       reextet cl/reextet {} {co:b227}
       tidy    cl/tidy    {} {co:ffff}
       Cv      cl/reC     {} {co:b238}
       ps      jin:ps
       file   food/file {} {hs:3.9.8.5}
     twunk: |
       H.G w Elvisphere;
     file: | #c or
         
         
     hoxy: | #c 
         my $ox = J.hox ||= {};
         ox.bb ||
             Rw suJ $J:ox;

         my $curves = Rw wuck $J */curves;
         my @wt;

             for my $k (sort keys %$curves) {
                 my $d = $curves->{$k};
                 my $coi = Rw pha $J:ox $k;

                 # only when immutable: isn't tucking in some flux
                 if (!J.yy.voltuck->{$k}) {
                     my $able = 
                     Rw ph_defaff $J $x:coi $d;
                     say "able to defaf" if $able;
                     next if $able;
                 }

                 @{$d=[]} = w $R $k;

                 ox.bz->(@$_) for @$d;

                 my $y = coi.end->();
                 my $ex = Rw ph_exactl $J $y;
                 push @wt, {ex=>$ex, y=>$y};
                 sayre "\n\n############## $k and ".ki $ex;
             }

         my $wtf = \@wt;

         Rw pha $J:ox outs;

         Rw food/ducking + $ox;
         Rw food/wtfing + $wtf;

     hoxdrop: |
       delete J.hox
     wtfing: | #c
       my $wtf = ar.wtf;
       $wtf ||= Rw wuck $J */curves;
       
       my $wd = wdump(2,$wtf);
       sayyl "wad: $wd";
       my @l = split /\n/, $wd;
       my $M = [map{
           ["SO", '', {s=>$_,i=>1}, {co=>'4fc',ws=>'p'}],
       }@l];
       my $in = 0.5;
       my $out = 0.9;
       Rw mo/pwth $J $M $in $out;
       
     ducking: | #c 
       my $tw;
       
       my @oxn = Rw tvo $J:ox;
       my $i = 0; 
       for my $j (@oxn) {
           my $intents = Rw from_phys $J:ox $r:j.r;
           $tw->{$i++ ."_".j.r} =
             "j.s  ".join",", sort keys %$intents;
       }
       
       Rw jin duck $in:tw;
 - K: foody #c
   n_D:
     nothing: |
       
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift; 
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       }); 
     stylesheet: |
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
       # y

