
R_Jz:
 - K: ollox #c CURVE curver
   n_D:
     yJup: |
       J.yy.round.id = 3;
       qw'ollox sur fiz_ave oci'
     curves: |
       MZ yada
       zoom  0   0.5
       zoom  1   1
       curve 1   -0.311
       zoom 0.21 1.2
       y     0   0
       x     0   0
       x    0.1  0.06
       curve 0.3 -0.211
       #zoom 0.5  -0.3
     mods:
        - 
          - sq
          - 10
          - s: ~
            fs: 7_3
          - co: 8ff
            blr: 3
       
 - K: nnn #c twining inness extrapolation
   D: |
       # the class etc bits of $e might clue in what to do
       # maybe can mousedown just x y?
       # J is the 1circle, J2 the 2circle (bw)
       # path must be somewhere around here...
       # on the gp's / which is inside yet outsideness, or the lev... whatev. turnstyle
       # rotate around same
       # there's a bunch of paths, there interesting
 - K: sur #c SURish rondo: on -> square ->
   n_D:
     Jhead: |
       MZ pwth
       ඬ  hull/mk:kapow {} {co:f85}
       ƾ  jin:oot       {} {co:8ff}
       G  sur/to:G
       x  hull/mk:X     {} {co:f34,fs:7}
       Jung sur/to:Jung {} {co:68d,fs:5}
     entropia: | #c ^^^^^^^^^^^^^ kind of same as running intents on u/ etc from inness
       wdump(2,J.onei);
     to: | #c into, goes with inness and communes Js
       my $to = shift @$m;
       my $r;
       for ($to) {
           r.t = [] when '/';
           r.i = $G when 'G';
           die         when 'feed'; # look at cont moves?
           r.i = Rw Jung
                       when 'Jung';
                       # TODO ash
           r.i = Rw onJ o2x theself
                       when 'self';
           
           default {
               die "no yyyyyyyyyyyy to $to   on ".$J->pi;
           }
       }
       Rw inness $J $r;
     conty: | #css # eats event + HASH preparation $pa
       my $r = {}; # sproutya
       # ^ outer $y compressions understood 
        #  by 2ale of inness J.onei, compiled...
       # will lovely to maintain in spiral
       saybl "pat: $y   mmmm @$m";
       #/  ^ m
          # language inthemiddle
       #\  v m
       if (e.type eq 'click') {
           for ($y) {
               when (/^(\{|\[)/) {
                   r.t = $y;
                   Rw sur/folw $r $J;
               }
               default {
                   die "dunno $y"
               }
           }
       }
       elsif (e.type eq 'keydown') {
               say "is key e.k";
               for (e.k) {
                   when ('0') {
                       my $t = J.onei.t;
                       my @t = @{$t||die};
                       pop @t;
                       my $r = {t=>\@t};
                       Rw inness $J $r;
                   }
               }
       }
       else {
             say "Sur". wdump($e);
       }
     folw: | #c expand path, may spew arm
       my $J3 = Rw sur/spawnge $J;

       if ($J ne $J3) { # copy HEAD before pat(c)h
           Rw inness $J:J3 $r:J.onei;
       }
       Rw inness $J:J3 $r;
     oning: | #c
       J3.lev->("onei\t0.06" => sub {
           my $J2 = shift;
           my $on = J.onei;
           my $M = [
               ['=','', {}, {fs=>12,co=>'fa05'}],
               ['i', 'sur/to:/', {fo=>[on.i,0.1]}]
           ];
           
           push @$M,
              ['travels', '', {s=>join("  ",@{on.t||[]}), wsp=>1}],
              ['fou', '', {fo=>[$u, 0.2]}],
                  if $u ne on.i;
                  
           Rw mo/pwth $J:J2 $M 0.1-0.3;
       });
     gelcaps: | #c engergy group
       my $ordy = {qw'
         id 11  A 13  K 17  name 18
         G  14  R 15

         B  21  style 22
         theJ 23  theM 28
       '};
       
 - K: inness #cc soy packets everywhere # THINGNESS as onness
   D: |
      # right handed receiver of 8, informs to humm etc.
      # would involve many uish and the types of perception we want to see
      # laying out the plane of attack
      # just has to find a corner of it as 3
      J.on = Rw tent on;
      J.on.yy.conroll.dont = 1;
      # ^ recursor... incubator
      # v def
      my $o = J.onei ||= {i=>$G};
      
      my $r = ar.r;
      
      w mux(u=>$J) if $r; # slower reintro - calc entropy
      
      # ^ inject 6
      # but first...
      # t distributable, listy compressible pass space
      
      %$o = (i => r.i) if r.i;
      o.t||=[];
      
      if (ref r.t eq 'ARRAY') {
          o.t = [@{r.t}];
      }
      else {
          push @{o.t}, r.t if r.t;
      }
      
      # do this from u%ut, branch climber
      my $i = o.i;
      for my $t (@{o.t}) {
          sayyl "   -trav $i       $t";
          $i = $R->suets($i, $t);
      }
      sayyl "Inness: ".gp(o.i)."     "
        .join("   ", @{o.t})." ----> ".gp $i
            if $i ne o.i;

      # on ventrickles already, look at the path for clues
      # if last t was {bb 55 stylse
      # the tree of loveliness to hook in as things fly by again soon...
      
      # like J.yy.inness.wants to fold back all the uninteresting stuff
      # also show the groups of phases etc
      # styles from on become humming/rounding protocols
      #
      
      J.on bz u 0.1 $i
      J.on bz u%ori 0.1 J.onei.i
      J.on bz u%travely 0.1 J.onei.t
      if (r.sc) {
          for my $k (sort keys %{r.sc}) {
             my $v = r.sc->{$k};
             J.on bz u%$k 0.1 $v
          }
      }
      
 - K: sur/up #c upper level gplumb
   D: |
       Rw inness;
       # shadow just right so round
       # sucks each u
       # bzphaz
       # but also the
       # tape Magnetix/Jyo
       # mound aggregation, caving out
       
       # todo tlv
       my $onl = Rw tlv $J:J.on;
       
       my $tot = 8;
       
       my $in = 0.1;
       my $out = 0.9;
       
       my $phi = $out - $in; # <-0.8->
       my $thi = $phi / @$onl; # or indi
       
       # thi vs $onl individuality
       my $tin = $in;
       for my $x (@$onl) {
           # go higher and pipe mods to squish space
           x.in = $tin;
           x.out = $tin + $thi;
           $tin = x.out; # next
           
           x.thi = $tot/$phi; # space volve, indi...
           #die "x.j.r   shall x.thi    ($tot $phi)";
           
           my $j = x.j;
           if (!J.q) {
               say "up on ".$J->pi."    j.r    ".slim 200, gp(j.s);
               say "   * _.r          => ".gp(_.s) for values %{x.sj};
               say "up around x.in <-> x.out"
           }
       }
       # each branching yet here...
       # depending on tape processing fu
       # it's a collection of (pi|wt)/(cap|bod|arch|etc)
       
       # header fin at in - cell wall division, things squished up to
       
       die if ar.M;
       # ii yos if $J && !$M
       # will yo J up:
       my $he = 0.05;
       Rw ii/Jhead + $out:he;
       Rw ii/ornate + $in:he;
       
       # here looking at cones of junk
       # collections of junk
       # pur inness
       
       for my $x (@$onl) {
           Rw lx/suro + $x;
       }
       sayre "==\n== delt ".F_delta."\n==";
 - K: lx/suro #c
   D: |
      my $j = x.j;
      my $coi = Rw pha $J $k:j.l;
      my $M = [];
      
      # innessy
      Rw ii/cap $x $M;
      # ^ ^ ^ ^ ^ ^
      #^ ^ ^ ^ ^ ^ ^
      Rw sur/bod $x $M;
      #v v v v v v v
      # v v v v v v

      say "surM:   t:_.t    y:".ki(_.y)."        c:".ki(_.c)."       sc:".ki(_.sc) for @$M;
      die if !@$M;
      my $V = 1;
      Rw om/bal $J $oM:M $t:j.t $in:x.in $out:x.out $V;
      coi.end->();
 - K: sur/bod #c boodle am $rr into $M: lab,pi, lab,pi ...
   D: |
       my $in = x.in; # TODO whereto?
       my $out = x.out;
       my $phi = ($out - $in) * x.thi; # normal lines per 0.1
       my $thi = $phi * 2; # oundo big window, bod small
       
       say "bod $in <--> $out  $thi     x.j.r"; # TODO say big
       
       my $o = Rw oundo $thi $x;
       say "Oundo: ". join ', ', map{"$_"} @{o.r};
       warn "More o.more" if o.more;
       my $M = [];
       for my $r (@{o.r}) {
           r.r || die"nor".ki$r;
           my $oM = [];
           # SZOOOOOOOOOOOM
           Rw ii/labegy $x $r $M:oM;
           Rw ii/pi $x $r $M:oM;
           # ^ pass $thi, pool resources
           
           my $c = {%{r.c||{}}};
           #sayyl "iibod: ". ki $r;
           
           
           Rw om/lev + $oM $M $t:r.r $c;
       }
       if (o.more) {
           Rw ii/more $x $o $M;
       }
       Rw iM + $oM:M;

