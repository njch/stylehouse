R_Jz:
 - K: nnn #c
   D: |
       # the class etc bits of $e might clue in what to do
       # maybe can mousedown just x y?
       # J is the 1circle, J2 the 2circle (bw)
       # path must be somewhere around here...
       # on the gp's / which is inside yet outsideness, or the lev... whatev. turnstyle
       
       # there's a bunch of paths, there interesting
 - K: thesurf #c CURVE curver
   n_D:
     yJup: |
       J.yy.round.id = 3;
       'thesurf', 'sur'
     curves: |
         #["spun 0" => 0.025],
         ["curve 1" => -0.211],
         ["zoom 0" => 0.15],
         ["zoom 0.21" => -0.05],
         ["y 0" => 0],
         ["x 0" => 0],
         ["x 0.1" => 0.06],
         ["curve 0.3" => -0.111],
         #["zoom 0.5" => -0.03],
         
     mods: |
       [sq   => 10,  '~'],
       #[sqat   => 20,  '^', {}, 'color:blue', in => 10, ],
       #[sqat   => 20,  'v', {}, 'color:blue', out => 10, ],
 - K: thrash #c CURVEd curver
   n_D:
     yJup: |
       J.yy.round.id = 3;
       J.yy.jiter = 'borg';
       'thrash', 'sur'
     curves: |
         ["zoom 0" => 0.10],
         ["y 0" => 0],
         ["x 0" => 0.4],
         ["x 0.1" => 0.46],
         ["curve 0.3" => -0.041],
         
     mods: |
       [sq   => 10,  '~'],
       #[sqat   => 20,  '^', {}, 'color:blue', in => 10, ],
       #[sqat   => 20,  'v', {}, 'color:blue', out => 10, ],
 - K: theself #c CURVE domer
   n_D:
     yJup: |
       J.yy.round.id = 3;
       'theself', 'sur'
     curves: |
         ["spun 0" => 0.025], 
         ["curve 1" => 0.211],
         ["zoom 0" => 0.15],
         ["zoom 0.21" => -0.05],
         ["y 0" => 0],
         ["x 0" => 0.8],
         ["x 0.1" => 0.7],
         ["curve 0.3" => -0.111],
         #["zoom 0.5" => -0.03],
         
     mods: |
       [sq   => 10,  '~'],
       #[sqat   => 20,  '^', {}, 'color:blue', in => 10, ],
       #[sqat   => 20,  'v', {}, 'color:blue', out => 10, ],
 - K: duck #c fo9od's
   n_D:
     yJup: |
       'duck', 'sur',
     curves: |
       ["spun 0" => 0.9],
       ["y 0" => 0.7],
       ["x 0" => 0.6],
       ["zoom 0" => 0.06],
       ["curve 0.1" => -0.024],

       #["zoom 0.4" => -0.12],
       #["curve 0.4" => 0.3],

       #["curve 0.7" => 1.1],
     mods: |
       [sqww => 23, 'ஓ୶', #{fs=>5_2},
       'color:#8ff;-webkit-filter:blur(3px);margin-left:3em'],
 - K: sur #c SURish rondo: on -> square ->
   n_D:
     conty: | #css # eats event + HASH preparation $pa
       my $r = {}; # sproutya
       # ^ outer $y compressions understood by 2ale of inness J.onei, compiled...
       # will lovely to maintain in spiral
       saybl "pat: $y";
       #/
       #\
       if (e.type eq 'click') {
               for ($y) {
                   when (/^(\{|\[)/) {
                       r.t = $y;
                       Rw sur/folw $r $J;
                   }
                   when ('boot') {
                       Rw hull/boot;
                   }
                   when ('root') {
                       r.t = [];
                       Rw inness $J $r;
                   }
                   when ('feed') { # look at cont moves?
                       r.t = [];
                       Rw inness $J $r;
                   }
                   when ('G') {
                       r.i = $G;
                       Rw inness $J $r;
                   }
                   when ('X') {
                       w G.R del(u=>$J);
                   }
                   when ('Jung') {
                       r.i = Rw Jung;
                       Rw inness $J $r;
                   }
                   when ('self') {
                       my $self = Rw onJ o2x theself;
                       r.i = $J;
                       Rw inness $J:self $r;
                   }
               }
       }
       elsif (e.type eq 'keydown') {
               say "is key e.k";
               for (e.k) {
                   when ('0') {
                       my $t = J.onei.t;
                       my @t = @{$t||die};
                       pop @t;
                       my $r = {t=>\@t};
                       Rw inness $J $r;
                   }
               }
       }
       else {
             say "Sur". wdump($e);
       }
     up: | #c upper level gplumb
       Rw inness;
       # ^ entropate from here
       # each u thingy and whatever styles have jumped on along
       
       # embedded up around & out
       #     of u, sucking ventrickles of u, the J plot
       
       # if just u we are right on it and it's compressed as a level of language
       # so it's one thing we're looking at right now
       # but it could be structured out from t pathiness
       # so if i becomes the first lingo tent, a hash
       # and t becomes {$ik => [pathy]}
       #  we could end up with
       # u/ = $G
       # u/lum/ = etc 0.7
       # or 
       # /=$G
       # then all the blah/ things at low cv
       # and t something does a Jung and for each the lum/ harder
       # not a link that's explicit yet
       # but when style spirals are in a spot, pre-suckaged
       # cache mods
       
       # TODO 2real joint, like sur
       # finds on, near in, ups
       # traction gets to 1 TODO antlerdaptory
       # move impression of ^ to v, then round
       J.lum = Rw tent lum;
       # TODO replace last
       
       # sucks each u
       # but also the
       
       my $u = J.on.bb->{"u\t".0.1};
       # META
       J.lum.lev->("J\t0.01", sub {
           my $J2 = shift;
           # later style %idly if %path but no /%id
           J2 fro J 0.01      $J, 0.1, '%path'=>'self'
           J2 bz boot 0.08 "ƾ", '%path'=>'boot', '%idly'=>1, '%css'=>'color:#8ff;-webkit-filter:blur(3px)'
           J2 bz G 0.12 "G", '%path'=>'G', '%idly'=>1
           J2 bz x 0.14 "x", '%path'=>'X', '%idly'=>1, '%css'=>'color:red;font-size:50%'
           J2 bz Jung 0.15 "Jung", '%path'=>'Jung', '%idly'=>1, '%css'=>'color:#68d;font-size:30%'
           
       }, '%css'=>'font-size:200%'); 
       J.lum.lev->("onei\t0.05" => sub {
           my $J2 = shift;
           J2 bz lable 0.1 "onei "
           
           my $on = J.onei;
           J2 fro Jonei 0.3 on.i, 0.2, '%path'=>'root'
           
           if ($u ne on.i) {
               J2 bz Joneei 0.6 " ".join("  ", @{on.t||[]})." "
               J2 fro u 0.7 $u, 0.2
           }
           
       }, '%sf'=>"fs80", '%path'=>'feed');
       
       
       say "U: ".$J->pi."   ".gp($u);
       
       my $y = w $R down; # 2ish aggd knowledge, instructions?
       
       my $spcv = 0.2; # so has gap in 1 unless id, etc
       
       my @r;
       if (!ref $u) {
           push @r, { r=>"text", s=>$u, cv=>0.4 };
       }
       elsif (ref $u eq 'ARRAY') {
           my $i = 0;
           my $warp = @$u; # TODO or less?
           my @warp = Rw cv/oe off1 $v:warp;
           for my $ui (@$u) {
               my $cv = "0.". shift @warp;
               push @r, { r=>$i, path=>"[".$i++, s=>$ui, cv=>$cv};
           }
       }
       else {
           my $r = {map{$_=>1} keys %$u};
           
           $spcv = 0.3 if u.id;

           # bunch of keys... ^ interpret, compress knowledge
           # TODO ^make itv like two indexes, polars
           # any sorta layout knowhow...
       
           my @or = grep { delete $r->{$_} } @{y.order};
           if (ref $u eq 'A') {
               push @or, sort grep { /^u_/ && delete $r->{$_} } keys %$r;
           }
           push @or, sort keys %$r;
           
           for (@or) {
               my $v = y.ordy->{$_};
               # this is totally 5 in inness doing this 
               my $cv = "0.$v" if $v;
               $cv ||= $spcv;
               push @r, { r=>$_, path=>"{$_", s=>$u->{$_}, cv=>$cv };
           }
       }
       
       for my $r (@r) { # %{ r, path, v, cv #c
           
           J.lum.lev->("r.r/\t".r.cv => sub {
               my $J2 = shift;
               
               my $si = length(r.r);
               my $fs = $si > 40 ? 60 : $si > 30 ? 70 : $si > 20 ? 80 : 100;
               
               my $guec = $2 if r.cv =~ /^(0\.)?(\d)/;
               my $col = G.jumb.cos->{$guec} || warn "was r.cv so $guec";
               
               # TODO curve ^ # make sf of a Q factor that can see $v somehow
               J2.bz->(
                    "lable 0.1" => r.r,
                    #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    "%css#laob" => 'position:absolute;right:0.5em;white-space:pre;',
                    "%css#lableg" => "font-size:$fs%",
                    "%css#labcoat" => "color:$col", # TODO unwind cv into colour
                    "%tt#\cv" => r.cv,
               );
               if (r.r eq 'id') {
                   my $axio = ref $u;
                   J2.bz->(
                        "axio 0.1" => $axio,
                        "%css#laob" => 'position:absolute;right:3em;font-size:300%',
                   );  
                   if (r.r eq 'K') {
                       my $axio = u.K;
                       J2.bz->(
                            "axe 0.1" => $axio,
                            "%css#laob" => 'position:absolute;right:2.5em;font-size:300%;color:#f93',
                       );  
                   }
               }
               
               # GP ness ^ v leaky
               my $bcv = 0.4;
               $bcv = 0.1 if r.cv < 0.2;
                  
               J2.fro->("gp\t"."0.6" => r.s,
                 {cv=>$bcv, makaz=>{ # hooky
                    "/%css#jit 0.9" => 'position:absolute;left:1em;max-width:14em;overflow:hidden;white-space:nowrap',
                 }}, # ^ v in out sameish
               );
           },
                 (r.path ? ('%path' => r.path) : ()),
           );
            #J.bz->("$r\t"."0.$cv" => ''.$v, '%css'=>'white-space:pre');
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # ad what kind of cursor, fro delays/syncs
             # start culture
             # the middle
             # start cuddle
       }
       
       Rw round $J2:J.lum $J;
       
       my @oooo = Rw tvo $J;
       for my $j (@oooo) {
           #say j.r;
       }
       
     entropia: | #c kind of same as running intents on u/ etc from inness
       wdump(2,J.onei);
     folw: | #c expand path, may spew arm
       my $J3 = Rw sur/spawnge $J;

       if ($J ne $J3) { # copy HEAD before pat(c)h
           Rw inness $J:J3 $r:J.onei;
       }
       Rw inness $J:J3 $r;
     spawnge: | #c spew arm when getting full
       # intermediates inness unfoldment to cellular structure
       # like if e.S we want shift in it, sprouting
       $J; # or return the arm instead

