
mod c:
 - K: fo #c yes
   mod 3.6: |
     my $f = J.fo->(@$cs); # magnetic fishingrods
     d.cs.fo.fo = $f;
     d.s = f.s;
     n.gl = [];
     # make like to hook %gp towards set f.r to the line this fo is on
 - K: pwth #c -> !some/path exp.
   mod 3.1: |
     my $path = $cs;
     $path = "!$path" unless $path =~ /^ /;
     c.path && die;
     c.path = $path;
 - K: path #c install cs path
   mod 3.2: |
     d.cs.pwth.path = $cs;
     d.cs.pwth.idly = 1 unless c.fo; # will prov
     # later style %idly when %path but no /%id
esc c:
 - K: path #c
   esc 3: |
     '%path'=>$v
 - K: idly #c
   esc 3: |
     '%idly'=>$v
 - K: fo #c ag
   esc 3: |
     v.r = d.r; 
     '%gp' => $v 
R_Jz:
 - K: nnn #c twining
   D: |
       # the class etc bits of $e might clue in what to do
       # maybe can mousedown just x y?
       # J is the 1circle, J2 the 2circle (bw)
       # path must be somewhere around here...
       # on the gp's / which is inside yet outsideness, or the lev... whatev. turnstyle
       
       # there's a bunch of paths, there interesting
 - K: thesurf #c CURVE curver
   n_D:
     yJup: |
       J.yy.round.id = 3;
       J.engboo = 1;
       qw'thesurf sur faut oci'
     curves: |
         #["spun 0" => 0.025],
         ["curve 1" => -0.211],
         ["zoom 0" => 0.15],
         ["zoom 0.21" => -0.05],
         ["y 0" => 0],
         ["x 0" => 0], 
         ["x 0.1" => 0.06],
         ["curve 0.3" => -0.111],
         #["zoom 0.5" => -0.03],
         
     mods:
        - 
          - sq
          - 10
          - s: ~
            fs: 7_3
          - co: 8ff
            blr: 3
       
 - K: thrash #c CURVEd curver
   n_D:
     yJup: |
       J.yy.round.id = 3;
       qw'thrash ash sur oci'
     curves: |
         ["zoom 0" => 0.10],
         ["y 0" => 0],
         ["x 0" => 0.4],
         ["x 0.1" => 0.46],
         ["curve 0.3" => -0.041],
         
     mods:
        - 
          - sq
          - 10
          - s: ~
            fs: 7_3
          - co: 8ff
            blr: 3
            ml: 3em
       
 - K: theself #c CURVE domer
   n_D:
     yJup: |
       J.yy.round.id = 3;
       'theself', 'sur'
     curves: |
         ["spun 0" => 0.025], 
         ["curve 1" => 0.211],
         ["zoom 0" => 0.15],
         ["zoom 0.21" => -0.05],
         ["y 0" => 0],
         ["x 0" => 0.8],
         ["x 0.1" => 0.7],
         ["curve 0.3" => -0.111],
         #["zoom 0.5" => -0.03],
         
     mods: |
       [sq   => 10,  '~'],
       #[sqat   => 20,  '^', {}, 'color:blue', in => 10, ],
       #[sqat   => 20,  'v', {}, 'color:blue', out => 10, ],
 - K: duck #c fo9od's
   n_D:
     yJup: |
       'duck', 'sur', 'faot'
     curves: |
       ["spun 0" => 0.9],
       ["y 0" => 0.7],
       ["x 0" => 0.6],
       ["zoom 0" => 0.06],
       ["curve 0.1" => -0.024],
 - K: down #c TODO to have maintained down by what comes up from 7 via 8 in motion, tune in values
   D: |
       my $ordy = Load(<<'');
       {A: 13, id: 11, K: 17, name: 185,
       G: 14, R: 15, B: 23, more: 543,
       surf: 8,
       theJ: 23, theM: 28
       }
       
       my $ydro = {};
       push @{$ydro->{$_}||=[]}, $_ for keys %$ordy;
       my @order = map { @{$ydro->{$_}} } sort keys %$ydro;
       
       { order => \@order,
            ordy => $ordy,
       }
 - K: sur #c SURish rondo: on -> square ->
   n_D:
     X: | #c close
      w G.R del(u=>$J);
     to: | #c into
       my $to = shift @$m;
       my $r;
       for ($to) {
           r.t = [] when '/';
           r.i = $G when 'G';
           die         when 'feed'; # look at cont moves?
           r.i = Rw Jung
                       when 'Jung';
           r.i = Rw onJ o2x theself
                       when 'self';
           
           default {
               die "no yyyyyyyyyyyy to $to   on ".$J->pi;
           }
       }
       Rw inness $J $r;
     conty: | #css # eats event + HASH preparation $pa
       my $r = {}; # sproutya
       # ^ outer $y compressions understood 
        #  by 2ale of inness J.onei, compiled...
       # will lovely to maintain in spiral
       saybl "pat: $y   mmmm @$m";
       #/  ^ m
          # language inthemiddle
       #\  v m
       if (e.type eq 'click') {
           for ($y) {
               when (/^(\{|\[)/) {
                   r.t = $y;
                   Rw sur/folw $r $J;
               }
               default {
                   die "dunno $y"
               }
           }
       }
       elsif (e.type eq 'keydown') {
               say "is key e.k";
               for (e.k) {
                   when ('0') {
                       my $t = J.onei.t;
                       my @t = @{$t||die};
                       pop @t;
                       my $r = {t=>\@t};
                       Rw inness $J $r;
                   }
               }
       }
       else {
             say "Sur". wdump($e);
       }
     heading: |
       
     heading: | #c
       J3.lev->("J\t0.01", sub {
           my $J2 = shift;
           my $M = [
               ['J', 'sur/self', {fo=>[$J,0.1]}],
               ['ඬ', 'sur/engboo', {}, {co=>(J.engboo?'f85':'126')}],
               ['ƾ', 'hull/mkboot', {}, {co=>'8ff'}],
               ['G', 'sur/to:G'],
               ['x', 'sur/X', {}, {co=>'f34',fs=>3}],
               ['Jung', 'sur/to:Jung', {}, {co=>'68d', fs=>5}],
           ];
           Rw mo/pwth $J:J2 $M 0.1-0.3;
       }, '%css'=>'font-size:200%');
     oning: | #c
       J3.lev->("onei\t0.06" => sub {
           my $J2 = shift;
           my $on = J.onei;
           my $M = [
               ['=','', {}, {fs=>12,co=>'000'}],
               ['i', 'sur/to:/', {fo=>[on.i,0.1]}]
           ];
           
           push @$M,
              ['travels', '', {s=>join("  ",@{on.t||[]}), wsp=>1}],
              ['fou', '', {fo=>[$u, 0.2]}],
                  if $u ne on.i;
                  
           Rw mo/pwth $J:J2 $M 0.1-0.3;
       });
     engboo: | #c
       J.engboo = !J.engboo;
     gelcaps: | #c egroup
       my $ordy = {qw'
         id 11  A 13  K 17  name 18
         G  14  R 15

         B  21  style 22
         theJ 23  theM 28
       '};
       
     upeng: | #c the surrest
       my @things = Rw tvy $J:J.on;
       my $tot = 32;
       my $in = 0.1;
       my $out = 0.9;
       my $phi = $out - $in; # <-0.8->
       my $tin = $in;
       my $thi = $phi / @things; # or indi
       my @re;
       for (@things) {
           my ($j, @sjs) = @$_;
           say "U: ".$J->pi."   ".gp(j.s); 
           say "   * _.r          => ".wdump(1, _.s) for @sjs;
           my $outt = $tin + $thi; # r indi, of sjs
           my $rr = {
               in => $tin,
               out => $outt,
               thi => $tot/$phi, # space volve, indi...
               sjs => \@sjs,
               j => $j,
           };
           say "rr.j.r    = rr.in    -> rr.out";
           push @re, $rr;
           $tin = $outt;
       }
       # each branching yet here...
       for my $rr (@re) {
           my $M = [
               Rw sur/rr_cap $rr,
               Rw sur/rr_bod $rr,
           ];
           my $in = rr.in;
           my $out = rr.out;
           Rw mo/pwth $J:J.lum $M $in $out;
       }
       sayre "==\n== delt ".F_delta."\n==";
     rr_cap: | #c zom
       my ($vli) = grep{_.style eq 'traveli'} @{rr.sjs};
       my $M = [
           ['_', '', {s=>rr.j.l}, {fs=>18, co=>'38f'}],
           ['=','', {}, {fs=>12,co=>'000'}],
           ['i', 'sur/to:/', {fo=>[vli.s,0.1]}],
       ];
       my ($vly) = grep{_.style eq 'travely'} @{rr.sjs};
       if ($vly && @{vly.s}) {
           push @$M,
               ['travely', '', {s=>join("  ",@{vly.s}), wsp=>1}],
               ['S', '', {fo=>[rr.j.s, 0.2]}],
       }   
       # ^ all that within v
       my $lev = sub {
           my $J2 = shift;
           Rw mo/pwth $J:J2 $M 0.1-0.3;
       };
       ['cap','', {lev=>$lev}]
     rr_bod: | #c boodle am
       my $in = rr.in;
       my $out = rr.out;
       my $phi = ($out - $in) * rr.thi; # normal lines per 0.1
       my $thi = $phi * 2; # oundo big window, bod small
       say $phi for 1..5;
       
       my $j = rr.j;
       my $sjs = rr.sjs;
       my $u = j.s;
       
       # how to what = @{rr.sjs}
       my $o = Rw oundo $thi $u;
       saybl "===\n=== ooooooooooooooo j.r\n=== o.thi o.total";
       
       # some below here and super oundo is:
       # the art of extracting segments like pi/
       # must be offered & consumed
       # like diffusing a bomb
       # through quantum vectors to rate things
       # explode enthusiastically the things inside
       # and the alterations too,
       # like why don't you combine this this way
       # so things are things
       # but there's real datastructurey first order things
       # and all the other stuff on top
       # then it flushes out reality by ways it wants
       # by sorting by yay style then etc.
       
       my @M;
       for my $r (@{o.r}) {
           my $M = [];
           
           # SZOOOOOOOOOOOM
           push @$M, Rw sur/labegy $r;
           
           my $lev = sub {
               my $J2 = shift;
               Rw mo/pwth $J:J2 $M 0.1-0.3;
               # chain that ^ into c of that v to fractionate by 0
           };
           
           push @M, [r.r, r.path, {lev=>$lev}];
       
           say "r.path r.r \t\t r.s";
       }
       @M
     labegy: | #c
        my $sc = {};
        my $si = length(r.r);
        my $curve = {qw{
        40 60
        30 70
        20 80
        }};
        for (sort keys %$curve) {
            sc.fs = $curve->{$_} if $si > $_
        }
        sc.ws = 'p';
        #sc.a
        my $c = {};
        # tooltip? (title="")
        c.s = r.r; # could use r.path and make a tiny maka thing for the meta key graphics
        return ['lab', '', $c, $sc];
        #my $guec = $2 if r.cv =~ /^(0\.)?(\d)/;
        #sc.col = G.jumb.cos->{$guec} || warn "was r.cv so $guec";
        # TODO add a style that colours it after round
        # TODO curve
        # TODO shared labels
        # TODO culture
        # TODO unwind cv into colours variously
     up: | #c upper level gplumb
       Rw inness;
       # move impression of ^ to v, then round
       J.lum = Rw tent lum;
       # TODO replace last
       
       # sucks each u
       # but also the
       
       Rw sur/heading + $J3:J.lum;
       
       if (J.engboo) {
           Rw sur/upeng;
           Rw round $J2:J.lum $J;
           return;
       }
       
       my $u = J.on.bb->{"u\t".0.1};
       Rw sur/oning + $u $J3:J.lum;
       
       # pass innessing, group maker
       # join gel cap knowledge halfway
       
       my $y = w $R down; # 2ish aggd knowledge, instructions?
       
       my $spcv = 0.2; # BS so has gap in 1 unless id, etc
       my @r;
       if (!ref $u) {
           push @r, { r=>"text", s=>$u, cv=>0.4 };
       }
       elsif (ref $u eq 'ARRAY') {
           my $i = 0;
           my $warp = @$u; # TODO or less?
           my @warp = Rw cv/oe off1 $v:warp;
           for my $ui (@$u) {
               my $cv = "0.". shift @warp;
               push @r, { r=>$i, path=>"[".$i++, s=>$ui, cv=>$cv};
           }
       }
       else {
           my $r = {map{$_=>1} keys %$u};
           
           $spcv = 0.3 if u.id;

           # bunch of keys... ^ interpret, compress knowledge
           # TODO ^make itv like two indexes, polars
           # any sorta layout knowhow...
       
           my @or = grep { delete $r->{$_} } @{y.order};
           if (ref $u eq 'A') {
               push @or, sort grep { /^u_/ && delete $r->{$_} } keys %$r;
           }
           push @or, sort keys %$r;
           
           for (@or) {
               my $v = y.ordy->{$_};
               # this is totally 5 in inness doing this 
               my $cv = "0.$v" if $v;
               $cv ||= $spcv;
               push @r, { r=>$_, path=>"{$_", s=>$u->{$_}, cv=>$cv };
           }
       }
       
       for my $r (@r) { # %{ r, path, v, cv #c
           
           J.lum.lev->("r.r/\t".r.cv => sub {
               my $J2 = shift;
               
               # TODO curve ^ # make sf of a Q factor that can see $v somehow
               J2.bz->(
                    "lable 0.1" => r.r,
                    #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    "%css#laob" => 'position:absolute;right:0.5em;white-space:pre;',
                    "%tt#\cv" => r.cv,
               );
               if (r.r eq 'id') {
                   my $axio = ref $u;
                   J2.bz->(
                        "axio 0.1" => $axio,
                        "%css#laob" => 'position:absolute;right:3em;font-size:300%',
                   );  
                   if (r.r eq 'K') {
                       my $axio = u.K;
                       J2.bz->(
                            "axe 0.1" => $axio,
                            "%css#laob" => 'position:absolute;right:2.5em;font-size:300%;color:#f93',
                       );  
                   }
               }
               
               # GP ness ^ v leaky
               my $bcv = 0.4;
               $bcv = 0.1 if r.cv < 0.2;
                  
               J2.fro->("gp\t"."0.6" => r.s,
                 {cv=>$bcv, makaz=>{ # hooky
                    "/%css#jit 0.9" => 'position:absolute;left:1em;max-width:14em;overflow:hidden;white-space:nowrap',
                 }}, # ^ v in out sameish
               );
           },
                 (r.path ? ('%path' => r.path) : ()),
           );
            #J.bz->("$r\t"."0.$cv" => ''.$v, '%css'=>'white-space:pre');
             # has l cursor stashed as a 1shj
             # TODO 5er grab l cursor and style
             # ad what kind of cursor, fro delays/syncs
             # start culture
             # the middle
             # start cuddle
       }
       
       Rw round $J2:J.lum $J;
       
       my @oooo = Rw tvo $J;
       for my $j (@oooo) {
           #say j.r;
       }
       
     entropia: | #c kind of same as running intents on u/ etc from inness
       wdump(2,J.onei);
     folw: | #c expand path, may spew arm
       my $J3 = Rw sur/spawnge $J;

       if ($J ne $J3) { # copy HEAD before pat(c)h
           Rw inness $J:J3 $r:J.onei;
       }
       Rw inness $J:J3 $r;
     spawnge: | #c spew arm when getting full
       # intermediates inness unfoldment to cellular structure
       # like if e.S we want shift in it, sprouting
       $J; # or return the arm instead

