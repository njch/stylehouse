
R_Jz:
 - K: spinash #c J chund   - wandry   forks & events) approp.
   D: |
     my $j;
     j.Jiter = $J; # erse rev
     j.Jmost = J.Jmost;
     # ^ outside v self
     Rw suJ $J:j;
     $j
     
 - K: foid #c
   D: |
     J.isJid = J.replaceJid || $H->mkuid; # convert
     undef J.isJid if G.jumb.gp_inarow > 1; # to
     J.idyl->($J, J.isJid) if J.isJid; # /%id stuff
 - K: fo #c gp in 3d 
   D: |
     %$J = (%$J, %{ar.o}) if ar.o;
     if (ar.m) {
         Rw fom;
     }
     # cv 
     die "could be anything" if ref J.cv;
     J.cv = 0.1 if J.cv < 0.1;
     
     # give it %id, flux in cache of Jmost
     J bz / 0.9 "y"
     
     # 2
     Rw foid;
     # 3
     my $pia = Rw fopathd $J;
     
     # TODO J pass overhead, ping off impressions
     # maka suction
     # don't need to close it up right now...
     # top down injection goss
     
     # 5 forking swivel injecty redis, etc etc
     # set up more consciously the stylepliers of 5
     
     # 6
     my $u = J.u;
     Rw $pia $J $u;
     
     Rw oldschool $J;
     
     # 7 TRACTOR BLEED
     J.s = Rw maka $J $u;
     # can pin/ping light source of con
     
     # 8
     
     # 9
     $J
     
 - K: fom #c fo arg unpack $o
   D: |
     my $cs = ar.cs || ar.m;
     my $o = Rw pul $cs u cv{+} y;
     if ($J) {
         %$o = (%$J, %$o);
     }
     $o;
     
 - K: fopathd #c
   D: |
     my $u = J.u;
     die if J.wa;
     my $wa = J.y || do {
         J.c = $R->cgp($u);
         # ^
         
         # v
         my ($wa) = grep { J.c->{$_} } qw'canpi ARRAY HASH ref undef text';
         $wa = ref $u if $wa eq 'canpi';
         $wa ||= 'wtf';
         $wa;
     };
     # can stick $wa on J.wa for thrashing maths
     # funcy fuzz fields
     # mutating spiral code
     my $way;
     for my $try ("pi/$wa", "$wa/pi") {
         my $m = [$try];
         $way = $try if Rw wuck $m;
     }
     
     $way || die "not $wa equip anywhere"; # more
     $way
     
 - K: psfacts #c
   n_D:
     pi: |
       J.fo->($u,0.3);
mod c:
 - K: fo #c sc makes a little J/a big j
   mod 3.6: |
     my $zero = 0;
     my $o = Rw fom $cs $J:zero;
     o.r = d.r;
     my $f = J.f->(fo=>$o); # magnetic fishingrods = usually pass @$cs as $m
     sayre "  #############  $f   f.r \t\t f.y";
     d.cs.fo.fo = $f;
     d.s = f.s;
     n.gl = [];
     # make like to hook %gp towards set f.r to the line this fo is on
 - K: pwth #c -> !some/path exp.
   mod 3.1: |
     my $path = $cs;
     $path = "!$path" unless $path =~ /^\W/;
     c.path && die;
     c.path = $path;
 - K: path #c install cs path
   mod 3.2: |
     d.cs.pwth.path = $cs;
     d.cs.pwth.idly = 1 unless c.fo; # will prov
     # later style %idly when %path but no /%id
esc c:
 - K: path #c
   esc 3: |
     '%path'=>$v
 - K: idly #c
   esc 3: |
     '%idly'=>$v
 - K: fo #c ag
   esc 3.5: |
     die if !v.r;
     '%gp' => $v 

