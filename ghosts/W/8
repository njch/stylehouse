
R_Jz:
 - K: pul #c pulk
   D: |
     my $o = {};
     for my $n (@$m) {
         # can type things along
         my $v = shift @$cs;
         if ($n =~ s/{\+}// && ref $v eq 'HASH') {
             say wdump(2,[$n,$o,$cs]);
             %$o = {%$o, %$v}; # other abouts spill off cv modi
         }
         else {
             say wdump(2,[$n,$o,$cs]);
             $o->{$n} = $v;
         }
     }
     say wdump[$m, $cs, $o];
     $o
mod c:
 - K: fo #c sc makes a little J/a big j
   mod 3.6: |
     my $o = Rw pul $cs u cv{+};
     #say wdump "SC fo DR: d.r";
     my $f = J.fo->(@$cs); # magnetic fishingrods
     d.cs.fo.fo = $f;
     d.s = f.s;
     n.gl = [];
     # make like to hook %gp towards set f.r to the line this fo is on
 - K: pwth #c -> !some/path exp.
   mod 3.1: |
     my $path = $cs;
     $path = "!$path" unless $path =~ /^\W/;
     c.path && die;
     c.path = $path;
 - K: path #c install cs path
   mod 3.2: |
     d.cs.pwth.path = $cs;
     d.cs.pwth.idly = 1 unless c.fo; # will prov
     # later style %idly when %path but no /%id
esc c:
 - K: path #c
   esc 3: |
     '%path'=>$v
 - K: idly #c
   esc 3: |
     '%idly'=>$v
 - K: fo #c ag
   esc 3: |
     say "fortex ".gp $v;
     v.r = d.r;
     
     '%gp' => $v 

