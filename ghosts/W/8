R_Jz:
 - K: pathyl #c kinda mod kinda datasheet
   D: |
     my $i = 0;
     for my $m (@$M) {
         $i++;
         my ($t, $path,  $cs) = @$m;
         $path = "!$path" unless $path =~ /^ /;
         
         my @cs;
         
         say wdump $m;
         
         # later style %idly if %path but no /%id
         push @cs, '%path' => $path;
         push @cs, '%idly' => 1 if !cs.fro;
         # ^ make %path req %Jid, provided by %fro etc
         push @cs, '%css' => 'color:#f3a;-webkit-filter:blur(1px);font-size:200%';
         if (cs.fro) {
             J fro $t 0.$i @{cs.fro}, @cs
         }
         else {
             J bz $t 0.$i "$t", @cs
         }
     }
 - K: soome #c
   D: |
       my $M = [
          [ Gee => 1,
            { s => "BLAH", fro => [$J => 0.1] }, # c
            { fs => 4 }, # cs
          ],
       ];
       # c: fro:[] zooms [] into fro  so as not k=fro => {c etc}
       # the data fractals ^
       # pthy => 'sur/to:Jung', # membe
       
       # inj many ober thick
       for my $m (@$M) {
           Rw modstick $J $m;
       }
       

