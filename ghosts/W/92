R_Jz:
 - K: foot #c fo9od
   n_D:
     yJup: |
       'foot', 'food',
     curves: |
       ["spun 0" => .55],
       ["y 0" => 1],
       ["x 0" => 0.1],
       ["zoom 0" => 0.06],
       ["curve 0.1" => -0.024],

       #["zoom 0.4" => -0.12],
       ["curve 0.4" => 0.3],

       ["curve 0.7" => 1.1],
     mods: |
       [sqww => 23, 'ஓ୶', #{fs=>5_2},
       'color:#8ff;-webkit-filter:blur(3px);margin-left:3em'],
 - K: ghostfood #c
   D: |
       sayyl "YEYEYEYE" for 1..5; 
       return;
       my $n = Rw Jung;
       n.oot || return sayre "No oot, no ghostfood";
       my $J = n.oot.hox;
       for (keys %$Gd) {
           J bz $_ 0.1 "yep"
       }
       say "gulped git";  
 - K: food #c
   n_D:
     any_init: | #c
       say " ANY ENINT";
       H.G.dooftip = sub {
       say " IN FOODIP "; 
       say " IN FOODIP ";
         my $n = Rw Jung;
         my $J = n.ollox || die "no llox";
         my $r;
         r.i = $F[0];
         Rw inness $J $r;
         Rw splat $J;
       };
     fresh_init: | #c
       push @{G0.recoded_cbs}, sub {
         my $Gd = shift;
         die "ELO";
         Rw ghostfood $Gd;
       };
     entropia: | #c
       my $n = Rw Jung;
       my @yt = Rw tvo $J:n.ollox;
       sayyl "ollox has: ". @yt;
       return 'drone';
     up: | #c
       my $cra = 9;
       saybl "YAYAAAYAYAAAYAYAAAYAYAAAYAYAAA" for 1..2;
       my $curves = J.ent.of.curves;
       # intent of which curve line the bz is for
       # bz inted
       # 
       my $n = Rw Jung;
       
       w G.R del(u=>n.o2x); 
       
       my $J3 = n.Hull;
       my $ox = J.hox ||= {};
       ox.bb || do {
          Rw suJ $J:ox;
       };
       Rw pha $J:ox awlo; 
       
       
       # add pha curtaining and look at diffs in ducky
       
       my @oxn = Rw tvo $J:ox;
       
       my $tw = Rw huck */curves $J:J3;
       
       my $r = {i=>$tw};
       my $duck = Rw jin duck duck;
       my $sur = n.ollox;
       
       Rw inness $J:duck $r;
       
       
       
       my $i = 0;
       $tw->{"and".$i++} = $_ for map { "_.r    _.s" } @oxn;
       
       
       J.bible ||= [split /\n\n/, $H->slurp('not')];
       my @l = (shuffle @{J.bible})[0..8];
       @l = (" --- ") x 12;
       my $thi = @l;
       
       say @l;
       # be anchoring a spiral uncoiling against/with this hull
       #my $off = 1;
       my @cvs = Rw cv/oe $thi;
       say "cv food: @cvs"; 
       
       for my $l (@l) {
            my $cv = shift @cvs || die;
                 J.bz->("lab$cv 0.$cv" => "$l",
                        #'%sf#la' => "ab;pr.5;fs$fs;c0", C that < v
                    #    "%css#laob" => 'margin-left:2em',
                 ); 
       }
       

       
 - K: foody #c
   n_D:
     nothing: |
       
       J.lum.lev->("knobs\t0.08" => sub {
           my $J2 = shift; 
           
           J2 bz lable 0.1 "knobs "
           
           J2.lev->("knobs\t0.2" => sub {
             my $J3 = shift;
             J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
           });
       }); 
     stylesheet: |
       <<"";
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       
       # y

