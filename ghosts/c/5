Rummage: |
    # to make more
    # wagging wormhole and w/c are one
    # intention can open it for itself
    # the z executable points ARGV points to w/*s to apply on top of each other
    # as a kind of u that gains meaning as it receives layers of language
    # so behaviour can eat the rest of its specuity
Run: |
    my @m = @ARGV;
    
    G.t = shift @m if $m[0] =~ /^((?!\d)\w)/ && $1 eq uc($1);
    
    G.cv = $m[0] =~ /^\d+/ ? shift @m : 3;
    
    for (map {split ','} @m) {
        my ($k, $v) = split ':', $_, 2;
        $v = 1 if !defined $v;
        G.c.>$k = $v;
    }
    
    my $ta = G.cv <3 ? 'K/Stable' : 'K/Feel';
    G.IIII = [map{'G/T/'.$_}'H/Boat','H/Rest','p/Ang',$ta];
    
    G.y = $G;
    $C = $G;
    
    c&n = 'Sen' if c&b eq '1';
    c&u ||= '1' if G.t =~ /^W/;
    Rw ${_}_up for grep{c&u eq '1'} G.t;
    
    Rw iolam if c&i;
    Rw $_ for grep{$_&&'1'ne$_} c&u;
    
    Rw Top
    
Top: |
    G.now = hitime();
    G.delta = G.last - G.now if G.last;
    G.gap = G.lastout - G.now if G.lastout;
    saybl "T of G.t G.cv G.s      ".join'  ',@{ar.m||[]};
    
    my $J;
    my $t = 'Oth';
    my $cv = 0.3;
    $J = G.sc.>not$t ||= do {
        $J = Rw Jto $t=not$t;
        my $sc;
        G.s = G.oin = sc.J = Rw Jto $t;
        Rw jamsc $J $t $cv $sc;
        Rw jamsc $J:G.s $t $cv $sc;
        $J
    };
    
    n $t,$cv,{J=>$t,vv=>6,s=>G.t}
    
    G.lastout = hitime();
    G.last = G.now;
Oth: | # rising wave
    y.ope = 1;
    y.at.oJl = 1;
    J.A.tid++;
    
    if (!G.last && G.c.n) {
        n $_ for grep{$_} split /,/, G.c.n
    }
    
    $s eq 'Oth' && die "Find hangout";
    
    n $s
    
    n All
    
    # randonly pour time ^
    T.nose = 1; # J no osc
    
End: | # fork/be the U slipperer
    G.U = $J;
    J.fti ||= 0;
    if (J.fti >= 0) {
        Rw waitme;
    }
    sayyl "G.t J.name up J.fti";
    Rw forked;
    
We: |
    n Modems
    n SevWo
    Rw wayt $d=1.9 $p=Othse $J;
All: | # together active ambience
    J.mo.s.al = $J;
    n Check
    n _.name for @{G.all};
    
Check: | # always ambient ambulance
    Rw Loading;
    #n wa =>''=>{pi=>'waps'} # awol
    
    
Loading: |
    my @l;
    push @l, keys %{G.T} if G.T;
    push @l, keys %{G.Tfor} if G.Tfor;
    @l = uniq @l;
    for my $k (sort @l) {
        my $f = G.Tfor->{$k} || "w/$k";
        my $s = -s $f;
        $s || sayre("Juynk in tied hash? Not $f") && next;
        G.Tt->{$k} eq $s && next;
        #sayyl "Loading: $k";
        G.Tt->{$k} = $s;
        G.T->{$k} = LoadFile($f);
    }
Usee: | # tidy W files base on current name link/age
    u urw
    u curv=>pi=><<''
        curve 0 0.11
    
    my @l = `find life/W -type l`;
    my $keep = {map{chomp; readlink($_) =~ /^(.+)\..+?$/; $1=>$_}@l};
    my @r = `find life/W -mtime +0.6 -type f`;
    for (@r) {
        my $k = $1 if /^life\/W\/(.+)\..+?$/;
        $keep->{$k} ?
            sayre "$k \t\tis $keep->{$k}"
          : `rm $_`;
    }
    sayyl "Keeping life/W: ". join ', ', sort keys %$keep;
    #my @el = `find life/W`;
    y.in=1;
    y.out=5;
    Mn(some=>''=>{pi=>textl=>s=>$_})
        for split"\n",wdump 2, \@l;
Travel: | # sync clocks
    my ($from,$to) = ('s','v');
    
    my $date = `ssh $from date`;
    my $dath = `ssh $to date`;
    chomp $date;
    chomp $dath;
    
    say "From $from: $date";
    saybl "Over $to:  $dath";
    `ssh $to "sudo date --set '$date'"`;
    sayyl "Done $to now: ".`ssh $to date`;
    
    return;
    # sudo -u postgres vacuumdb s
    
    # some day:
    n \ask=>\"sudo date --set '$date'";
    saybl wdump 3, u.M;
    
    # scan ISLE
    # do chobs
    
Tp: | # execution, comes with depth unlimits
    u Traweil
    
    C.c.toW && return
        n C.c.toW => W => {isle=>C.c.toisle||die"Noisle".ki$C}
    
    #my @hose = split /\s+/, 'Hit Hut StyleThroat styleomi stylation';
    #`cd w/jw; rm -f @hose` if @hose;
    
    n \'W:Boat,isle:q'
    
Boat: | # will be waiting in q
    # 1
    n Indular
    # 2
    n Modems
    # 3
    n Modular
    # 4 should move, Modems fit here
    # as do continuating thought intros and index
    # generate faces/light cone from-beforeness (Aim)
    # 5 is this face sorted almost completely for action
    # 6
    n Jing
Rest: | # also required, in h
    # 7
    n Seven
    # everything might need the curve plotter, is really another...
    n GeoSo
    # mad little data walks
    n Goodat
    # 2, detravel u W in isle:u
    n qqlaces
    # 85 elvis moving parts
    n threJ
Black: |
    n Jam
    n Done
    
Eel: |
    n Servo
    n SevWo
    n Yosc
    n Timing
    #
    n SlideEa
    n C
    n Spaci
    n KnowTime
Feel: | # wpp
    n Eel
    n Jam
    n SevWo
    n Wuts
    n Meta
    n Done
    n Ysleep
    n Yosc
    n Jiterbug
    n Ydo
    u Jumps

