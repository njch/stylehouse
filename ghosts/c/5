
noibz/yJ: |
       my $bz = J.bz;
       J.bz = sub {
           say "# J.name bz ".join'      ',@_;
           $bz->(@_);
       };
    
wa:
   yJ: |
     'Travel aww'
   M: |
    Rw vortex $J around $d=16;
    Jn('','',{J=>'Wkcs'});
    #Rw J6 - Wkcs; 
    #Rw J6 - Vil;
    Rw J6 - Vuel;
    
    #Rw J6 - Tok;
    #Rw J6 - Hosp;
    #Rw J6 - Eosse;
    #Rw J6 - EYZ;
    #Rw J6 - Wander;
    Rw J5 - toc;
    
    Jn(st=>0.9=>"o",'%hs:8427,fs:4');
    Rwyl 0.01 waps;
Wkcs:
   yJ: |
     'Travel'
   M: |
    #u Binc;
    
    
    Mn(shedful => '', {pi=>'seas',s=>'g/Z/6 g/Z/4'});
    
    G.way.Wkcs.curves = <<'' if 1;
    zoom 0  1.4
    curve 0 -0.03
    x 0.02 0
    # etc
aftor: |
    Rwyl 0.1 aftor;
    my $J = J.most.J;
    my $N = Rw tyc $J;
    @$N = grep { _.sc.pi eq 'thumbnail' } @$N;
    
    my $u = {};
    for my $C (@$N) {
        my $p = C.t;
        my $n = C.c.s;
        Rw loadup $u $p $n;
    }
    sayyl "After J.name: clife: ".wdump 2, [$u,$N];
    Rw makoo $u;
    
Vil:
   yJ: |
      'Travel'
   M: |
      Mn(hah => {thy=>0.3}, {pi=>'eye',s=>'eye/fug'});
      
      #Jn(Vuel=>'',{W=>'Vuel'});
      
      #$J:G.oin
      
      Mn(ZIS => {thy=>0.2}, {pi=>'text',s=>"Thisway"});
Vuel:
   yJ: |
      'Travel'
   M: |
      G.way.Vuel.curves = <<'' if 1;
      zoom 0  1.6
      curve 0 -0.03
      x 0.02 0
      
      my $i = Rw J6 - Wkcs;
      
      Rw lazershop;
      
      #my @s = Rw wuck $J */curves;
      my $oJ = $i;#G.oin;
      my $vs = Rw tc $J:oJ;
      $vs = [grep { _.sc.pi eq 'clife' } @$vs ];
      Mn(Wkcs => '', {pi=>vs=>s=>$vs});
      
      #my $rr = [map{"_.t     ".ki({N=>{y=>_.y,c=>_.c,sc=>_.sc}})}@$vs];
      #my $rr = [@$vs];
      #my $rr = i.oJ.A;
      #$rr = rr.W if $rr;
      #Mn(deef=>'',{pi=>'',cv=>0.8,s=>wdump 3, $rr}, {fs=>6});
Tok:
   yJ: |
      'shd Travel'
   M: |
      #J.zip == 1 &&
      my $g = {map{$_=>"$G->{$_}"}keys %$G};
      G.way.Vuel.curves = <<'' if 0;
      x 0 -0.2
      zoom 0  0.7
      curve 0 -0.3
      x 0.02 0
      
      my @s = Rw wuck $J */curves;
      
      my $oJ = G.oin;
      
      my $vs = Rw tc $J:oJ;
      #my $s = wdump $vs;
      my $rr = [map{[_.t,_.y.cv,_.sc]}@$vs];
      Mn(deef=>'',{pi=>'',s=>$rr});
Wander:
   yJ: |
      'Travel'
   M: |
      J.zip++ >= 5 && do{ J.zip = 0 };
      sayyl "J.name  J.zip" for 1..5;
      Rw J6 - Vil;
      
      
      J.zip == 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"Thisway"});
      
      J.zip == 0 || J.zip == 2 &&
      Mn(ZIS => '', {pi=>'text',s=>"ones"});
      
      J.zip > 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"sway"});
      
      J.zip > 2 &&
      Mn(skode => {thy=>3}, {pi=>'psfaus',s=>'THIS'});
      
      J.zip > 3 &&
      Mn(ZIStor => '', {pi=>'text',s=>"away..."});
      #sayylto "_.dead : ".gp $_ for values %{J.idly};
      #Mn(skoeede => '', {pi=>'text',s=>'THIS'});
      
      #Mn(With => 8, {J=>''}); # J with
      
      #Mn(Showi => 3, {pi=>'show',s=>8}); # any this 8
pi/show: |
     my $oJ = J.Jiter;
     
     
     
around: |
     inter({Jname=>ar.J.name}) if ref ar.J;
     if (!ar.A) {
         saybl "around -- J5 ".(ar.J ? ar.J.name : ki $ar);
         return Rw J5
     }
     
     
     my $tw = Rw huck + */around;
     
     if (!$tw) {
        Rw up +;
        Rw out +;
     }
     
     saygr "around ! ! J.name ".F_delta()
     unless J.yt.quiet;
     # try return stuff? pretty aroundo
     @{(values %$tw)[0]} if $tw
gui: # turn into some
     yJ: |
       'gui quigeo rondo' 
     out: |
       Rw oJ7;
rondo:
     yJ: |
       J.cv = 20;
       J.most.mody = 'mani';
       J.most.eo = 'chuv';

