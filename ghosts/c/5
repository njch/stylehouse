Rune: |
    (G.what) = @ARGV;
    G.what ||= 'Tarp';
    map {
        my ($k,$f) = split '=';
        G.way->{$k} = G.way->{$f};
    } qw'Jto=Two In=Twin Modi=Twin Sev=Twev uCon=TwoCon';
    
    Rw $_ +
        for grep { G.way->{$_} } G.what.'_up';
    
    Rw wayt $d=0.001 $p=Top;
    
    $_->() for @{delete(G.Rune)||[]};
Top: |
    my $now = hitime;
    my $gap = $now - G.lastout;
    if (!G.asap && $gap < 0.2) {
        sayre("slowlaned ${_}s")&& snooze 40000;
        return;
    }
    Rw Many;    
    G.lastout = $now;
Many: |
    $G || die;
    G.lastin = hitime;
    # The Beatles - Martha My Dear
    my $J;
    my $t = 'Oth';
    my $cv = 0.3;
    $J = G.outerspace ||= do {
        sayyl "Greating $G outerspace";
        $J = Rw Jto One;
        my $s = G.what;
        my $sc;
        G.oin = sc.J = Rw Jto $t;
        Rw jamsc $J $t $cv $s $sc;
        Rw jamsc $J:G.oin $t $cv $s $sc;
        $J
    };
    
    J.A.IIII = [@{G.IIII}];
    J.A.Indo = 2;
    #Rw Viu $J;
    n $t =>$cv=>{J=>$t,vv=>6,s=>G.what};
    my $y = G.Many||={};
    y.i++;
    my $ts = hitime;
    y.la->{$ts} = 1;
    my $ron = sub {
        0.01 * int(100 * (shift() - shift()))
    };
    sayyl "many y.i   took ".$ron->($ts, G.lastin)
        ." since: ".$ron->($ts, G.oin.A.first);
    
Oth: |
    # rising 
    y.ope = 1;
    J.A.tid++;
    n All
    
    if ('Oth' eq $s) {
        die "Find hangout";
    }
    else {
        n $s
    }
    # randonly pour time ^
    T.nose = 1;
    
All: |
    J.mo.s.al = $J;
    n Byst
    n Check
    n @$_ for map{[$_=>W=>{}]} map { sayyl "All uip _.name"; _.name }
        map { J.mo.s.bb->{"$_\tJ"} } 
        grep {$_} map { /^(.+)\tall$/ && $1 } keys %{J.mo.s.bb};
        
    
    
Byst: | # the random for news interro
    G.Byst = $J;
    n s=>''=>t;
    
Check: |
    Rw Loading;
    n wa =>''=>{pi=>'waps'}
    
    
Rig: | # Wild
    u Indulator
    u Modulator
    u Modems
    n s=>''=>t
    Rw dow $Rig:J.A.I;
    # trigbacky, like there is a whole plateu of links aft tests
    `cp w/Rig w/Wild`;
    
Sit: | # linkup Seate, Remy
    n Seate
    n Remy
    
Seate: | # Seven
    u Seven
    
    u GeoSo
    u Goodat
    u Foli
    u qqlaces
    
    n s=>''=>t
    # use Wild as always, Seate just the Seven thing for use with another Wild
    Rw dow $Seate:J.A.I;
    T.nose = 1; # dont Sev (next run may use trouble)
    
Remy: | # mix Wild + Seate = Remy, to becomer Wild as things join Rig
    J.A.IIII = ['G/T/Wild','G/T/Seate','G/T/Chang'];
    n s=>''=>t
    Rw dow $Remy:J.A.II;
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc
    
Eel: | # most wild (furthest from Wild, goes in circle)
    # u whateverworkon
    #u WhoAmI
    u threJ
    
    u Jiterbug
    u C
    u Motion
    u KnowTime
    u Rings
    u Jlaces
    u Joot
    u Jamping
    
    
    #u TheAttractor
    #u Oscgrin
    
    
    n s=>''=>t
    Rw dow $Eel:J.A.I;
    T.nose = 1; # dont Sev (next run may use trouble)
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc

