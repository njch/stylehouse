Rummage: |
    # to make more
    # wagging wormhole and w/c are one
    # intention can open it for itself
    # the z executable points ARGV points to w/*s to apply on top of each other
    # as a kind of u that gains meaning as it receives layers of language
    # so behaviour can eat the rest of its specuity
Run: |
    my @Me = @ARGV;
    G.what = shift(@Me) || 'Tarp';
    
    Rw $_
        for grep {G.way->{$_}} map {$_.'_up'} grep {/^W[se]$/} G.what;
    
    Rw wayt $d=0.001 $p=Top;
    
Top: |
    G.now = hitime();
    G.delta = G.last - G.now if G.last;
    G.gap = G.lastout - G.now if G.lastout;
    
    my $J;
    my ($t,$cv,$s) = (Oth=>0.3=>G.what);
    $J = G.outerspace ||= do {
        $J = Rw Jto One;
        my $sc;
        G.oin = sc.J = Rw Jto $t;
        Rw jamsc $J $t $cv $s $sc;
        Rw jamsc $J:G.oin $t $cv $s $sc;
        $J
    };
    n $t=>$cv=>{J=>$t,vv=>6,s=>$s};
    
    G.lastout = hitime();
    G.last = G.now;
Oth: |
    # rising
    y.ope = 1;
    y.at.oJl = 1;
    J.A.tid++;
    
    $s eq 'Oth' && die "Find hangout";
    J.VV.N = 1;
    n $s
    
    n All
    # randonly pour time ^
    T.nose = 1;
    
We: |
    n Modems
    n SevWo
    Rw wayt $d=1.9 $p=Othse $J;
Othse: |
    say wdump 3, ["J.mo.s, G.oin",J.mo.s, G.oin];
All: |
    J.mo.s.al = $J;
    n Check
    n @$_ for map{[$_=>W=>{}]} map {_.name}
        map { J.mo.s.bb->{"$_\tJ"} } 
        grep {$_} map { /^(.+)\tall$/ && $1 } keys %{J.mo.s.bb};
        
    
    
Check: |
    Rw Loading;
    n wa =>''=>{pi=>'waps'}
    
    
Rig: | # Wild
    u Indulator
    u Modulator
    u Modems
    n s=>''=>t
    Rw dow $Rig:J.A.I;
    # trigbacky, like there is a whole plateu of links aft tests
    `cp w/Rig w/Wild`;
    
Sit: | # linkup Seate, Remy
    n Seate
    n Remy
    
Seate: | # Seven
    u Seven
    
    u GeoSo
    u Goodat
    u Foli
    u qqlaces
    
    n s=>''=>t
    # use Wild as always, Seate just the Seven thing for use with another Wild
    Rw dow $Seate:J.A.I;
    T.nose = 1; # dont Sev (next run may use trouble)
    
Remy: | # mix Wild + Seate = Remy, to becomer Wild as things join Rig
    J.A.IIII = ['G/T/Wild','G/T/Seate','G/T/Chang'];
    n s=>''=>t
    Rw dow $Remy:J.A.II;
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc
    
Eel: | # most wild (furthest from Wild, goes in circle)
    #n SlideEa
    #n C
    n Spaci

