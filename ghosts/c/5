Travel:
   yJ: |
     'aww TravelingMeans'
   non: |
      to overload the filesystem
      a bz ring
      make a whole sub
      easy
      its an oversight
      a ribbing
        texture directives
          way over
               
wa:
   yJ: |
     'aww'
   M: |
    Rw vortex $J around $d=6;
    
    #Rw J6 - Wkcs; 
    #Rw J6 - Vil;
    Rw J6 - Vuel;
    #Rw J6 - Hosp;
    #Rw J6 - Eosse;
    #Rw J6 - EYZ;
    #Rw J6 - Wander;
    
    Jn(st=>0.9=>"o",'%hs:8427,fs:4');
    Rwyl 0.01 waps;
Wkcs:
   yJ: |
     'Travel'
   M: |
    sayyl "J.name" for 1..5;
    Mn(shedful => '', {pi=>'seas',s=>'w/d'});
    
Vil:
   yJ: |
      'Travel'
   M: |
      Mn(hah => {thy=>1}, {pi=>'eye',s=>'eye/fug'});
      
      Mn(ZIS => {thy=>0.1}, {pi=>'text',s=>"Thisway"});
Vuel:
   yJ: |
      'Travel'
   M: |
      #J.zip == 1 &&
      my $g = {map{$_=>"$G->{$_}"}keys %$G};
      G.way.Vuel.curves = <<'';
      zoom 0  0.7
      curve 0 -0.04
      
      my @s = Rw wuck $J */curves;
      #sayyl wdump [@s];
      
      
      my $vs = Rw tc $J:G.oin;
      Mn(deef=>'',{pi=>'vs',s=>$vs});
pi/vs: |
    #die wdump $u;
    C.sc.nspc = 0.8;
    Jn(lvs=>0.1=>lvs=>{});
    y.lumfa = 3;
    y.limn = 0.7;
    my $i = 0;
    Mn($i++=>'',{pi=>'lv',s=>$_}) for @$u;
pi/code: |
    Jn(code=>1=>'&','%hs:389');
pi/lv: |
    my 
    C.sc.nspc = 0.2;
    y.limn = 3;
    Jn(lv=>1=>{s=>'{'},'%fs:23,hs:3892,ml:-0.4em,mt:-2em');
    u.c.etc = {mil =>pond=>exp=>[qw'exp re']};
    my @k = Rw kord $u t y c sc;
    
    Mn($_ => {($_ eq 'c' ? (thy=>2) : ())},
       {pi=>'kv',s=>[$_=>$u->{$_}]},
       {mw=>'5em'},
       ) for @k;
    #Jn(it=>1=>{pi=>'text',s=>wdump(4,$u),cv=>0.8},'%opa:0.3');
pi/keysz: |
Wander:
   yJ: |
      'Travel'
   M: |
      J.zip++ >= 5 && do{ J.zip = 0 };
      sayyl "J.name  J.zip" for 1..5;
      Rw J6 - Vil;
      
      
      J.zip == 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"Thisway"});
      
      J.zip == 0 || J.zip == 2 &&
      Mn(ZIS => '', {pi=>'text',s=>"ones"});
      
      J.zip > 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"sway"});
      
      J.zip > 2 &&
      Mn(skode => {thy=>3}, {pi=>'psfaus',s=>'THIS'});
      
      J.zip > 3 &&
      Mn(ZIStor => '', {pi=>'text',s=>"away..."});
      #sayylto "_.dead : ".gp $_ for values %{J.idly};
      #Mn(skoeede => '', {pi=>'text',s=>'THIS'});
      
      #Mn(With => 8, {J=>''}); # J with
      
      #Mn(Showi => 3, {pi=>'show',s=>8}); # any this 8
pi/show: |
     my $oJ = J.Jiter;
     
     
     
Acoomo: |
      A.ztime = d.c.time || 8;
      A.time = sub {
           my ($J,$wa) = @_;
           A.ztime >= $wa ? 1 : do {
               Rw comb oo $J $A $d $wa;
           };
      };
around: |
     inter({Jname=>ar.J.name}) if ref ar.J;
     my $tw = Rw huck + */around;
     
     if (!$tw) {
        Rw up +;
        Rw out +;
     }
     
     saygr "around ! ! J.name ".F_delta()
     unless J.yt.quiet;
     # try return stuff? pretty aroundo
     @{(values %$tw)[0]} if $tw
waz/up: |
      my $coi = Rw pha $J $k=jo;
      my $M=[];
      my $y = {o=>$M};
      my $A = J.A;
      A.ztime ||= 2;
      my $C = J.d;
      
      Rw suck */M $A $J $C $M $y;
      
      Jn('zoo',$y) if @$M;

      Jn(st=>0.9=>"o",'%hs:8427,fs:4');
      coi.qui = 1;
      coi.exactl->();
      
pi3: |
       my $oJ = $J;
       #Ajr("BLAH");
       $oJ = d.y.o.J if d.y.o && d.y.o.J;
       my $ca = oJ.bb->{d.t."%J\t".d.cv};
       $J = $ca || Rw spinash $J;
       
       my $A = J.most.A||{};
       $A = J.A = {%$A};
       A.in = $G->gip(J.Jiter.A.in, C.t)||{};
       J.A.coi = Rw pha $J ako;
       
       at.J = $J;
       at.pi = J.y = d.c.pi;
       J.d = J.C = $d;
       J.u = d.c.s;
       ; # jo ma in lo
       J.r = d.r; # be adjusting this xor
       Rw mkJid $J;
       J.bz->("/\t0.9" => "y");
pi6: |
       my $oJ = $J;
       $J = C.sc.J||die;
       
       my $A = J.A;
       my $T = {};
       
       my $M=[];
       my $y = {o=>$M};
       
       $v = C.sc.J||die;
       v.cv = C.c.gp.cv || C.c.cv || 0.6;
       die'csnod' if v.d ne $d || v.d.c ne d.c;
       
       

       J.yg = Rw pipathg $J; 
       J.yg = 'pi/text' if J.A.d > 5;
       
       # G is... suck */etc with trails
       # 
       
       Rw J.yg $A $J $u:J.u $C:J.C $M $y; 
       
       Jn('zoo',$y) if @$M;
       
       A.coi.qui = 1;
       A.coi.exactl->();
pi7: |
       $v = C.sc.J||die;
       # can pin/ping light source of con paral
       my $name = v.most.eo || die "noeo";
       
       my $aj = Rw $name $J:v $catj=1;
       die aj.s if aj.s;
       
       #sayre "Upto J.r go ".slim 70, sjson aj.c if @{aj.c};
       v.Ec = [@{aj.c}];
       die wdump $aj if @{aj.sc};
       
gui: # turn into some
     yJ: |
       J.cv = 20;
       J.most.mody = 'mani';
       J.most.eo = 'chuv';
       'gui quigeo uppy' 
     out: |
       #sayyl "gui GGEO OUTING J.name";
       Rw oJ $J geo &up $noesc=1;
       Rw chuv;
TravelingMeans:
   yJ: |
     my $A = J.A = J.most.A = {}; 
     A.time = sub{ 
         my ($J,$wa) = @_;
         J.A.ztime >= $wa ? 1 : do {
             sayre gp($J)." Wants time, $wa";
             acum $A, fo => $J;
             0;
         };
     };
     'splain';
Jeight: | # oo J hits
       my $ar = {%{d.c}};
       ar.J=d.s;
       
       return d.s if !A.hav && A.jr&ok-9;
       my $n = A.hav ? sub{} : A.jr&ok-9,9;
       
       Rw around;
       
       $n->();
enje: |  # travinje
               if (my $b = $G->gip(A.J.A.in, d.t)) { # outside in
                   $b = b._ || return;
                   say "d.t in: ".wdump $b;
                   g.extend->($d, $b);
               }

