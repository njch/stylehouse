Cur: |
    u allcurve
    
    n zoom =>0=>1.4
    n y    =>0=>0
    n x    =>0=>0.02
    n curve=>0=>-0.2
    n curve=>0.4=>0.4
    n spin =>0.3=>2
Yup: |
    n Steev
    
    Mn(shedful => '0.1-0.7', {pi=>'seas',s=>'g/c/8 g/G/on'});
    
    J.V = 0;
     
Steev: |
    n Here=>''=>"IS STEVE"
    
Hypo: |
    J.V = 0;
    $G = Rw Gto;
    G.Hypo = $J;
    sayyl "Viewi  g...... J.A.ztime - A.ztime" for 1..2;
    
    Rw Viu;
    u Indulator
    
    #n stod=>''=>{pi=>ajyp=>s=>Duv=>W=>'Yup'}
    n sto =>''=>{pi=>'waps'}
    
    # to 8nderstand:
    G.T.Hypo = J.A.I;
    
    n Wild;
    
    n something=>''=>{s=>rand(4)}
Wild: |
    J.A.IIII = ['G/T/Hypo'];
    J.V = 1;
    J.A.Indo = 1;
    $G = Rw Gto;
    Rw Viu;
    say "Indod: J.name";
    u Cur
    u Modulator
    
    n something=>''=>{pi=>'text',s=>rand(5)}
    n sto =>''=>{pi=>'waps'}
    n nothole=>''=>{s=>rand(5)}
    #n STEVE=>0.65=>"STAVEEEV"=>{fs=>40,hs=>'649'}
fi: | #c
     my $point = ar.p || ar.pin || ar.m->[0];
     
     my $know;
     if (!ar.pin && ar.J) {
         my $J = ar.J;
         if ($point =~ /^\*\/(\w+)$/) {
             my $inway = $1;
             my $h = ar.h || G.way;
             $h = h.hooks if h.hooks;
             my @gu = @{J.yy.styleord};
             #@gu = @gu[0..5] if @gu > 6;
             my @so;
             for (@gu) {
                if (ref $h->{$_} eq 'HASH' && $h->{$_}->{$inway}) {
                    push @{$know||=[]}, "$_/$inway";
                    last if !ar.sucky;
                }
             }
         }
     }
     
     if (!$know) {
         my %wo = Rw findl +;


         my @keys = map { s/^\///; $_ } keys %wo;
         if (!ar.pin && ar.J) {
             my $J = ar.J;

             @keys = grep { my($K)=split'/',$_; J.yt->{$K} } @keys;
             my @or = @{J.yy.styleord};
             if (@or && @keys > 1) {
                 my $i = 1;
                 my $is = {map{$_=>$i++}@or};
                 @keys = sort {
                  $is->{($a=~/^(.+?)\//)[0]} <=> $is->{($b=~/^(.+?)\//)[0]}
                  } @keys;

                 if (!ar.sucky && @keys > 1) {
                     #sayre "Limiting @keys";
                     @keys = $keys[0];
                 }
             }
         }
         $know = [@keys];
     }
     #saybl "With: ar.J.name  $point    @$know" if ar.J && ar.J.name eq 'shv';
     @$know
wa:
   yJ: |
     'Travel aww'
   M: |
    Rw vortex $J around $d=16;
    
    n Yes=>0.2
    
    #n Wkcs
    #n Vil
    #n Vuel
    
    n laz=>0.4=>{pwth=>'lazershop',s=>'laz'}
    
    #n Tok
    #n Hosp
    #n Eosse
    #n EYZ
    #n Wander
    
    
    Rw J5 - toc;
    
    n ps=>0.3=>{pi=>'waps'}
    
    Jn(st=>0.9=>"o",'%hs:8427,fs:4');
    
Wkcs:
   yJ: |
     'Travel'
   M: |
    #yep
    
    G.way.Wkcs.curves = <<'' if 1;
    zoom 0  1.4
    curve 0 0.06
    x 0.02 0
    # etc
Yes:
   yJ: |
     'Travel'
   M: |
     J.most.eo = 'Yesui';
     n J.name, 0.9, J.name, {tag=>J.name,id=>J.id}
    
     Rw StillYes;
     
     #Mn(she dful => '', {pi=>'seas',s=>'g/c/6 g/c/7'});
     Mn(shedful => '0.1-0.7', {pi=>'seas',s=>"g/c/1 g/c/2"});
     
     # wants to A.aft{A.K} = {do Hypno}
     # where do is bundle of A.aft etc stashed things
     # like A.req = Yes, etc.
     # so itsa 77er, seeks $N for clife, def. from Jiter
     # come-back-fairly-immediately
     n Hypo=>0.05,{J=>'Hypo',pwth=>'Do:Hypo'},{fs=>33}
     n Yup=>0.075
     #n Hypo=>0.05=>{y=>Hypo=>s=>'c_pi:clife'}
Do: |
    sayyl "DOING";
    Rw J5 + $time=6;
StillYes: |
     my $v = $G->suet($A, "in/shedful/g/c/6");
     # shedful/g/G/on/g/G/on/*c:pi:clife
     #v._.sc.fs = 22;
     my $shv = Rw J6 - shv;
     my $tr = $G->suet(shv.A, "in/Yes");
     tr._.y.thy = 0.6;
     # travel oozes outta aj ^
     # v wants u
     G.way.Yes.curves = <<'' if 1;
     zoom 0  1.6
     curve 0 -0.06
     x 0.02 0
     
     n st3vil =>0.86=>{pi=>text=>s=>'st3vil.github.com'}
     n time=>0.9=>{pi=>text=>s=>join'',`date` =~ /^(.+):\d\d( .+)$/smg}
Eosse: |
    Mn(shedful => '', {pi=>'eye',s=>'eye'});
    #y.out = 0.8 + 0.1 * (rand(3)-1.5);
    sayyl "Fo 4 A time A: $A   vs J.A ";
    Atime(4) || return;
    
EYZ:
   yJ: |
     'aww'
   curves: |
     zoom 0  0.6
     y    0  0
     x    0  0
     curve 0 0.04
   M: |
    C.sc.css = 'font-family:cursive';
    Mn(shedful => '', {pi=>'eye',s=>'eye/Tarf'});
    #Mn(ps => '', {pi=>'psfaus'});
    #Atime(4) || return die "SJIO";
    
Hosp:
   yJ: |
     'Travel'
   M: |
    my $d = Jn(qw'life 0.1 life/H/');
    
    Mn(hoisp => '',{pi=>'liv',s=>d.s}); 
Vil:
   yJ: |
      'Travel'
   M: |
      Mn(hah => {thy=>0.3}, {pi=>'eye',s=>'eye/fug'});
      
      #Jn(Vuel=>'',{W=>'Vuel'});
      
      #$J:G.oin
      
      Mn(ZIS => {thy=>0.2}, {pi=>'text',s=>"Thisway"});
Vuel:
   yJ: |
      'Travel'
   M: |
      G.way.Vuel.curves = <<'' if 1;
      zoom 0  1.6
      curve 0 -0.03
      x 0.02 0
      
      my $ua = Mojo::UserAgent->new;
      
      
      my $i = Rw J6 - Yes;
      
      
      #Rw lazershop;
      
      #my @s = Rw wuck $J */curves;
      #my $oJ = $i;#G.oin;
      #my $vs = Rw tc $J:oJ;
      #$vs = [grep { _.sc.pi eq 'clife' } @$vs ];
      #Mn(Wkcs => '', {pi=>vs=>s=>$vs});
      
      #my $rr = [map{"_.t     ".ki({N=>{y=>_.y,c=>_.c,sc=>_.sc}})}@$vs];
      #my $rr = [@$vs];
      my $rr = i.El.Duv;
      $rr = rr.rv if $rr;
      Mn(deef=>'',{pi=>'',cv=>0.8,s=>wdump 14, $rr}, {fs=>6});
Tok:
   yJ: |
      'shd Travel'
   M: |
      #J.zip == 1 &&
      my $g = {map{$_=>"$G->{$_}"}keys %$G};
      G.way.Vuel.curves = <<'' if 0;
      x 0 -0.2
      zoom 0  0.7
      curve 0 -0.3
      x 0.02 0
      
      my @s = Rw wuck $J */curves;
      
      my $oJ = G.oin;
      
      my $vs = Rw tc $J:oJ;
      #my $s = wdump $vs;
      my $rr = [map{[_.t,_.y.cv,_.sc]}@$vs];
      Mn(deef=>'',{pi=>'',s=>$rr});
Wander:
   yJ: |
      'Travel'
   M: |
      J.zip++ >= 5 && do{ J.zip = 0 };
      sayyl "J.name  J.zip" for 1..5;
      Rw J6 - Vil;
      
      
      J.zip == 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"Thisway"});
      
      J.zip == 0 || J.zip == 2 &&
      Mn(ZIS => '', {pi=>'text',s=>"ones"});
      
      J.zip > 1 &&
      Mn(ZIS => '', {pi=>'text',s=>"sway"});
      
      J.zip > 2 &&
      Mn(skode => {thy=>3}, {pi=>'psfaus',s=>'THIS'});
      
      J.zip > 3 &&
      Mn(ZIStor => '', {pi=>'text',s=>"away..."});
      #sayylto "_.dead : ".gp $_ for values %{J.idly};
      #Mn(skoeede => '', {pi=>'text',s=>'THIS'});
      
      #Mn(With => 8, {J=>''}); # J with
      
      #Mn(Showi => 3, {pi=>'show',s=>8}); # any this 8

