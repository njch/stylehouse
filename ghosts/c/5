Travel:
   yJ: |
     'aww TravelingMeans'
   non: |
      to overload the filesystem
      a bz ring
      make a whole sub
      easy
      its an oversight
      a ribbing
        texture directives
          way over
               
Wkcs:
   yJ: |
     'Travel'
   M: |
    Mn(shedful => '', {pi=>'seas',s=>'w/k w/c'});
    
Wander: |
   yJ: |
      'Travel'
   M: |
      Mn(With => 8, {J=>''}); # J with
      Mn(Showi => 3, {pi=>'show',s=>8}); # any this 8
Acoomo: |
      A.ztime = d.c.time || 8;
      A.time = sub {
           my ($J,$wa) = @_;
           A.ztime >= $wa ? 1 : do {
               Rw comb oo $J $A $d $wa;
           };
      };
waz/up: |
      my $coi = Rw pha $J $k=jo;
      my $M=[];
      my $y = {o=>$M};
      my $A = J.A;
      A.ztime ||= 2;
      my $C = J.d;
      
      Rw suck */M $A $J $C $M $y;
      
      Jn('zoo',$y) if @$M;

      Jn('hoos',0.9,'S@T');
      coi.qui = 1;
      coi.exactl->();
      
TravelingMeans:
   yJ: |
     my $A = J.A = J.most.A = {}; 
     A.time = sub{ 
         my ($J,$wa) = @_;
         J.A.ztime >= $wa ? 1 : do {
             sayre gp($J)." Wants time, $wa";
             acum $A, fo => $J;
             0;
         };
     };
     'splain';
Jeight: | # oo J hits
       my $ar = {%{d.c}};
       ar.J=d.s;
       
       return d.s if !A.hav && A.jr&ok-9;
       my $n = A.hav ? sub{} : A.jr&ok-9,9;
       
       Rw around;
       
       $n->();
enje: |  # travinje
               if (my $b = $G->gip(A.J.A.in, d.t)) { # outside in
                   $b = b._ || return;
                   say "d.t in: ".wdump $b;
                   g.extend->($d, $b);
               }

