Oth: |
    # rising 
    J.A.tid++;
    n All=>W
    
    'Oth'ne$s&&
    n $s=>W
    
    #n Dwight=>W
    
    #n Perl=>W
    T.nose = 1;
    
    # randonly pour time ^
    
All: |
    n Byst =>W
    n Check =>W
    
Byst: | # the random for news interro
    G.Byst = $J;
    
Check: |
    Rw Loading;
    n wa =>''=>{pi=>'waps'}
    
    
Rig: | # Wild
    u Indulator
    u Modulator
    n s=>''=>t
    Rw dow $Rig:J.A.I;
    # trigbacky, like there is a whole plateu of links aft tests
    `cp w/Rig w/Wild`;
    
Sit: | # linkup Seate, Remy
    n Seate =>W
    n Remy =>W
    
Seate: | # Seven
    u Seven
    u KowTime
    n s=>''=>t
    # use Wild as always, Seate just the Seven thing for use with another Wild
    Rw dow $Seate:J.A.I;
    
Remy: | # mix Wild + Seate = Remy, to becomer Wild as things join Rig
    J.A.IIII = ['G/T/Wild','G/T/Seate'];
    n s=>''=>t
    Rw dow $Remy:J.A.II;
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc
    
Eel: | # most wild (furthest from Wild, goes in circle)
    u Jamping
    u Jumps
    n s=>''=>t
    Rw dow $Eel:J.A.I;
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc
    
Driver: |
    # takes over ghostality for ever
    J.A.IIII = G.IIII = ['G/T/Remy','G/T/Eel'];
    n Car =>W
Car: |
    u Whoiat
    J.V = 1;
    say wdump 2, J.A.II;
    my $r = J.foib++;
    $r > 0 &&
    n foib =>''=>"foib$r",'%fs:'.(30 * (($r+1) / 3))
    
    
    n sto => 2 => {pi=>'ARRAY',s=>[THing=>With=>"The $r"]}
    
    #!$r &&
    #Rw wayt $d=4 $p=Top;
    #n sjei => 3 => 'Steilrofoam'
    #n jury => '2-7x8' => '$(000'
    J.V = 1;
    
Whoiat: |
    sayre "YE" for 1..7;
    #sleep 5;
IpiYesui: |
    u allvse
    n '','','%of:Mo'
    n J =>691,<<''
        J.most.eo = 'Yesui';
Stoops: |
    u grows
    n theS=>1=>{pi=>'cfile'=>s=>"life/S\.s"},'%ong:1'
    
    
grows: |
    u allacgts
    n notice =>''=><<'','%code:O 3,v:scong'
        # runs when ong things oscillate at all after init
        die "ONGSCILLATE";
        
Dwive: |
    J.A.IIII = G.IIII = ['G/T/Remy','G/T/Eel'];
    n Dwight =>W
    n Gapitan =>W
Dwight: |
    u Ipifalls
    u pi3d
    u stopi_clife
    u clifeGkeeps
    
    #
    my $lot = "g/G/on g/G/way";# g/0/G g/G/cis";
    Mn(shedful => '0.1-0.7', {pi=>'seas',s=>$lot});
    #n s =>8=>"Stevewashere!".int(rand(9)),'%fs:30'
    
Gapitan: |
    my $r = J.sdoi++;
    J.V = 1;
    
    my $D =
    n Dwight =>W
    n PieceMe =>''=>{W=>PieceMe=>In=>D.nj}
    
    !$r &&
    Rw wayt $d=4 $p=Top;
PieceMe: | # many accumey
    # In has oA and is per A.
    # c.In handled outside of main spout,
    # main spout diffed incase it overrides natives,
    # which should immediately something...
    die wdump $C;
Perl: |
    u allrawperl
    n PerlHead =>W
    n Ibegin =>''=><<''
        my $I = {};
    
    n IStuff =>W
    n KnowTime =>W
    # adapts acgtsy spirals into etc
    # this all popped into
    J.V = 1;
    
PerlHead: |
    n perlhead =>0.01=><<'',{code=>"P 1"}
        #!/usr/bin/perl
        use strict;
        use warnings;
    
    
    #
    

