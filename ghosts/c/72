Sun/oo: [somoe]



Run: |
    my $G = Rw Gto;
    my $cb = sub {
        Rw Many;
    };
    Rw recur $d=1 $cb;
    
    sayyl "YEP";
Many: |
    my $J = G.oin;
    if (!$J) {
        my $t = "One";
        $J = Rw Jto $name:t;
        my $sc;
        sc.J = $J;
        Rw jamsc $J $t $cv=0.3 $s:t $sc;
        G.oin = $J
    }
    n One=>0.3=>{J=>$J,time=>6}
    
    my $y = G.Many||={};
    y.i++;
    my $t = hitime;
    y.la->{$t} = 1;
    sayyl "many y.i"; 
One: |
    sayyl "Doing J.name stuff...";
    n theS=>1=>{pi=>'cfile'=>s=>"life/S\.s"}
    J.V = 0;
Gto: |
    my $G = $G;
    G.w = sub {
        my ($pin,$ar)=@_;
        my $D;
        D.point = $pin;
        D.ar = $ar;
        D.name = join ' ', D.point, sort keys %{D.ar};
        D.sign = "Z";
        D.talk = "D.sign D.name";
        
        D.bab = G.way->{$pin};
        if (!defined D.bab) {
            if ($pin =~ /\//) {
                D.bab = fwind(G.way,$pin);
            }
            if (!defined D.bab) {
                sayre "Not findin D.talk";
                return;
            }
            else {
                #say "Trick shot: $pin"
            }
        }
        else {
            #say "Shot: $pin";
        }
        
        my $Z = $G->Doming($D);
        G.randomtask->() if G.randomtask;
        my $r; eval { $r = [ $G->D($D) ] };
        $G->Done($Z);
      
        if ($@) {
            my $ne = "Z Z.inter\n$@";
            $@ = $ne;
            D.nodie || die $@;
            $@ = "";
        }
        return wantarray ? @$r : $r->[0];
    };
    $G
Joldbz: |
     J.bz = sub { 
           my $j = {%$j};
           my $ad = [@_];
           my %j = %$j;
           while (@$ad) {
               my ($k, $v) = (shift @$ad, shift @$ad);
               
               my $comp = $k =~ /^(%|\+)/;
               my $j = {%j} if $comp;
               if ($comp) {
                   $k =~ s/^\+// if $comp;
                   j.t .= $k if $comp;
               }
               else {
                   (j.t, j.cv) = $k =~ /^(.+)\s+(.+?)$/;
                   %j = %$j;
               }
               defined j.cv || die "NOSEYV: j.cv".wdump[$j,[@_],[$k, $v]];
               j.r = j.t."\t".j.cv;
               j.s = $v;
               
               my @Js = $J;
               push @Js, values %{J.phy} if J.phy;
               for my $jj (@Js) {
                   jj.bb->{j.r} = j.s;
                   push @{jj.ord}, {%$j} if jj.ord;
                   jj.tim->{j.r} = hitime() if jj.tim;
                   jj.wtf->{j.r} = $F[0] if jj.wtf;
                   jj.ap->($j) if jj.ap;
               }
           }
           wantarray ? ($j, 
               sub{J.bz->(%$j, @_)} # TODO fucked, get some weed and fix it
           ) : $j
     };
     

stylehut: |
    u perl/file
    n ACGT
    n doi=>'',<<'','%code=1'
      Rw j phon;
    
somewherei: |
    u jbz
    n fgeijji dsfji
    n jidj jfiewji
    

