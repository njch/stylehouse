
allcode: |
    u allact
    n all4noJ
    n 'allarecode=1'=>42,<<''
        C.sc.code = 1 if !exists C.sc.code;
all4noJ: |
    u allact
    n 'skip4around4forJ'=>4,<<''
        return unless C.c.J || C.c.W || C.c.pi;
        T.Z->{0.44} = 1;
        T.not = 1;
    
allpack: |
    u allact
    n 'allarepack=t'=>41,<<''
        C.sc.code = 'Pack' if !exists C.sc.code;
        C.sc.pack ||= C.t;
allacgt: |
    u allact
    n allcode
    n 'allareacgt=1'=>42,<<''
        C.sc.acgt = '1' if !exists C.sc.acgt;
allacgts: |
    u allact
    n allcode
    n 'allareacgt=s'=>42,<<''
        C.sc.acgt = 's' if !exists C.sc.acgt;
allact: |
    u allact
    n allacgts
    n all4noJ
    n 'allareact=1'=>42,<<''
        C.sc.act = 1 if !exists C.sc.act;
        C.sc.code = 'In' if !exists C.sc.code;
allvy: |
    u allact
    n allof
    n allact
    n 'allarev=y'=>42,<<''
        return if C.sc.nov;
        C.sc.v = 'y'.C.sc.v;
        C.t .= "_".C.y.cv;
ally: |
    u allact
    n allvy
    n 'allarev=yt'=>4145,<<''
        C.sc.v ||= C.t;
allvc: |
    u allact
    n allact
    n 'allarev=c'=>422,<<''
        return if C.sc.nov;
        C.sc.v = 'c'.C.sc.v;
allof: |
    u allact
    n allacgts
    n 'allof'=>418,<<''
        if (C.c.of) { # or how this u tater got .s'd
            A.J.A.vse.of = C.c.of;
            return T.not = 1;
        }
        C.sc.code ||= do {
            my $cv = C.y.cv || 1;
            $cv =~ s/^0\.//;
            my $of = A.J.A.vse.of
            $of ||= do {
                warn "Using Ct code=C.t $cv   for ".ki $C;
                C.t
            "$of $cv"
        };
    
allvse: |
    u allact
    n allvc
    n allof
    # vices should be novelty not envy
    n 'allvse'=>419,<<'','%code:In'
        if (C.sc.nv) {
            C.sc.nov = 1;
            C.sc.v = C.sc.nv;
        }
        C.sc.v ||= C.t unless exists C.sc.v;
        (my $cv = C.y.cv) =~ s/^0\.//;
        $cv = $1 if !$cv && C.sc.code =~ /^\w+ (\d+)$/;
        $cv||die"no0 C.y.cv  ".ki 2, $C;
        C.t .= "_$cv";
allovse: |
    u allact
    n allvse
    n 'allovse'=>4189,<<''
        C.sc.v ||= 'Y';
        C.sc.rg ||= 'cJ,cV,yk,yat,yta,ylv,yvl';
allsvse: |
    u allact
    n allovse
    n 'allsvse'=>4189,<<''
        C.sc.nv ||= 'sc'.C.t;
    
ym/wongui: | # make M flat, acum .c.from, atoms wired together like so J.most.$
    my $wire = 'from';
    return unless C.sc.z;
    for my $zi (@{C.sc.z}) {
        die 'NOZ' if !C.sc.z;
        my $from = [grep{defined}@{C.c->{$wire}||[]},$C];
        my $c = {c=>{$wire=>$from}};
        # the merging 
        push @{A.N}, {EC=>[[$zi],$c]};
    }
ym/notnotcode: |
    T.not = 1 unless exists C.sc.code;
ym/concoi: |
    my $s = C.sc.code || return;
    
    if (C.c.from && 0) {
        # sorta sorts A, toolboxre
        C.y.p ||= join'/',map{_.t}@{C.c.from||[]};
        C.y.cvt ||= C.y.cv."\t".C.t;
        T.y.spr=$C if A.t&43 && $s=~/^(\^|1)$/;

        if ($s=~/^\^$/ && A.t&61) {
            my $i = I.d&moy,'spr';
            # this is at spray
            C.c.s = join "\n",map{
                _.sc.got = 1 if $_ ne $C;
                "#@ _.y.p\n"."_.c.s\n"
            }@{i.N};
            C.sc.code =~ s/^\^ ?//;
            C.sc.code ||= "C.t 4";
        }
    }
    
    if (A.t&43 && C.sc.acgt) {
        # for ACGT+args in acgt, args take whole @_
        C.sc.args ||= join',','A,C,G,T',grep{$_ ne '1'}C.sc.acgt;
        undef C.sc.code if C.sc.code eq '1';
        # the I that Cs all, it is indifferent to its current
        C.sc.code ||= "I 1";
    }
    
    if (A.t&67) {
        Rw ym/conoi;
    }
    
    if (my $y = T.y) {
        for my $k (keys %$y) {
            A.mo.y->{$k}->{C.y.p}->{C.y.cvt} = $C;
        }
    }
cono: | # is perl Art shader, just re C
    my $wast = C.t;
    C.t =~ s/\W//sg;
    my $ind = "";
    
    if (C.sc.acgt) {
        # for ACGT+args in acgt, args take whole @_
        C.sc.args ||= join',','A,C,G,T',grep{$_ ne '1'}C.sc.acgt;
        undef C.sc.code if C.sc.code eq '1';
        # the I that Cs all, it is indifferent to its current
        C.sc.code ||= "I 1";
    }
    C.sc.got && die ":Slooping";
    
        if (C.sc.code =~ /\w+ \w+/) {
            C.sc.code =~ /^(\w+) (\d+)$/ || die "wtfs code=C.sc.code  ".ki$C;
            my ($K,$cv) = ($1,$2);
            C.sc.code = $K;
            $cv = 0+("0.".$cv);
            sayyl "CHangting $K / $cv / C.t   from C.y.cv"
                if $cv ne C.y.cv && C.y.cv != 0.3;
            C.y.cv = $cv;
        }
            
            my $ara = []; # ar ups and demand argsed
            
            if (C.sc.Td) {
                my $Q;
                Q.path = [split '/', C.sc.Td];
                die if @{Q.path} < 1;

                my $form = C.sc.Tdform || 'nk/gk/wk';
                Q.atar = [split '/', $form];
                @{Q.atar} = @{Q.atar}[0 .. (@{Q.path}-1)];

                Q.onpa = [split '/', 'T/d'];
                Q.caps = {map{$_=>1}split',',C.sc.Tdarge} if C.sc.Tdarge;
                # like rg but from $s
                C.sc.sr && die "already sr";
                C.sc.sr = join ',', grep{$_} d=>o=>v=>talk=> @{Q.atar}, sort keys %{Q.caps||{}};
                for my $sr (split ',', C.sc.sr) {
                    die "mixo $sr" if $sr =~ /\W/;
                    push @$ara, "my \$".$sr." = s\.$sr;";
                }
                C.sc.Ifs.Td = $Q;
            }
            
            if (C.sc.v && C.sc.v ne '1') {
                my $v = C.sc.v;
                my ($nk,$gk) = $v =~ /^([tyc]|sc)(.*)$/;
                $nk||die"strv:$v";
                C.sc.nk ||= $nk;
                C.sc.rg ||= 1 if C.sc.nk ne $nk;
                push @$ara, $ind."my \$".$nk." = C\.".$nk.";";
                if ($gk) {
                    C.sc.gk ||= $gk;
                    my $gkk = $gk;
                    $gk = C.sc.gkis if C.sc.gkis;
                    my $my = "my " unless C.sc.args =~ /\bs\b/ && $nk eq 'c' && $gkk eq 's';
                    push @$ara, "$my\$".$gk." = C\.".$nk."\.".$gkk.";";
                }
            }
            
            C.sc.rg = C.sc.cg if C.sc.cg;
            if (my $v = C.sc.rg) {
                $v = '' if $v eq '1';
                my ($nk) = C.sc.v =~ /^([tyc]|sc)(.*)$/;
                $nk ||= C.sc.nk || 'c';
                $nk = 'c' if C.sc.cg;
                my @no = map {
                    my ($wnk,$wgk);
                    ($wnk,$wgk) = ($1,$2) if /^([tyc]|sc)(.*)$/;
                    $wnk ||= $nk;
                    $wgk ||= $_;
                    [$wnk,$wgk]
                } split /,/, $v;
                push @no, [C.sc.nk,C.sc.gk] if C.sc.nk && $nk ne C.sc.nk;
                for my $s (@no) {
                    next if $s->[1] eq C.sc.gk;
                    push @$ara, "my \$".$s->[1]." = C\.".$s->[0]."\.".$s->[1].";";
                }
            }

            if (my $args = C.sc.args) {
                die "wonky C.t   of ".ki $C if C.t =~ /\W/;
                my $gl = "";
                my $und = "_";
                if ($args =~ s/^(A,C,G,T,)(?!s$)//) {
                    $gl .= $ind.'my ($A,$C,$G,$T,@M)=@_;'."\n";
                    $und = 'M';
                }
                my($sf,$sa);
                if (C.sc.subpeel) { # runs, returns T.thing
                    $sf = "(";
                    $sa = ')->($A,$C,$G,$T)';
                }
                # here some want their own I space
                # if I resolv backward winding pro-be
                # G pulls in I
                my $waytoset = "A\.I.".C.t." = " unless C.sc.noAI || C.sc.sub;
                my $sub = "sub".(C.sc.sub ? " C.t " : ' ')."{\n";
                unless ($args eq '1') {
                    unshift @$ara, "my \$I = A\.I;";
                    unshift @$ara, "my (".join(',',map{'$'.$_}
                        split',',$args).',@Me) = @'.$und.";";
                }
                C.c.s = $waytoset
                    .$sf
                    .$sub
                    .$gl
                    .join("",map{"$ind$_\n"} uniq(grep{$_}@$ara), split("\n", C.c.s))
                    ."}"
                    .$sa
                    .";";
                C.c.s .= "A\.I\.d"."&An;\n" if C.t eq 'An';
            }
            else {
                C.sc.subpeel&&die"nonargs ha subpeel".ki$C
            }
            
ym/conoi: | # is Art shader
    C.sc.code || return;
    $C = {%$C}; # hup
    $C->{$_} = {%{$C->{$_}}} for grep {ref $C->{$_} eq 'HASH'} keys %$C;
    C.y = {cv=>C.y} if !ref C.y;
    if (keys %{C.y} > 1) {
        sayre "Recuding to cv: C.t  ".ki C.y;
        C.y = {cv=>C.y.cv};
    }
    delete C.sc.z if C.sc.z;
    
    Rw cono + $C;
    
            C.sc.dige = slm 12, dig C.c.s;
            C.sc.gro = join'/',map{_.t}grep{_.y.cv != 0.9}
                @{C.c.from} if C.c.from;

            delete C.c.from; # as 7, from appears on each thing as it leaves there
            # AND
            $v->{C.sc.code}->{C.y.cv}->{C.t} = $C;
ym/notnotjs: |
    T.not = 1 unless exists C.sc.js;
ym/talky: | # make M flat, acum .c.from, atoms wired together like so J.most.$
    my $nC = {%$C};
    my $t = ar.t ||"";
    my $n = ar.n ||"";
    my $yc;
    if (defined C.y.cv) {
        #  && keys %{C.y} == 1
        $yc = "  C.y.cv";
        delete nC.y;
    }
    $yc = delete(nC.t).$yc;
    $n = "in:C.sc.gro" if C.sc.gro;
    if (v.indcar) {
        my $th = C.c->{v.indcar} || [];
        my $am = 0 + @$th;
        $n .= join "", ("    ") x $am;
    }
    
    my $s = "! $n    $t $yc  \t\t". ki 2,$nC;
    $s =~ s/\n/â†¯/g;
    $s =~ s/c=%\{/c/;
    $s =~ s/\}% sc= %\{/ %%% /;
    if (v.talks) {
        push @{v.talks}, $s;
    }
    else {
        say $s;
    }
ym/doex: | # extend C by v 
    I.d&xot,$C,$v;
TNews: |
    my $rl = ar.rl || {};
    my $talk = ar.talk;
    ar.talk && rl.i eq rv.i &&
        return J.V && say "$talk: Same    rl.i eq rv.i";
    
    my $new;
    if (ar.talk && rl.c ne rv.c) {
        sayre "C C C C C C C";
        sayre "C C C C C C C";
        sayre "C C C C C C C";
        $new = "new!";
    }
    return sayyl "Byst und instro" if G.Byst eq ar.J;
    
    my $r = Rw scd $rl $rv;
    my $o = Rw ZNews sold $sc:r.oldz if r.oldz;
    my $n = Rw ZNews news $sc:r.z;
    
    say "$talk: ".($new||"GROWTH!") if ar.talk;
    my $lim = sub {
        my ($s,$lim) = @_;
        my @o = split "\n", $s;
        if (@o > $lim) {
            my $more = @o - $lim;
            shift @o while @o > $lim;
            unshift @o, "... $more more ^";
        }
        join "\n", @o;
    };
    $o = $lim->($o);
    if (ar.talk) {
        saybl $lim->($o,5) if $o;
        sayyl $n if $n;
    }
    else {
        $n
    }
    
ZNews: |
    my $J = G.oin || return sayre "Cannot G-Byst-ander yet";
    my $sc = ar.sc || ar.N || ar.M || die "n lost";
    if (ref $sc->[0] && @$sc > 1) {
        return join "\n", map {
            my $sc = [$_];
            my $s = Rw ZNews $sc;
            $s =~ s/^! /oo/s;
            $s;
        } @$sc;
    }
    elsif (!ref $sc->[0] && @$sc) {
        return warn "Raw ".wdump $sc;
    }
    my $N = [@$sc];
    @$N = Rw humms $J $N wongui _;
    
    my $v = {talks=>[],indcar=>'from'};
    Rw humms $J $N talky $v;
    join "\n", @{v.talks};

