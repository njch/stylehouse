  
Wight: |
    u SevWo
    n JSea
    J.V = 1;
    n s=>''=>t
    # could ahh...
    n JSlines =>W=> {In=>$J}
    
JSlines: |
    y.ope = 1;
    u threes
    #u openphase
    #u threestep
    # root of the chuck out lines only sort
    #if (C.c.In && A.t&62) {
    #     my $yi = J.A.yin ||= {};
    #}
    #if (A.t&68) {
    #     
    #}
    # C.c.In && A.t&62 &&
    #n $C
    my $oJ = C.c.In || return;
    C.c.IsOn || return
        Rw wayt $J $C $d=0.01 $p=jive;
    
    my $ooJ = J.oJ->{oJ.name} ||= {};
    # is {M:name,W:id} coupling, so pi is {file:g/c/1} etc
    my $Y = oJ.El.Duv;
    my $rv = Y.rv;
    if (@{rv.sc}) {
        sayre "J.name SLIPPING SC" for 1..5;
        sleep 4;
    }
    if (rv.i eq ooJ.rv.i) {
        say "J.name receiving same oJ.name";
        return;
    }
    ooJ.rv = $rv;
    my $N = [@{rv.c}];
    # get that banjo
    @$N = Rw humms $J $N wongui _;
    @$N = Rw humms $J $N notnotjs _;
    my $s = Rw humms $J $N jscoi;
    my $sc = [@$N];
    sayyl "J.name from oJ.name:\n". 
    Rw ZNews $sc $nov=1;
    #saybl wdump 5, $s;
    n $_ =>''=>{pi=>pane=>s=>$s->{$_}} for sort keys %$s;
    # panes
    J.V = 1;
    
JSline: | # tlee
    
pi/pane: |
    n $_ for map{values %$_}values %$s
threes: |
    u allvse
    
    n J =>4=><<''
        #A.J eq $J || die "noJ J.name ion A.J.name";
        
    
jive: |
    my $J = G.oin;
    sayyl "Jvivingo";
    J.V = 1;
    n ar.J.name =>''=>{IsOn=>1,%{C.c},time=>6}
ww: | # open this ghost
    u SevWo
    u uxWout
    
    n ww =>0.9,{},"%id:J.id,tt:H.ol,poi:0,ab:100,bgh:33.5.3.1"
    #G.Wid = J.id;
    #unshift @{aj.c}, jsq " \$('#ux').append(%s);", $s;
uxWout: |
    u allacgts
    #n ztojsM =>''=><<''
        # yellow
        #die "HWELO";
    
    
Wool: |
    u allacgts
    n JrW =>''=><<'',{acgt=>'J,r,lines'}
        my $em;
        em.lines = $lines;
        em.hitime = hitime();
        em.is.W = J.id;
        em.is.M = J.name;
        em.id = J.id.'.'.r.out;
        .
        G.Wh->{em.is.W} ||= do {
            sayyl "Life! of W em.is.W";
            my $me = I.d&hup,$em;
            delete me.lines;
            $me = sjson $me;
            sayyl "Would write $me";
            I.d&writef,"life/W/em.is.W\.i",$me;
            # kind of wants lvish pointerism
            # osc idly (was around before) would keep j etc, 
            # handy for travelish reentrances by third parties
            # Jmosts must subscribe to the Goin osc...
            # which give them a G-finding W above their own W
            # which they dont know about, it's routed to...
            $J
        };
        .
        my $append = @{r.oldz};
        I.d&writef,"life/W/em.is.W\.c",em.lines,$append;
        .
        I.d&writef,"life/J/em.id\.c",em.lines;
        # 
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
        
    
    n writef =>''=><<'',{acgt=>'f,s,append'}
        saybl "SZOY: $f    ".slim(300,$s)." APPEND: $append";
        (my $d = $f) =~ s/\/[^\/]+?$//;
        unless (-d $d) {
            say "Making -d $d ...";
            `mkdir -p $d`;
        }
        .
        my $li = ref $s eq 'ARRAY' ? join("",map{/\n$/?$_:"$_\n"}@$s)
            : !ref $s ? $s
            : die "Wsome other $f type: $s";
        $li = encode_utf8 $li;
        .
        my $wa = {};
        wa.append = 1 if $append;
        .
        write_file($f,$wa,$li);
SevJs: |
    n Wool
    u allovse
    n '','','%of:Sev'
    
    n rootout =>582=><<'','%v:root'
        return unless A.J.most.J eq A.J || A.J.C.c.Wo;
SevWo: |
    n Wool
    u allovse
    n '','','%of:Sev'
    
    n rootout =>582=><<'','%v:root'
        return unless A.J.most.J eq A.J || A.J.C.c.Wo;
        # Wencaps the Wubstance behind the Jaulted door
        # good for clouding away entropy from the foundation
        my $r = Rw scd $rl:vl $rv:lv;
        # so so, wants to separate heaps
        return unless @{r.z};
        aft {
            $@ || return;
            sayre "$@  !~!! ".wdump 12, $r;
        };
        my $jsdo;
        if (I.ztojsM) {
            $jsdo = I.d&ztojsM,r.z;
        }
        else {
            my $M = ['','',{W=>G.oin.id},{z=>r.z}];
            $jsdo = [" a\.om({},".sjson($M).",a,{});"];
        }
        sayyl wdump 2,$r;
        I.d&JrW,$J,$r,$jsdo
    

Travel: # make somewhere bridge
   yJ: |
     'clw waz gui'
   sh: |
     Rw J5 shv $aj;
   Em: |
     Rw Emvil;
Emvil: |
     my $tw = Rw huck $J $aj */sh;
     $tw || die "nomount J.name";
      
     my $c = aj.c;
     die 'scs' if @{aj.sc};
     die 's' if aj.s;
     my $M = ['','',{W=>G.Wid},{z=>aj.c}];
     
     #sayyl wdump 15, $M if aj.J.name eq 'Vuel';
     aft {
         $@ || return;
         sayre "$@  !~!! ".wdump 35, $M;
     };
     aj.c = [" a\.om({},".sjson($M).",a,{});"];
     aj.sent = 1;
     
     Rw paintaj $aj;
     
     # route aj.W from ...
     G.Wh->{aj.Wid} ||= do {
         my $ij = {}; map {
         $ij->{$_} = $aj->{$_} if !/^[sc]+/; } keys %$aj;
         ij.id = delete ij.Wid;
         ij.y = 'W';
         
         sayyl "Life! of ij.y ij.id";
         0->tai("ij.y/ij.id\.i", $ij);
         0->tac("V/H.style/H.name/H.id\.s", ztm($ij));
         aj.J;
     };

     Rw J5 wu $aj;
     
     aj.y ||= 'J';
     aj.yy = 'W';
     Rw aji $aj;
     Rw blabaj $aj;
somewhere: | # be somewhere
     my @path = ar.j.sc.J || ar.j.J;
     while (1) {
        my $l = $path[0];
        unshift @path, l.Jiter || last;
     }
     #saybl wdump 2, ["Gootblock:",@path];
     
     say "avoid: ".gp shift @path until !@path || $path[0] eq $J;
     shift @path;
     my $path = join '/', map{_.C.t} @path;
     
     my $A = J.A;
     my $v = G.pwin->("in/$path", $A);
     my $amo = 1.5;
     $amo = 0.8 if e.S;
     (v._.y.thy ||= 1) *= $amo;
     say "A in assign". wdump 14, [gp($J), $path, $v];
     return;
     
     #die wdump 2, [@lspath]; 
     #my $path = join '/', reverse @lspath;
     my $M = [];
     
     Mn('fro',{},"$path",'{ou:file}');
     
     Rw J5 wut $M;
siueon: |
    iroughoan anonate
paintaj: |
     aj.Wid || die "not Wid?";
     aj.hol = "H.style/H.name/H.id";
     aj.hitime = hitime;
     aj.name ||= aj.J.name;
thing2: |
   fow
hip_po: |
    tree-ish campus
    str i sin tko
things: |
    with suct ion
Mainiy: |
    things in 
Steve: |
   was h ere

