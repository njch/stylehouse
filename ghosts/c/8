  
floatation: |
    # Wencaps the Wubstance behind the Jaulted door
    # good for clouding away entropy from the foundation
    # so so, wants to separate heaps
    
    # kicks rays off the end of sev (or so)
    # all the stuff is is s by now if its making lines
    # or its a bunch of whatever, to json onto new line
    
    # also to sever things where sc.W c.W + id (if they are reachable via Wspace)
    # pi can also sever into channels of art noise + realmy stuff
    # float the bets
    # edge thje het
    
        #   R writef life/W/em.is.W\.c em.lines $append:em.i
        # G is a tied hash, resolves to doing like I through G.d
        # R makes I from further Wish inquiry, G does similar
        # R implies floatation
        # repeast                       G.fsk.oth (does little I.oth where C is t=k s=v)

        # kind of wants lvish pointerism - you would get it from ^ids or so
        # osc idly (was around before) would keep j etc, 
        # handy for travelish reentrances by third parties
        # Jmosts must subscribe to the Goin osc...
        # which give them a G-finding W above their own W
        # which they dont know about, it's routed to...
    

        # J.mo.s is G.oin

    #u openphase
    #u threestep
    # root of the chuck out lines only sort
    # when 8s groW time on G.oin
    # C.c.In && A.t&62 &&

    # to connect Gw so A.t&63 to hold things again, merge many Rw personas into one live as repeated subs with blanky u,etc,y.at outthrustocombing, since everything goes within to sed out - sometimes holding what it was originally for loop
    # the whole control panel of J.? of ^\w .* funcs is up, line feed, code is cracking open a valley

    # Followe:
    # ^ u threes
    # ^ qq {cpi:lines u:followlines}
    # which is normal perl code^and replies to the u qq seeming
    # want to consume every void context stuff as mind
    # u/n symbol family, j for nonJmo:
    # ^ j qq {cpi:lines u:followlines}
    # or perhouse (some Jness)
    # ^ j:interso qq {cpi:lines u:followlines}
    # when vector compose program
    
    # is kinda 
    # little j eventuates index of doings to follow index
SevWo: |
    n Meta
    n Wuts
    
    u allacgts
    
    n writef =>''=><<'',{acgt=>'f,s,append'}
        (my $d = $f) =~ s/\/[^\/]+?$//;
        unless (-d $d) {
            `mkdir -p $d`;
        }
        .
        $s = [$s] if !ref $s;
        my $li = ref $s eq 'ARRAY' ? join("",map{/\n$/?$_:"$_\n"}@$s)
            : die "Wsome other $f type: $s";
        $li = encode_utf8 $li;
        .
        my $wa = {};
        wa.append = 1 if $append;
        write_file($f,$wa,$li);
    
    u allovse
    n '','','%of:O'
    n J =>35=><<''
        delete at.sc.J if C.c.S;
        # conceal the multiJexits
    
    u allvse
    n '','','%of:Sev'
    # might wanna carebowl em 2-4 to engage scd/em at all
    n root =>582=><<'',{rg=>'ylv,yvl'}
        return unless A.J.most.J eq A.J || A.J.C.c.Wo;
        my $r = Rw scd $rl:vl $rv:lv;
        return unless @{r.z};
        A.bangdesk.bang.sevwoe = sub {
            sayre " was in em section: ".wdump 5, $r;
        };
        C.c.em && die'wtf';
        .
        my $em = C.c.em = {};
        em.lines = r.z;
        em.i = @{r.oldz};
        .
        A.Subtle.em = 1;
        A.t&em,6,2;
    
Meta: |
    u allvse
    n '','','%of:em'
    n em =>21=><<''
        em.lines || die "Not lines";
        em.hitime = hitime();
        em.is.W = C.sc.Wid || A.J.id;
        em.is.M = C.sc.Mid || A.J.name;
        em.id = em.is.W.'.'.(0+em.i);
    
    # c ^
    # sc v
    u allsvse
    n jslines =>3=><<'',{cg=>'J,em'}
        Rw EmJSlines $A $J $em $C $T;
    
    n ux =>3=><<'',{cg=>'em'}
        my $J = G.oin;
        my $M = ['','',{W=>J.id},{z=>em.lines}];
        em.lines = [sjson($M)];
        C.sc.Wc = 1;
        n GW
        # ^ router, W with an .e v
    
    n ressur =>3=><<'',{cg=>'J,em'}
        saybl "Ressurrecting $ressur ...";
        die "zomp $ressur" if $ressur =~ /\W/;
        die "bno JSlines" unless -e "life/W/$ressur";
        `cd life; ln -s ../W/$ressur J/em.id\.c`;
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
        T.whack = 1; # out of em
    
Wuts: |
    u allsvse
    n '','','%of:em'
    # (ais coming soon: (only space or)
    n Wc =>446=><<'',{cg=>'J,em'}
        saybl join"\n","Downing em.is.M: em.is.W: ",
            map{!ref $_ ? $_ : wdump 5,$_} @{em.lines}
            if A.V&W;
        I.d&writef,"life/W/em.is.W\.c",em.lines,em.i;
        .
        C.c.as = !C.c.os;
        C.c.As = C.c.as;
        C.sc.meta = 1;
        C.sc.speak = 1 if C.c.as;
        C.sc.takeover = 1 if C.c.As;
        saybl "WHITESPACE S em.is.M" if C.c.os;
    
    # inter intros
    n meta =>47=><<'','%cg:em'
        G.Wh->{em.is.W} && return;
        G.Wh->{em.is.W} = A.J;
        my $me = I.d&hup,$em;
        delete me.lines;
        $me = sjson $me;
        I.d&writef,"life/W/em.is.W\.i",$me;
    
    n speak =>48=><<'','%cg:em'
        return if G.Jlone;
        .
        I.d&writef,"life/J/em.id\.c",em.lines;
        .
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
    
    n takeover =>49=><<'','%cg:em'
        -l $_ && `unlink $_` for "life/W/em.is.M";
        `cd life/W; ln -s em.is.W\.c em.is.M`;
    
Sl: |
    y.at.oWl = 1;
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbos';
    
    n reJSlines
    # makes everything but js=1
    
    #n "life/S\.s"=>-sol=>''=>'%dos:loadwav'
    
    #y.at.jslines = 1;
    #n skdo=>2=>"a\.sitandspin();",'%js'
    
    #rand 1 < 0.17 &&
    0 &&
    n bla =>3=>G.way.paps,'%js'
    
    0 &&
    n blag =>4=>{s=><<''},'%js'
        //paper.project.clear();
    
    #n jshang
    #n ThisPr
    #n ReoCur
    #n Precoall
    
    #J.dfko++ ||
    #    n Notes
    J.fti ||= 0;
    if (J.fti >= 0) {
        Rw waitme;
    }
    sayyl "Ftime up J.fti";
    Rw forked;
    
waitme: |
    use POSIX ':sys_wait_h';
    if (G.forked) {
        return sayre "waitme already forked";
        exit;
    }
        
    if (my $pid = fork()) {
        sayyl "FOrked! ,,,," for 1..3;
        waitpid($pid,0);
        saybl "Restart? <";
        while  (<STDIN>) {
            my $k = $_;
            say "__ $k";
            say "IS: ".wdump 3, $k;
            $DB::single = 1;
            die "HERE! $k" unless $0 =~ /greg/;
            chomp $k;
            J.me = $k;
            sayyl "OK!";
            Rw goche $n=$1
            while $k =~ s/(\d+)//g;
            Rw goche $n:_
                for qw'1 64 8 84 4 9';
            Rw waitme;
            return;
        }
    }
    else {
        sayre "Hur";
        G.forked = 1;
        saybl "ha";
    }
    
forked: |
    # etc
    my $also;
    if (J.me =~ s/(\S+) (\w+)/$1/) {
        $also = $2;
    }
    if (J.me eq 'm') {
        J.me = read_file("w/wasme");
        say "Repeating: J.me";
    }
    write_file("w/wasme", J.me) if J.me;
    J.wasme = J.me;
    if ($also) {
        say "Also: $also";
        J.me .= " $also";
    }
    if (J.me =~ /^(\w+):(\S+)(\s|$)/) {
        my $o;
        my ($is,$ul) = ($1,$2);
        my $t = $1 if $ul =~ /^(\w+)/ || die "niul $ul";
        if (!-f "w/$is/$t") {
            my @op = glob "w/$is/$t*";
            sayre "Many options: ".ki @op if @op > 1;
            my $o = shift @op;
            $ul = $1 if $o =~ /^.+\/(.+?)$/;
        }
        sayyl "So: $is, $ul   fr  $o";
        J.me = " ALL $is:$ul";
    }
    if (J.me =~ s/^ (\w+)(?: (.+))?// && G.way->{$1}) {
        n $1=>W=>{t=>$2}
    }
    J.me = $also if $also;
    J.fti -= 3 if J.me =~ s/o//g;
    J.fti -= 2 if J.me =~ s/i//g;
    delete G.forked if J.me =~ s/p//;
    Rw loopby $b=3 $d=5 $p=Top
        if J.fti < 0;
    J.fti++;
    
    J.me =~ /n/ &&
        `cat /dev/null > G.GW.taile`;
    J.me =~ /a/ &&
        n All=>W=>{time=>6}
    J.me =~ /u/ &&
        n uncan
    J.me =~ /N/ &&
        n Notes
    J.me =~ /s/ &&
        n Sefi
    J.me =~ /S/ &&
        n Sefission
    J.me =~ /w/ &&
        n Wjes
    J.me =~ /g/ &&
        n Dug
    J.me =~ /c/ &&
        n Chang
    J.me =~ /d/ &&
        n Details
    J.me =~ /j/ &&
        n ALL=>W=>{t=>'Swomp',isle=>'jes'}
    J.me =~ /t/ &&
        n Tarp
    J.me =~ /v/ &&
        n Vortecs
    
    J.me = '';
    #n Details
    #n EYZ
    #n Usee
    # Rw followS
Vortecs: |
    u GBabz
    u ReoCur
    y.at.ux = 1;
    y.at.ws = 1;
    y.at.fs = 6;
    my ($A) = 
    n s=>'3'=>see
    my $I = A.I;
    #my $e = J.A.II.I->{0.1}->{parse_babbl};
    #my $i = e.c.s;
    ##my $o = $G->parse_babble($i);
    #write_file('/tmp/vortpre',$i);
    #write_file('/tmp/vortpo',$o);
    
    #my $bo = $G->parse_babble(G.way.met_a);
    my $sr = G.way.Shelf;
    my $ba = I.d&parse_babbl,$sr;
    n di =>1=> $sr
    #n inny=>[pi=>3]=> ''.`diff /tmp/vortpre /tmp/vortpo`
    n dsko =>5=> $ba
pi/inny: |
    y.at.geo = 'a100 -0.1 0.1 0.6';
    n hr => 1 => $s;
met_a: |  
    # etc etc
    Rw thin $di $motion=dive $af:patch;
    Rw stuff doing;
    my $e = Rw STuff + $with;
    Rw sto if 3 > 5;
    
        my $se = Rw TreeD $s $scby=gro
        
    my ($A,$I) = G&A,'Sev';
    say wdump 4, [$A,$I];
    
    #done
Wh: |
    y.at.oWl = 1;
    n reJSlines
    n Details
    n Notes
    J.fsjoi++ ||
        Rw loopby $b=5 $d=26 $p=Top;
    
Notes: |
    u ReoCur
    y.at.anch = 'Noteal';
    y.at.ux = 1;
    J.VV.N = 1;
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbos';
    Mn($_=>-te=>$_,'%dos:plucJ') for qw'
        Mandrins
        Damine
        Leteleto
        Loenade
    ';
plucJ: |
    my @Js = I.d&inDin,$E,'_hJ';
    my ($tW,$tl) = @Js[0,-1];
    tW.mo.J eq $tW || die "not most 1: ".ki $tW;
    tl.C.sc.pi || die "not pi 3: ".ki $tl;
    my $us = A.us&C || die "Not us?";
    my $M = us.pick ||= [];
    Mn(founde=>-edr=>(join';',tl.C.c.s),{mean=>'Somehows'});
    n Othie =>$E
    T.pos = 0;
Othie: |
    u ReoCur
    y.at.anch = 'Noteal';
    y.at.ux = 1;
    J.ev.th ||= 'middle';
    J.ev.o ||= 'indoc';
    J.ev.li ||= 'climbos';
    J.ev.tr = 1; # thing dont fly off to inners, has id, from event line
    J.UG ||= [];
    y.in = 2;
    y.out = 5;
    J.VV.N = 1;
    Atime(2);
    
    n downsave=>[-doi=>0.04]
    n noie => 1=>"OOOOOOO"
    n noie => 7=>"OOOOOOO"
    my $pi = {};
    push @{$pi->{"_.sc.oW _.sc.mean _.sc.to"}||=[]}, $_ for @{J.UG};
    for my $k (sort keys %$pi) {
        Mn($k=>-ean=>{s=>$pi->{$k}});
    }
    sayyl "Other things we arte: _.t    x ".@{_.c.s} for @$M;
 
ThisPr: |
    #u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    y.at.oWl = 1;
    n Chang
    
    Mn(Y=>-raay=>'Chang');
    y.out = 6;
    y.in = 1;
    n d =>'1.2-3x2.4'=>','=>'%fs:44,ml:-1'
    
pi/raay: |
    my $oJ = J.mo.J.bb->{"0.3\t$s\tJ"} || return
        n 404 => 1 =>"snothere: $s"
    my $Y = oJ.El.Pre;
    my $se = Y.tv if C.t eq 'tv';
    $se = $Y if C.t eq 'Y';
    $se = se.tv;
    $pi ||= C.t;
    $se || return
        n 500 => 2 =>"no access: C.t"
    Mn(C.t=>pi=>{s=>$se});
pi/Y: |
    n Y =>1=>C.t
    Mn(hach=>pi=>{s=>$s});
pi/w: | # the soft Rw or u art grab
    my $es = G.way.Elis;
    y.in=1;
    Mn(pre=>pi=>{s=>$es});
    
pi/hach: |
    my $se = {%$s};
    while (my ($k,$v) = each %$se)  {
        $se->{$k} = ref $v ? ref($v)." ".ki $v : $v;
    }
    my $es = wdump 1, $se;
    Mn(pre=>pi=>{s=>$es});
    #
pi/pre: |
    n pre =>1=>{s=>$s}=>'%tag:pre'
pi/tv: |
    Mn($_=>''=>{pi=>C=>s=>$s->{$_}})
        for sort keys %$s;
    
pi/C: |
    ref $s eq 'HASH' || return
        n nothash=>''=>{s=>wdump 2, $s}
    n t =>1=> s.t
    n ycv =>2=> s.y.cv
    n c =>3=> ki s.c
    n sc =>4=> ki s.sc
pi/di: |
    y.ert = 9;
    for (`ls --full-time --inode`) {
        chomp;
    }
ghosch: |
    sayyl "Ghosch: $m";
    return sayre "iggy $m" if $m !~ /^g(hosts?)?\/c\//;
    my $u = LoadFile $m;
    
    G.way->{$_} = $u->{$_} for keys %$u;
    delete G.drop;
loadwav: |
    sayyl " F  IND SOME FOR E.c.s";
    
    E.c.serJ && map {
        Rw clack + $m:_
    } "Already serJ = E.c.serJ.name";
    E.c.serJ = $J;
    
    for (E.c.s) {
        /^ghostchanges (.+)$/ ?
            Rw ghosch + $m:1
        :
        /^hello/ ?
            return saybl " hello! E.t: $_"
        :
        sayre "Unclassified talk: $_"
    }
    # be!  plus
    
    sayyl '' for 1..4;
Usee: |
    u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    
    my $i = int rand 19;
    sayre("CHANGING THIS\n\n\n\n") && `echo $i >> ded/$i` if int(rand 19) > 14;
    my @l = `find ded`;
    #my @l = `find life/W -type l`;
    #my @r = `find life/W -mtime +0.6 -type f`;
    #my @el = `find life/W`;
    chomp for @l;
    while (@l > 7) {
        `rm $_` for shift @l;
    }
    y.in=1;
    y.out=5;
    Mn(some=>''=>{pi=>textl=>s=>$_})
        for split"\n",wdump 2, \@l;
pi/textl: |
    my $l = sum map{ord $_} split '', $s;
    $l /= 10 until $l < 10;
    my $h = int $l;
    n text=>1=>$s,{hs=>"${h}86"}
EYZ: |
    u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    u curv =>pi=><<''
        zoom 0  0.13
        y    0  0
        x    0  0
        curve 0 -0.03
    
    # eyes !
    y.limn = 0.2245;
    y.lum = 5;
    y.in = 0.04;
    y.out = 0.3;
    #Mn(shedful => '', {pi=>'eye',s=>'eye/Tarf/Photo serieses'});
    Mn(shedful => '', {pi=>'fi',s=>'eye/el'});
Details: |
    u ReoCur
    y.at.ux = 1;
    y.at.oWl = 1;
    J.VV.N = 1;
    
    #n AfghanRug
    n $_,$_,$_,'%hs:389,fs:24,ml:-2em' for 1, 3, 5, 7, 9;
    
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbo';
    J.ev.bo ||= 'bodos';
    
    n undivthis=>[-dos=>0.06]
    
    #n lod=>0.06 =>'fds'=>'%id:lodo,dos:goche,wi:3'
    
    G.edit ||= 'G/way/Details';
    n edit=>0.02=>'@'=>'%id:edat,dos:flse,op:J/se/cod,to:!'
    J.se.cod &&
    n 'G/edit'=>[-cde=>'1-2']
    J.se.cod &&
    n G.edit=>[-cde=>'2-6']
    y.at.cssdel = 'transform';
    y.ope=1;
    n time =>[-timem=>'1-9x'.int rand 13]=>`date`
    
    #n Tarp
    J.act = 0; # pi always
    #return
    #n Sefi
    J.dooed++ || 
    #n Wjes
    # one to com the piles
    return;
    y.in = 0.08;
    #y.lum = 1;
    y.out = 3;
    Mn($_=>-shed=>) for 'ghosts/c/45';
    J.pix = {pi=>te=>pito=>'nothing'};
    
    
    #Mn($_=>-codey=>) for @{J.CO||=[]};
    #Mn(shedful => '', {pi=>'eye',s=>'eye/fug/1/lt'});
    
    n $_,$_,$_,'%hs:389,fs:20' for 1, 3, 5, 7, 9;
    
    return;
pi/timem: |
    Mn(dko=>''=>$_=>
        '%fs:'.(20 + int rand 70).',fw:6,hs:'.join('',map{int rand $_}5,7,8).',blr:'.int rand 4
      )
        for split ' ', $s;
DetailMark: |
    my $mark = [',',qw' ? ; :'];
    A.us&C && A.us&S ? J.fkeo++ : J.fkeo--;
    
    J.fkeo += 1 until J.fkeo >= 0;
    J.fkeo -= @$mark while J.fkeo > @$mark;
    
    J.sdjfsiji ||= 4;
    my $n = J.sdjfsiji++;
    my $sp = J.sfjkiig .= '   ';
    my $sc = J.fekooo ||= {};
    sc.fs ||= 3;
    sc.fs += 2;
    sc.ml += 1;
    #Mn(d =>''=>$mark->[J.fkeo]=>'%fs:44,hs:'.int(rand(9)).'36') for 1..6;
    
Somehows: |
    sayyl "SOMEHOWS! ".wdump 3, C.c.e.c.e.c.e;
    my ($jj,$ti,$no) = A.e&_hJ;
    $no && die "GOt extra thing: ".ki $no;
    say wdump 3, ti.El.Duv.rv;
    saybl wdump 3, ti.C;
    Rw talkzyh;
pi/dos: |
    n sym => 1=>C.t,{hs=>844=>dos=>'dosier'}
pi/nothing: |
    C.sc.qs = 1;
hijack: | # yJ, the event for-er
    saybl "HERE\n\n\n";
    my $ep = E.c.hC->[-1];
    ep.sc.pi eq 'yam' || die "Dodge E: ".
        Rw talkzyh;
    E.c.yJ = Rw yJTrunk $C:ep;
    my ($hoc,$ad);
    for my $o (reverse @{E.c.yJ}) {
        sayyl "Here: - ".ki $o;
        if (o.name =~ /^2/) {
            my $rv = o.El.Duv.rv;
            my $s = "Outside: ".ki(rv.C)."\nInside: ".ki(o.C);
            push @{E.c.us.pick||=[]}, [founde=>-ckup=>$s];
            n Dug =>$E
        }
    }
    
pi/doi: |
    C.sc.dos = $s;
    n s=>1=>'D','%fs:12'
    n o=>2=>$s,'%hs:268'
    if (!J.El.Duv && exists G.way->{"${s}_up"}) {
        say "Why not wake up... $s";
        Rw ${s}_up;
    }
    
pi/ckup: |
    n lin=>1=>"ckup: C.t"
    Mn($_->[0]=>-te=>$_->[1],'%width:42%,wb,ws')
        for map{ /^(.+?): (.+)$/ ? [$1, $2] : ["?",$_] } split "\n", $s;
pi/te: |
    C.sc.qs = 1;
    y.at.ws = '1';
    y.at.bgh = '8733';
    y.at.ma = '1em';
    n it =>1=>C.t=>'%hs:748,fw:3'
    
    my $fs = I.d&ron,(0+split("\n",$s))*(1 / 8);
    
    Mn(C.t=>''=>$s,'%wb,ws,dis,lh:1,fs:'.$fs);
    y.spc < 0.2
        ? sayyl "Wasbig: C.t: y.spc  J.C.y.spc  for ".slim 30,$s
        : sayyl "Notbig: C.t  a y.spc    J.C.y.spc";
    
    Rw Rums $J $C $M $y $spc:J.C.y.spc $I;
Rums: | # as an In osc, string ring ring
    # attach _.yy.NOISE.ytalk for tiny ysland mentalities
    @$M = map {
        my $ls = int($spc * 90);
        my $lino = J.mo.yam.sc.vert || scalar(split"\n",_.c.s);
        saybl "Have $spc * 90 = $ls      ----- $lino";
        if ($lino && $lino > $ls) {
            _.c.s =~ s/^(([^\n]*\n){$ls}).*$/$1 .../s;
            saybl "Made snip";
        }
        if ($spc < 0.2) {
            $_
        }
        elsif (_.c.s =~ /^(.+?): (.+)$/) {
            $_
        }
        elsif (_.c.s =~ /^(.+)( sc=\{ )(.+)$/s) {
            I.d&xoy,{c=>{s=>$1}},$_ ,
            [and=>''=>"AND: $2"=>'%hs:483'], 
            I.d&xoy,{c=>{s=>$3},sc=>{hs=>'287'}},$_
        }
        else {
            $_
        }
    } @$M;
    saybl "Took ".F_delta()." to spread J.name 's ".@$M;
    
AfghanRug: |
    J.A.III = ['G/T/Chang'];
    u ReoCur
    y.at.ux = 1;
    n $_,$_,$_,'%hs:389,fs:20' for 1, 3, 5, 7, 9;
    my $c;
    c.s = encode_entities("  ஓ୶");
    c.cow = 'r4b3 a3a';
    c.mixco = '0.5 582';
    
    y.in = 1;
    y.out = 9;
    Mn(d =>''=>$c=>'%ht,fs:164,hs:'.int(rand(9)).'96,sha:3 3 3 034') for 1..6;
    0 &&
    n afghanrug =>'1-9x3',$c,@{Load(fixutf8(<<''))};
          - blr: 4
            fs: 152.9
            fw: 4
            ht: 1
            sat: 1
            bri: 0.3
            con: 3
            sha: 3 3 3 034
            hs: 493
            zig: 5
    
    
    n affg =>'12-88x8'=>$c=>'%fs:73,blr:3,hs:374,ht:1,ml:4';
    # c
QuietVillage: |
    n quiet=>2=><<'','%ht'
        <video width="420" height="0" autoplay controls>
            <source src="groof/lesbaxter_quietvillage.mp3">
        </video>
    
Tarp: |
    u ReoCur
    y.at.ux = 1;
    y.at.oWl = 1;
    J.VV.N = 1;
    #
    J.tea ||= [grep{chomp}shuffle`ls -1 eye/Tarf/*/*`];
    my $pg = 'w/Tarpig';
    J.slow = readlink($pg) || 0;
    J.slow += 0.5;
    `unlink $pg` if -l $pg;
    `ln -s J.slow $pg`;
    J.slow = 0 if int(J.slow) >= @{J.tea};
    #
    y.ope = 1;
    my $f = J.tea->[int J.slow];
    n "the J.slow J.fast"=>-pape=>{s=>'mild'=>thumb=>$f};
    
    Mn(f=>''=>$f=>'%dos:flse,op:J/slow,to:1');
Dishing: |
    my ($Ta) = map{_.nj}
    n Tarp
    
    sayyl "Dishign: ".wdump 4, Ta.El.Duv.rv;
flse: | # fusilagery - wants about 2 seconds
    my $r = E.c.hC->[-1];
    if (r.sc.to) {
        r.sc.op || die "nop";
        my $o = I.d&pin,r.sc.op,$A;
        if (r.sc.to eq '!') {
            sayyl "! op to r.sc.op, was: ".
                I.d&pon,r.sc.op,$A,!$o;
        }
        else {
            I.d&pon,r.sc.op,$A,$o+C.sc.to;
        }
    }
    else {
        sayre "How to hold ".wdump 2, $r;
    }
    sayre "Have flse click: ".wdump 2, $r;
goche: |
    my $m = "g/c/".($n||8);
    Rw ghosch $m
pi/cde: |
    my $se = I.d&pin,$s,$A;
    #$se = wdump 3, $se;
    n row =>1 =>{idly=>1,s=>$se},'%cod:perl,dig:steve,dos:upcde'
    n row =>1=>{}=>{css=>"width:10em",ab=>1}
    C.sc.cssdel = 'transform';
    
    
upcde: |
    sayre "Upacode : C.t - E.t" for 1..4;
    
    sayre wdump 2, $C;
    Rw talkzyh;
    return;
    for (A.us&code) {
        sayyl "Writeing $_ from C.c.e.c.us";
        #I.d&pon,$s,$A,$_;
    }
putmoves: | # TODO y-move instead of remove
    u allovse
    n '','','%of:Sev'

    n Y =>31=><<'',{rg=>'J,V,yk'}
        # patch new to old where same t,s, add Vhooks
        C.y.lv = {k=>$k,C=>$C};
        C.y.at = {};
        C.y.ta = V.ta->{$k};
        C.y.vl = V.lv->{$k};
        if (C.c.root) { # / continues from 3 when everything's 6
            Y.root = $C;
            T.Z->{0.6} = 0.3;
            T.not = 1;
        }
somewhere: | # be somewhere by default
     my @path = ar.j.sc.J || ar.j.J;
     while (1) {
        my $l = $path[0];
        unshift @path, l.Jiter || last;
     }
     #saybl wdump 2, ["Gootblock:",@path];
     
     say "avoid: ".gp shift @path until !@path || $path[0] eq $J;
     shift @path;
     my $path = join '/', map{_.C.t} @path;
     
     my $A = J.A;
     my $v = G.pwin->("in/$path", $A);
     my $amo = 1.5;
     $amo = 0.8 if e.S;
     (v._.y.thy ||= 1) *= $amo;
     say "A in assign". wdump 14, [gp($J), $path, $v];
     return;
     
     #die wdump 2, [@lspath]; 
     #my $path = join '/', reverse @lspath;
     my $M = [];
     
     Mn('fro',{},"$path",'{ou:file}');
     
     Rw J5 wut $M;
Steve: |
   was h ere

