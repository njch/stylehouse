  
floatation: |
    # Wencaps the Wubstance behind the Jaulted door
    # good for clouding away entropy from the foundation
    # so so, wants to separate heaps
    
    # kicks rays off the end of sev (or so)
    # all the stuff is is s by now if its making lines
    # or its a bunch of whatever, to json onto new line
    
    # also to sever things where sc.W c.W + id (if they are reachable via Wspace)
    # pi can also sever into channels of art noise + realmy stuff
    # float the bets
    # edge thje het
    
        #   R writef life/W/em.is.W\.c em.lines $append:em.i
        # G is a tied hash, resolves to doing like I through G.d
        # R makes I from further Wish inquiry, G does similar
        # R implies floatation
        # repeast                       G.fsk.oth (does little I.oth where C is t=k s=v)

        # kind of wants lvish pointerism - you would get it from ^ids or so
        # osc idly (was around before) would keep j etc, 
        # handy for travelish reentrances by third parties
        # Jmosts must subscribe to the Goin osc...
        # which give them a G-finding W above their own W
        # which they dont know about, it's routed to...
    

        # J.mo.s is G.oin

    #u openphase
    #u threestep
    # root of the chuck out lines only sort
    # when 8s groW time on G.oin
    # C.c.In && A.t&62 &&
Sl: |
    #n JSlines =>W=>{s=>$J}
    #u alljs
    y.at.jslines = 1;
    n bawls =>3=><<'','%js'
        var v = $('#msgs');
        a.m("SOmething clea r "+v);
    
    n Details
    my $n = J.fsjoi++;
    $n || Rw loopby $b=0.2 $d=17 $p=Top;
Details: |
    y.at.ux = 1;
    n b320 => '3-9x22','777'
Wight: |
    n Funstuff
    n JScomp
    n JSea
    # could ahh...
    n JSlines =>W=>{s=>$J}
Sight: |
    n stylehut
    # could ahh...
    n JSlines =>W=>{s=>$J}
JSlines: |
    u threes
    y.at.jslines = 1;
    y.ope = 1;
    n $C
GW: | # required fror ux out, which nestle into GW/W via om
    y.at.jslines = 1;
    y.at.eve = 1;
    y.at.Mid = "G-J.mo.s.C.c.s";
    y.at.Wid = J.mo.s.id;
    my $js = "\$('#ux').append('<ww id=\"".y.at.Wid."\" style=\"position:absolute;height:100%;width:100%;background-color:hsla(118.8, 50%, 30%, 0.1);pointer-events:none;\" title=\"".y.at.Mid."\"></ww>');";
    n skfdo =>3=>$js,'%js'
    
pi/pane: |
    #u perCcsomethingtracepha
    n $_ for map{values %$_}values %$s
threes: |
    u allvse
    
    n '','','%of:oJ'
    n J =>344,<<''
        !ref $J && die "NotrefJ: $J  ".ki $C;
        if ($J eq A.J && ref C.c.s eq 'HASH' && C.c.s.bb) { # deal with self later
            my $s = C.c.s;
            ref $s && s.bb || die "s not J";
            A.J ne $s || die "dupe s.name ion A.J.name";
            C.c.IsOn || return do {
                Rw wayt $J $C $d=0.01 $p=jive;
                T.not = 1;
            };
            # no J being tricks for handulation
            A.Iso.th = 1;
            delete A.Iso.oJ;
        }
        else {
            say "Noine  for A.J.name  's      J.name";
        }
    
    n '','','%of:th'
    n J =>4,<<''
        # I.d&take,$s
        # does its own phasing
        my $oJ = C.c.s;
        ref $oJ && oJ.bb || die "NoJ";
        my $so = J.oJ->{oJ.name} ||= {};
        # mong beans
        # is {M:name,W:id} coupling, so pi is {file:g/c/1} etc
        my $Y = oJ.El.Duv;
        my $rv = Y.rv;
        if (@{rv.sc}) {
            sayre "J.name SLIPPING SC" for 1..5;
            sleep 4;
        }
        if (rv.i eq so.rv.i) {
            say "J.name receiving same oJ.name";
            return;
        }
        so.rv = $rv;
        my $N = [@{rv.c}];
        # get that banjo
        @$N = Rw humms $J $N wongui _;
        @$N = Rw humms $J $N notnotjs _;
        my $S = Rw humms $J $N jscoi;
        my $sc = [@$N];
        #sayyl "J.name from oJ.name:\n". 
        #Rw ZNews $sc $nov=1;
        # feed also cones?
        n $_ =>''=>{pi=>pane=>s=>$S->{$_}} for sort keys %$S;
        # panes
        T.not = 1;
    
    # some
jive: |
    my $J = G.oin;
    J.V = 1;
    n ar.J.name =>''=>{IsOn=>1,%{C.c},time=>6}
ww: | # open this ghost
    u SevWo
    y.at.uxwout = 1;
    n ww =>0.9,{},"%id:J.id,tt:H.ol,poi:0,ab:100,bgh:33.5.3.1"
    #G.Wid = J.id;
    #unshift @{aj.c}, jsq " \$('#ux').append(%s);", $s;
SevWo: |
    n Meta
    n Wuts
    
    u allacgts
    
    n writef =>''=><<'',{acgt=>'f,s,append'}
        (my $d = $f) =~ s/\/[^\/]+?$//;
        unless (-d $d) {
            `mkdir -p $d`;
        }
        .
        $s = [$s] if !ref $s;
        my $li = ref $s eq 'ARRAY' ? join("",map{/\n$/?$_:"$_\n"}@$s)
            : die "Wsome other $f type: $s";
        $li = encode_utf8 $li;
        .
        my $wa = {};
        wa.append = 1 if $append;
        write_file($f,$wa,$li);

    u allovse
    n '','','%of:O'
    n J =>35=><<''
        delete at.sc.J if C.c.S;
        # conceal the multiJexits
    
    u allvse
    n '','','%of:Sev'
    n root =>582=><<'',{rg=>'ylv,yvl'}
        return unless A.J.most.J eq A.J || A.J.C.c.Wo;
        my $r = Rw scd $rl:vl $rv:lv;
        return unless @{r.z};
        aft { $@ || return; sayre "$@  !~!! ".wdump 9, $r; };
        C.c.em && die'wtf';
        .
        my $em = C.c.em = {};
        em.lines = r.z;
        em.i = @{r.oldz};
        .
        A.Subtle.em = 1;
        A.t&em,6,2;
    
Meta: |
    u allvse
    n '','','%of:em'
    n em =>21=><<''
        em.lines || die "Not lines";
        em.hitime = hitime();
        em.is.W = C.sc.Wid || A.J.id;
        em.is.M = C.sc.Mid || A.J.name;
        em.id = em.is.W.'.'.(0+em.i);
    
    n em =>446=><<'',{rg=>'J'}
        sayre "No Wc for em.is.M" if !C.sc.Wc;
    
    u allsvse
    # split into line forms
    n jslines =>3=><<'',{cg=>'J,em'}
        my $N = [@{em.lines||die"Nop"}];
        @$N = Rw humms $J $N wongui _;
        @$N = Rw humms $J $N notnotjs _;
        my $S = Rw humms $J $N spots;
        em.lines = [map{
            " a\.e(".sjson($_).");"
        }@{S.z}];
        C.c.os = 1 if !grep {/\S/} @{S.z};
        C.sc.Wc = 1;
    
    n ux =>3=><<'',{cg=>'em'}
        my $J = G.oin;
        my $M = ['','',{W=>J.id},{z=>em.lines}];
        em.lines = [" a\.om({},".sjson($M).",a,{});"];
        C.sc.Wc = 1;
        n GW
        # ^ router, W with an .e v
    
    # event feedback (even tee rollistic trickles) donafto, drops
    n eve =>3=><<'',{cg=>'J,em'}
        J.mo.s.al.opt.fole = [Followe=>W=>"life/W/em.is.W\.e"];
        saybl "THIS: J.mo.s.al.name  ".wdump 4, J.mo.s.al.opt;
        # routes ids[] into All(Oth)
        
    
    
Wuts: |
    u allsvse
    n '','','%of:em'
    n Wc =>446=><<'',{cg=>'J,em'}
        saybl "Downing em.is.M: em.is.W: ".wdump 5,em.lines;
        I.d&writef,"life/W/em.is.W\.c",em.lines,em.i;
        .
        # is coming soon: (only space or)
        C.c.as = !C.c.os;
        C.c.As = C.c.as;
        C.sc.meta = 1;
        C.sc.speak = 1 if C.c.as;
        C.sc.takeover = 1 if C.c.As;
        saybl "WHITESPACE S em.is.M" if C.c.os;
    
    # inter intros
    n meta =>47=><<'','%cg:em'
        G.Wh->{em.is.W} && return;
        G.Wh->{em.is.W} = A.J;
        my $me = I.d&hup,$em;
        delete me.lines;
        $me = sjson $me;
        I.d&writef,"life/W/em.is.W\.i",$me;
    
    n speak =>48=><<'','%cg:em'
        return if G.Jlone;
        .
        I.d&writef,"life/J/em.id\.c",em.lines;
        .
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
    
    n takeover =>49=><<'','%cg:em'
        -l $_ && `unlink $_` for "life/W/em.is.M";
        `cd life/W; ln -s em.is.W\.c em.is.M`;
    
    
Travel: # make somewhere bridge
   yJ: |
     'clw waz gui'
   sh: |
     Rw J5 shv $aj;
   Em: |
     Rw Emvil;
Emvil: |
     my $tw = Rw huck $J $aj */sh;
     $tw || die "nomount J.name";
      
     my $c = aj.c;
     die 'scs' if @{aj.sc};
     die 's' if aj.s;
     my $M = ['','',{W=>G.Wid},{z=>aj.c}];
     
     #sayyl wdump 15, $M if aj.J.name eq 'Vuel';
     aft {
         $@ || return;
         sayre "$@  !~!! ".wdump 35, $M;
     };
     aj.c = [" a\.om({},".sjson($M).",a,{});"];
     aj.sent = 1;
     
     Rw paintaj $aj;
     
     # route aj.W from ...
     G.Wh->{aj.Wid} ||= do {
         my $ij = {}; map {
         $ij->{$_} = $aj->{$_} if !/^[sc]+/; } keys %$aj;
         ij.id = delete ij.Wid;
         ij.y = 'W';
         
         sayyl "Life! of ij.y ij.id";
         0->tai("ij.y/ij.id\.i", $ij);
         0->tac("V/H.style/H.name/H.id\.s", ztm($ij));
         aj.J;
     };

     Rw J5 wu $aj;
     
     aj.y ||= 'J';
     aj.yy = 'W';
     Rw aji $aj;
     Rw blabaj $aj;
somewhere: | # be somewhere
     my @path = ar.j.sc.J || ar.j.J;
     while (1) {
        my $l = $path[0];
        unshift @path, l.Jiter || last;
     }
     #saybl wdump 2, ["Gootblock:",@path];
     
     say "avoid: ".gp shift @path until !@path || $path[0] eq $J;
     shift @path;
     my $path = join '/', map{_.C.t} @path;
     
     my $A = J.A;
     my $v = G.pwin->("in/$path", $A);
     my $amo = 1.5;
     $amo = 0.8 if e.S;
     (v._.y.thy ||= 1) *= $amo;
     say "A in assign". wdump 14, [gp($J), $path, $v];
     return;
     
     #die wdump 2, [@lspath]; 
     #my $path = join '/', reverse @lspath;
     my $M = [];
     
     Mn('fro',{},"$path",'{ou:file}');
     
     Rw J5 wut $M;
siueon: |
    iroughoan anonate
paintaj: |
     aj.Wid || die "not Wid?";
     aj.hol = "H.style/H.name/H.id";
     aj.hitime = hitime;
     aj.name ||= aj.J.name;
thing2: |
   fow
hip_po: |
    tree-ish campus
    str i sin tko
things: |
    with suct ion
Mainiy: |
    things in 
Steve: |
   was h ere

