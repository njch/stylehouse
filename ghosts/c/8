  
floatation: |
    # Wencaps the Wubstance behind the Jaulted door
    # good for clouding away entropy from the foundation
    # so so, wants to separate heaps
    
    # kicks rays off the end of sev (or so)
    # all the stuff is is s by now if its making lines
    # or its a bunch of whatever, to json onto new line
    
    # also to sever things where sc.W c.W + id (if they are reachable via Wspace)
    # pi can also sever into channels of art noise + realmy stuff
    # float the bets
    # edge thje het
    
        #   R writef life/W/em.is.W\.c em.lines $append:em.i
        # G is a tied hash, resolves to doing like I through G.d
        # R makes I from further Wish inquiry, G does similar
        # R implies floatation
        # repeast                       G.fsk.oth (does little I.oth where C is t=k s=v)

        # kind of wants lvish pointerism - you would get it from ^ids or so
        # osc idly (was around before) would keep j etc, 
        # handy for travelish reentrances by third parties
        # Jmosts must subscribe to the Goin osc...
        # which give them a G-finding W above their own W
        # which they dont know about, it's routed to...
    

        # J.mo.s is G.oin

    #u openphase
    #u threestep
    # root of the chuck out lines only sort
    # when 8s groW time on G.oin
    # C.c.In && A.t&62 &&

    # to connect Gw so A.t&63 to hold things again, merge many Rw personas into one live as repeated subs with blanky u,etc,y.at outthrustocombing, since everything goes within to sed out - sometimes holding what it was originally for loop
    # the whole control panel of J.? of ^\w .* funcs is up, line feed, code is cracking open a valley

    # Followe:
    # ^ u threes
    # ^ qq {cpi:lines u:followlines}
    # which is normal perl code^and replies to the u qq seeming
    # want to consume every void context stuff as mind
    # u/n symbol family, j for nonJmo:
    # ^ j qq {cpi:lines u:followlines}
    # or perhouse (some Jness)
    # ^ j:interso qq {cpi:lines u:followlines}
    # when vector compose program
    
    # is kinda 
    # little j eventuates index of doings to follow index
Sl: |
    y.at.oWl = 1;
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbo';
    J.ev.bo ||= 'bodos';
    
    #n reJSlines
    # makes everything but js=1
    y.at.jslines = 1;
    n bawls =>3=><<'','%js'
        var v = $('#msgs');
        a.m("SOmething clea r "+v);
        $('canvas').remove();
    
    #n "life/S\.s"=>-sol=>''=>'%dos:loadwav'
    
    n ThisPr
    #n Details
    #n EYZ
    #n Usee
    # Rw followS
    
    my $n = J.fsjoi++;
    $n && 1;
    $n || Rw loopby $b=5 $d=26 $p=Top;
ThisPr: |
    #u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    y.at.oWl = 1;
    #J.V = 1;
    
    n Chang
    
    Mn(Y=>-raay=>'Chang');
    y.out = 6;
    y.in = 1;
    n d =>'1.2-3x2.4'=>','=>'%fs:44,ml:-1'
    
pi/raay: |
    my $oJ = J.mo.J.bb->{"0.3\t$s\tJ"} || return
        n 404 => 1 =>"snothere: $s"
    my $Y = oJ.El.Pre;
    my $se = Y.tv if C.t eq 'tv';
    $se = $Y if C.t eq 'Y';
    $se = se.tv;
    $pi ||= C.t;
    $se || return
        n 500 => 2 =>"no access: C.t"
    Mn(C.t=>pi=>{s=>$se});
pi/Y: |
    n Y =>1=>C.t
    Mn(hach=>pi=>{s=>$s});
pi/w: | # the soft Rw or u art grab
    my $es = G.way.Elis;
    y.in=1;
    Mn(pre=>pi=>{s=>$es});
    
pi/hach: |
    my $se = {%$s};
    while (my ($k,$v) = each %$se)  {
        $se->{$k} = ref $v ? ref($v)." ".ki $v : $v;
    }
    my $es = wdump 1, $se;
    Mn(pre=>pi=>{s=>$es});
    #
pi/pre: |
    n pre =>1=>{s=>$s}=>'%tag:pre'
pi/tv: |
    Mn($_=>''=>{pi=>C=>s=>$s->{$_}})
        for sort keys %$s;
    
pi/C: |
    ref $s eq 'HASH' || return
        n nothash=>''=>{s=>wdump 2, $s}
    n t =>1=> s.t
    n ycv =>2=> s.y.cv
    n c =>3=> ki s.c
    n sc =>4=> ki s.sc
Sinter: |
    J.VV.N = 1;
    n stylext
    
ghosch: |
    sayyl "Ghosch: $m";
    return sayre "iggy $m" if $m !~ /^g(hosts?)?\/c\//;
    my $u = LoadFile $m;
    
    G.way->{$_} = $u->{$_} for keys %$u;
    delete G.drop;
loadwav: |
    sayyl " F  IND SOME FOR E.c.s";
    
    E.c.serJ && map {
        Rw clack + $m:_
    } "Already serJ = E.c.serJ.name";
    E.c.serJ = $J;
    
    for (E.c.s) {
        /^ghostchanges (.+)$/ ?
            Rw ghosch + $m:1
        :
        /^hello/ ?
            return saybl " hello! E.t: $_"
        :
        sayre "Unclassified talk: $_"
    }
    # be!  plus
    
    sayyl '' for 1..4;
Usee: |
    u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    
    my $i = int rand 19;
    sayre("CHANGING THIS\n\n\n\n") && `echo $i >> ded/$i` if int(rand 19) > 14;
    my @l = `find ded`;
    #my @l = `find life/W -type l`;
    #my @r = `find life/W -mtime 0.6`;
    #my @el = `find life/W`;
    chomp for @l;
    while (@l > 7) {
        `rm $_` for shift @l;
    }
    y.in=1;
    y.out=5;
    Mn(some=>''=>{pi=>textl=>s=>$_})
        for split"\n",wdump 2, \@l;
pi/textl: |
    my $l = sum map{ord $_} split '', $s;
    $l /= 10 until $l < 10;
    my $h = int $l;
    n text=>1=>$s,{hs=>"${h}86"}
EYZ: |
    u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    u curv =>pi=><<''
        zoom 0  0.13
        y    0  0
        x    0  0
        curve 0 -0.03
    
    # eyes !
    y.limn = 0.2245;
    y.lum = 5;
    y.in = 0.04;
    y.out = 0.3;
    #Mn(shedful => '', {pi=>'eye',s=>'eye/Tarf/Photo serieses'});
    Mn(shedful => '', {pi=>'fi',s=>'eye/el'});
Details: |
    u ReoCur
    y.at.ux = 1;
    J.VV.N = 1;
    
    J.ev.th ||= 'middle';
    J.ev.li ||= 'climbo';
    J.ev.bo ||= 'bodos';
    
    my $mark = [',',qw' ? ; :'];
    A.us&C && A.us&S ? J.fkeo++ : J.fkeo--;
    
    J.fkeo += 1 until J.fkeo >= 0;
    J.fkeo -= @$mark while J.fkeo > @$mark;
    
    J.sdjfsiji ||= 4;
    my $n = J.sdjfsiji++;
    my $sp = J.sfjkiig .= '   ';
    my $sc = J.fekooo ||= {};
    sc.fs ||= 3;
    sc.fs += 2;
    sc.ml += 1;
    
    
    #n b320 => '3-5x'.$n, join($sp,(J.fkeo) x 3),$sc;
    
    n fsdk => 0.04 => "Steve, ya need: <b>BVOLD</b>",'%ht:1'
    #
    G.edit ||= 'G/way/Chang';
    n edit=>0.08=>'@'=>'%id:edat,dos:flse,op:J/se/cod,to:!'
    J.se.cod &&
    n 'G/edit'=>[-cde=>'1-2']
    J.se.cod &&
    n 'G/way/Chang'=>[-cde=>'2-6']
    
    
    
    y.at.cssdel = 'transform';
    
    n d =>'1.2-3x3'=>$mark->[J.fkeo]=>'%fs:44'
    
    n lod=>0.06 =>'fds'=>'%id:lodo,dos:goche,wi:3'
    
    return;
    y.in = 1;
    y.out = 4;
    Mn(shedful => '', {pi=>'eye',s=>'eye/fug/1/lt'});
    
    
flse: |
    die "Have flse click: ".wdump 2, $ar;
goche: |
    Rw ghosch $m=g/c/8
pi/cde: |
    my $se = I.d&pin,$s,$A;
    #$se = wdump 3, $se;
    n row =>1 =>{idly=>1,s=>$se},'%cod:perl,dig:steve,dos:upcde'
    n row =>1=>{}=>{css=>"width:10em",ab=>1}
    C.sc.cssdel = 'transform';
    
    
upcde: |
    sayre "Upacode : C.t - E.t" for 1..4;
    
    sayre wdump 2, $C;
    Rw talkzyh;
    return;
    for (A.us&code) {
        sayyl "Writeing $_ from C.c.e.c.us";
        #I.d&pon,$s,$A,$_;
    }
linesfollow: |
    u allvse
    n '','','%of:J'
    n J =>62221,<<''
        C.c.pi eq 'lines' &&
        u followlines
    
followlines: |
    u allovse
    n '','','%of:Sev'
    
    n LinesFollow =>4431=><<'',{Td=>'V/*/new',Tdarge=>'iv,ov'}
        T.noTd = 1;
        return unless C.sc.pi eq 'line';
        return sayre "J.name Foundaou wasthere: C.c.s" if !V.rv;
        my $oJ = $J;
        $J = J.mo.J;
        .
        $C = I.d&hup,$C;
        .
        C.c.was = !Y.root.y.ta;
        # should be refering to the one and the one of the event
        saybl "J.name    Got pi line!             C.c.s   C.c.was";
        n J.C.t,$C,$oJ
        # may like to grab the element before it
        # like a curve continuing
    
putmoves: |
    u allovse
    n '','','%of:Sev'

    n Y =>31=><<'',{rg=>'J,V,yk'}
        # patch new to old where same t,s, add Vhooks
        C.y.lv = {k=>$k,C=>$C};
        C.y.at = {};
        C.y.ta = V.ta->{$k};
        C.y.vl = V.lv->{$k};
        if (C.c.root) { # / continues from 3 when everything's 6
            Y.root = $C;
            T.Z->{0.6} = 0.3;
            T.not = 1;
        }
somewhere: | # be somewhere
     my @path = ar.j.sc.J || ar.j.J;
     while (1) {
        my $l = $path[0];
        unshift @path, l.Jiter || last;
     }
     #saybl wdump 2, ["Gootblock:",@path];
     
     say "avoid: ".gp shift @path until !@path || $path[0] eq $J;
     shift @path;
     my $path = join '/', map{_.C.t} @path;
     
     my $A = J.A;
     my $v = G.pwin->("in/$path", $A);
     my $amo = 1.5;
     $amo = 0.8 if e.S;
     (v._.y.thy ||= 1) *= $amo;
     say "A in assign". wdump 14, [gp($J), $path, $v];
     return;
     
     #die wdump 2, [@lspath]; 
     #my $path = join '/', reverse @lspath;
     my $M = [];
     
     Mn('fro',{},"$path",'{ou:file}');
     
     Rw J5 wut $M;
Steve: |
   was h ere

