stylehut: |
    u perl/file
    n ACGT
    n doi=>'',<<'','%code=1'
      Rw j phon;
    
ACGT: |
    
lazershop: |
    #my $g = Rw Jto Gee;
    Rw j - Gee;
    
phon: |
    n Jh=>0.01
    n lazershop
Jh: |
    n J.name=>1,J.name
    
j: |
    my $J = ar.J ||= G.eoin ||= Rw Jto - sea;
    my ($t) = @{delete ar.m};
    say "Look for $t in J.name";
    return if $t eq 'qq';
    
    #u somewhereei
    
    my ($s) = Jn('','',{W=>$t});
    return s.sc.J||die "no sc J".wdump 3,[$t,$s];
    
    
somewherei: |
    u jbz
jbz: |
    u mody=>=>so
qq: |
    # getting run t
    # qode qompiler
    # does each thing input... has out that joins up
    # J (above)  # does u thing
    #   J qq     # gets W/thing as inbryo or stored G.oin Wemotables
    #   ^        # settles (Jbove wants out, to do n)
    #   output G compressions (+/- laws)
    # J eats   " "
    
    
    #
Jto: |
     my $J;
     J.id = mkuid;
     (J.name) = @{delete ar.m};
     J.bb = {};
     J.phy = {};
     J.phl = {};
     
     J.most.J = $J;
     J.most.mody = 'mani';
     J.most.eo = 'Yesui';
     J.tt = 1;
     
     J.u = sub {
         my $ar;
         ar.J = Rw j $J qq;
         ar.N = [[@_]];
         sayyl "J.name U! @_";
         Rw MyN;
         # & concert overworld
     };
     J.n = sub {
         my $ar;
         ar.J = $J;
         ar.N = [[@_]];
         Rw MyN;
     };
     J.m = sub {
         my $ar;
         ar.M = shift;
         ar.J = $J;
         ar.N = [[@_]];
         Rw MyN;
     };
     J.bz = sub { #c
         my $m = [@_];
         die "not 2 @$m" if @$m != 2;
         my $j={};
         while (@$m) {
             my ($r, $v) = (shift @$m, shift @$m);
             if ($r =~ /^%(\S+)/) {
                 j.style = $1;
             }
             else {
                 $j = Rw r2j $r $J;
             }
             defined j.cv || die "NOSEYV: j.cv".wdump[$j,[@_],[$r, $v]];
             
             j.r = join "\t", j.cv, j.t, j.style;
             j.s = $v;
             my @Js = $J;
             push @Js, values %{J.phy} if J.phy;
             for my $jj (@Js) {
                 jj.bb->{j.r} = j.s;
                 push @{jj.ord}, {%$j} if jj.ord;
                 jj.tim->{j.r} = hitime() if jj.tim;
                 jj.wtf->{j.r} = $F[0] if jj.wtf;
                 jj.ap->($j) if jj.ap; # <<<
             }
        }
     };
     $J
     
r2j: |
    my $j;
    if (J.tt) {
        (j.cv,j.t,j.style) = $r =~ /^(.*?)\t(.*)\t(.*?)$/;
    }
    else {
        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\s+(.+?)$/;
    }
    defined j.cv || die "(tt=J.tt) no $r    ".ki $j;
    j.s = ar.J.bb->{$r} if ar.J;
    $j;
    
Yesui: |
    # etc
    my $hv = Rw Yer $J;
    say wdump 3, $hv;
    
    # / 9 last
    
    #return if J.tt;
    
    Rw chuv;
 
Yer: |
    my $i = Rw pha Yer $J;
    # tower philosophic calm
    i.Y = i.head.Y if i.head && i.head.Y;
    i.Y && sayyl "Y stole: ".wdump 1, i.Y;
    i.Y || sayre "Y not, ,makeke";
    if (i.Y) {
        for (keys %{i.Y.out}) {
             
        }
    }
    i.Y ||= do {
        my $Y;
        my $tw;
        for my $r (keys %{J.bb}) {
            my $j = Rw r2j $r $J;
            Y.bb->{$r} =
            $tw->{j.cv."\t".j.t}->{j.style} = j.s;
        }
        Y.vs = [];
        for my $k (sort keys %$tw) {
            my $cs = $tw->{$k};
            my ($cv,$t) = $k =~ /^(.+?)\t(.+)$/;
            defined $cv || die;
            my $C = {t=>$t,y=>{cv=>$cv},c=>{},sc=>$cs};
            C.c.s = delete C.sc->{''} if exists C.sc->{''};
            Y.tv->{C.t}->{C.y.cv} = $C;
            Y.tw->{C.y.cv}->{C.t} = $C;
            push @{Y.vs}, $C;
        }
        $Y;
    };
    delete i.bb;
    i.ap = sub {
         my $j = shift;
         if (exists i.Y.bb->{j.r} && i.Y.bb->{j.r} eq j.s) {
             delete i.Y.out->{j.r};
             say "J.ind no j.r   where j.s  last". i.Y.bb->{j.r};
         }
         else {
             i.out->{j.r} = 1;
             sayyl "J.ind i.pos  j.r   j.s  last". i.Y.bb->{j.r};
             #delete i.Y;
             #i.end->();
         }
    };
    
    #{tw=>$tw,vs=>$vs,i=>$i};
    'ye'#i.Y.vs;
    
Trail: |
sea: |
    u 8ou;
8ou: |
    u Ver
blus: |
    u 
    

