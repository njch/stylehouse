Ipifalls: |
    u allvc
    n stopiclife =>444,<<'','%code:Mo,v:pi'
        return unless C.c.J;
        C.sc.J.A.III.Ipifalls = ['J/most/J/A/I'];
IIpifalls: |
    u allvc
    n stopicqlife =>444,<<'','%code:Mo,v:pi'
        return unless C.c.J;
        C.c.J.A.III.IIpifalls = ['J/most/J/A/II'];
pi3d: |
    u allvc
    n inlevels =>3212,<<'','%code:Mo,v:pi'
        C.c.pi && delete C.y.o.J;
        
stopiclife: |
    u allvc
    n stopi_clife =>32131,<<'','%code:Mo,v:pi'
        delete C.c.J if C.sc.pi eq 'clife';
clifeGkeeps: |
    u allact
    # wants to be in a humming list of the things, before thi gets figured tho
    n clifeGkeeps =>212,<<'','%code:Mo'
        my $CC = A.J.C;
        return unless $CC && CC.c.pi eq 'cfile' && C.t eq 'z';
        my $keep = {
            'g/0/G' => qr/^(say.*|k.|hitime|unico|hex.*|.dump|mku.*|head|flatline)$/,
            'g/G/cis' => qr/^(ind|dig|snooze|acum|sli?m|.json)$/,  
            'g/G/on' => qr/^(wag|wayup|fwind)$/,
            'g/G/way' => qr/^(stack|F_delta|inter)$/,
        };
        my $r = $keep->{CC.t} || die "noyt to CC.t";
        my @not;
        my @keep = @{C.y.o.M} = grep { _.t =~ $r ? 1 :
            do{ push @not, $_; 0 }
        } @{C.y.o.M};
        saybl "CC.t keeps ".join", ",sort map{_.t} @keep;
        saygr "CC.t drops ".join", ",sort map{_.t} @not;
        return;
Dra: | # most wild (furthest from Wild, goes in circle)
    n IIpifalls
    n pi3d
    n stopiclife
    n clifeGkeeps
    

