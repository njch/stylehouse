
pha: | # temporal phatness, per suJ (encap $M surges within)
     my $name = ar.k || shift @{ar.m};
     
     if (my $xx = J.phy->{$name}) {
         # re endtrant
         xx.end->();
         # end - maybe new stuffright as some random part of this process
     }
     for my $outx (grep {_.outsidey} values %{J.phy}) {
        # something? # perhaps a non, fire when no other phy
     }
      
     J.phy ||= {}; # phases
     
     my $x = J.phy->{$name} = {
        begin => hitime(),
        name => $name,
        bb => {},
        ord => [],
        #tim => {},
        #wtf => {}, # F grab
        #ap => sub{}, # bz do aftering
        qui => 1,
     };
     x.head = J.phl->{$name}->{l}->[-1] if J.phy->{$name};
     x.abandon = sub { # upgrades what's there already, early exity lop
         my $why = shift;
         delete J.phy->{$name};
         x.abadoned = $why || 1;
         if (my $xx = x.head) {
             x.as->($xx);
         }
         x.end->();
     };
     x.as = sub {
         my $ox = shift;
         for (qw'begin bb ord tim wtf') {
              exists $ox->{$_} || next;
              my $v = $ox->{$_};
              $v = [@$v] if ref $v eq 'ARRAY';
              $v = {%$v} if ref $v eq 'HASH';
              $x->{$_} = $v;
         }
     };
     x.end = sub {
         my $y = J.phl->{$name} ||= {name=>$name, l=>[]};
         x.ended = hitime();
         delete J.phy->{$name};
         push @{y.l}, $x;
         shift @{y.l} while @{y.l} > 5;
         # layers ^ rolling in time index .r -> the y.l
         # so last phase of $name can be found?
         if (x.bb) {
             my $w = @{y.l};
             y.l_bb->{$_} = $w for keys %{x.bb};
         }
         # somewhere thinks about what happened
         return $y;
     };
     x.exactl = sub {
         my $q = shift;
         my $y = x.end->();
         Rw ph_exactl $J $y $q;
     };
     # ensure phase reset with _after_do
     $x;
ph_exactl: | #c or drop not in last
       my $wtf = ar.wtf || {};
       my $cur = wtf.cur = y.l->[-1];
       my $last = wtf.last = y.l->[-2];
       wtf.same = 1;
       if (!$last) { # better not get autovivified! 
           wtf.allnew = 1;
           wtf.same = 0;
           #return;
           last.bb = {};
       }
       $wtf->{$_} = {} for qw'new diff gone';
       #y.l_bb->{$_} = $w for keys %{x.bb};
       # churn stats like 30% of last disappear, 20% new
       
       for (sort keys %{cur.bb}) {
           if (!exists last.bb->{$_}) {
               wtf.new->{$_} = cur.bb->{$_};
               wtf.same = 0;
           } 
           elsif (last.bb->{$_} ne cur.bb->{$_}) {
               wtf.diff->{$_} = cur.bb->{$_};
               wtf.same = 0;
           }
       }
       
       for (grep { !exists cur.bb->{$_} } sort keys %{last.bb}) {
           wtf.gone->{$_} = last.bb->{$_};
           wtf.same = 0;
           delete J.bb->{$_};
       }
       
       my $count = keys %{cur.bb};
       cur.wt = $wtf;
       $wtf;
     
wtfch: |   
    my $wtf = {};
    wtf.same = 1;
    $wtf->{$_} = {} for qw'new diff gone';
    
    for (sort keys %$Jb) {
        if (!exists $Yb->{$_}) {
            wtf.new->{$_} = $Jb->{$_};
            wtf.same = 0;
        } 
        elsif ($Yb->{$_} ne $Jb->{$_}) {
            wtf.diff->{$_} = $Jb->{$_};
            wtf.same = 0;
        }
        else {
            wtf.sami++;
            wtf.still->{$_} = $Jb->{$_};
        }
        wtf.tot++;
    }
    for (grep { !exists $Jb->{$_} } sort keys %$Yb) {
        wtf.gone->{$_} = $Yb->{$_};
        wtf.same = 0;
    }
    $wtf;
Elvis: | # safe vs doing - sheets of J->Y, dont drop any frames, where we start being onlies
    my $wtf = Rw wtfch $Jb:J.bb $Yb:Y.bb;
    
    Y.tw ||= {};
    Y.lo = {};
    
    for my $mo (qw'gone diff new') {
        for my $r (keys %{$wtf->{$mo}}) {
            my $j = Rw r2j $r $J;
            j.r = $r;
            j.lt = j.cv."\t".j.t;
            if (!j.lt=~/\S/) {
                die "Got $r =>   ".ki $j;
            }
            
            if ($mo eq 'gone') {
                delete Y.bb->{j.r};
                delete Y.tw->{j.lt}->{j.style};
            }
            else {
                Y.bb->{j.r} = j.s;
                Y.tw->{j.lt}->{j.style} = j.s;
            }
            Y.lo->{j.lt}->{$mo}->{j.style} = j.s;
        }
    }
    
    Y.tv ||= {};
    Y.v ||= {};
    Y.go = {};
    my $same = 1;
    for my $k (keys %{Y.lo}) {
        my $tf = Y.lo->{$k};
        my $cs = Y.tw->{$k};
        if (tf.new && !tf.gone && !tf.diff && keys %{tf.new} == keys %$cs) {
            $same = 0; # new line to make
        }
        if (tf.gone && !keys %$cs) {
            $same = 0; # line to disappear
            my $C = Y.go->{$k} = delete Y.tv->{$k};
            my ($cv,$t) = $k =~ /^(.+?)\t(.+)$/;
            delete Y.v->{$cv}->{$t};
            delete Y.v->{$cv} unless keys %{Y.v->{$cv}};
        }
        if (tf.diff || tf.new) {
            keys %$cs || die 'nokeys';
            my ($cv,$t) = $k =~ /^(.+?)\t(.+)$/;
            defined $cv || die "twas $k";
            my $foam = sub {
                my $C = shift;
                %$C = (t=>$t,y=>{cv=>$cv},c=>{},sc=>{%$cs});
                C.c.s = delete C.sc->{''} if exists C.sc->{''};
            };
            $foam->(Y.tv->{$k} ||= {});
            $foam->(Y.v->{$cv}->{$t} ||= {});
        }
    }
    if (!$same) {
        Y.vs = [];
        for my $k (sort keys %{Y.tv}) {
            my $C = Y.tv->{$k} || die "wtf $k";
            push @{Y.vs}, $C;
        }
        #sayre "vs re: ".@{Y.vs};
    }
    
    Y.ra = Rw ratio $o:wtf.sami $t:wtf.tot;
    Y.rato = wtf.tot;
    Y.revs = !$same;
    
    
    $Y;

