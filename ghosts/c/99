

DD: | # pile status
    u urw
    
    y.at.ws = 1;
    y.at.mean = 'Pgiter';
    y.at.hs = '893';
    y.in = 0.03;
    y.out = 6;
        J.VV.N = 1;
    y.ert = 20;
    
    y.at.anch = 'Noteal';
    
    m wu=>-Joien
    
JJ: | # pile status
    u urw
    
    y.at.anch = 'Noteal';
    y.at.ws = 1;
    y.at.mean = 'Pgiter';
    y.at.hs = '893';
    y.in = 1;
    y.out = 6;
        J.VV.N = 1;
    y.ert = 20;
    #
    #G.oin.A.tid += 3;
    Mn("jw"=>-Joien);
    
Pgiter: | # Dug bunch target, make travel intent
    sayyl "Jiterating ! C.t   on J.name";
    Rw talkzyh;
    #
    # not =>$E properly, C is first C,c.e $E is from before $E
    my @Js = @{ e&hJ };
    my ($tW,$tl) = @Js[0,-1];
    tW.mo.J eq $tW || die "not most 1: ".ki $tW;
    my $ing = tl.C;
    my $ip = {map{$_=>ing.sc->{$_}}@{J.uzk}};
    ip.mean && ip.onto || die " notmeanonto compre ".ki $ing;
    ip.pi = 'edr';
    ip.onto =~ /^\w+$/ || die "Confuse onto: ".ki $ip;
    
    my $duvi = sub {
        my $tl = shift;
        my $uv = tl.El.Duv || die "HJiter not Duv tl.name";
        map{uv.tv->{$_}}@{uv.os}
    };
    my $gre = sub {
        grep { I.d&ip,$ip,_.sc } $duvi->(shift);
    };
    my @bun = $gre->($tW);
    push @bun, $gre->($tl);
    my @s = uniq map{_.c.s} @bun;
    saybl "Make Joint stand: ".ki($ip).": ".wdump 3, \@s;
    my $o = {};
    for my $leng (@s) {
        my @l = split ';', $leng;
        o.ops->{$l[0]}++;
        o.al->{$_}++ for @l;
        # do head ^ want tree:
        while (@l > 1) {
            my $l = shift @l;
            my $r = shift @l;
            say "ip.onto - $l <---- $r";
            
            my $h = G&qh,<<'',ip.onto,$l,$r;
                select * from t where isle = ? and l = ? and t = ?
            h.c = djson h.c if h.c && !ref h.c;
            h.c.todo = 1;
            h.c = sjson(h.c||{});
            my $h = G&qp,<<'',h.c,ip.onto,$l,$r;
                update t set c = ? where isle = ? and l = ? and t = ?
            
            my $f = ip.onto."/J/$l/$r";
            o.ave->{$f}++;
            unshift @l, $r;
        }
    }
    for (keys %{o.al}) {
        Rw Gohdown $p:_
    }
    sayyl "You ordered: ip.onto: ip.onto ".wdump $o;
    # jobinate (J1) or fork or acquire fork or wake tests...
    # all tops go via Tp
    # db handle blows up after, more annoying to lose the JJ pile all the time
    #return sayyl "fork fin", do {T.pos = 0} if
    #    Rw waitme fre;
    for (keys %{o.ops}) {
        my $c = { toisle=>ip.onto, toW=>$_ };
        Rw waited $J=Tp $c;
        saybl "Done $_";
    }
    T.pos = 0;
    saybl "All done";
    #exit;
    
    
    
Inter: | # make Pg travel manually?
    u UpPg;
    $A =
    doof:
        if
    my $d = G&qp,<<'',sjson({some=>1}),'More';
        update t set c = ? where t = ?
pi/Joien: |
    u UpPg
    
    C.sc.dos = 'pileJup';
    y.ert = 32;
    y.at.qs = 1;
    n Join=>0.0001=>$s,'%decor,hs:388'
    
    $A = 
    neo:
        far
    my $N = [ G&qh,<<'',($s)x4 ];
        select t.l,t.t,t.isle as tisle,
          gho.t as gt,
          w.t as wt,
          w.isle, w.c::text,
          t.c::text as tc, t.sc::text as tsc,
        extract(epoch from gho.ts) as gts,
        extract(epoch from w.ts) as wts
        from t left join w using (t,isle) right join gho using (t)
        where t.isle = ? or w.isle = ?
       union
        select t.l,t.t,t.isle as tisle,
          gho.t as gt,
          w.t as wt,
          w.isle,w.c::text,
          t.c::text as tc, t.sc::text as tsc,
        extract(epoch from gho.ts) as gts,
        extract(epoch from w.ts) as wts
        from w left join t using (t,isle) right join gho using (t)
        where t.isle = ? or w.isle = ?
    
    G&decj,$_,'tc','tsc' for @$N;
    
    say ki $_ for @$N;
    
    my $jes = J.mo.jes = $J;
    Rw trowal $J $N;
    #Mn('JIOI'=>-gejo=>{}=>'%dis');
    
    Rw notlel;
notlel: |
    my $jes = J.mo.jes;
    my $tow = jes.tower || die "no tower";
    my $wt = jes.trowl || die "no trowl";
    my $tal;$tal = sub {
        my ($d,$wt) = @_;
        map {
            my $v = $wt->{$_};
            my @M;
            push @M, [$_=>''=>{s=>$_,ind=>$d}];
            push @M, $tal->($d+1, $v) if keys %$v;
            @M
        } sort keys %$wt;
    };
    my $N = do { #G&NM
        my $M = [];
        my $N = [$tal->(0,$wt)];
        Mn($N);
        $M;
    };
    _.c.s = $tow->{_.t}->{e} || {noe=>{}} for @$N;
    _.c.pi = 'tgw' for @$N;
    _.sc.dis = 1 for @$N;
    _.sc.ml = _.c.ind * 3 for @$N;
    
    Mn($N);
    
    my $ee = jes.teeps = {};
    $ee->{_.t} = $_ for @$N;
    
    n o=>899=>"sÒ‰",'%fs:60,blr:1,opa:3'
    saybl "J.name on";
    # and so
trowal: | # make two forms of hierarchy from eg $s=w/u/J -> w/u/J/*/*
    my $tw = {};
    my $et = {};
    for my $f (@$N) {
        my $t = f.t || f.wt;
        $et.>$t = $f;
        my $l = f.l || sayre("No l on f.t") && next;
        $tw->{$l}->{n}->{$t} = 1;
        $tw->{$t}->{u}->{$l} = 1;
    }
    $tw->{$_}->{e} = $et->{$_} for keys %$et;
    my $wt = {};
    $wt->{$_} = {} for grep{!$tw->{$_}->{u}} keys %$tw;
    keys %$wt || die "No top level! Circular? ".wdump 3, [sort keys %$tw];
    my @ne = $wt;
    my $i;
    while (@ne) {
        $i++ > 600 && die "join wanders for $i from lines, maybe circular?";
        my @m = @ne;
        @ne = ();
        for $wt (@m) {
            for my $k (sort keys %$wt) {
                my $t = $tw->{$k};
                if (t.n) {
                    my $n = $wt->{$k};
                    $n->{$_} = {} for sort keys %{t.n};
                    push @ne, $n;
                }
                else {
                    #
                }
            }
        }
    }
    J.mo.jes.tower = $tw;
    J.mo.jes.trowl = $wt;
pi/tgw: |
    my $f = Rw indbefore $C;
    
    n t=>1=>C.t,'%fs:14,hs:389'
    my $sa = sub {
        my $d = shift;
        $d = Rw samv $d;
        $d;
    };
    
    
    if (!s.gts) {
        n nog=>32=>" !G",'%hs:757'
    }
    for ([c=>493],[tsc=>689]) {
        my ($k,$hs) = @$_;
        $s.>$k || next;
        my $d = $s.>$k;
        delete d.yam if d.yam =~ /^s.tisle/;
        n "cjam$k",34, ki($d),{hs=>$hs}
    }
    my $lost = s.tsc && s.tsc.src;
    if (!s.wts && !$lost) {
        n now=>22=>" !W",'%hs:457'
    }
    
    
    my $o; # todo tell if we n...
    if ($f && s.wts > f.wts) { 
        # to the above W
        n to => 2=>"f.wt",'%fs:6,hs:238'
        n tof => 21=>" ^".$sa->(s.wts - f.wts)
        $o=1;
    }
    
    if (s.gts > s.wts) {
        # to the ghost of our W
        n tog => 3=>" G ".$sa->(s.wts - s.gts).($lost&&"? "),($lost&&'%sha:4 4 4 486,fs:7')
        $o=1;
    }
    if (!$o) {
        n t=>1=>{}=>'%fs:8,hs:228'
    }
    
indbefore: |
    my $i = C.y.i - 1;
    my $fo;
    until (defined $fo && fo.c.ind + 1 == C.c.ind) {
        $fo = C.y.bal->[$i--];
        last if !$fo;
    }
    
    my $f = fo.c.s;
    $f
pi/gejo: | # the dog leg trowl sketch, optional
    y.at.hs = '388';
    y.at.mt = '5';
    y.at.fs = '9';
    y.at.lh = '0.9em';
    #y.at.geo = 'a100 0 0.1 0.2';
    n gate=>2=>"\n.\n.\n.\n.\n.\n.\nGasm: $s\n\n";
    #$s =~ /\/J$/ || die "nogate: $s";
    my $wt = J.mo.jes.trowl;
    my $tal;$tal = sub {
        my ($d,$wt) = @_;
        join"\n",map{
            ind(join("",("  ") x $d), $_)
        }map {
            "$_".(!keys %{$wt->{$_}} ? "" : do {
                ":\n".$tal->($d+1, $wt->{$_});
            });
        }sort keys %$wt;
    };
    my $s = $tal->(0,$wt);
    Mn(eo=>''=>"\n$s");
    
delopida: |
    D.sc.allthe = join ',', map{_.t} @$N;
More: |
    u allacgts
    del:
        C.sc.soon--;
    you:
        C.sc.you = 1 + $s;
        # etc
        # !
        
    n \'W:Moos,isle:VV'
Moos: |
    J.VV.N = 1;
    u allacgts
    
    
    daloe:
        C.t + 4;
Thiso: |
    n Tides
    
    n Bun
Muoos: |
    n Moos
Pugwei: |
    u allacgts
    n Plugs
    
    shouldWe:
        my $tr = 1;
        my $i = T.isle;
        $i && c&isle && C.t || die "Cno isle/t ".ki $C;
        
        i.f = G&getW,c&isle,C.t;
        unless (i.stop) {
            i.j = G&geT,s.c.isle,s.t,C.t;
            G&puTsj,$i;
        }
        else {
            say "Top level: s.t -> C.t (c&isle)";
            return 1;
        }
        if (0 && !i.j.y) {
            $tr = 1;
            say "pJoint noy: ".ki i.j;
        }
        elsif (keys %{i.j.c}) {
            $tr = 1;
            say "pJoint weighs: ".ki i.j;
        }
        else {
            $tr = 0;
            say "pJ easy ".ki i.j;
        }
        if (!i.f || !keys %{i.f.c}) {
            $tr = 1;
            say "pJoint ".ki(i.j)." must make ".ki i.f;
        }
        elsif (!-f 'w/'.i.f.c.yam) {
            $tr = 1;
            say "pJoint i.f.c.yam MISSING, make it";
        }
        $tr
    
    jound:
        #say "Found! ".ki s.f;
        s.j.y = 0.1;
        G&puTsj,$s;
        
    
    fli:
        my $f = s.f.c.yam || die "Yanotcyam ".ki s.f;
        LoadFile('w/'.$f);
    
    fown:
        s.f.isle && s.f.t || die "fown: ".wdump 3, s.f;
        my $f = s.f.c.yam ||= s.f.isle.'/'.s.f.t;
        my $X = C.sc.X || die "get X ".ki$C;
        G&xery,s.f.sc,$X,{Ii=>'i'};
        !-d "w/s.f.isle" && `mkdir w/s.f.isle`;
        # drops ooI, scrubs Ii: (saves file)
        Rw down $f $s:X;
        G&putW,s.f;
        
    joined:
        return if s.stop;
        #!s.j.c.todo && sayre "How was todo to sleep travel: ".ki s.j;
        delete s.j.c.todo;
        G&puTsj,$s;
    
Plugs: | # make TGW processes, 9d into by isle/something like schemas
    u allacgts
    n UpPg
    
    Pugweidb:
        #G&tyable,W=>'isle,ts:timestamptz';
        #G&tyable,T=>'isle,l,ts:timestamptz';
    
    orb:
        use List::MoreUtils 'zip';
        my @arg = map{ref $_ ? @$_ : split ',',} shift @Me;
        $s = ref $s ?
            "$$s (".join(',',@arg).") values (".join(',',map{'?'}@arg).")"
            : 
            "$s where ".join(' and ',map{"$_=?"}@arg);
        if ($s =~ /^select/i) {
            my ($j,$ba) = G&qh,$s,@Me;
            $ba && die "Many $s ---- @Me";
            sayre "ARGME mis ".wdump 3, [$s,\@arg,\@Me, [zip @arg, @Me]]
                if @arg != @Me;
            $j ||= {do{ zip @arg, @Me }};
            G&decj,$j,'';
            ref j.c && ref j.sc || die "JOS of $s  ".wdump 3, $j;
            $j
        }
        else {
            G&qp,$s,@Me;
        }
    
    sorb:
        my $q = "select * from $s";
        G&orb,$q,@Me;
    
    # header for a W in isle, 
    getW:
        G&sorb,W=>'isle,t',$s,@Me;
    
    # heads together Talking
    geT:
        G&sorb,T=>'isle,l,t',$s,@Me;
    
    # table, a j to put, index columns, other columns
    replace:
        my $j = pop @Me;
        my @ind = split',',shift @Me;
        my @del = map { $j.>$_ || die "NO $_ on ".ki$j } @ind;
        G&orb,$_,\@ind,@del for "delete from $s";
        
        my @ins = uniq @ind, qw't y c sc', @Me;
        @Me = map{ my $v = $j.>$_; /^s?c$/ ? sjson $v : $v } @ins;
        G&orb,\$_,\@ins,@Me for "insert into $s";
    
    putW:
        s.ts = G&qh,<<'' ->{s};
            select now() as s
        G&replace,W=>'isle,t','ts',$s;
    
    # notes states from $s = T.isle, ball of data to join join
    puTsj:
        my $j = s.j||die"noj".ki$s;
        my $o = G&xonly,j.sc,$s,grep/../,keys%$s;
        G&replace,T=>'isle,l,t',s.j;
    
    xonly: %acgt:s c
        my $o = {%$s};
        %$s = ();
        for (@Me) {
            $s.>$_ = $c.>$_;
        }
        $o
    
    xery: %acgt:s c
        my $tt = {map{ref $_ ? %$_ : ($_,$_) }@Me};
        while (my($f,$t) = each %$tt) {
            if (!exists $c.>$f ) {
                delete $s.>$t
            }
            else {
                $s.>$t = $c.>$f
            }
        }
    
DiskTravel: |
    u allacgts
    
    shouldWe:
        my $tr = 1; # yes
        my $i = T.isle;
        $i && c&isle && C.t || die "Cno isle/t ".ki $C;
        
        i.f = 'w/'.c&isle.'/'.C.t;
        unless (i.stop) {
            i.j = 'w/'.s.c.isle.'/J/'.s.t;
            `mkdir -p i.j` if !-d i.j;
            i.j .= '/'.C.t;
            G&fmakund,$i;
        }
        
        if (i.j && -f i.j) {
            $tr = -s i.j ? read_file(i.j) : 0;
            say "Joint i.j weighs $tr";
        }
        if (!-f i.f) {
            $tr = 1;
            say "Joint i.j must make i.f";
        }
        $tr
    
    # flat reiter T log, $s = .../J/parent, @Me = {src:$isle}
    # C.t_src_$isle, on the parent join to the child
    fmakund:
        my @l = map { join '_', s.j, $_, $s.>$_ } grep /../, keys %$s;
        s/_1$// for @l;
        push @l, s.j;
        my $l = {map{$_=>1}@l};
        for (glob "s.j*") {
            next if delete $l.>$_;
            warn "want to RM $_";
            #unlink $_;
        }
        #saybl "Info\n".ki $s;
        `touch $_` for @l;
    
    jound:
        say "Found! s.f";
        `touch s.j` if !-f s.j;
    fli:
        LoadFile(s.f);
    fown:
        my $f = s.f;
        $f =~ s/^w\/// || die "CAnot down out of w/: $f";
        # drops ooI, scrubs Ii: (saves file)
        my $X = C.sc.X || die "get X ".ki$C;
        Rw down $f $s:X;
    joined:
        return if s.stop;
        `cat /dev/null > s.j`;
        saybl ki $s;
    
Traweil: | # uses localeo
    u allvse
    #n DiskTravel
    n Pugwei
    n Plugs
    # ye
    # wants to be a left-right by now, regarding the isles and meta (stop, src)
    
    n \'of:Mo'
    # This.c.isle <-> More.c.isle:
    W 3215:
        #G.glomp++ || G&Pugweidb;
        my $ab = A.J.C;
        c&isle ||= ab.c.isle || die "Noisle top? ".wdump 3,[$C, $ab];
        my $i = T.isle ||= {};
        ab.c.iZle.>C.t = $i;
        
        i.stop = 1 if !ab.c.isle && c&isle; # ab only involking
        
        i.src = c&isle if ab.c.isle && c&isle ne ab.c.isle;
        
        my $tr = G&shouldWe,$ab;
        
        $tr || delete(c&J), delete(C&J);
        $tr && sayre "C.t travels";
        $tr && i.src && die "Cannot diff src s.c.isle/s.t -> c&isle/C.t";
        C.c.time = 6 if $tr;
    
    # ^ or c&ov = 0.8, so it can fall in, general W only mean
    # ov=8 will resume, to give This'W correct link to More'W all the time
    
    J 63: %code:J
        u Traweil
    
    # c to be spires continuing,
    # 
    # st should know about making new D for us,
    #we 8 everyWing already, know where to isle it
    # This'W should look normal
    
    # Every'W should just point to Other'W (+ version, maybe), requiring it 8 somewhere
    # humming clients must attach other trees (they would kMow how)
    # probably embedding in time, universals to bend it together
    
    # exist for a point
    # connects Wscaping/versioning
    #for moving any o 7 out
    #and hitching at the 2 onto another
    ## retreieves header
    #how it is currently held (symp isle, makes aware as you like)
    # the isle/This'W is indexed whole/Wc as opposed to Wsc
    # for the thing applying at a distance, little updates way-cpu asap

    # so W underneath sprawls & tidies, convopool
    # isle hoisted off flattens all the time, possible meta:
    #   the bunch of Wags hoisted into one, clients can dive isle for update
    #   if nothing else gets built in the aggregation
    
    # here in the osc meta wander region,
    # having willed, having it one way or another
    
    scW 74:
        if (my $J = C.sc.J) {
            # make N the recoverable inners if J,
            die wdump 3, $C if !ref $J;
            my ($Y,$V) = map{ J.El.>$_ } Pre=>'Duv';
            my @lv = map { V.rv.do.>$_ } sort keys %{V.rv.do};
            my ($root,@C) = map{_.C} V.rv, @lv;
            C.c.N = [map{
                my $D = G&hup,$_;
                # make normal
                delete D.c.>$_ for qw'J Y V';
                #sayre "D.t came out of osc with X: ".ki D.sc.X if D.sc.X;
                $D
            }@C];
        }
        else {
            # or just point, get W outer/root/rv/C, versioneddie
            # then that can acquire inners later or isle away
            #   (noticing if isle v < W v, maybe)
            #say "Re,member W: C.t ".ki C.c;
        }
    
    # the art shader as a post osc index builder
    # here making code more perl etc.
    isle 747:
        my $sco = $isle =~ /^j/ ? {js=>'ym/jscoi'} : {code=>'ym/conoi'};
        my $i = T.isle;
        
        if (C.c.N) { # we are awake inside
        sayyl " C.t   ist ... ".ki {N=>C.c.N};
        
        my $src = [];
        for my $D (@{C.c.N}) {
            D.y = D.y.cv;
            for (grep{ D.sc.>$_ }keys %$sco) {
                my $coder = $sco.>$_;
                my $v = {};
                my $C = G&hup,$D;
                Rw $coder $C $v;
                D.sc.X && die "D.t al; $_";
                D.sc.X = $v;
            }
            #D.sc.X && D.sc.W && sayre "DscW already had X: ".ki $D;
            if (my $n = D.sc.W) {
                D.t eq $n || die "yuou";
                my $is = C.c.iZle.>$n || die "No $n on iZle: ".ki C.c;
                is.f && is.j || die "Noise ".ki $is;
                
                my $X = G&fli,$is;
                # land Toin but not W
                G&jound,$is;
                
                # wants to be post-spiral-together for our C 
                # knowing which src - now here=C.t is missing
                my $N = Rw sumX $X;
                _.c.from = join'/',grep{defined} D.t, _.c.from
                    for @$N;
                
                D.sc.X = $X;
            }
            D.sc.noXup && sayre("No hoist D.t") && next;
            my $k = "D.t vers";
            push @$src, [$k,D.sc.X];
        }
        
        my $II = C.sc.X ||= {};
        Rw spII $A $II $src;
        }
        
        if (!C.c.N) {
            C.sc.X && die "!N ended up with X.".ki$C;
            C.sc.X = G&fli,$i;
        }
        my $X = C.sc.X;
        my $J = C.c.J;
        if (ref $J) {
            if (my $o = J.at.coil) {
                my $N = Rw sumX $X;
                for my $D (grep{ _.sc.>$o }@$N) {
                    my $way = D.sc.>$o;
                    saybl "C.t Coils D.t via $way";
                    Rw $way $D $N;
                }
            }
        }
        else {
        }
        if (C.c.N) {
            G&fown,$i;
        }
        
        G&joined,$i;
        
This: |
    J.VV.N = 1;
    y.at.coil = "meashourp";
    u allact
    # bang!
    # new
    
    
    
    
    
    and: %meashourp:delopida
        G&peel,'off'
    
    you:
        G&peel,'go'
    n More
    

