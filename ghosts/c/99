Traweil: | # uses localeo
    u allcon
    
    Top:
        # execution, comes with depth unlimits
        n \'W:This,isle:V'
    V:
        # what top wants to know about doing V
    This:
        u howspeak
        n \'set:c'
        and:
            off
        you:
            go
        n More
    # if Top/This:
    n \'of:Mo'
    # This.c.isle adds More.c.isle:
    W 3211:
        c&isle ||= above
        note if c&isle ne above
        c&ov = 0.8 if !travel # because various
        # ov=8 will resume, to give This'W correct link to More'W all the time
    
    
    # J stuff skipped, W level, real W users incur setup then
    
    n \'of:Me'
    # here in the osc meta wander region,
    # having willed
    W 8:
        exist for a point
        connects Wscaping/versioning
        for moving any o 7 out
        and hitching at the 2 onto another
        # retreieves header
        how it is currently held (symp isle, makes aware as you like)
        # the isle/This'W is indexed whole/Wc as opposed to Wsc
        # for the thing applying at a distance, little updates way-cpu asap
        
        # so W underneath sprawls & tidies, convopool
        # isle hoisted off flattens all the time, possible meta:
        #   the bunch of Wags hoisted into one, clients can dive isle for update
        #   if nothing else gets built in the aggregation
    
    # the art shader as a post osc index builder
    # here making code more perl etc.
    
    isle 8:
        continues encoding/indexing *
        @N = encode grep{!.W} 
        # matched things
        # C.c.isle slightly defines how to encode Cings 
        #   it could ensure incoming are compatible with index
        #   
        
        # C is things 
        my $N = [@{C.c.N}];
        # [t=>''=>{W=>t}] .. to feed &st with 
        
            # sc.coil = $stage, aNy sc.$stage = $function
        # this function pulls in many of itselfs from W ^
        # to be spires continuing,
        # ignores on sc.noXup, eg Xiles' content, 
        # 
        # st should know about making new D for us,
        #  ignored (sc.noXup) (Xiles' othering intrograb)
        
        
        if (my $stage = C.sc.coil) {
        }
        
        
        we 8 everyWing already, know where to isle it
        # This'W should look normal
    
    
    # Every'W should just point to Other'W (+ version, maybe), requiring it 8 somewhere
    # humming clients must attach other trees (they would kMow how)
    # probably embedding in time, universals to bend it together
    
    # sense retriever
    Wisle 1:
        
    y.at.invis = 1;
    my $isle = C.c.isle || J.mo.J.at.isle;
    $isle || die "No isledea !? J.name of J.mo.J.name has; ".ki J.mo.J.at;
    my $f = "w/$isle/$s";
    y.at.isle = $isle;
    say "trW; A.J.name - J.name";
    my $moj = J.mo.J;
    moj.at.isle || die "NO isle above? moj.name";
    my $Jd = "w/moj.at.isle/J/moj.name";
    `mkdir -p $Jd` if !-d $Jd;
    my $clue;
    if (J.at.isle ne moj.at.isle) {
        say "moj.name (moj.at.isle)   $s has src over in J.at.isle";
        $clue = "$Jd/${s}_src_$isle";
        say "Gunna leave clue at: $clue";
        `touch $clue`;
    }
    my $jf = "$Jd/$s";
    my $traveli;
    for ($jf) {
        next unless -s $_;
        $traveli = read_file($_);
        say "Travel from $_: $traveli";
    }
    if (!$traveli && -f $f) {
        say "Found $f !";
        n $f =>3,$s,{X=>LoadFile($f)}
        `touch $jf` && sayre "Xuper $f" if !-f $jf;
    }
    else {
        say "Making  $s !";
        die "Cannot diff src with travelineedy $s" if $clue;
        n $s=>W=>
        `cat /dev/null > $jf`;
    }
    saybl "Donel  $jf";
    

