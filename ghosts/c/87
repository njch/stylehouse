stylepap: |
    u alljse
    
    # push to codcoil the paper scope grab to build into the dome
    n pa =>34=><<''
        delete C.c.el;
        with (paper) {
            s = C.sc;
            var r;
            if (C.sc.pa === '3') {
                r = A.bb.pa;
                !r && a.c("no rasmeemmber "+C.t);
            }
            else {
                !s === 'ra' and a.c('nom ra: '+s);
                var src;
                s.src and src = s.src;
                if (!src) {
                    s.jfi ||= 'img';
                    var find = $(s.jfi);
                    !find.length and a.c('no find '+s.jfi);
                    src = $(find).last().attr('src');
                }
                r = new Raster(src);
            }
            s.poes and r.position = eval(s.poes);
            else
            C.sc.pa !== '3' and r.position = view.center;
            s.poxop and r.position.x += s.poxop;
            s.poyop and r.position.y += s.poyop;
            s.sca and r.scaling = s.sca;
            s.b and r.blendMode = s.b;
            s.r and r.rotation = s.r;
            s.opa and r.opacity = s.opa;
            A.W ||= {};
            A.W.ras ||= {};
            A.W.ras[src] = r;
            A.bb.pa = r;
        }
    
pi/pape: |
    C.sc.pa = 'res';
    C.sc.qz = 1;
    if (C.c.thumb) {
        my ($th)=map{_.nj}
        n th=>-thumb=>C.c.thumb
        C.sc.src = th.C.sc.src;
    }
    C.sc.oc = 1;
    Rw papernoise;
    
papernoise: |
    my ($no,$i,$se) = ($1,$2,$3)
        if `uptime` =~ /([\d\.]+), ([\d\.]+), ([\d\.]+)/;
    my $fo = $no - $i;
    shuffle 1, 2, 3 for 1..int($no);
    
    C.sc.src || sayre "no src..";
    C.sc.poxop = -70 * (rand(2) -1.9);
    C.sc.poyop = -70 * (rand(2) -1.9);
    C.sc.sca = 3.421 * rand(3) ^ 2;
    C.sc.opa = 0.6 * (0.5 + rand 0.9);
    C.sc.b = (shuffle 'normal', 'multiply', 'screen', 'overlay', 'soft-light', 'hard-light', 'color-dodge', 'color-burn', 'darken', 'lighten', 'difference', 'exclusion', 'hue', 'saturation', 'luminosity', 'color', 'add', 'subtract', 'average', 'pin-light', 'negation', 'source-over', 'source-in', 'source-out', 'source-atop', 'destination-over', 'destination-in', 'destination-out', 'destination-atop', 'lighter', 'darker', 'copy', 'xor')[0];
    C.sc.r = int(900 * $fo);
    
    C.sc->{$_} = I.d&ron,C.sc->{$_} for grep{C.sc->{$_}} qw'poxop poyop sca opa r';
    
recan: |
    y.at.jslines = 1;
    n blag =>4=>{s=><<''},'%js'
        a.sitandspin()
    
uncan: |
    y.at.jslines = 1;
    n blag =>4=>{s=><<''},'%js'
        paper.project.clear();
    
