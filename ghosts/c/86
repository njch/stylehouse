
SevWo: |
    n Meta
    n Wuts
    
    u allacgts
    
    n writef =>''=><<'',{acgt=>'f,s,append'}
        (my $d = $f) =~ s/\/[^\/]+?$//;
        unless (-d $d) {
            `mkdir -p $d`;
        }
        .
        $s = [$s] if !ref $s;
        my $li = ref $s eq 'ARRAY' ? join("",map{/\n$/?$_:"$_\n"}@$s)
            : die "Wsome other $f type: $s";
        $li = encode_utf8 $li;
        .
        my $wa = {};
        wa.append = 1 if $append;
        write_file($f,$wa,$li);

    u allovse
    n '','','%of:O'
    n J =>35=><<''
        delete at.sc.J if C.c.S;
        # conceal the multiJexits
    
    u allvse
    n '','','%of:Sev'
    # might wanna carebowl em 2-4 to engage scd/em at all
    n root =>582=><<'',{rg=>'ylv,yvl'}
        return unless A.J.most.J eq A.J || A.J.C.c.Wo;
        my $r = Rw scd $rl:vl $rv:lv;
        return unless @{r.z};
        aft { $@ || return; sayre "$@  !~!! ".wdump 9, $r; };
        C.c.em && die'wtf';
        .
        my $em = C.c.em = {};
        em.lines = r.z;
        em.i = @{r.oldz};
        .
        A.Subtle.em = 1;
        A.t&em,6,2;
    
Meta: |
    u allvse
    n '','','%of:em'
    n em =>21=><<''
        em.lines || die "Not lines";
        em.hitime = hitime();
        em.is.W = C.sc.Wid || A.J.id;
        em.is.M = C.sc.Mid || A.J.name;
        em.id = em.is.W.'.'.(0+em.i);
    
    u allsvse
    # split into line forms
    n jslines =>3=><<'',{cg=>'J,em'}
        Rw EmJSlines $J $em $C;
    
    n ux =>3=><<'',{cg=>'em'}
        my $J = G.oin;
        my $M = ['','',{W=>J.id},{z=>em.lines}];
        em.lines = [sjson($M)];
        C.sc.Wc = 1;
        n GW
        # ^ router, W with an .e v
    
    # event feedback (even tee rollistic trickles) donafto, drops
    n eve =>3=><<'',{cg=>'J,em'}
        J.mo.s.al.opt.fole = [Followe=>W=>"life/W/em.is.W\.e"];
        # routes ids[] into All(Oth)
    
    n ressur =>3=><<'',{cg=>'J,em'}
        saybl "Ressurrecting $ressur ...";
        die "zomp $ressur" if $ressur =~ /\W/;
        die "bno JSlines" unless -e "life/W/$ressur";
        `cd life; ln -s ../W/$ressur J/em.id\.c`;
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
        T.whack = 1; # out of em
    
Wuts: |
    u allsvse
    n '','','%of:em'
    n Wc =>446=><<'',{cg=>'J,em'}
        saybl join"\n","Downing em.is.M: em.is.W: ",
            map{!ref $_ ? $_ : wdump 5,$_} @{em.lines};
        I.d&writef,"life/W/em.is.W\.c",em.lines,em.i;
        .
        # is coming soon: (only space or)
        C.c.as = !C.c.os;
        C.c.As = C.c.as;
        C.sc.meta = 1;
        C.sc.speak = 1 if C.c.as;
        C.sc.takeover = 1 if C.c.As;
        saybl "WHITESPACE S em.is.M" if C.c.os;
    
    # inter intros
    n meta =>47=><<'','%cg:em'
        G.Wh->{em.is.W} && return;
        G.Wh->{em.is.W} = A.J;
        my $me = I.d&hup,$em;
        delete me.lines;
        $me = sjson $me;
        I.d&writef,"life/W/em.is.W\.i",$me;
    
    n speak =>48=><<'','%cg:em'
        return if G.Jlone;
        .
        I.d&writef,"life/J/em.id\.c",em.lines;
        .
        my $catch = sjson {y=>J=>id=>em.id};
        I.d&writef,"life/J\.s",$catch,1;
    
    n takeover =>49=><<'','%cg:em'
        -l $_ && `unlink $_` for "life/W/em.is.M";
        `cd life/W; ln -s em.is.W\.c em.is.M`;
    
TeCurve: | # plop W space resolve
    y.at.unit = 1; # e W come by, upper state could kink into curv
    # it pis into I... suu
    J.inV = 1;
    J.V = 1;
    y.ope = 1;
    J.ev.th = "SpaceElvis"; # no where yet...
    
    # hinges open spacecones
    u ReoCur
    
    u curv =>pi=><<''
        zoom 0 1.2
        y    0  0
        x    0  0.02
        curve 0 -0.2
        curve 0.4 0.4
        spin 0.3 2

    y.in = 2;
    # kind of space that is balanced, recurring, cleaning
    # weird mediation between placed J.C and J.root to plop W
    n $C
SpaceElvis: |
    my $M = J.oy.o;
    Mn($_) for @{J.eM||[]};
    J.eM = $M;
    for (A.e&C) {
        # y.unit 
        my $id = _.sc.id;
        if (grep{_.sc.id eq $id}@$M) {
            saygr "Already spaced: $id";
            next;
        }
        sayyl "GOT SPACE ELVIS: C.t: _.t   _.y.cv";
        Mn(_.t=>''=>"Thi _.t",{id=>$id});
        # & id ^
    }
Claw: |
    y.at.shape = 1; # advise e to draw in
    J.VV.V = 1;
    u curv =>pi=><<''
        zoom 0  0.7
        y    0  0
        x    0  0
        curve 0 0.1
    
pi/curv: | # source/be ex
    u GeoSlur
    die "refcurvin" if ref $s;
    y.at.dig = slm 6, dig $s;
    Atime(2)||return;
    
    y.cvil = 1; # cvs leave M yuvis
    Mn($_) for split "\n", $s;
    # ^ fill gaps > 0.1 at 0.1s, or maybe all 0.1s
    # so produce
findupi: |
    if (!ref $J) {
        my $t = $J;
        $J = G.oin;
        my $def =
        n $t
        $J = def.nj;
    }
    my $Ye;
    for ('El/qq/El/Duv') {
        $Ye = I.d&pin,$_,$J;
        last if $Ye;
    }
    my @curv = map {_.sc.J} grep { _.sc.pi eq 'curv'} values %{Ye.tv};
    say "Got TV from J.name for curv: _.name" for @curv;
    if (!@curv) {
        @curv = map{J.El.qq.bb->{$_}} grep{/curv\tJ$/} keys%{J.El.qq.bb};
        say "insyun from J.name for curv: _.name" for @curv;
    }   
    die "many ".wdump \@curv if @curv > 1;
    shift @curv
    
ReoCur: | # inner bracken resolve (for randoms)
    # wants to reach qq... do ^qq/(.+) root reacumin
    # u pi is I art
    # sinky massive spiral space, name system of
    # this is the thin osc superfactor
    # could climb in by V.cvi and atom or blend geos
    #n 'allovse'=>2,<<'','%code:In 4189'
    u allvse
    n '','','%of:Sev'
    n J =>3212=><<'',{rg=>'J,Y,ylv,yvl'}
        # eat, rob, art
        my $host;
        if (C.c.root) {
            $host = 'TeCurve';
            return sayre "topleve C.t is self" if $host eq C.t;
            my ($cur) = map {_.nj}
            n $host =>$C=>$J
            my $wat = cur.El.Duv.ids->{C.sc.id};
            C.sc.geo = wat.sc.geo || die "not foundcurve".wdump $cur;
        }
        else {
            $host = 'Claw';
            my $st;
            $st = Y.stackurv ||= do {
                st.J = Rw findupi $I $J curv;
                st.l = 'self curv';
                st.J ||= do {
                    st.l = "$host curv";
                    Rw findupi $I $J:host curv;
                };
                $st
            };
            my $cJ = st.J;
            $host = "st.l";
            Rw curre $I $J:cJ $Y:cJ.El.Pre $V:cJ.El.Duv $C;
        }
        saybl "$host: C.y.cv       C.t   found  C.sc.geo" if J.V;
        # might wanna crawl
curre: |
    my $cv = C.y.cv;
    my @cvs = sort keys %{Y.cvi};
    my ($li,$ri);
    for (@cvs) {
        next if $_ == 0.9;
        $li = $_ if $_ <= $cv;
        $ri = $_ if !defined $ri && $_ > $cv;
    }
    my ($l,$r) =
        map { _.C }
        map { V.alv->{$_} }
        map { _.y.cv."\t"._.t }
        map { Y.vs->[$_] }
        map { Y.cvi->{$_} }
        grep {defined} $li, $ri;
    my $one = $l || $r;
    $one || die "nothing to grab in J.name".wdump 4, V.alv;
    my $last = one.y.here;
    my $here = {};
    here.cv = C.y.cv;
    I.d&last2here,$last,{},$here;
    my $geo = I.d&here2geo,$here;
    # a little climb means a little hashsame
    C.sc.geo = $geo;
    
GeoSo: |
    # may +atomb? without compare you are dead
    u allacgts
    n last2here =>''=><<'',{acgt=>'last,r,here'}
        here.x  = last.x = r.x if exists r.x;
        here.y = last.y = r.y if exists r.y;
        here.rad = 4*$RADIAN * r.spun if exists r.spun;
        here.zoom = r.zoom if defined r.zoom;
        .
        I.d&atom,$last,$here;
        .
        here.spin = r.curve if exists r.curve; # on the level
        #
        here.x = I.d&ron,here.x;
        here.y = I.d&ron,here.y;
        here.rad = I.d&ron,here.rad;
    
    n atom =>''=><<'',{acgt=>'last,here'}
        # spacin
        here.dist = here.cv - last.cv;
        # twistin spin inherit
        here.spin += last.spin;
        # scale local-local change
        here.rad += here.spin * here.dist * 10;
        # builds rad on rad
        here.rad += last.rad;
        # distort space + more ways, orbital
        # chuck skeletons for mods
        # adapt M meta for what kinda places things want
        # into constellations of high level things
        # atomised hairs
        here.zoom ||= last.zoom;
        here.dist *= here.zoom if here.zoom;
        # and move
        here.x = last.x + (here.rad ? cos(here.rad) : 0) * here.dist;
        here.y = last.y + (here.rad ? sin(here.rad) : 1) * here.dist;
    
    n here2geo =>''=><<'',{acgt=>'here'}
        my $geo = {};
        geo.rad = here.rad;
        # unwind (into...)
        my $o = $RADIAN*4;
        my $swish = $o;
        $swish *= -1 if geo.rad < 0;
        my $i = 0;
        geo.rad -= $swish until
            do {$i++>5&&die"$i muchwind".ki$here;0}
            ||
            $o*-1 < geo.rad && geo.rad < $o*4;
        # pan to hemisphere...
        # from O- is it in the left hemisphere etc
        my $rad = geo.rad;
        my $radleg = -$RADIAN;
        $radleg *= -1 unless $rad < -$RADIAN && $rad > $RADIAN;
        $rad -= $radleg;
        geo.radial = I.d&ron,$rad;
        geo.x = here.x;
        geo.y = here.y;
        geo.ab = '100' if 1; # w=h=100,ab=1
        # transform about
        geo.tro = '0 0.5'; # midleft
        geo.tro = '0 0' if 0; # topleft
        #
        my $fo = sub { (shift() * 100).'%' };
        geo.tro = join' ',map{$fo->($_)}split' ',geo.tro;
        .
        I.d&geo2lin,$geo;
    
    n geo2lin =>''=><<'',{acgt=>'geo'}
        # shove com toeget
        # OR SOMETHING
        # loses its compressibility as csz
        my @am = qw'a? ab  x x  y y  r radial  s scale';
        my @l;
        while (@am) {
            my $k = shift @am;
            my $v = shift @am;
            my $sens = $k =~ s/\?$//;
            push @l, ($sens && $k).$geo->{$v} if exists $geo->{$v};
        }
        my $l = join ' ', @l;
        $l
    
    n ron =>''=><<''
        0.0001 * int(10000*$s)
GeoSlur: |
    u allvse
    n '','','%of:Sev'
    
    n root =>24111=><<''
        # root holds this 0, next any is a thing...
        # squary downy
        my $l = C.y.last = {};
        l.x = C.sc.x||0;
        l.y = C.sc.y||0;
        l.cv = 0.001;
        l.rad = C.sc.rad||$RADIAN;
        l.spin = C.sc.spin||0;
    
    n J =>3213=><<'',{rg=>'J,Y,V,yat',l=>'get here'}
        my $i = Y.kvi->{C.y.k};
        # mapping intents into chain reactions
        # sleeps if prev here same, shifting arms
        # make bouncey land time, things joiN post-Sly if engaged
        if (C.c.root) {
            # roots here is remote, elvis space vectors returning here
            my $Wsp = C.sc.Wsp||'TeCurve';
            #n $Wsp=>$C,$J
            #C.y.here || C.sc.geo || die "$Wsp didnt set geospacei ! ".ki $C;
        }
        else {
            if (C.y.cv == 0.9) {
                die "C.y.k thinks is root: ".wdump 2, [sort keys %{J.bb}];
            }
            my $last;
            if ($i == 0) {
                $last = Y.root.y.last || die "no root ylast";
            }
            else {
                # alv is lv but early, but it doesn't want to be (?)
                # so its place to find last C.y.here for others
                # at is your outgoing awakeness
                # wakeup should haps when src change....
                # the process of this is off
                # & to spirals, potentially...
                # deep[end te data somewhere
                my $lC = Y.vs->[$i-1] || die "nof leftoi $i";
                my $lk = lC.y.cv."\t".lC.t;
                my $llv = V.alv->{$lk};
                $llv || die "No lv left of C.y.k:  $lk ".wdump[V.alv];
                $lC = llv.C || die "nollv $lk";
                $last = lC.y.here || die "bnoi yhere C.y.k   to   lC.y.k \n".ki $lC;
            }
            # eat last, make here here
            $last = {%$last};
            my $here = C.y.here = {};
            # form moves
            here.cv = C.y.cv;
            my $r = {};
            $r->{C.t} = C.c.s if !keys %{C.sc};
            .
            I.d&last2here,$last,$r,$here;
            saybl "Make here: C.y.k:". ki $here;
            .
            # here may inc down compression styles geo is expanded
            if (J.C.c.e eq C.c.s) {
                sayyl "ElvisSpace: A.J.name C.y.k  is holding: ".ki C.c.s;
                C.c.s.y.here = $here;
            }
        }
    
    n J =>3214=><<'',{rg=>'J,Y,V,yat',l=>'wait here'}
        my $here = C.y.here;
        $here || return sayre "NO HERE C.y.k";
        return sayyl "C.y.k  has e geo: C.sc.geo" if C.sc.geo;
        .
        my $geo = I.d&here2geo,$here;
        .
        C.sc.geo = $geo;
        if (J.C.c.e eq C.c.s) {
            sayyl "ElvisSpace: A.J.name C.y.k  is holding: ".ki C.c.s;
            C.c.s.sc.geo = $geo;
        }
    

