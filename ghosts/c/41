r2j: | # interpreter of buzzed puit partiscules r -> j.[cv,t,style]
    my $j;
    my $sing;
    if (J.tt) {
        $sing = 'J_tt';
        (j.cv,j.t,j.style) = $r =~ /^(.*?)\t(.*)\t(.*?)$/;
    }
    else {
        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\s+(.+?)$/;
    }
    defined j.cv || die "$sing no $r    ".ki $j;
    j.s = ar.J.bb->{$r} if ar.J;
    j.nos = 1 if ar.J && !exists ar.J.bb->{$r};
    $j;
Ajr: | # shed A.jr bb io, aimed for J and cv,t (of C?)  send $style,$v
      sub {
          my ($s,$v,$d) = @_;
          my $isv = @_ >= 2;
          my $isd = @_ >= 3;
          my $t = exists ar.t ? ar.t : ar.C.t;
          my $cv = exists ar.cv ? ar.cv : ar.C.y.cv;
          my $r;
          if (J.tt) { # FUTU
              $r = $cv."\t".$t."\t".$s;
          }
          else {
              $s = '%'.$s if $s;
              $r = $t.$s."\t".$cv;
          }
          if ($isd) {
              sayre "delbbl $r  $d   J.name" for 1..5;
              return delete J.bb->{$r};
          }
          defined $v ? 
              saybl "J.name chuck $r     $v  <--  ".J.bb->{$r}
            : saygr "J.name read $r"
              if J.V;
          !$isv ?
            !exists J.bb->{$r} ? () : J.bb->{$r}
          : do {
              J.bz->($r, $v);
              sub { delete J.bb->{$r} } 
          };
      };
jamsc: |
    ar.C = ar.d if ar.d;
    my $t = ar.t ? ar.t
        : ar.j ? ar.j.l
        : ar.C ? ar.C.t : die'not';
    my $cv = ar.cv ? ar.cv
        : ar.j ? ar.j.cv
        : ar.C ? ar.C.cv || ar.C.y.cv : die'noy';
    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {
        my $J = ar.oJ;
        if (my $ljm = J.A.ljm) {
            my $Me = "ar.oJ.ind ar.J.name "
            ." J.A.ljmo <<< J.name  sends:"
            ." $t\t$cv  $ljm";
            sayyl $Me if J.V || ar.J.V;
            push @$ljm, {%$ar};
        }
    }
    J.bz->("$t\t".$cv => ar.s) if exists ar.s;
    for my $k (sort keys %$sc) {
        my $v = $sc->{$k};
        J.bz->("$t%$k\t".$cv => $v);
        ar.C.sc->{$k} = $v;
    }
scd: | # AJ sc looking at an ov (lv) (Y.rv) to given iv - reflect as simp[le
    my $r;
    r.in = @{ov.sc};
    r.out = @{iv.sc}-1;
    r.ay = [r.in..r.out];
    r.z = [@{iv.sc}[@{r.ay}]];
    $r

