pi/kv: |
    return if 7<
    Rw pidepth;
    
    C.sc.nspc = 0.02;
    C.sc.nspc_max = 4;
    
    my ($k,$v) = @$u;
    my $pi = C.c.and && C.c.and.pi || '';
    
    my $sc;
    sc.rad = -1.3 if $pi||1;
    sc.fs = 6;
    sc.hs = 3563;
    n $k,0.2,$k,$sc
    
    Mn($k,0.3,{pi=>$pi,s=>$v});
pi/guess: |
    my $u = $s;
        my $c = {};
        if (!defined $u){
            c.undef = 1;
        } else {
            if (my $ref = ref $u) {
                c.ARRAY = 1 if $ref eq "ARRAY";
                c.HASH = 1 if $ref eq "HASH";
                c.CODE = 1 if $ref eq "CODE";
                c.canpi = 1 if !%$c && $u->can('pi');
                for (qw'A C G T     R   J') {
                      $c->{$_} = 1 if $ref eq $_;
                }
                c.ref = $ref;
            }
            else {
                if (ref \$u eq 'SCALAR') {
                    c.text = 1;
                    c.len = length($u);
                    c.lin = scalar split /\n/, $u;
                    c.b = scalar split /\n\n/, $u;
                    c.number = $u =~ /^(?:\d+\.)?\d+$/;
                    c.wordy = $u =~ /\w+/;
                }
                else { die "wtf is $u" };
            }
        }
     # ^
     # v
     my ($path) = grep { $c->{$_} } qw'canpi ARRAY HASH ref undef text';
     $path = ref $s if $path eq 'canpi';
     $path = 'code' if ref $s eq 'CODE';
     $path ||= 'wtf';
     #$path = 'J' if $wa eq 'HASH' && u.bb;
     # can stick $wa on J.wa for thrashing maths
     # funcy fuzz fields
     # mutating spiral code
     
     Rw pi/$path;
     
dg/kord: |
    Load(<<'');
       lv:
        - ws: dead+4 t+5 name+3 block y+2 c+3 sc+8
       hash:
        - ws: dead+4 pi+2 t+3 y+2 K+2 name+3 r+3 style+1 bb+2
pi/kord: |
    C.c.k ||= ar.m ? ar.m->[0] : C.c.pi;
    my $map;# = Rw muck $pin=dg/kord/C.c.k;
    $map = G.diigco ||= Rw dg/kord;
    $map = $map->{C.c.k};
    $map || die "no C.c.k  ".wdump 2,$C;
    $map = {found=>$map};
    my ($N) = values %$map;
    my ($in) = @$N;
    
    my @in = in.ws ? split ' ', in.ws : die "how $in";
    
    my $yin = {};
    my @ord;
    for (@in) {
        my ($t,$i) = split /\+/, $_;
        my $y = {};
        y.in.sc.>$1 = $2 while $i=~s/(\w+):(\S+)[,\$]//smg;
        # same^v 
        y.thy = $i if $i =~ /\d+/;
        $yin->{$t} = $y;
        push @ord, $t;
    }
    
    my $r = {map{$_=>1} sort keys %$s};
    my @r = grep { delete($r->{$_}),1 if exists $r->{$_} } @ord;
    push @r, sort keys %$r;
    
    for (@r) {
        my $y = $yin->{$_}||{};
        Mn($_ => $y, {pi=>'kv',s=>[$_=>$s->{$_}]});
    }
    
pi/vs: |
    C.sc.nspc = 0.04;
    y.lumfa = 0.2;
    y.limn = 0.4;
    
    Rw pi/head;
    
    my $i = 0;
    Mn($i++=>'',{pi=>'lv',s=>$_}) for @$s;
pi/lv: |
    C.sc.nspc = 0.04;
    C.sc.nspc_max = 2;
    y.limn = 30;
    C.sc.pwth = 'somewhere';
    
    Rw pi/head;
    
    #Jn(lv=>0.1=>{s=>'lv'},'%fs:34,hs:3892,ml:-0.9em,mt:-2em');
    #$u = {wtf=>[map{unico($_)}4300..4305]};
    #u.c.etc = {mil =>pond=>exp=>[qw'exp re']};
    
    Rw pi/kord lv;
    
    #Jn(it=>0.2=>{pi=>'text',s=>wdump(2,$s),cv=>0.8},'%opa:0.3');
pi/keys: |
    Mn("ke__$_" => {}, {pi=>'text',s=>"$_,"}) for sort keys %$u;
pi/HASH: |
    my $si = keys %$u;
    y.limn = 3;
    y.limn = 9 if C.t eq 'sc';
    C.sc.nspc = 0.02;
    #y.lumfa = 2;
    n si=>1,$si, '%hs:8378,fs:4'
    
    n Bo => 0.11, '{',"%fs:7,ti:C.y.spc"
    
    J.d.y.spc < 0.05 && return
        n ends=>2,'@','%hs:6984,ml:-0.3em'
             
    n oB => 0.89, '}','%fs:7';
            
            # 3
            Rw pi/kord hash;
pi/ARRAY: |
    y.limn = 3;
    C.sc.nspc = 0.01; 
    my $cv = J.cv ||= 0.3;
    my $si = @$u;
    
    n si=>1=>$si=>'%hs:8378,fs:4'
    
    n Bo=>11=>'['
    n oB=>89=>']'
            
    J.C.y.spc < 0.07 && return
        n ends=>2=>'@'=>'%hs:6984'
            
    $cv < 0.2 && return;
            
            my $i = 0;
            while (exists $u->[$i]) {
                my $uu = $u->[$i];
                
                
                Mn('['.$i => {}, {pi=>'kv',s=>['['.$i,$uu]});
                $i++;
            }
pi/code: |
    Jn(code=>1=>'&','%hs:389');
pi/text: |
     J.cv < 0.4 ?
         Rw pi/foldytext
     :
     J.cv < 0.7 ?
         Rw pi/boxtext
     :
     J.cv < 0.8 ?
         Rw pi/lines
     :
     Rw pi/fulltext
pi/foldytext: |
    C.sc.nspc = 0.01;
         $s =~ s/\n/↯/g;
         
         my $tev = int(J.cv * 200); # 0.4 = 100
         if (C.c.si > $tev) {
             $s = ($s=~/^(.{$tev})/s)[0];
         }
         else {
             delete C.c.si;
         }
            
         if ($s =~ /^\d{10,11}(\.\d*)?$/) {
             Jn(timestamp => 0.1 => {pi=>'now',s=>$s})
             && return;
         }
         
         J.bz->('line 0.1' => "$s",
                '%css' => "background:rgba(200,30,80,0.3);color:#3f3;"
                    ."font-size:70%");
pi/boxtext: |
     C.c.si = length($s);
     
     Rw pi/foldytext;
     
     my $ni = J.c.lin if C.c.lin > 1;
     my $bi = J.c.b if C.b > 1;
     
     exists C.c.si &&
     n 'si/l',2,"C.c.si",{css=>"color:#b89;font-size:50%;position:absolute"}
     
     $ni &&
     n 'si/n',2,"$ni",{css=>"color:#fff;font-size:50%;position:absolute;margin-top:1.4em;"}
     
     $bi &&
     n 'si/b',2,"b$bi",{css=>"color:#f89;font-size:50%;float:left;left:-1em"}
     
            if (J.cv < 0.7 && $s =~ /^(# \d.+?)↯/) {
                n line =>1=>$1=>{css=>"background:rgba(200,30,80,0.3);color:#3f3;font-size:70%"}
            }
pi/lines: |
    my @lines = split "\n", $s;
    y.cvil = 1;
    y.at.si = @lines;
    n lines => 1 => y.at.si
    my @cv = map{$_*0.001} 1..20;
    Mn(line =>shift @cv,{pi=>line=>s=>$_}) for @lines;
pi/line: |
    # nothing, or approximatons
pi/fulltext: |
    C.sc.nspc = 0.04;
    C.c.pwth = 'somewhere';
    sayyl "Wegot ".wdump [J.cv,$s];
    # 7
    my @tex = split /\n/, $s;
    
    my $surge = int(100 * (J.cv - 0.7));
    # add interesting o to tex 0.7ishs as surge goes
    (my $one, my @o) = @tex if J.cv < 0.8;
    @tex = $one if @o;
    my $urge = $surge / 2;
    $urge = 0; # TODO colours and
    for (@o) {
        last if @tex >= $urge;
        push @tex, $_ if /^#/
        || /R\./
        || /\-\>/
        || /w\ /;
    }


    my $lim = ";height:10%;z-index:-5;overflow-y:scroll" if @tex > 19;
    $lim .= ";background:rgba(70,40,0,0.3);" if J.cv >= 0.8;

    my $fs = int(50 + $surge * 7);
    $fs = "font-size:$fs%;";

    my $se = join"\n", @tex;
    n line=>0.1=>{s=>$se}, {tag=>pre=>css=>"margin:0.2em;background:rgba(30,30,60,1);$fs-webkit-filter:hue-rotate(80deg);$lim"}
pi/vimcolor: |
    my $string = shift;
    my $h = dig($string);
    my $k = "vimcolor-$h";
    H.r.gest->($k, sub {
        use Text::VimColor;
        my $syntax = Text::VimColor->new(
            string => $string,
            filetype => 'perl',
        );
        return $syntax->html;
    });
    #my $s = $G->vimcolor($u);
    #$s =~ s/^(<span) (class="synComment">.+?)(<\/span>)/$1 style="font-size:170%;" $2$com$3/;
    
doc: |
     if (H.name eq 'D') {
        return "";
     }
     
     my $meta = {};
     meta.y = 'doc';
     meta.id = mkuid;
     meta.hol = H.ol;
     meta.hitime = hitime;
     
     my $or = {%$ar};
     or.G = gp $G;
     my $en = wdump($or);
     $en =~ s/^\s+//sgm;
     
     my $m = {};
     m.hol = H.ol;
     m.hitime = hitime;
     m.Fscrape = Rw Doc/Fscrape;
     my $k = m.Fscrape->[2]->{point};
     
     my $f = $F[0];
     m.ar = join',',sort keys %{f.ar};
     m.en = $en;
     
     
      $G->tai("meta.y/meta.id\.c", $m);

      my $tinymeta = {map{$_=>$meta->{$_}}qw{id y}};
      # tas many, eg W/this   and it all joints up
      $G->tas("meta.y", $tinymeta);
     
     # J up zee, store in G.swamp here
     # spurt swamp zip & cargo
     # someone asks this Hid (sleep mode)
     # availing benignities before and after the fact)
Doc/Fscrape: | # prop up from knowings
     my @fs;
     my @iF = @F;
     shift @iF for 1..2;
     for my $F (@iF) {
         my $f;
         f.K = F.K;
         f.point = F.point;
         if (!@fs) {
             G.doc.Fknow->{F.id} = $F;
         }
         f.id = F.id if G.doc.Fknow->{F.id};
         f.id ||= '?'; # tracable from near id
         f.intr = {map{$_=>gp(F.intr->{$_})}keys %{F.intr}} if F.intr;
         
         push @fs, $f;
     }
     \@fs
Doc/exit: | # watch things leave
     my $y = 'doc';
     my $l = sub {
         sayyl "DOC         slwing $y =>  :::: $_[0]";
         my $m = shift;
         Rw Doc/exity $J $m;
     };
     $G->ily($y, $l);
       
Doc/exity: | # receive something that left
     my $ci = djson $m;
     my $cc = $G->tri("ci.y/ci.id\.c");
     fixutf8($cc);
     my $cd = djson $cc;
     
     cd.en = eval "my \$VAR1; cd.en; \$VAR1";
     die $@ if $@;
     
     my $t = "ci.y/ci.id";
     J bz $t 0.1 $cd, '%ou'=>'fstat', '%ts'=>cd.hitime

