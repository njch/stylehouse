jive: | # soon has returned so it cIsOn
    my $J = G.oin;
    n ar.J.name =>''=>{IsOn=>1,%{C.c},time=>6}
CsE: | # collasp C.c.e& tube, decode line, gives E
    my $C = $C;
    my $z = [];
    while ($C) {
        push @$z, $C;
        $C = C.c.e;
    }
    my ($m,$E) = [];
    ($C,@$m,$E) = @$z;
    $E = pop @$m if !$E;
    die "No E".wdump $z if !$E;
    
    # interesting maps, exfolat:
    E.c.z = $z;
    E.c.m = $m;
    
    # & any
    if (!E.c.us && E.c.s =~ /^\{/) {
        E.c.us = eval{djson E.c.s};
        die "KGAO: $@\n\n cs: E.c.s" if $@;
    }
    return $E
GW: | # assume G W, router, uxvis nestle into GW/W... via om & CsE utbing
    J.A.III = ['G/T/Sav'];
    y.at.jslines = 1;
    y.at.eve = 1;
    J.ev.th = 'closeline';
    y.at.Mid = "G-J.mo.s.C.c.s";
    y.at.Wid = J.mo.s.id;
    
    n skfdo =>3=> "\$('#ux').append('<ww id=\"".y.at.Wid."\" style=\"position:absolute;height:100%;width:100%;background-color:hsla(118.8, 50%, 30%, 0.1);pointer-events:none;\" title=\"".y.at.Mid."\"></ww>');",'%js'
    
    n rmold =>4=> "\n\$('ww[title=\"G-Sl\"]').not('#".y.at.Wid."').remove();",'%js'
    
    n $C
    
threes: | # Sav Sav Sav
    u allvse
    # negotiate 
    n '','','%of:oJ'
    n J =>344,<<''
        # here before we could be interrupting
        my $isJ = sub { my $J = shift; ref $J eq 'HASH' && J.bb };
        if (A.J ne $J) {
            # what we are holding out as .e and .s helps it leave
            A.ztime = 6 if exists C.c.e;
            sayre "THosught of A.J.name  holds  J.name  ".ki C.c if A.V&V;
            return;
        }
        unless (exists C.c.e || $isJ->(C.c.s)) { # subscribe maintain there
            say "threesorbtion: A.J.name to J.name"
                ." is not holding e or sJ" if A.V&V;
            # absorb self Cing
            T.not = 1;
            return;
        }
        my $S = C.c.s;
        my $E = C.c.e;
        saybl "In s C.t: E.t     ".ki(E.sc) if A.V&E;
        sayre " unable to count self ?" if C.c.s eq $J;
        die "thoughts of a thous" if A.J ne $J;
        if (!exists C.c.e) {
            # be thing=>W=>other, later
            C.c.IsOn || return do {
                say "Comebacking J.name with C.t..." if A.V&V;
                Rw wayt $J $C $d=0.01 $p=jive;
                T.not = 1;
            }
        }
        # no J being tricks for handulation, event energy
        A.Iso.th = 1;
        delete A.Iso.oJ;
    
    n '','','%of:th'
    n J =>4,<<''
        my $ar;
        ar.A=$A;ar.G=$G;ar.C=$C;ar.T=$T;ar.J=$J;
        C.c.e ?
            Rw threve
        :
            Rw thank;
        if (T.oke) {
            die "thoughts of a thous" if A.J ne $J;
            delete A.Iso.th;
            A.Iso.oJ = 1;
            A.ztime = 6;
            return sayyl "Tanking into J.name";
        }
        T.not = 1;
    
    # some
threve: | # nonself sends you (the mount...) (C.c.e)
    my $J = A.J;
    my $pin = J.ev.th || 'hopend';
    say "threeevent J.name !-> $pin" if A.V&E;
    # eg openevent means J opens to Trabitation for events
    Rw $pin + $J;
openevent: | # $e, join Followe to Trabit as an event
    die wdump $C if !ref C.c.e;
    saybl "FOund event for C.t called C.c.e.t";
    n Trabit=>$C
closeline: | # event end (following few wires together)
    # go from holding to referencing each other, adapt 
    # End C can reach further beside itself
    # the strand should collapse hierarchy upwards
    # see Sev for limited channels
    my $E = Rw CsE $C;
    # ids are brain tickets
    if (A.V&Ecl || 1) {
        sayyl " - _.t   _.y.cv  _.c.s :: _.c.e" for @{E.c.z};
    }
    if (!E.c.us) {
        return Rw Elis + $E;
    }
    # trail piled up to eventual/original Ece=Cevent(cs={jsonform})
    # because from O we get cJ 9er, scJ 6er
    # so cJ groups and scJ is for s (pi instruct)
    # any anything along the bead chain (J), would be correspondant
    # make
    Rw zyeuter $A $C $J $E;
    # wants ope Mn
    my $n = ++J.ieuye;
    die "refCcstavbib".wdump 4,[$E] if ref E.c.s;
    n travel=>($n * 0.1)=>{pi=>line=>s=>E.c.s}
    # comeback &, watching whatever Norgs pha cones into time
    #n done=>($n * 0.1)=>{s=>"Delivered to ..."}
zyeuter: | # via closeline on handling Trabit, resolve into Giddiness pile G.Wh, may network
    # z is Croute of energy from event listener
    # u is decoded event hash
    my $u = E.c.us;
    # send on with $C, next closeline shall re idi, maybe redime asapish
    # te .e modalism focuses on how to recursion
    # the line/pipe compresses as it substrates certainly
    # wants can do as J 8, fishing/finishing zom
    # could fork & do asap but rezoom results sluggishly
    # for an oozey process that writes small high quality about etc.
    ref u.ids eq 'ARRAY' || die "Quackvent: ".wdump $u;
    sayyl "Routing J.name: C.t" if A.V&V;
    my $res = sub {
        my $id = shift;
        # idyl || G.Wh
        G.Wh->{$id} || G.W->{$id};
    };
    my $oth;
    # v should maybe just C pipeline ($z)
    u.idi ||= 0;
    my $i = 0;
    for my $id (@{u.ids}) {
        my $oJ = $res->($id);
        my $ta;
        if ($i == 0) {
            $oJ || die "alien space going $id";
            $ta = "Got this G";
        }
        elsif ($oJ) {
            $ta = "Would in";
        }
        if ($oJ && u.idi == $i) {
            u.idi = $i+1;
            $oth = $oJ;
            $ta .= " ~Routo";
        }
        my $name = $oJ ? oJ.name : "UNKNOWN";
        sayyl " ^ $id: $name    $ta" if A.V&V;
        last if $oth;
        $i++;
    }
    $oth || die "no others ".ki $u;
    sayyl "NExt other: oth.name" if A.V&V;
    my $oJ = $J;
    if (my $J = $oth) {
        # e stackin, very end has anoth stackin that we travel & do
        u.idi = $i+1;
        n J.C.t,$C,$oJ
    }
    
hopend: | # event end,
    my $E = Rw CsE $C;
    C.c.e = $E;
    T.oke = 1; # does pin
thank: | # J, as self consuming other, s=other, !e
    # I.d&take,$s
    # does its own phasing
    say "thank J.name ! ";
    my $oJ = C.c.s;
    ref $oJ && oJ.bb || die "NoJ:".ki $oJ;
    my $so = J.oJ->{oJ.name} ||= {};
    # mong beans
    # is {M:name,W:id} coupling, so pi is {file:g/c/1} etc
    my $Y = oJ.El.Duv;
    my $rv = Y.rv;
    if (@{rv.sc}) {
        sayre "J.name SLI!P!P!ING SC !!! !!! !!!" for 1..5;
        sleep 4;
    }
    if (rv.i eq so.rv.i) {
        say "J.name receiving same oJ.name";
        return;
    }
    so.rv = $rv;
    my $N = [@{rv.c}];
    # get that banjo
    @$N = Rw humms $J $N wongui _;
    @$N = Rw humms $J $N notnotjs _;
    my $S = Rw humms $J $N jscoi;
    my $sc = [@$N];
    #sayyl "J.name from oJ.name:\n". 
    #Rw ZNews $sc $nov=1;
    # feed also cones?
    n $_ =>''=>{pi=>pane=>s=>$S->{$_}} for sort keys %$S;
    # panes

