    
Jam: | # idless, uppins, some time
    u allovse
    n \'of:O'
    
    n sel =>381=><<''
        delete at.c.id;
        sayyl "Clipped: ".ki $at;

    u allvse
    
    uppins 621218189: %code:J,v:J,rg:pin
        my $to = $J;
        $to = to.mo.J;
        to.pins.>$pin ||= 1;
        if ($J eq $to) {
            G.oin.inJ.>J.name = $J;
        }
        if ($J eq G.oin) {
            Rw wayty $J $p=Pins;
        }
    
    J 434: %code:oJ
        $J = C.c.J = C.sc.J;
        J.name || die "WNO ".wdump 4, $C;
        # TODO: soft acuminy over \d esp. until .bb or something
        A.mo.Js->{J.name} = $J;
        # A falls
        # A.mo exits
        # J.A persists
        J.A.first ||= hitime();
        if (C.sc.W && G.oin ne $J) {
            my $lev = G.oin.A.tid;
            if (J.A.tidi && (J.A.tidi + 3) > $lev) {
                A.ztime ||= 6;
            }
            else {
                J.A.tidi = $lev;
            }
        }
        sayre "same A.J.name inside J.name" if A.J eq $J;
        if (exists C.sc.pi) {
            sayre "JiternotAJ J.Jiter.name ne A.J.name" if J.Jiter ne A.J;
            die 'pimostJ'if J.most.J eq $J;
        }
        else {
            die 'esel'.wdump [J.C, J.most.J.C] if J.most.J ne $J;
        }
        A.ztime ||= 6;
        A.time && sayre "Had atime";
        A.time = sub { # A.t& cover, serve single digit ad hocs, like 2
            my ($JJ,$q) = @_; die"JTIMEJ" if $JJ ne $J;
            A.ztime >= $q
        };
        if (C.sc.pi) {
            J.A.d = J.Jiter.A.d + 1;
            J.ind = join '  ', ('') x J.A.d;
            J.name = "J.A.d. C.c.pi*C.t";
            J.d = $C;
            A.ztime = 6 if A.ztime < 6;
        }
        J.C = $C;
        A.talk .= " J: J.name";
Gum: |
    ar.m || J.done++ && return;
    
    my @h = ar.m ? map{s/-/ /sg;$_}@{ar.m} : die "hi".(
       Ws=>
       Goat=>Goh=>
       # 'Gub',
       'Dub',
       "Doof"
    );
    
    G&wraf,'proc/start',$_ for grep{say "L:oad: $_"} 
        map{"$$: perl got $_ 4 b"} @h;
    

    
Gun: |
    Rw forked v;
    Rw forked jes:styclick;
    Rw forked jes:stylext;
Gub: |
    u urw
    y.at.anch = 'Noteal';
    soyt 21:
        five five
    Rw PSF;
    
Dub: |
    u urw
    u UpPg
    
    J.lA=
    n s=>''=>{}
    # #
    Rw Code;
    
    Atime(2);
    
    m exit=>[-dot=>0.02],{},'%hs:594'
    m $_=>[-doJ=>0.04],{},'%hs:896' for qw'JJ PSF';
    
    Mn($_) for @{J.ro.sc.M||[]};
    
    
    J.VV.N = 1;
    #my $j = G&A,'S';
    #n Rec=>$C
    
PSF: |
    u urw
    J.VV.N = 1;
    my $j;
    for (`ps faux | grep perl`) {
        next if /grep perl/;
        my ($user,$pid,$cpu,$mem) = split /\s+/;
        my $p = $1 if /\|(.+)$/;
        $j .= "$pid \t $cpu  $mem \t !  $p\n";
    }
    n date=>0.032=>`date`,'%fs:66,blr:9,opa:7,hs:394'
    n ps=>-pre=>$j
Rec: | # batchy you, web
    #u urw
    u Sugd
    u AmPg
    J.ev.o = 'SpaceFlos';
    J.ev.opl = 'fiew';
    
    Atime(2);
    
    n s=>''=>t
    
    for ( e&C ) {
        sayyl "Rec receives : ".ki $_;
    }
pi/fiew: | # Rec Receiving
    sayyl "Pi J.name receives  some .... ".wdump 3, $s;
urw: | # the pointyclick, curved probablW, %dos do w
    n ReoCur
    u allvse
    n seolu =>32,<<'','%code:U,v:J'
        J.oy.at.ux = 1;
        J.oy.at.oWl = 1;
        J.ev.th ||= 'middle';
        J.ev.li ||= 'climbos';
        
Code: |
    y.at.cssdel = 'transform';
    ###
    G.edit ||= 'Dub';
    n edit=>0.02=>'@'=>'%dos:flse,op:J/se/cod,to:!,fs:40'
    n edit=>0.02=>'~'=>'%dos:flse,op:J/se/cod,to:!,fs:40'
    
    if (J.se.cod) {
        n 'G/edit'=>[-cde=>'1-2']
        n G.edit=>[-cde=>'2-6']
    }
    
CodeMirror: |
    # do in iframe
    n Headstuff=>2=><<''
        <script src="../lib/codemirror.js"></script>
        <script src="../mode/xml/xml.js"></script>
        <script src="../addon/dialog/dialog.js"></script>
        <script src="../addon/search/searchcursor.js"></script>
        <script src="../addon/search/search.js"></script>
        <style type="text/css">
              .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}
              dt {font-family: monospace; color: #666;}
            </style>
        </head>
flse: | # click data fusilagery
    my $r = E.c.hC->[-1];
    if (r.sc.to) {
        r.sc.op || die "nop";
        my $o = I.d&pin,r.sc.op,$A;
        if (r.sc.to eq '!') {
            sayyl "! op to r.sc.op, was: ".
                I.d&pon,r.sc.op,$A,!$o;
        }
        else {
            I.d&pon,r.sc.op,$A,$o+C.sc.to;
        }
    }
    else {
        sayre "How to hold ".wdump 2, $r;
    }
    #sayre "Have flse click: ".wdump 2, $r;
pi/cde: |
    my $he = $s = /\// ? $s : "G/way/$s";
    my $se = G&pin,$he,$A;
    
    my $sc = G&peel,'%cod:perl,dig:steve,dos:upcde,width:42,ab';
    sc.height = C.y.spc * 10;
    n C.t =>1 =>$se,$sc
    
    C.sc.cssdel = 'transform';
upcde: |
    sayre "Upacode J.name: C.t - E.t" for 1..4;
    
    my $t = e&hC ->[-2];
    
    #Rw talkzyh;
    sayyl ":Elvis: ".ki e&us ;
    for (A.us&code) {
        if ("" eq $_) {
            # schedl, sewop #
            saybl "Blank thing";
        }
        else {
            
            my $E = e&us;
            E.t = t.t;
            E.c.s = $_;
            
            Rw Gohup $J $E;
            # goh wind, 
            my $pin = t.c.s;
            say "Upping $pin ---";
            I.d&pon,$pin,$A,$_;
        }
    }
    

