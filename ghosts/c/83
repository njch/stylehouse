pi/pane: |
    #u perCcsomethingtracepha
    n $_ for map{values %$_}values %$s
    
threes: | # Sav
    u allvse
    
    n '','','%of:oJ'
    n J =>344,<<''
        # here before we could be interrupting
        my $isJ = sub { my $J = shift; ref $J eq 'HASH' && J.bb };
        if (A.J ne $J) {
            # what we are holding out as .e and .s helps it leave
            A.ztime = 6 if exists C.c.e;
            sayre "THosught of A.J.name  holds  J.name  ".ki C.c if A.V&V;
            return;
        }
        unless (exists C.c.e || $isJ->(C.c.s)) { # subscribe maintain there
            say "threesorbtion: A.J.name to J.name"
                ." is not holding e or sJ" if A.V&V;
            # absorb self Cing
            T.not = 1;
            return;
        }
        my $S = C.c.s;
        $S = {name=>"An: C.c.s"} if !ref $S;
        saybl "In s A.J.name: J.name   ".ki(C.c.e)
            ."   unto  S.name     ".ki $C if A.V&V;
        die " unable to count self ?" if C.c.s eq $J;
        die "thoughts of a thous" if A.J ne $J;
        if (!exists C.c.e) {
            # be thing=>W=>other, later
            C.c.IsOn || return do {
                say "Comebacking J.name with C.t..." if A.V&V;
                Rw wayt $J $C $d=0.01 $p=jive;
                T.not = 1;
            }
        }
        # no J being tricks for handulation, event energy
        A.Iso.th = 1;
        delete A.Iso.oJ;
    
    n '','','%of:th'
    n J =>4,<<''
        my $ar;
        ar.A=$A;ar.G=$G;ar.C=$C;ar.T=$T;ar.J=$J;
        C.c.e ?
            Rw threve
        :
            Rw thank;
        T.not = 1;
    
    # some
thank: | # J, as self consuming other, s=other, !e
    # I.d&take,$s
    # does its own phasing
    say "thank J.name ! ";
    my $oJ = C.c.s;
    ref $oJ && oJ.bb || die "NoJ:".ki $oJ;
    my $so = J.oJ->{oJ.name} ||= {};
    # mong beans
    # is {M:name,W:id} coupling, so pi is {file:g/c/1} etc
    my $Y = oJ.El.Duv;
    my $rv = Y.rv;
    if (@{rv.sc}) {
        sayre "J.name SLI!P!P!ING SC !!! !!! !!!" for 1..5;
        sleep 4;
    }
    if (rv.i eq so.rv.i) {
        say "J.name receiving same oJ.name";
        return;
    }
    so.rv = $rv;
    my $N = [@{rv.c}];
    # get that banjo
    @$N = Rw humms $J $N wongui _;
    @$N = Rw humms $J $N notnotjs _;
    my $S = Rw humms $J $N jscoi;
    my $sc = [@$N];
    #sayyl "J.name from oJ.name:\n". 
    #Rw ZNews $sc $nov=1;
    # feed also cones?
    n $_ =>''=>{pi=>pane=>s=>$S->{$_}} for sort keys %$S;
    # panes

threve: | # nonself sends you (the mount...)
    say "threeevent J.name ! ";
    my $J = A.J;
    if (my $pin = J.ev.th) {
        sayyl "Fuyndering $pin in J.name";
        Rw $pin + $J;
    }
    else {
        sayyl "FOUND EVENT ! ".wdump 2,[
            C.t,C.y,C.c,C.sc,
            "####",
            "C.c.J.name  on   A.J.name",
        ];
    }
    
jive: |
    my $J = G.oin;
    J.V = 1;
    n ar.J.name =>''=>{IsOn=>1,%{C.c},time=>6}

