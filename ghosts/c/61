lod/2:
   newwave: | # THE TAKER
    Rw Run;
    saygr "YEYEEEEEEEEEEEEEE";
    return 1;
recur: |
     Mojo::IOLoop->recurring($d,$cb);
Run: |
    # arrived from newwave:
    #  perl G/on/wag eats a wormhole of way
    #  Z/1/expro
    #  Z/5/zoc
    #   Z/1/exprob     names    lifes if ^[sh]
    #   Z/5/loD  way loadc w/c, extends way with lod/$name hash
    #   Z/5/zurc  Rw newwave || do { Rw zoybracken, Rw fresh_init }
    
    # to make more
    # wagging wormhole and w/c are one
    # intention can open it for itself
    # the z executable points ARGV points to w/*s to apply on top of each other
    # as a kind of u that gains meaning as it receives layers of language
    # so behaviour can eat the rest of its specuity
    
    my $G = Rw Gto;
    
    my $cb = sub {
        Rw Many;
    };
    Rw recur $d=1 $cb;
    
    sayyl "YEP";
Many: |
    $G || die;
    my $J = G.oin;
    if (!$J) {
        my $t = "One";
        $J = Rw Jto $name:t;
        my $sc;
        sc.J = $J;
        Rw jamsc $J $t $cv=0.3 $s:t $sc;
        G.oin = $J
    }
    n One=>0.3=>{J=>$J,time=>6}
    
    my $y = G.Many||={};
    y.i++;
    my $t = hitime;
    y.la->{$t} = 1;
    sayyl "many y.i"; 
One: |
    sayyl "Doing J.name stuff...";
    n theS=>1=>{pi=>'cfile'=>s=>"life/S\.s"}
    J.V = 0;
Gto: |
    my $G = $G;
    G.w = sub {
        my ($pin,$ar)=@_;
        my $D;
        D.point = $pin;
        D.ar = $ar;
        D.name = join ' ', D.point, sort keys %{D.ar};
        D.sign = "Z";
        D.talk = "D.sign D.name";
        
        D.bab = G.way->{$pin};
        if (!defined D.bab) {
            if ($pin =~ /\//) {
                D.bab = fwind(G.way,$pin);
            }
            if (!defined D.bab) {
                sayre "Not findin D.talk";
                return;
            }
            else {
                #say "Trick shot: $pin"
            }
        }
        else {
            #say "Shot: $pin";
        }
        
        my $Z = $G->Doming($D);
        G.randomtask->() if G.randomtask;
        my $r; eval { $r = [ $G->D($D) ] };
        $G->Done($Z);
      
        if ($@) {
            my $ne = "Z Z.inter\n$@";
            $@ = $ne;
            D.nodie || die $@;
            $@ = "";
        }
        return wantarray ? @$r : $r->[0];
    };
    $G

