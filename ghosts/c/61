lod/2/newwave: | # s
    G.IIII = ['G/T/Remy','G/T/Eel'];
    Rw Run;
    saygr "YEYEEEEEEEEEEEEEE";
    return 1;
lod/1/newwave: | # safe
    G.IIII = ['G/T/Wild'];
    Rw Run;
    saygr "YEYEEEEEEEEEEEEEE";
    return 1;
recur: |
     Mojo::IOLoop->recurring($d,$cb);
timer: |
    Mojo::IOLoop->timer($d,$cb);
    return;
wayt: |
    delete ar.d;
    delete ar.p;
    my $cb = sub {
        Rw $p;
    };
    Rw timer $d $cb;
    
waito: | # refresh vector in a post e swarm catchup way, without e, departs call stack
    #say "Comebacking J.name with C.t...";# if A.V&V;
    my $d = ar.d || 0.03;
    my $p = ar.p || 'waited';
    my $K = "ar.p ar.d J.name"; # request comp
    my $queued = J.waito->{$K};
    saygr " waito $K     the C.t  ".($queued ? "again":"") if $queued;
    return if $queued;
    J.waito->{$K} = 1;
    Rw wayt + $K $d $p;
    
waited: | # refresh soon has returned so it cIsOn, a hicup of order clasps e noise
    ar.K && say("Back to ar.K") &&
        delete J.waito->{ar.K};
    # how much exactly... arg scuttle lots, mind moires, eddying structures
    #my $c = {%{C.c}};
    #delete c.e;
    my $c;
    c.W = ar.J ? ref ar.J ? ar.J.name : ar.J : ar.W || die "say what W to waited";
    %$c = (%$c, %{ar.c}) if ar.c;
    my $J = G.oin;
    n c.W =>''=>{%$c,time=>6}
loopfourby: |
    Rw loopby + $b=4;
loopby: |
    my $p = ar.p || 'Top';
    map {
      $_ *= $b || 4;
      Rw wayt + $d:_ $p;
    } 1..$d;
vortex: |
     my $m = ar.m||[];
     my $d = ar.d||4;
     my $o = Rw pul $cs:m way;
     o.way || die;
     
     my $loopr = J.name."%loopid#o.way\t0.3";
     my $id = G.oin.bb->{$loopr};
     saybl "timer replaco J.name o.way" if $id;
     # if last hit and delta are whack
     # tiny hairs of sanity
     Mojo::IOLoop->remove($id) if $id;
     
     my $bl = {};
     my $cb = sub {
         return Mojo::IOLoop->remove(bl.id)
         if G.oin.bb->{$loopr} ne bl.id;
         Rw o.way $J;
     };
     bl.id = G.oin.bb->{$loopr} = Rw recur $d $cb;
Loading: |
    my @l;
    push @l, keys %{G.T} if G.T;
    push @l, keys %{G.Tfor} if G.Tfor;
    @l = uniq @l;
    for my $k (sort @l) {
        my $f = G.Tfor->{$k} || "w/$k";
        my $s = -s $f;
        $s || sayre("Juynk in tied hash? Not $f") && next;
        G.Tt->{$k} eq $s && next;
        sayyl "Loading: $k";
        G.Tt->{$k} = $s;
        G.T->{$k} = LoadFile($f);
    }

