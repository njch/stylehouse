lod/2:
   newwave: | # THE TAKER
    Rw Run;
    saygr "YEYEEEEEEEEEEEEEE";
    return 1;
recur: |
     Mojo::IOLoop->recurring($d,$cb);
vortex: |
     my $m = ar.m||[];
     my $d = ar.d||4;
     my $o = Rw pul $cs:m way;
     o.way || die;
     
     my $loopr = J.name."%loopid#o.way\t0.3";
     my $id = G.oin.bb->{$loopr};
     saybl "timer replaco J.name o.way" if $id;
     # if last hit and delta are whack
     # tiny hairs of sanity
     Mojo::IOLoop->remove($id) if $id;
     
     my $bl = {};
     my $cb = sub {
         return Mojo::IOLoop->remove(bl.id)
         if G.oin.bb->{$loopr} ne bl.id;
         Rw o.way $J;
     };
     bl.id = G.oin.bb->{$loopr} = Rw recur $d $cb;
Run: |
    # arrived from newwave:
    #  perl G/on/wag eats a wormhole of way
    #  Z/1/expro
    #  Z/5/zoc
    #   Z/1/exprob     names    lifes if ^[sh]
    #   Z/5/loD  way loadc w/c, extends way with lod/$name hash
    #   Z/5/zurc  Rw newwave || do { Rw zoybracken, Rw fresh_init }
    
    # to make more
    # wagging wormhole and w/c are one
    # intention can open it for itself
    # the z executable points ARGV points to w/*s to apply on top of each other
    # as a kind of u that gains meaning as it receives layers of language
    # so behaviour can eat the rest of its specuity
    
    my $G = Rw Gto;
    `rm w/glog`;
    G.logs = 1; 
    my ($what) = @ARGV;
    if (exists G.way->{$what}) {
        say "specialin $what";
        Rw $what;
    }
    Rw Loading;
    
    my @ch = (
    'In=Indi',
    'Jto=Jtt',
    );
    for (@ch) {
        my ($k,$f) = split '=';
        G.way->{$k} = G.way->{$f};
    }
    
    my $cb = sub {
        my $now = hitime;
        my $gap = $now - G.lastout;
        return sayre "sl" if $gap < 2;
        Rw Many;    
        G.lastout = $now;
    };
    Rw recur $d=8 $cb;
    $cb->();
    
    sayyl "YEP";
Loading: |
    G.Tfor ||= {Wild => 'w/ild'};
    while (my ($k,$f) = each %{G.Tfor}) {
        my $s = -s $f;
        $s || die "Not $f";
        G.Tt->{$k} eq $s && next;
        sayyl "Loading: $k";
        G.Tt->{$k} = $s;
        G.T->{$k} = LoadFile($f);
    }
feo: |
    G.Tfor ||= {Wild => 'w/imld'};
Many: |
    $G || die;
    # The Beatles - Martha My Dear
    my $J;
    $J = G.outerspace ||= do {
        $J = Rw Jto One;
        my $sc;
        G.oin = sc.J = Rw Jto Oth;
        Rw jamsc $J $t=Oth $cv=0.3 $s=oo $sc;
        Rw jamsc $J:G.oin $t=Oth $cv=0.3 $s=oo $sc;
        $J
    };
    J.A.IIII = ['G/T/Wild'];
    J.A.Indo = 2;
    Rw Viu $J;
    
    n Oth =>0.3=>{J=>'Oth',vv=>6};
    
    my $y = G.Many||={};
    y.i++;
    my $t = hitime;
    y.la->{$t} = 1;
    sayyl "many y.i"; 
Oth: |
    # rising 
    J.A.tid++;
    n Byst=>W
    n Checks=>W
    #n Mild=>W
    #n Perl=>W
    #n Cight=>W
    n Dwight=>W
    T.nose = 1;
    
    # randonly pour time ^
Perl: |
    n PerlHead =>W
    n IStuff
    n KnowTime
    J.V = 1;
    
PerlHead: |
    n perlhead =>0.01=><<'',{code=>"P 1"}
        #!/usr/bin/perl
        use strict;
        use warnings;
    
    
    #
    
Mild: |
    u Indulator
    u Modulator
    n some=>''=>thang
    
    G.T.Mild = J.A.I;
    DumpFile('w/imld',G.T.Mild);
    
Byst: |
    G.Byst = $J;
    n bystanding=>2,'bystander'
    
Checks: |
    Rw Loading;
    n wa =>''=>{pi=>'waps'}
    
    
Dwight: |
    J.V = 0;
    u Ipifalls
    u pi3d
    u stopi_clife
    u clifeGkeeps
    
    #n theS=>1=>{pi=>'cfile'=>s=>"life/S\.s"}
    Mn(shedful => '0.1-0.7', {pi=>'seas',s=>"g/0/G g/G/cis g/G/on g/G/way"});
    #n s =>8=>"Stevewashere!".int(rand(9)),'%fs:30'
    J.V = 1;
    
Ipifalls: |
    n stopiclife=>''=><<'',{code=>"Mo 444",v=>'cpi'}
        C.sc.J.A.III = ['J/most/J/A/I'];
pi3d: |
    n inlevels =>''=><<'',{code=>"Mo 3212",v=>'cpi'}
        delete C.y.o.J;
stopi_clife: |
    n stopi_clife=>''=><<'',{code=>"Mo 4445",v=>'cpi'}
        if (C.sc.pi eq 'clife') {
            A.ztime = 2;
        }
clifeGkeeps: |
    n clifeGkeeps=>''=><<'',{code=>"Mo 212",act=>1}
        my $CC = A.J.C;
        return unless CC.c.pi eq 'cfile' && C.t eq 'z';
        my $keep = {
            'g/0/G' => qr/^(say.*|k.|hitime|unico|hex.*|.dump|mku.*|head)$/,
            'g/G/cis' => qr/^(ind|dig|snooze|acum|sli?m|.json)$/,
            'g/G/on' => qr/^(wag|wayup|fwind|g_parse_babble)$/,
            'g/G/way' => qr/^(stack|F_delta|inter)$/,
        };
        my $r = $keep->{CC.t} || die "noyt to CC.t";
        my @not;
        my @keep = @{C.y.o.M} = grep { _.t =~ $r ? 1 :
            do{ push @not, $_; 0 }
        } @{C.y.o.M};
        saybl "CC.t keeps ".join", ",sort map{_.t} @keep;
        saygr "CC.t drops ".join", ",sort map{_.t} @not;
        return;
Cight: |
    u Indulator
    u Modulator
    n some=>''=>thang;
    G.T.Cight = J.A.I;
    DumpFile('w/ight',G.T.Cight);
    #J.A.I = Load(Dump(J.A.I));
    

