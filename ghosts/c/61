lod/2:
   newwave: | # THE TAKER
    Rw Run;
    saygr "YEYEEEEEEEEEEEEEE";
    return 1;
recur: |
     Mojo::IOLoop->recurring($d,$cb);
vortex: |
     my $m = ar.m||[];
     my $d = ar.d||4;
     my $o = Rw pul $cs:m way;
     o.way || die;
     
     my $loopr = J.name."%loopid#o.way\t0.3";
     my $id = G.oin.bb->{$loopr};
     saybl "timer replaco J.name o.way" if $id;
     # if last hit and delta are whack
     # tiny hairs of sanity
     Mojo::IOLoop->remove($id) if $id;
     
     my $bl = {};
     my $cb = sub {
         return Mojo::IOLoop->remove(bl.id)
         if G.oin.bb->{$loopr} ne bl.id;
         Rw o.way $J;
     };
     bl.id = G.oin.bb->{$loopr} = Rw recur $d $cb;
Run: |
    # arrived from newwave:
    #  perl G/on/wag eats a wormhole of way
    #  Z/1/expro
    #  Z/5/zoc
    #   Z/1/exprob     names    lifes if ^[sh]
    #   Z/5/loD  way loadc w/c, extends way with lod/$name hash
    #   Z/5/zurc  Rw newwave || do { Rw zoybracken, Rw fresh_init }
    
    # to make more
    # wagging wormhole and w/c are one
    # intention can open it for itself
    # the z executable points ARGV points to w/*s to apply on top of each other
    # as a kind of u that gains meaning as it receives layers of language
    # so behaviour can eat the rest of its specuity
    
    my $G = Rw Gto;
    `rm w/glog`;
    G.logs = 1; 
    my ($what) = @ARGV;
    if (exists G.way->{$what}) {
        say "specialin $what";
        Rw $what;
    }
    G.Tfor ||= {Wild => 'w/imld'} if $what eq 'feo';
    G.Tfor ||= {Wild => 'w/ild'};
    Rw Loading;
    
    my @ch = (
    'In=Indi',
    'Jto=Jtt',
    );
    for (@ch) {
        my ($k,$f) = split '=';
        G.way->{$k} = G.way->{$f};
    }
    
    my $cb = sub {
        my $now = hitime;
        my $gap = $now - G.lastout;
        return sayre "sl" if $gap < 2;
        Rw Many;    
        G.lastout = $now;
    };
    Rw recur $d=8 $cb;
    $cb->();
    
    sayyl "YEP";
Loading: |
    my @l;
    push @l, keys %{G.T} if G.T;
    push @l, keys %{G.Tfor} if G.Tfor;
    @l = uniq @l;
    for my $k (sort @l) {
        my $f = G.Tfor->{$k} || "w/$k";
        my $s = -s $f;
        $s || die "Not $f";
        G.Tt->{$k} eq $s && next;
        sayyl "Loading: $k";
        G.Tt->{$k} = $s;
        G.T->{$k} = LoadFile($f);
    }
Many: |
    $G || die;
    # The Beatles - Martha My Dear
    my $J;
    $J = G.outerspace ||= do {
        $J = Rw Jto One;
        my $sc;
        G.oin = sc.J = Rw Jto Oth;
        Rw jamsc $J $t=Oth $cv=0.3 $s=oo $sc;
        Rw jamsc $J:G.oin $t=Oth $cv=0.3 $s=oo $sc;
        $J
    };
    J.A.IIII = ['G/T/Wild'];
    J.A.Indo = 2;
    Rw Viu $J;
    
    n Oth =>0.3=>{J=>'Oth',vv=>6};
    
    my $y = G.Many||={};
    y.i++;
    my $t = hitime;
    y.la->{$t} = 1;
    sayyl "many y.i"; 
    

