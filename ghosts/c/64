
Down: |
    n Tides
    n Goodat
Ise: |
    n KnowTime
    n Shelf
    n Rob
Rob: |
    u allacgts
    n robeg =>'',<<''
        # look
        my $D = $s;
        my $eg = D.sc.eg;
        $eg =~ s/\//::/g;
        say "Robeg for D.t looking in $eg";
        return 0; # TODO
Dwight: | # grab old subs of G
    J.A.IIII = [@{G.IIII},'G/T/Draw'];
    J.VV.N = 1;
    n e=>''=>3
    sayyl "FOudn :".wdump 2, A.J.A.I.Mo;
    my $lot = "g/G/on g/G/way g/0/G g/G/cis";
    n shedful => '0.1-0.7', {pi=>'seas',s=>$lot}
    
Draw: | # most wild (furthest from Wild, goes in circle)
    u IIpifalls
    u pi3d
    u stopi_clife
    u clifeGkeeps
    n s=>''=>t
    Rw dow $Draw:J.A.I;
    # do tests... contigo
    # merge/split things into Seate-good, Seate-bung etc
    
G: | # GGG subs, must get wormholes to do this this shortly
    my $f = "w/J.name\.yml";
    my $N = -f $f ? LoadFile($f) : do {
        J.at.isle && die "Run without isle";
        my $ay = 
        n Dwight
        my $N = Rw getJN $J:ay.nj $I:ay.I $pi=clife;
        # for cfile drop cache by mtime
        delete _.c.from for @$N;
        DumpFile($f,$N);
        $N
    };
    return sayyl "isleless J.name, assume stop" if !J.at.isle;
    
    Nn(enth=>''=><<'','%style:func');
        encode_entities(decode_utf8(shift));
    
    for my $D (@$N) {
        my $s = D.sc.style;
        D.sc.head = 1         if D.t eq 'head';
        D.sc.bab = 'non'     if $s eq 'nonbabble';
        D.sc.subis = 1         if $s eq 'func' || $s eq '';
        D.sc.export = 1     if $s eq 'func';
        if (D.sc.head && !D.sc.export) {
            # G re-exports subs G imports
            my $e = [];
            push @$e, $1 while D.c.s =~
                /use \S+ (?:qw)?\W([\w\s]+)\W;/sgm;
            D.sc.export = join ' ', @$e;
        }
        D.c.s = "my \$G = shift;\n".D.c.s if $s eq '';
        D.c.s = "sub D.t {\n".D.c.s."\n}" if D.sc.subis;
        D.c.from = "G";
    }
    @$N = reverse I.d&sorp,'sc/head',@$N;
    if (0) {
        my $E = {};
        for (@$N) {
            my $kip = join ' ', sort keys %{_.sc};
            E.tisc->{$kip}++;
            E.styles->{_.sc.head} .= "_.t ";
            E.subi->{_.sc.subis} .= "_.t ";
        }
        say wdump [$E];
    }
    @$N = grep{_.t ne 'wag'} @$N; # anything with H... 
    u allcode
    Mn($N);
    
    
Ear: |
    n Down
    n Ise
    n G
    n Ngwe
    n GBabz
Boat: | # will be waiting
    n Indular
    n Modular
    n Modems
    n Jing
Rest: |
    n Seven
    n GeoSo
    n Goodat
    n qqlaces
    n threJ
Goth: | # agther limbs (Ear)
    my $E = {};
    my ($X,$N) = Rw Xisle U Ear;
    for (@$N) {
        my $kip = join ' ', sort keys %{_.sc};
        E.tisc->{$kip}++;
        push @{E.from->{_.c.from}||=[]}, $_;
    }
    Rw thilm + $E;
opot: |
    my @for = qw'Ngwe GBabz Shelf Tides'; #    KnowTime    Shelf        
    `rm w/U/$_` for @for;
    my $com = 'othlia';
    my @fo = `find $com -type f`;
    chomp for @fo;
    my $tf = {map{$_=>1}@for};
    my $am;
    /^$com\/((?:.+\/)?(.+?))\.pm$/
        && $tf->{$2} && do{$am->{$2} = $1}
        for @fo;
    my $E = {};
    for (@for) {
        my $from = $am->{$_} || die "No from from $_";
        my $m = [U=>$_];
        my ($X,$N) = Rw Xisle + $m;
        for (@$N) {
            _.c.from = $from;
            push @{E.from->{_.c.from}||=[]}, $_;
        }
    }
    Rw thilm + $E;
    
    
thilm: | # for another
    u GBabz
    my ($A) = 
    n s=>'13'=>see
    my $I = A.I;
    y.at.isle = 'U';
    # 
    my @to;
    my $tld; # 'StyleHose'
    for my $k (sort keys %{E.from}) {
        $k || die "THere's a weird from";
        my $t = {};
        my ($il,$i) = $k =~ /^(.+)\/(.+?)$/;
        my $N = E.from->{$k};
        @$N = I.d&sorp,'t',@$N;
        @$N = I.d&sorp,'y/cv',@$N;
        t.pack = join("::",grep{defined}$tld,split'/',$k);
        t.head = [];
        t.l = [];
        for my $D (@$N) {
            ref D.y || die "Dy nonref ".ki $D;
            D.sc.eg = t.pack;
            $D = I.d&hup,$D;
            my $s = delete D.c.s;
            $s =~ s/A\.I\.d {0}\&An;\s*$//s if D.t eq 'An';
            $s = I.d&parse_babbl,$s unless D.sc.bab eq 'non';
            $_ && $_ ne 'non' && die "INter bab D.t bab=$_" for D.sc.bab;
            my $nov = wdump 5, $D;
            die "TOo long D D.t: $nov" if length($nov) > 600;
            my $wh = D.sc.head ? 'head' : 'l';
            unless (D.sc.head || D.sc.subis || D.sc.code eq 'Pack') {
                t.II->{D.sc.code}->{D.y.cv}->{D.t} = $D;
                $s =~ s/^(\$A->\{I\}->\{(\S+)\} = sub \{)/sub $2 {/s;
                $2 eq D.t || die "Replaceo subAI $2 for D.t but it looks like $1\n"
                    .ki($D)."   which is".(split"\n",$s)[0];
            }
            acum $t=>$wh=>$s;
            if (my $e = D.sc.export) {
                $e = $e ne '1' ? $e : D.t;
                acum $t=>export=>$e;
            }
        }
        if (t.II) {
            push @{t.l}, '$A->{II} = Load(<'.'<STEVE);', Dump(t.II), 'STEVE','';
        }
        if (my $e = t.export) {
            push @{t.head},
                "use Exporter 'import';",
                'our @EXPORT = qw('.join(' ',@$e).');',
                '';
        }
        unshift @{t.l},grep{defined}
            "package t.pack;",
            G.way.strictwarn,
            (t.pack ne "G" ? "use G;" : ""),
            "our \$A = {};",
            @{t.head},
            '';
        push @to, $t;
    }
    my $lib = 'othlia';
    my @inc;
    for my $t (@to) {
        my @el = split '::', t.pack;
        my $fi = pop @el;
        my $dir = join '/', $lib, @el;
        `mkdir -p $dir` if !-d $dir;
        my $code = join "\n", @{t.l};
        my $f = "$dir/$fi\.pm";
        write_file($f, $code);
        push @inc, t.pack;
    }
    n othing=>''=><<'','%code'
        say "Not nothing here";
    
    
strictwarn: |
    use strict;
    use warnings;
    no warnings qw(uninitialized redefine);
got: |
    u GBabz
    my ($A) = 
    n s=>'13'=>see
    my $I = A.I;
    
    #sayyl I.d&parse_babbl,G.way.GW;
    #exit;
    
    my $inc = "othlia";
    my @find = grep {!/\/\./} map{chomp;$_}`find $inc`;
    my $as = {map{$_=>1} grep {-f $_} @find};
    my $se = {};
    for my $in (keys %$as) {
        (my $o = $in) =~ s/\/\w+(\.pm)$/$1/;
        $se->{$in} = 1 if $as->{$o};
    }
    my @in = map{delete $as->{$_};$_} keys %$se;
    my @inc = sort keys %$as;
    s/^$inc\/(.+)\.pm/$1/ || die "NOgot $_" for @inc;
    s/\//::/sgm for @inc;
    # ^ include topmosts
    
    my $l=[
        G.way.strictwarn,
        'use FindBin qw($Bin);',
        'use lib "$Bin/othlia";',
        (map{"use $_;"}@inc),
        'our $A = {};',
        '$A->{I} = {};',
        '$A->{AAAA} = [',
        join(',',map {'$'.$_.'::A'} @inc).'];',
        I.d&parse_babbl,G.way.gothat ,
    ];
    
    write_file('got',join("\n",@$l));
    
    sayyl "Wrote got: ".@$l." lines";
    n othing=>''=><<'','%code'
        say "Not nothing here";
    
    
gothat: |
    for my $AA (@{A.AAAA}) {
        my @D = map{values%$_} map{values%$_} values %{AA.II};
        my $ne = {map{$_=>1}keys%{AA.I}};
        for my $D (@D) {
            unless ($ne->{D.t}) {
                D.sc.eg || die "notI sub not .eg".ki$D;
                AA.symb ||= eval'\%'.D.sc.eg.'::';
                AA.I->{D.t} = $ne->{D.t} = AA.symb->{D.t};
            }
            delete $ne->{D.t} || sayre("II index for not in I: ".ki$D) && next;
            A.I->{D.t.'_dige'} = D.sc.dige;
            A.I->{D.t} = AA.I->{D.t};
            A.tople->{D.t} = 1;
        }
    }
    sayyl "Have : ".join' ', sort keys %{A.tople};
    $DB::deep = 420;
    my $G;
    G.up = hitime();
    G.id = mkuid();
    G.I = A.I;
    G.A = $A;
    A.talk = "G";
    A.mo = $A;
    our $KA = {};
    $G::KA->{"$A"} = $A;
    my $C = {};
    my $T = {};
    for my $sn (qw'pwin tie h w airlock') {
        $G->{$sn} = G.I->{$sn} || die "No $sn from G I";
    }
    $SIG{__DIE__} = G.I.sigstackend || die "NO sigstackend";
    $SIG{__WARN__} = G.I.sigstackwarn || die "NO sigstackwarn";
    G.IIII = [map{'G/T/'.$_}qw'H/Boat H/Rest Chang K/eel'];
    
    G&init;
    
    Rw Rune $A $C $G $T i;
    
    Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
eel: |
    n SevWo
    n Space
    n Foli
    n lum
Ngwe: |
    u allacgts
    
    n init=>'',<<''
        G.T = G&T,'w',G.T||{};
        G.way = G&T,'w/way',{nonyam=>1};
        
    n sigstackwarn =>''=><<'','%args:1'
        my ($s) = @_;
        return if $s =~ /Deep recursion on subroutine/
            || $s =~ /masks earlier declaration in same/;
        warn "Warndg: $s";
        
    n sigstackend =>''=><<'','%args:1'
        my $s = $@;
        local $@;
        eval { G::confess( '' ) };
        my @stack = split m/\n/, $@;
        shift @stack for 1..2;
        if ($stack[-1] =~ /^\s+Mojo::IOLoop::start/) {
            pop @stack until $stack[-1] !~ /Mojo|eval/;
        }
        @stack = map{[$_, /^\s*(?:eval \{\.\.\.\} |([^\(\s]+)::([^\s\(]+?)\((.+)\) )called at (\S+|\(eval \S+\)) line (\d+)$/]} @stack;
        @stack = map{[$_->[2],'',{l=>$_},{pack=>$_->[1],call=>$_->[3],file=>$_->[4],line=>$_->[5]}]}@stack;
        @stack = map{{t=>$_->[0],y=>{},c=>$_->[2],sc=>$_->[3]}}@stack;
        #s/\t/  /g for @stackend;
        # write on the train thats about to derail
        for (@stack) {
            my $i = -1;
            _.sc.Aref = $1 if _.sc.call =~ s/'(HASH\(\S+\))', (?:'(HASH\(\S+\))', ){3}//;
        }
        saybl "Stack:";
        my $ind = " ";
        my $le;
        my $know;
        know.h->{'Ise::Shelf'} = 1;
        my $KnowA = $G::KA;
        @stack = reverse @stack;
        my @sum;
        push @sum, shift @stack while @stack > 10;
        my @fo;
        unshift @stack, grep { push @fo, $_; _.t =~ 'w' || _.t eq 'h' && _.sc.call =~ /^'loop'/
            || @fo > 2 && $fo[-2]->{t} eq 'h' && $fo[-2]->{sc}->{call} =~ /^'exood'/}
            @sum;
        for (@stack) {
            my $sc = {%{_.sc}};
            my $called = delete sc.call;
            $called =~ s/'((?:(.)(ASH|RRAY)|(\S+))\(\S+\))'/$2||$4/seg;
            my $file = delete sc.file;
            $file =~ s/^$main::Bin\///;
            $file =~ s/^othlia\/// && $file =~ s/\//::/s && $file =~ s/\.pm$//;
            my $pack = delete sc.pack;
            my $fi = join "/", split '::', $pack;
            if ($file =~ /$fi\.pm$/) {
                $file = $pack;
                undef $pack;
            }
            my $line = delete sc.line;
            my $mayknow = delete sc.Aref;
            my $Ano = $KnowA->{$mayknow} if $mayknow;
            my $tal = Ano.talk if $Ano;
            _.c.tal = $tal;
            if ($know->{_.t}->{_.sc.pack}) {
                $file = "<";
                undef $pack;
                _.sc.waspack = le.sc.pack;
            }
            if ($le) {
                undef $tal if $tal eq le.c.tal;
                $ind .= " " if _.sc.pack ne le.sc.pack &&
                    !le.sc.waspack || le.sc.waspack ne _.sc.pack;
                undef $file if $file eq le.sc.pack || $file eq le.sc.waspack;
                undef $pack if $pack eq le.sc.pack;
            }
            if (!$file && $pack) {
                $file = $pack;
                undef $pack;
            }
            if ($file =~ /^\(eval (\d+)/) {
                $file = ($pack&&"$pack > ")."?".$1;
                undef $pack;
            }
            _.t = '?' if _.t eq '__ANON__';
            $tal = "$tal via" if $tal && $pack;
            say " ".$ind."_.t\t$file :$line\t\t $called\t\t$tal $pack   ".ki($sc);
            #
            $le = $_;
        }
    
    
    # ww make ar @Me, always in order, ref $k = +ar mixin #c
    n 'w'=>'',<<''
        my $pin = $s;
        my ($t,@k);
        my @Eat = @Me;
        while (@Eat) {
            my $k = shift @Eat;
            if (ref $k) {
                my @or = map{$_=>$k->{$_}} sort keys %$k;
                unshift @Eat, @or;
            }
            else {
                push @k, $k;
                $t->{$k} = shift @Eat;
            }
        }
        my @src = ($A,$C,$G,$T);
        my @got;
        for (qw'A C G T') {
            my $sr = shift @src;
            if (!exists $t->{$_}) {
                $t->{$_} = $sr;
                push @got, $_;
            }
        }
        unshift @k, @got if @got;
        (my $fi = $pin) =~ s/\W/-/g;
        my ($way,$dige);
        my $D;
        if ($D = t.__D) {
            $dige = D.sc.dige || die "wayzipin wasnt scdige: ".ki$D;
            $way = D.c.s;
            $way =~ s/^A\.I\.(\w+) = //s;
            $way =~ s/}A\.I\S+\n/\n/s if D.t eq 'An'; # redoes, too trouble
        }
        else {
            $way = G.way->{$fi} || die "No way: $fi";
            $dige = G.way.o.dige->{$fi}
                || die "Not Gway not diges $fi: wayo: ".ki G.way.o;
        }
        my $ark = join',',@k;
        my $code;
        my $sub = G.dige_pin_ark->{$dige}->{$pin}->{$ark} ||= do {
            my $C = {};
            C.t = $pin;
            C.c = {s=>$way,from=>"way"};
            C.sc = {code=>1,noAI=>1,args=>"ar,$ark"};
            if ($D) {
                delete C.sc.args unless D.sc.subpeel;
                C.c.from = "I D.c.from";
            }
            $code = G&won;
            $@ && die ":BEFORE $pin www $@";
            $SIG{__WARN__} = G.I.sigstackwarn || die "NO sigstackwarn";
            my $sub = G.airlock->($code);
            $@ && sayre "DED:\n".$code;
            $@ && die "way nicht compile: $pin:\n$@";
            !$sub && die "way nicht sub returned: $pin (no error tho)";
            $sub;
        };
        #say "Way A.talk $pin" unless $pin =~ /^_/;
        if ($D && !D.sc.subpeel) {
            return $sub;
        }
        $sub->($t,map{$t->{$_}}@k);
    
    n won=>'',join("\n",map{G.way->{$_} || die "no $_"}qw'cono ersl');
    
    n airlock=>''=><<'','%args:1'
        eval shift
    
    # etc
    
ersl: |
    G&parse_babbl,C.c.s;
Shelf: |
    u allacgts
    n h =>'',<<''
        my $y = A.I->{$s} || do {
            sayre "Above for $s on A.talk isssssssss A.up.talk";
            A.up.I->{$s} || die "No whay named $s on A.talk or A.up.talk: ".wdump 2, A.I;
        };
        say "A.talk h :  $s   < C.t" unless C.t =~ /^_/ || !A.J || A.J.V < 2;
        $y->($A,$C,$G,$T,@Me);
    
    n d =>'',<<''
        die "USING I->d !".wdump 2, [$s,@Me];
    
    n A =>''=><<''
        ($A,my$up) = ({},$A);
        A.G = $G; # for wiring from A (G/T/Hypo)
        A.up = $up;
        A.mo = $A;
        A.am = $s || die "unsame?";
        .
        A.C = $C = {};
        (C.c.J, C.c.N, C.c.M) = (@Me);
        ref C.c.N eq 'ARRAY' || die "Not array CcN";
        my $t = C.c.N->[0];
        C.c.N = [C.c.N] if defined $t && !ref $t; # C[] -> N[C[]]
        ref C.c.M || delete C.c.M;
        A.N = [@{C.c.N}];
        A.M = [];
        A.J = C.c.J if C.c.J;
        A.J || die "NOJ";
        A.talk = (A.J.le&&"(A.J.le.name)").A.J.name."-".A.am;
        .
        $T = A.T = {};
        $G::KA->{"$A"} = $A;
        A.fl = C.c.fl || {};
        {
        my $I = A.I = {};
        %$I = (%$I,%{G.I});
        my $II = Rw collaspII $A;
        I.Ii = II.Ii;
        # split from R, dispatches of patches as I.$k = CODE
        # base exuder of self if no Ii resol
        I.Ii = II.Ii;
        # throw in from R exact Ii, bits of Ii to I before t gets it
        if (my $re = delete G.drop.recycling->{A.J.id}->{A.am}) {
            if (re.Ii eq I.Ii) {
                %$I = (%$I,%$re);
                A.cv = 0.1;
            }
            else {
                sayre "Recycloped:  Diff I.Ii  <--  re.Ii";
            }
        }
        I.d&An;
        A.t&1;
        A.t&11111 || warn "NO 1";
        }
        ($A,$C,$G,$T)
    
    n recycle =>''=>{s=><<''}
        return if I.recyttl++ > 38;
        G.drop.recycling->{A.J.id}->{A.am} = $I;
    
    n Act =>'',<<''
        my $up = $s;
        $s = shift @{A.N};
        if (ref $s eq 'HASH' && s.J && s.mo && s.talk) {
            $A = $s;
            A.mo eq $up || die "A.talk re A mo A.mo.talk notfrom up.talk";
            $C = A.C||die"travcno A.talk";
            keys %$C == 4 || die "A.talk carries wei ".wdump 3, $A;
            $T = A.T ||= {};
            saybl "Resume has TNOT: A.talk to A.cv   with C.t" if delete T.not;
        }
        else {
            $A = {%$up};
            A.mo.ont = $A;
            A.s = $s;
            $C = A.C = {};
            $T = A.T = {};
        }
        T.oM = [];
        G&An;
        if (A.cv < 0.2) {
            A.t&2;
            return (undef,undef,undef,{isnot=>1}) if T.isnot;
            ($C,$T) = (A.C,A.T);
            G&An;
        }
        ($A,A.C,$G,A.T)
    
    n An =>101,<<''
        A.I || die "GimeI";
        A.note = {}; # pinging csc
        A.c = sub { G&c,@_; };
        A.e = sub { G&e,@_; };
        A.us = sub { G&us,@_; };
        A.t = sub { G&t,@_; };
        A.V = sub { A.J.VV && A.J.VV->{$_[0]} || A.J.V };
        $A
    
    #c ventlike      ඬ
    # make pool, synth space, want arches
    # fork & rejoin to exciting place
    # the valley, what it means to be here in here YIN
    # todo undef $s as repl, J ventlike
        #  $J, [in], [out]
    # @M = $s + @Me
    # Mn(.+) is n $J [$1] $M
    
    n n =>'',<<''
        ($A,$C,$G,$T) = G&A,'In',$s,@Me;
        G&loop;
    
    n m =>'',<<''
        ($A,$C,$G,$T) = G&A,'Mo',$s,@Me;
        G&loop;
    
    n Sev =>'',<<''
        $Me[0] ||= [Elvis=>''=>{J=>$s,Y=>'Pre',V=>'Duv'}];
        $Me[1] ||= [];
        ($A,$C,$G,$T) = G&A,'Sev',$s,@Me;
        A.I.scIfs || die "NO scIfs: A.J.name";
        G&loop;

    n loop =>'',<<''
        my $i;
        @{A.N}||die"nois".wdump(5, $C).wdump 2,$A;
        while (@{A.N}) { #
            $i++ > 5000 && die "Huge A.talk";
            my ($A,$C,$G,$T) = G&Act,$A;
            next if delete T.isnot; # zless
            for (1) {
                T.not&&next;
                A.t&6;
                T.not&&next;
                G&flywheels;
                T.not&&next;
                A.t&78;
                T.not&&next;
            }
            continue {
                G&z
            }
        }
        A.cv = 0.78;
        A.t&8;
        G&recycle;
        (A.nj) = values %{A.Js} if A.Js && keys %{A.Js} == 1;
        A.bangdesk.main->() if A.bangdesk.main;
        if (C.c.M) {
            @{C.c.M} = () if C.c.M eq C.c.N;
            my @un = uniq @{A.M};
            die "ManyofsameM: ".wdump 3, A.M if @{A.M} > @un;
            push @{C.c.M}, @{A.M};
            $A
        }
        elsif (C.c.J && A.am eq 'In') {
            G&m,C.c.J,A.M,C.c.M||[] if @{A.M};
        }
        else {
            die "noJMout A.am";
        }
Tides: |
    u allacgts
    n tie =>''=><<'','%acgt:class'
        my %na;
        tie %na, $class, @Me;
        return \%na
    
    # see also Loading for ongoign G.T timeyness
    n T =>''=><<''
        my $e = I.d&tie,'Wormhole',{base=>$s},@Me;
        return $e;
    
    u allpack
    # for the hash of a filesystem
    # results must be kept up to date otherwise
    # (use only as G.T & Loading)
    n Wormhole =>''=><<''
        {
            package Wormhole;
            use G;
            use Tie::Hash;
            our @ISA = qw(Tie::ExtraHash);
            sub TIEHASH {
                my $class = shift;
                my %o;
                %o = (%o, %{$_}) for @_;
                return bless [{},\%o], $class;
            }
            sub STORE {
                my ($e,$k,$v) = @_;
                my ($s,$o,@o) = @$e;
                die "Storign o: $v" if $k eq 'o';
                if (o.nonyam) {
                    o.dige->{$k} = slm 12, dig $v unless ref $v;
                }
                $s->{$k} = $v;
            }
            sub FETCH {
                my ($e,$k,$v) = @_;
                my ($s,$o,@o) = @$e;
                return $o if $k eq 'o';
                $s->{$k} || STORE($e,$k, do {
                    my $il = join('/', grep{defined} o.dir, $k);
                    my $f = o.base.'/'.$il;
                    if (-d $f) {
                        my %Di;
                        tie %Di, 'Wormhole', $o, {dir=>$il};
                        \%Di;
                    }
                    elsif (-f $f) {
                        o.nonyam ?
                        scalar read_file($f)
                        :
                        LoadFile($f);
                    }
                    else {
                        warn "Wormhole sens nothing: $f";
                        undef
                    }
                });
            }
        }
    
    # for the T.at that also sees J.oy.at
    n Ghoz =>''=><<''
        {
            package Ghoz; #
            use Tie::Hash;
            our @ISA = qw(Tie::ExtraHash);
            sub TIEHASH {
                my $class = shift;
                my $sto = bless [{},@_], $class;
                $sto
            }
            sub FETCH {
                my ($s,$k) = @_;
                my ($st,@o) = @$s;
                return $st->{$k} if exists $st->{$k};
                option:
                for my $o (@o) {
                    if (my $in = o.inp) {
                        my $v = o.o;
                        for my $i (@$in,$k) {
                            exists $v->{$i} || next option;
                            $v = $v->{$i};
                        }
                        return $v;
                    }
                    else {
                        die "Hwoto climb a ".G::ki $o;
                    }
                }
            }
        }
        
Goodat: |
    u allacgts
    
    n pin =>''=><<'',{acgt=>'pin,way'}
        I.pwin || die "nopwin from pin";
        I.pwin->($pin,$way);
    
    n pon =>''=><<'',{acgt=>'pin,way,s'}
        I.pwin || die "nopwin from pin";
        I.pwin->($pin,$way,{et=>$s});
    
    n sorp =>''=><<'',{acgt=>'pin'}
        I.pwin || die "nopwin from pin";
        sort { I.pwin->($pin,$a) cmp I.pwin->($pin,$b) } @Me;
    
    n norp =>''=><<'',{acgt=>'pin'}
        I.pwin || die "nopwin from pin";
        sort { I.pwin->($pin,$a) <=> I.pwin->($pin,$b) } @Me;
    
    # non acgts
    # ref = T makes it look for jointed rest of path in tiedinto {}
    # then Tied hashes make connections, collapses the feely data mesh
    n pwin =>''=><<'',{args=>'pin,way,set'}
        if (exists $way->{$pin}) {
              my $o = $way->{$pin};
            $way->{$pin} = set.et if exists set.et;
            delete $way->{$pin} if set.de;
            return $o;
        }
        my @path = split /\/|\./, $pin;
        my $h = $way;
        my $last;
        for my $p (@path) {
            if (ref $h ne 'HASH' && ref $h ne 'G') {
                undef $last;
                undef $h;
                last;
            }
            $last = [$h,$p];
            $h = $h->{$p};
        }
        if ($last) {
            my ($he,$pi) = @$last;
            $he->{$pi} = set.et if exists set.et;
            delete $he->{$pi} if set.de;
        }
        return $h if defined $h;
        . 
        return undef unless $pin =~ /\*/;
        die "sat rs findy $pin";
    
GBabz: |
    # see  and levitate
    u allacgts
    
    # bab:non,,'%subpeel'
    n bitsof_babble =>''=><<''
        my $p;
        p.alive = qr/\$[\w]*[\w\->\{\}]+/;
        p.dotha = qr/[A-Za-z_]\w{0,3}(?:\.[\w-]*\w+)+/;
        p.oing = qr/p.alive|p.dotha|[-\w]{8,}/;
        p.oint = qr/[\w\$\/\->\{\}\*]*[\w\$\/\->\.\}\*]+/;
        p.mwall = qr/(?:= |if |unless |^\s*)/;
        p.sur = qr/ if| unless| for| when|,?\s*$|;\s*/;
        $p
    
    #,'%bab:non'
    n parse_babbl =>''=><<''
        my $p = G.bitsof_babble ||= I.d&bitsof_babble;
        # gone:
        my $Jsrc = qr/(J\d*(?:\.\w+)?) (\w+)/;
        my $Jlump = qr/(\S+) (\S+)\s+(\S.+)/;
        $s =~ s/p.mwall$Jsrc $Jlump$/$1.$2->("$3\\t$4" => $5);/smg;
        .
        # :
        my @s;
        my $indbe;
        my $inend;
        my $indun;
        for my $l (split "\n", $s) {
            my $s = $l;
            if ($indbe) {
                if ($indun eq 'NEXT') {
                    $s =~ /^(\s+)/ || die "Must Indunext:\n$s[-1]\n$s";
                    $indun = $1;
                }
                if ($s =~ $indbe) {
                    $s =~ s/^(\s*)\.(\s*)$/$1$2/;
                    $s =~ s/^$indun// || sayre "Noscr '$indun' from $s"
                        if defined $indun;
                    push @s, $s;
                    next;
                }
                else {
                    undef $indbe;
                    undef $indun;
                    if ($s !~ /^\s*$/) {
                        if ($inend) {
                            pop @s  if $s[-1] eq '';
                            push @s, $inend;
                        }
                    }
                    else {
                        $s = $inend if $inend;
                    }
                    undef $inend;
                }
            }
            my $angt = '<'.'<';
            my $ze = qr/$angt['"](\w*)['"]/;
            if ($s =~ /^(\s*)(?!#)\S.*$ze/) {
                if ($2) {
                    # for <#<'EOD' til ^EOD, etc
                    $indbe = qr/^(?!\Q$1\E)/;
                }
                else {
                    $indbe = qr/^($1\s+|\s*$)/;
                    $indun = 'NEXT';
                    $s =~ s/$ze/$angt.($1?"'$1'":"'STEVE'")/e;
                    $inend = 'STEVE' if !$1;
                }
            }
            .
            #c babable # expect closing brackets and insert J
            # eg Atime(2) = A.time->($J, 2)
            $s =~ s/(p.mwall)(\w*A)(\w+)\(/$1$2\.$3->(\$J, /smg;
            $s =~ s/(p.mwall)(\w*G)(\w+)\(/${1}G\.$3->(\$A,\$C,\$G,\$T, /smg;
            $s =~ s/(p.mwall)(\w*J)(\w+)\(/$1$2\.$3->(\$A,\$C,\$G,\$T, \$$2, /smg;
            $s =~ s/(p.mwall)(\w*[MN])(\w+)\(/${1}J\.m->(\$A,\$C,\$G,\$T, \$$2, /smg;
            .
            # close side ourselves, likely to gobble suro if, etc.
            $s =~ s/(p.mwall)(u|n) (.+?)(;| for .+?)?$/"${1}J\.$2->(\$A,\$C,\$G,\$T,$3=>'')".($4||';')/smeg;
            $s =~ s/(p.mwall)(m) (.+?)(;| for .+?)?$/"${1}J\.$2->(\$A,\$C,\$G,\$T,\$M,$3=>'')".($4||';')/smeg;
            #$s =~ s/(p.mwall)(m) (\w+)\(/${1}J\.$3->(\$M, /smg;
            $s =~ s/\$J->\{m\}->\(\$M,/J\.m->(\$A,\$C,\$G,\$T,\$M,/g;
            $s =~ s/\$J->\{n\}->\(\$J,/J\.n->(\$A,\$C,\$G,\$T,/g;
            $s =~ s/\$J->\{n\}->\(/J\.n->(\$A,\$C,\$G,\$T,/g;
            $s =~ s/\$I->\{d\}->\("([^\s"]+)"(?:(,[^\s\)]+))?\)/G\&$1$2/g;
            $s =~ s/\$G->\{w\}->\("([^\s"]+)", \{([^\)]+)?\}, \$G\)/\$G->{w}->(\$A,\$C,\$G,\$T,"$1",$2)/g;
            .
            $s =~ s/I\.d\&(p.oint)/G\&$1/g;
            # lma quack $not->('tag');? from I.d&pui,$s
            $s =~ s/(p.oing|\w+)\&(p.oint)(,[^\s;]+)?(;)?/
                my ($on,$p,$e,$t) = ($1,$2,$3,$4);
                my $in;
                ($on,$in) = ("G\.h",'$A,$C,$G,$T,')
                    if $on eq 'G';
                my $s = $on."->($in\"$p\"$e)$t";
                $s = '$'.$s if $on !~ m{\.};
                $s
            /smge;
            # $sc>$k -> $sc->{$k}
            $s =~ s/(p.oing)((?:\.>p.oing)+)/
                join '->', $1, map {'{"'.$_.'"}'}
                grep {$_} split m{\.>}, $2;
            /smge;
            #c Rw
            while ($s =~ /(Rw (p.oint)(?:(?!p.sur) (.+?))?)p.sur/gsm) {
                my ($old, $op, $oa) = ($1, $2, $3);
                my $g;
                $g ||= '$G';
                .
                my $ne = ""; # hidden reverse
                $ne = $1 if $oa =~ s/(p.sur)$//;
                .
                my @n;
                my @m;
                # want to mix {m m m %$ar m m} whereever + is
                my $wanr = $oa =~ s/^\+ ?//;
                $wanr = 'stick' if $oa =~ s/^- ?//;
                for (split /\,| |\, /, $oa) {
                    # sweet little pool... $J:geo etc
                    if (/^\$((\w+(:|=))?\S+)$/) {
                        my ($na, $fa, $wa) = ($1, $2, $3);
                        if (!$fa) { # fake name, to ar
                            $fa = $na;
                        }
                        else {
                            $na =~ s/^\Q$fa\E//;
                            $fa =~ s/(:|=)$//;
                            if ($wa eq '=') {
                                $na = '"'.$na.'"';
                            }
                        }
                        $na = '$'.$na unless
                            $wa eq '=' || $na =~ /^\S+\.\S/;
                        push @n, "$fa=>$na" ; # also avail a listy position
                    }
                    else {
                        push @m, $_;
                    }
                }
                unshift @n, '$ar' if (!@n || $wanr) && $wanr ne "stick";
                push @n, "m=>[".join(',',map{'"'.$_.'"'}@m).']'
                    if @m;
                .
                my @e;
                push @e, '"'.$op.'"';
                push @e, join(",",@n);
                my $en = join ",", @e;
                .
                my $wa = $g.'->{w}->($A,$C,$G,$T,'.$en.')'.$ne;
                $s =~ s/\Q$old\E/$wa/          || die "Ca't replace $1\n\n $s";
            }
            .
            # sc.k -> $sc->{k};
            $s =~ s/([A-Za-z_]\w*)((?:\.\w+)+)/"\$$1".join"",map {"->{$_}"} grep {length} split '\.', $2;/segm;
            # 
            $s =~ s/aft \{/acum \$F[0] => _after_do => sub {/sg;
            #
            .
            push @s, $s;
        }
        push @s, $inend if $indbe && $inend;
        $s = join "\n", @s;
        .
        $s;

Gouck: |
    u allacgts
    
    n Duck =>''=><<''
        my $D = $s;
        my $evs = D.Ds.evs;
        my $ar = D.ar;
        my $DOOF; 
        my $first = 1 unless $@ =~ /DOOF/;
        $DOOF .= "DOOF D.talk\n" if D.sign eq 'D' || $nodie;
        $DOOF .= "  D.inter" if D.inter;
        if ($first) {
            my $x = $1 if $@ =~ /syntax error .+ line (\d+), near/
                || $@ =~ /line (\d+)/;
            my $file = $1 if $@ =~ /at (\S+) line/;
            undef $file if $file && $file =~ /\(eval \d+\)/;
            undef $file if $file && !-f $file;
            my $code = $file ? 
            read_file($file)
            : $evs;
            my $eval = GDuckling($x, $code, $D);
            if (exists $D->{SigDieStack}) {
                warn "3MALTY SIGGI" if @{$D->{SigDieStack}} > 3;
                $DOOF .= "\n";
                my $i = "  ";
                for my $s ( reverse flatline($D->{SigDieStack}) ) {
                    $DOOF .= "$i- $s\n";
                    $i .= "  ";
                }
            }        
            $DOOF .= "\n$eval\n";
        }
        .
        if ($first) {
            $DOOF .= ind("E    ", "\n$@\n\n")."\n\n";
        }
        else {
            my $in = D.sign eq 'D' ? "! " : "";
            $DOOF .= ind($in, "$@")."\n";
        }
        .
        if ($first) {
            $DOOF .= ind('ar.', join "\n",
                map{
                 my $e = $ar->{$_};
                 my $s = "$e";
                 $s .= "(name=$e->{name})"
                     if ref $e && ref $e ne 'ARRAY'
                    && $e->{name};
                "$_ = ". $s;
                }keys %$ar); 
        }
        .
        return $DOOF if $nodie;
        .
        D.Error = $DOOF;
        $@ = $DOOF;
        sayre $@;
        exit;
        if (@F == 1) {
            # send it away
            $DOOF = join"\n",map{s/^(\! )+//smg if !/DOOF/; $_}split"\n",$DOOF;
            sayre $DOOF;
            G.dooftip && G.dooftip->($@);
            $@ = "";
            $_->() for @{G._aft_err_do||[]};
        }
        else {
            die $@;
        }
    
    n Duckling =>''=><<'',{acgt=>'line,code,D'}
        my $diag = "";
        my @code = split "\n", $code;
        my $whole = @code < 18;
        if (!D.Verb && $code =~ /^sub \{ my \$ar = shift/
            && $code =~ /return \@doo_return \};/) {
            $line -= 2 if $line;
            shift @code for 1..2;
            pop @code for 1..2;
        }
        my $xx = 0;
        my $lci;
        for my $c (@code) {
            $xx++;
            $lci = $1 if $xx < $line && $c =~ /^\s*(#\s*\d.*)$/;
            if (!defined $line) {
                $diag .= ind("⊘  ", $c)."\n"
            }
            elsif ($xx == $line) {
                $diag .= ind("⊘  ", $c)."\n";
                
                my $bab = (split"\n",D.bab)[$line-2];
                if ($bab ne $c) {
                    $diag .= ind("⊖r ", $bab)."\n";
                }
            }
            elsif (!$whole && $xx > $line-5 && $xx < $line+5) {
                $diag .= ind("|  ", $c)."\n"
            }
            elsif ($whole) {
                $diag .= ind("|  ", $c)."\n"
            }
        }
        $diag = "$diag\n#~~~$lci" if $lci && $lci !~ /^# 0.01/;
        $diag
    
   

