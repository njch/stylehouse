
oJ31: |
    my $f = A.jr&J;
    
    my $j = C.sc.J;
    if (ref $j && ref $f && $j ne $f) {
        die ".sc J dif $f $j";
    }
    if ($f && ref $f && !f.dead) {
        C.sc.J = $f;
    }
    
    C.sc.J
    
oJ32: |
    if (C.c.X) {
        die "Nofound $J  C.t   C.y.cv" if !ref $J;
        die "noovewr X  C.c.X ne $J" if C.c.X ne $J;
        sayyl "DELING J.name". wdump $C if C.c.X;
        A.jr&J,$J,9;
        J.dead = 1;
        T.return = [];
        return;
    }
    # also how & 9s (noncompresses) out for us into a more local J
    # u W would zlide in as an Elvis clone
    # it has a high frequency
oo3: | # MOD  being repeater  - humm instyead of oJ3, oJ* is
    my $J = Rw oJ31;
    # A/sc gets or not ^
    # things can be Wd out real hivey, Jduplicsa en namespace spag
    # they expand around 3-6
    # heres wher eit  gets creal
    Rw oJ32 + $J;
    # aboput the 2/3 A timey, where rm, compression unfolds
    # oir rhythm style joins
    return if T.return;
    
    if (!ref $J) {
        Rw oo33 + $J;
    }
    
oo33: |
    # doof, we are creating a J
    # A.c shall
    die "refJoo33 $J" if ref $J;
    $J = Rw Jto $name:J;
    
    if (A.c&pi) {
        j.Jiter = $J; # erse rev
        j.most->{$_} = J.most->{$_} for keys %{J.most||{}};
    }
    
    sayyl "J33   Made J.name";
    C.sc.J = $J || die 'watt';
    
    C.c.s = "Swim" if !exists C.c.s;
    my @an =  A.jr->('');
    if (@an && !exists C.c.s) {
        C.c.s = shift @an;
    }
    elsif (!@an && exists C.c.s) {
        A.jr->('',C.c.s);
    }
    die "noovewr   C.c.J ne $J" if ref C.c.J && C.c.J ne $J;
    A.jr&J,$J;
    at.J = $J;
    # ^ gets & replaces, C.sc.J now it
    
    Rw oJ4 + $J;

r2j: | # interpreter of buzzed puit partiscules r -> j.[cv,t,style]
    my $j;
    my $sing;
    if (J.tt) {
        $sing = 'J_tt';
        (j.cv,j.t,j.style) = $r =~ /^(.*?)\t(.*)\t(.*?)$/;
    }
    else {
        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\s+(.+?)$/;
    }
    defined j.cv || die "$sing no $r    ".ki $j;
    j.s = ar.J.bb->{$r} if ar.J;
    j.nos = 1 if ar.J && !exists ar.J.bb->{$r};
    $j;
Ajr: | # shed A.jr bb io, aimed for J and cv,t (of C?)  send $style,$v
      sub {
          my ($s,$v,$d) = @_;
          my $isv = @_ >= 2;
          my $isd = @_ >= 3;
          my $t = exists ar.t ? ar.t : ar.C.t;
          my $cv = exists ar.cv ? ar.cv : ar.C.y.cv;
          my $r;
          if (J.tt) { # FUTU
              $r = $cv."\t".$t."\t".$s;
          }
          else {
              $s = '%'.$s if $s;
              $r = $t.$s."\t".$cv;
          }
          if ($isd) {
              sayre "delbbl $r  $d   J.name" for 1..5;
              return delete J.bb->{$r};
          }
          defined $v ? 
              saybl "J.name chuck $r     $v  <--  ".J.bb->{$r}
            : saygr "J.name read $r"
              if J.V;
          !$isv ?
            !exists J.bb->{$r} ? () : J.bb->{$r}
          : do {
              J.bz->($r, $v);
              sub { delete J.bb->{$r} } 
          };
      };
jamsc: |
    ar.C = ar.d if ar.d;
    my $t = ar.t ? ar.t
        : ar.j ? ar.j.l
        : ar.C ? ar.C.t : die'not';
    my $cv = ar.cv ? ar.cv
        : ar.j ? ar.j.cv
        : ar.C ? ar.C.cv || ar.C.y.cv : die'noy';
    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {
        my $J = ar.oJ;
        if (my $ljm = J.A.ljm) {
            my $Me = "ar.oJ.ind ar.J.name "
            ." J.A.ljmo <<< J.name  sends:"
            ." $t\t$cv  $ljm";
            sayyl $Me if J.V || ar.J.V;
            push @$ljm, {%$ar};
        }
    }
    J.bz->("$t\t".$cv => ar.s) if exists ar.s;
    for my $k (sort keys %$sc) {
        my $v = $sc->{$k};
        J.bz->("$t%$k\t".$cv => $v);
        ar.C.sc->{$k} = $v;
    }
scd: | # AJ sc looking at an ov (lv) (Y.rv) to given iv - reflect as simp[le
    my $r;
    r.in = @{ov.sc};
    r.out = @{iv.sc}-1;
    r.ay = [r.in..r.out];
    r.z = [@{iv.sc}[@{r.ay}]];
    $r

