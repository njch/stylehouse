
kapai: |
    my $f = [];
    my $l = [];
    for my $k (sort keys %$u) {
        my $v = $u->{$k};
        my $pi = $i->{$k};
        my $h = $pi ? $f : $l;
        $pi ||= 'text';
        push @$h, [C.t,'',{pi=>'kv',s=>[$k,$v],and=>{pi=>$pi}}];
    }
    push @$f, @$l;
    Mn(@$_) for @$f;

pi/liv: |
    my $s = "find $u -type f";
    Jn(for => 0.1 => $s, '%hs:2784,fs:5');
    my @m = map{chomp;$_} `$s`;
    Jn(fo => 0.2 => 'fo'.@m, '%fs:6,hs:938');
    #y.lim = 9;
    my $lim = 19;
    @m = @m[0..$lim-1] if @m > $lim;  
    Mn($_ => '', {pi=>'lif',s=>$_}) for @m;
    
    Atime(4)||return;
    
    Rwyl 0.2 delifeH $J;
pi/lif: |
      -e $u || return 
      Jn('not',0.1,'!!!!'.$u,'%hs:9385');
      
      Jn(lifen => 0.09 => 'l', '%hs:3884,fs:11');
      my $si = -s $u;
      #Jn(si => 0.1 => $si, '%hs:9584,fs:7');
      
      J.most.filey = $u;  
      
      if ($si > 8000) {
          Jn(more => 0.3, '@', '%mu:r');
      }
      else {
          my @m = read_file $u;
          Mn(C.t=>'',{pi=>'liel',s=>$_}) for @m;
      }
pi/liel: |
    $u =~ /^[\{\[]/ || return
    Jn(funny=>0.1,"$u");
    #Jn(line=>0.1,{pi=>'text',s=>$u}, '%hs:3884,fs:6');
    
    Mn(C.t=>{},{pi=>'life',s=>djson $u});
pi/life: |
    Jn('ins',0.1,{s=>'{'});
    Jn(life => 0.2 => C.s);
    my $i = {qw'hol hol pid pid now now begin now'};
    my $s = 'text';
    my $br = 1; 
    Rw kapai + $i $u $s;
    my $mf = J.most.filey;
    if (u.now && $mf && hitime() - u.now > 60*1.2) {
        C.sc.deco = 1;
        Jn(rm => 0.6 => "RM", '%hs:378');
        sayre "RM $mf";
        `rm $mf`;
    }
    
pi/now: |
    die if $u < 100 && $u > -100;
    my $d = hitime() - $u;
    my $dl = $d > 3*60 ? [8,873] : $d > 60 ? [6,853] : [5,634];
    my $l = Rw samv $d;
    Jn(delta=>0.1=>$l,"%fs:$dl->[0],hs:$dl->[1]");
pi/hol: |
    my ($s,$n,$i,$etc) = split '/', $u;
    die "$u is long" if $etc;
    #die "wells $u => $s"; 
    Jn(_style => 0.1 => $s, '%is:style');
    Jn(name => 0.2 => $n, '%is:name,fs:12');
    Jn(id => 0.3 => $i, '%is:id,fs:6');
    
pi/pid: |
    Jn(pid => 0.1 => $u, '%hs:483,fs:5');
    

pi/text: |
     J.cv < 0.4 ?
         Rw pi/foldytext
     :
     J.cv < 0.7 ?
         Rw pi/boxtext
     :
     Rw pi/fulltext
    
pi/foldytext: |
    C.sc.nspc = 0.01;
         $s =~ s/\n/↯/g;
         
         my $tev = int(J.cv * 200); # 0.4 = 100
         if (C.c.si > $tev) {
             $s = ($s=~/^(.{$tev})/s)[0];
         }
         else {
             delete C.c.si;
         }
            
         if ($s =~ /^\d{10,11}(\.\d*)?$/) {
             Jn(timestamp => 0.1 => {pi=>'now',s=>$s})
             && return;
         }
         
         J.bz->('line 0.1' => "$s",
                '%css' => "background:rgba(200,30,80,0.3);color:#3f3;"
                    ."font-size:70%");
pi/boxtext: |
     C.c.si = length($s);
     
     Rw pi/foldytext;
     
     my $ni = J.c.lin if J.c.lin > 1;
     my $bi = J.c.b if J.c.b > 1;
            
            J.bz->("si/l 0.2" => "C.c.si",
            '%css' => "color:#b89;font-size:50%;position:absolute") if exists C.c.si;
            
            J.bz->('si/n 0.2' => "$ni",
            '%css' =>
            "color:#fff;font-size:50%;"
            ."position:absolute;margin-top:1.4em;") if $ni;
            
                J.bz->('si/b 0.2' => "b$bi",
                    '%css' =>
                        "color:#f89;font-size:50%;"
                        ."float:left;left:-1em") if $bi;
                   
            if (J.cv < 0.7 && $s =~ /^(# \d.+?)↯/) {
                J.bz->('line 0.1' => $1,
                '%css' => "background:rgba(200,30,80,0.3);color:#3f3;"
                    ."font-size:70%");
            }
pi/fulltext: |
     Jn(hi=>0.3=>"HI  J.cv");
     
            # 7
            my @tex = split /\n/, $s;
            #my $s = $G->vimcolor($u);
            #$s =~ s/^(<span) (class="synComment">.+?)(<\/span>)/$1 style="font-size:170%;" $2$com$3/;
            
            #$tex[0] .= " #J.cv";
            
            my $surge = int(100 * (J.cv - 0.7));
            # add interesting o to tex 0.7ishs as surge goes
            (my $one, my @o) = @tex if J.cv < 0.8;
            @tex = $one if @o;
            my $urge = $surge / 2;
            $urge = 0; # TODO colours and
            for (@o) {
                last if @tex >= $urge;
                push @tex, $_ if /^#/
                    || /R\./
                    || /\-\>/
                    || /w\ /;
            }
            
            
            my $lim = ";height:19em;overflow-y:scroll" if @tex > 19;
            $lim .= ";background:rgba(70,40,0,0.3);" if J.cv >= 0.8;
            
            my $fs = int(50 + $surge * 7);
            $fs = "font-size:$fs%;";
            
            my $s = join"\n", @tex;
            J.bz->("line 0.1" => $s, '%tag'=>'pre','%gp'=>{vimcolor=>1},
                '%css' => "margin:0.2em;background:rgba(30,30,60,1);$fs-webkit-filter:hue-rotate(80deg);$lim");

