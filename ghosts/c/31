Jto: |
    my $J;
    J.id = mkuid;
    J.name = ar.name || (@{delete ar.m})[0];
    J.bb = {};

    J.most.J = $J;
    J.most.mody = 'mani';
    J.most.eo = 'Yesui';
    J.most.wq = 1;
    
    Rw suJ $J;
    Rw Jup $J;
    
    n J.name, 0.9, J.name, {tag=>J.name,id=>J.id}
    
    Rw Viu $J;
    
    return $J;
    
    J.bz = sub { # the cv=>t=>style r
       my $m = [@_];
       die "not 2 @$m" if @$m != 2;
       my $j={};
       while (@$m) {
           my ($r, $v) = (shift @$m, shift @$m);
           if ($r =~ /^%(\S+)/) {
               j.style = $1;
           }
           else {
               $j = Rw r2j $r $J;
           }
           defined j.cv || die "NOSEYV: j.cv".wdump[$j,[@_],[$r, $v]];
           
           j.r = join "\t", j.cv, j.t, j.style;
           j.s = $v;
           my @Js = $J;
           push @Js, values %{J.phy} if J.phy;
           for my $jj (@Js) {
               jj.bb->{j.r} = j.s;
               push @{jj.ord}, {%$j} if jj.ord;
               jj.tim->{j.r} = hitime() if jj.tim;
               jj.wtf->{j.r} = $F[0] if jj.wtf;
               jj.ap->($j) if jj.ap; # <<<
           }
      }
    };
    $J
Viu: |
    my $eu = sub { J.uS = 1 };
    my $unu = sub {
        J.uS || return;
        Rw uCon;
        J.uS = 0;
    };
    my $dJ = sub {
        my @m = @_;
        if (ref $m[0]) {
            if ($m[0] eq $J) {
                shift @m;
            }
            else {
                die "nJinto: ".wdump 2, [@_];
            }
        }
        pop @m while $m[-1] eq '';
        if (@m < 4) {
            $m[2] ||= {J=>$m[0]};
            @m == 3 || die "!!!\n".wdump[@m];
        }
        while (@m > 4) {
            my $wat = pop @m;
            $wat eq '' || die "got some $wat  f n".wdump 2, \@m;
        }
        [@m]
    };
    J.u = sub {
       $eu->();
       my $ar;
       ar.C = [$dJ->(@_)];
       ar.J = Rw j $J qq;
       Rw I;
    };
    J.n = sub {
       $unu->();
       my $ar;
       ar.J = $J;
       ar.C = [$dJ->(@_)];
       Rw I;
    };
    J.m = sub {
       $unu->();
       my $ar;
       ar.M = shift;
       ar.J = $J;
       ar.C = [$dJ->(@_)];
       Rw I;
    };


j: |
    my $name = shift @$m;
    my $Y = J.El->{$name};
    return $Y if $Y;
    J.El->{$name} = Rw Jto - $name;
    
