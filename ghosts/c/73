Yup: |
    n Steev
    Mn(shedful => '0.1-0.7', {pi=>'seas',s=>'g/c/8 g/G/on'});
    J.V = 0;
     
Steev: |
    n Here=>''=>"IS STEVE"
    
Hypo: |
    J.V = 0;
    $G = Rw Gto;
    sayyl "Viewi  g...... J.A.ztime - A.ztime" for 1..2;
    
    Rw Viu;
    u Vi
    u Shr
    
    n stod=>''=>{pi=>ajyp=>s=>Duv=>W=>'Yup'}
    #my $G = Rw Gto $J;
    #my $Y = Rw Elvus $J $oJ aboves1;
    #sayyl wdump 2, [$rv];
    n something=>''=>{s=>rand(5)}
    
    J.No = 'anga';
    J.I.postnoodle = 1;
    
    
    
AJo: |
    my $aj = {Wid=>J.Jo.id,J=>J.Jo,id=>mkuid};
    sayyl "N AJo ".wdump 19,[rv.i,rv.c,rv.sc];
    sayyl wdump 1, $rv;
    
Shr: |
    u arecode
    n Towil=>''=>{},{code=>'V 8'=>way=>'Ajo'}
      
arecode: |
    Mn(tocode=>''=>{}=>{code=>'I 4'=>some=>"thiung"});
    Mn(Umust=>6=>{}=>{code=>'U'=>also=>"something"});

Vi: |
    Rw Viu;
    # is being, inserted to qqs
    n O=>2=>'gottagetta'=>{code=>1}
    n Mk
    #n ''=>''=>{W=>'Mk'}
Mk: |
    J.V = 1;
    n codeba=>''=>"Waytoshov"
    
pi/ajyp: |
    my $W = C.c.W;
    
    my $Y = W.El->{$s} || return
        n Not=>''=>"no El $s on W.name"
        
    my $rv = Y.rv || return
        n Not=>''=> "nmorv J.name W.name $s"
    
    rv.i && rv.c && rv.sc || return
        n Not=>''=> "norsc ".wdump[sort keys %$rv];
    
    
    n lisn=>''=>{s=>"rv.i"}
    
    Atime(2)||return;
    
    Mn(c=>''=>{pi=>''=>s=>'c>'.@{rv.c}});
    
    Mn(sc=>''=>{pi=>''=>s=>'sc>'.@{rv.sc}});
    
    
    
    


uCon: |
    my $A = {J=>$J};
    my $J = Rw Elj $J qq;
    my $Y = Rw Noodles $J;
    my $rv = Y.rv;
    
    say "On A.J.name  post J.name: rv.i ";#.wdump 33, [Y.rv.i, Y.rv.c, Y.rv.sc];
    say F_delta();
    
qq: |
    # getting run t
    # qode qompiler
    # does each thing input... has out that joins up
    # J (above)  # does u thing
    #   J qq     # gets W/thing as inbryo or stored G.oin Wemotables
    #   ^        # settles (Jbove wants out, to do n)
    #   output G compressions (+/- laws)
    # J eats   " "
    
    
    #
# /home/s/Music/Nurse With Wound/2004 Shipwreck Radio Volume One (Seven Sonic Structures From UtvÃ¦r) 2xCD/disc 2/04 - june 20.mp3
fi: | #c
     my $point = ar.p || ar.pin || ar.m->[0];
     
     my $know;
     if (!ar.pin && ar.J) {
         my $J = ar.J;
         if ($point =~ /^\*\/(\w+)$/) {
             my $inway = $1;
             my $h = ar.h || G.way;
             $h = h.hooks if h.hooks;
             my @gu = @{J.yy.styleord};
             #@gu = @gu[0..5] if @gu > 6;
             my @so;
             for (@gu) {
                if (ref $h->{$_} eq 'HASH' && $h->{$_}->{$inway}) {
                    push @{$know||=[]}, "$_/$inway";
                    last if !ar.sucky;
                }
             }
         }
     }
     
     if (!$know) {
         my %wo = Rw findl +;


         my @keys = map { s/^\///; $_ } keys %wo;
         if (!ar.pin && ar.J) {
             my $J = ar.J;

             @keys = grep { my($K)=split'/',$_; J.yt->{$K} } @keys;
             my @or = @{J.yy.styleord};
             if (@or && @keys > 1) {
                 my $i = 1;
                 my $is = {map{$_=>$i++}@or};
                 @keys = sort {
                  $is->{($a=~/^(.+?)\//)[0]} <=> $is->{($b=~/^(.+?)\//)[0]}
                  } @keys;

                 if (!ar.sucky && @keys > 1) {
                     #sayre "Limiting @keys";
                     @keys = $keys[0];
                 }
             }
         }
         $know = [@keys];
     }
     #saybl "With: ar.J.name  $point    @$know" if ar.J && ar.J.name eq 'shv';
     @$know

