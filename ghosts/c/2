qq: | # u
    # getting run t
    # qode qompiler
    # does each thing input... has out that joins up
    # networkable infinity
    # J (above)  # does u thing
    #   J qq     # gets W/thing as inbryo or stored G.oin Wemotables
    #   ^        # settles (Jbove wants out, to do n)
    #   output G compressions (+/- laws, booKed, Domes)
    # J eats   " "
    # /home/s/Music/Nurse With Wound/2004 .mp3
    # sense stream, wired with c.from = CCC (spiral cut &&)
    # A.c feed, seek oMins, could be way wider langusage (embassy work to other)
    # note Spanish order ^    ^
    
    
     # all thoughts are prayed to some beast
     # acquire Y personality:# is a 4d join! something n'd in, certain conditions already from 6...
     # whatever is high in the plain is coming at us
      # canopy
      # pi lays out in tiles
     # worked up to via aj/In jig, or T huck d&n&er
     
     # make pool, synth space, want arches
     # fork & rejoin to exciting place
     # the valley, what it means to be here in here YIN
     # ^ DESCRIBE how we're in here to
     # also the executablur
     # if something wants to mess with itself when...
     
     
    # F says how to make an A for it
    # then A.t&3 etc moves time forward, ore return is crux slot craft
    # return @$_ for A.t&3;
    # so we can hijack Ein by the something
    # and want to inject a tiny bit of code in this one circumstance
    # joins up by whether its there at all (u vic)
    # and what code=>thing is referring into... known at utime by Athing
    # all tumbling down F right behind ...
    
    # define how to throw sheets of language
    # do zis first stuff...
    # and and...
    # how cached waveforms W together as they get further down
    # the users
collaspII: | # acquire perhaps even time 1, spiral spiraled IIII and I
    # you could make it keep A.II, which includes A.IIIII, many tiles
    my $II = A.J.A.II ||= {};
    Rw spII $A $II J/A/IIII J/A/I;
    $II;
    
spII: | # thereis a II being passed overhead, entrance to spIII N C applier/updater
    my @N = @{ar.m};
    my @C;
    while (@N) {
        my $m = shift @N;
        my $r = $G->gip($A,$m);
        if (ref $r eq 'ARRAY') {
            push @N, @$r;
        }
        elsif (ref $r eq 'HASH') {
            push @C, {t=>$m,c=>{s=>$r}};
        }
    }
    my $Ii = join " + ", map{"_.t:_.c.s"} @C;
    my $was = II.Ii;
    if ($Ii eq $was) {
        saygr "Same A.talk! II.Ii  ".F_delta;
        return
    }
    II.Ii = $Ii;
    # we dive into always, should form tidy tree with D chaos at tips
    # the screening space saver, the no way out-er
    my $N = [@C];
    Rw spIII $A $II $N K/cv/t;
    sayre "Diffi  II.Ii eq $Ii  ".F_delta;
spIII: |
    my $ooI = ar.ooI;
    $ooI ||= II.ooI ||= {};
    ooI.mo ||= $ooI;
    delete ooI.st if ooI.mo eq $ooI;
    my $m = [@{ar.m}];
    @$m = split '/', $m->[0] if @$m == 1;
    my $n = shift @$m;
    $n||die "Non? $n @$m ooI.ins";
    @$N||die"noNsp";
    
    my $Ii = join " + ", map{"_.t:_.c.s"} @$N;
    return if $Ii eq ooI.Ii;
    ooI.Ii = $Ii;
    
    %$II = ();
    
    my $tw = {map{$_=>1} map{ keys %{_.c.s} } @$N};
    # can comission stillness
    # we all look like each other's Jesuses
    # must in N order move in changed hashes
    # but our awareness of
    for my $K (sort keys %$tw) {
        if (@$m) {
            my $III = $II->{$K} ||= {};
            my $oI = ooI.K->{$K} ||= {mo=>ooI.mo};
            oI.ins = (ooI.ins&&"ooI.ins/")."$K";
            my $N = [
                map { {t=>_.t,c=>{s=>_.c.s->{$K}}} }
                grep {exists _.c.s->{$K}}
                @$N
            ];
            my $d = ar.d + 1;
            #say "Throw ooI.ins   >>> $K";
            
            Rw spIII $A $II:III $ooI:oI $N $m $d;
        }
        else {
            my @C = grep {exists _.c.s->{$K}} @$N;
            die "manyC for $K" if @C > 1;
            for (@C) {
                #sayyl "got   ooI.ins   === $K        for _.t";
                ooI.mo.st->{ooI.ins}->{_.t}->{$K} =
                    $II->{$K} = _.c.s->{$K};
            } 
            
        }
    }
    delete ooI.K->{$_} for grep {!$tw->{$_}} keys %{ooI.K};
    
    if ($ooI eq ooI.mo) {
        II.Ii = $Ii;
        II.ooI = $ooI;
    }
Gto: |
    my $G = $G;
    G.name = 'thouG';
    my $mkD = sub {
        my ($pin,$ar)=@_;
        my $D;
        D.point = $pin;
        
        if (my $C = ar.__D) {
            delete ar.__D;
            D.bab = C.c.s || die "N s".ki $C;
            D.noise .= C.sc.dige if C.sc.dige;
            D.Verb = 1;
        }
        D.ar = $ar;
        D.name = join ' ', D.point, sort keys %{D.ar};
        D.sign = "Z";
        D.talk = join' ',grep{defined}map{$D->{$_}}qw'sign name noise';
        $D;
    };
    G.w = sub {
        my ($pin,$ar)=@_;
        my $D = $mkD->($pin,$ar);
        
        if (!defined D.bab) {
            D.bab = G.way->{$pin};
        }
        if (!defined D.bab) {
            if ($pin =~ /\//) {
                #say "windshot: $pin" unless $pin =~ /^pi/;
                D.bab = fwind(G.way,$pin);
            }
        }
        
        if (!defined D.bab && !ar.__D && ar.A) {
            my $c = ar.A;
            map{$c = $c->{$_} if $c} qw'J A II W 0.4';
            if ($c) {
                my $C = $c->{$pin};
                if ($C) {
                    c.sc.acgt && die "selected W4".ki$C;
                    ar.__D = $C;
                    $D = $mkD->($pin,$ar);
                }
            }
        }
        
        if (!defined D.bab) {
            die "Not findin D.talk";
            return;
        }
        
        my $Z = $G->Doming($D);
        G.randomtask->() if G.randomtask;
        my $r; eval { $r = [ $G->D($D) ] };
        $G->Done($Z);
      
        if ($@) {
            my $ne = "Z Z.inter\n$@";
            $@ = $ne;
            D.nodie || die $@;
            $@ = "";
        }
        return wantarray ? @$r : $r->[0];
    };
    $G
Jto: |
    my $J;
    J.id = mkuid;
    J.name = ar.name || shift @{delete ar.m};
    J.bb = {};

    J.le = ar.le if ar.le;
    J.most.J = $J;
    J.most.mody = 'mani';
    J.most.eo = 'Yesui';
    J.most.wq = 1;
    
    # GONERS
    Rw suJ $J;
    Rw Jup $J;
    # 
    
    n J.name, 0.9, J.name, {tag=>J.name,id=>J.id}
    
    Rw Viu $J;
    
    return $J;
Viu: | # u/n/m pinging uCon, setup part Jto
    my $eu = sub { J.uS = 1 };
    my $unu = sub {
        J.uS || return;
        Rw uCon;
        J.uS = 0;
    };
    my $dJ = sub {
        my @m = @_;
        shift @m if ref $m[0] && $m[0] eq $J;
        pop @m while $m[-1] eq '';
        if (@m < 4) {
            $m[2] = {J=>$m[0]} unless defined $m[2]; # c.J=t reflex
            @m == 3 || die "!!!\n".wdump[@m];
        }
        @m>4&&die"mvelope>4".wdump 2, \@m;
        [@m]
    };
    my $oAr = sub { # bit of dome escape vector
        my ($ar) = @_;
        my $oA = ar.oA = {};
        oA.subline = (caller(1))[2];
        oA.D = $F[0];
    };
    # 6 shul start u pha
    J.u = sub {
       $eu->();
       my $ar;
       ar.N = [$dJ->(@_)];
       ar.J = Rw Elj $J qq;
       $oAr->($ar);
       Rw In;
    };
    J.n = sub {
       $unu->();
       my $ar;
       ar.J = $J;
       ar.N = [$dJ->(@_)];
       $oAr->($ar);
       Rw In;
    };
    J.m = J.M = sub {
       $unu->();
       shift @_ if ref $_[0] && $_[0] eq $J;
       my $ar;
       ar.M = shift;
       ar.J = $J;
       ar.N = [$dJ->(@_)];
       $oAr->($ar);
       Rw In;
    };
uCon: |
    my $A = {J=>$J};
    # am U?
    A.talk = "A.J.name ".(A.J.le && A.J.le.name);
    
    my $qq = Rw Elj $J qq;
    my $Y = Rw Noodles $J:qq;
    my $oo = Rw Elj $J oo;
    
    my $rv = Y.rv;
    if (@{rv.sc}) {
        # wants to flatten to clifes over into ootrees, branching in changes
        # and branching those changes from oo Noodle into an aj
        # which adjuncts waves of newness
        # intermixing
        # this N is something to be indexed, its oo-side may exist already
        # could even stitch travel hashes, which are the most particulate
        # thrown into I
        # upon Intry to the I, II is created, some indexes throw up
        # waves of infinity crashing together
        # II can be consumed, it's is separated at the top level
        # but merges down, ts clobber
        # can fill up live as it is A.II, the recreated I in 2
        # crated from the I, surroudingings, and the II
        # falling with A, quantum state relative to G
        # sing into its ownwhere it is to be a bunch of travely jugheads
        # much easier
        # watching pha cones, concats
        sayre "SLIPPING SC" for 1..5;
        snooze;
        delete qq.El.Pre; # diff bb-Y
        delete qq.El.Duv; # diff Y-shell
        return Rw uCon;
    }
    # curve falls # MAKES TRAVEL, just throw on J.Idex
    # three and two circles
    # get that banjo
    
    #return if J.A.Ii eq rv.i;
    
    my $N = [@{rv.c}];
    
    J.A.Ii ?
        J.A.Ii ne rv.i ?
            sayre "A.talk: Diff o J.A.Ii -> rv.i"
          : 1
      : sayre "A.talk: New ! rv.i";
    
    Rw uThree $A $J $Y $qq $oo $rv $N;

    say "Reckonon J.name: ".F_delta();
uThree: |
    @$N = Rw InCoil $J:oo $N wongui _;
    @$N = Rw InCoil $J:oo $N wantcode _;
    oo.V=1;
    my $s = Rw InCoil $J:oo $N concoi;
    #Rw InCoil $J:oo $N talky;
    
    # as the i,i,i coalesces, later
    J.A.Ii = rv.i;
    J.A.I = $s if %$s;
    delete J.A.I if !%$s;
    
    # then A.Ii sees J.A.I (+more, concat) hashrefs i aj like
    # which is a stilled wave of vectors
    # the wave can catch up to itself
    # the usual plywood spiral peel
    # made {s=>$s,ply=>'K/cv/t:D',grp=>'K/cv&c,sc,gr'}
    # climb the limbs in falling A.mo.y./..
    # you are suggesting I use more noisey code
    saygr
        Rw TreeD $s $scby=gro;
TreeD: |
    my $bydef = "^";
    my @say;
    for my $K (sort keys %$s) {
        my $vs = $s->{$K};
        for my $cv (sort keys %$vs) {
            my $tw = $vs->{$cv};
            my $g = {};
            while (my ($k,$D) = each %$tw) {
                my $gk = D.sc->{$scby} || $bydef;
                # ^
                # v
                $g->{$gk}->{$k} = $D;
            }
            for my $gk (sort keys %$g) {
                my $ts = $g->{$gk};
                push @say, sprintf ' %-9s %-6s %-18s %27s',
                    $K, $cv, $gk, join(",", sort keys %$ts);
            }
        }
    }
    join "\n", @say
InCoil: | # In wild packer # slipping an II in, aggregator following alllist
   ar.v ||= {};
   ar.M ||= [];
   my ($oK,$rM) = @{delete ar.m||die"nbok"};
   inter({oK=>$oK});
   $N = [{MZ=>{$oK=>ar.v}}, @$N];
   Rw In + $N;
   $rM ? @{ar.M} : ar.v
Elvus: | # arbitrary in-J Elvi with thrust over, possibly   - c for J must be already seT
    my $Y = Rw El;
    my $oJ = ar.oJ || $J;
    Rw Elvis + $J:oJ $Y;
    $Y
El: |
    my $name = ar.name || shift @{delete ar.m};
    my $Y = J.El->{$name} ||= {bb=>{},name=>$name};
Elj: |
    my $name = ar.name || shift @{delete ar.m};
    if (my $Y = J.El->{$name}) {
        return $Y;
    }
    J.El->{$name} = Rw Jto - $le:J $name;
J6: | # do J=>m not W=>m, looser
   ar.J = ar.name || shift @{delete ar.m};
   Rw J5 +; 
J5: |
   return sayre "RECUR" if @F > 150;
   my $r = {%$ar};
   r.W = ar.name || shift @{delete ar.m} if ar.m;
   delete r.R;
   my $J = G.oin;
   my $i = Jn('','',$r);
   my ($s) = @{i.is};
   return s.sc.J||die "no sc J";
Nbz: | # receiver of buzzed out planes of N (C)   # peeler futuro, forte arbiter # suJ cloned  # other is A.jr
    J.tt = 1;
    J.bz = sub { # the cv=>t=>style r
       my $m = [@_];
       die "not 2 @$m" if @$m != 2;
       my $j={};
       while (@$m) {
           my ($r, $v) = (shift @$m, shift @$m);
           if ($r =~ /^%(\S+)/) {
               j.style = $1;
           }
           else {
               # to ivertake in here
               $j = Rw r2j $r $J;
           }
           defined j.cv || die "NOSEYV: j.cv".wdump[$j,[@_],[$r, $v]];
           
           j.r = join "\t", j.cv, j.t, j.style;
           j.s = $v;
           my @Js = $J;
           push @Js, values %{J.phy} if J.phy;
           for my $jj (@Js) {
               jj.bb->{j.r} = j.s;
               push @{jj.ord}, {%$j} if jj.ord;
               jj.tim->{j.r} = hitime() if jj.tim;
               jj.wtf->{j.r} = $F[0] if jj.wtf;
               jj.ap->($j) if jj.ap; # <<<
           }
      }
    };
    $J
timery: | # capturing
    # n ^-re should mean n C.t."-re"
    n timery_re => 2 => {s=><<''},{code=>'J 42'}
        if (J.most.J eq $J) {
            # J.most.A could coord 8ish stuff. allele towerish...
            J.A.timery = {};
        }
    
    n timery_do => 7 => {s=><<''},{code=>'T 9'}
        if (my $ti = J.most.J.A.timery) {
            ti.t->{J.name} = $sol;
            $ti->{$sol}++;
            if (J.name eq 'Wkcs') {
                say "Wkcs: ". k2 {w=>{W=>$ti}};
            }
        }

