



Pinup: | # on a host, receive pins that need
    my $wake = {};
    for my $p (@$m) {
        my $o = J.supins.>$p;
        say "Waking $p would do: ".wdump 2, $o;
        $wake.>$_ ++ for keys %$o;
        Rw Gohdown $p;
    }
    saybl "Pinup; J.name  ! ".wdump 4,[$wake];
    
    for my $W (keys %$wake) {
        n $W
    }
    
Pintidy: | # ambient GW process table cleanup
    u UpPg
    # qua     ! ! !!! ! ! !!!
    $A=
    n n=>''=>n
    my @e = G&qh,<<'';
        select * from gw
    for (@e) {
        if (_.pid && -e "/proc/_.pid/status") {
            say "Alive: ".ki $_;
        }
        else {
            say "Gone process: ".ki $_;
            G&qp,<<'',_.pid;
                delete from gw where pid = ?
        }
    }
    #    $to = to.mo.J;
    #    to.pins.>$pin ||= 1;
Pins: |
    return if !G.c.b;
    my $pins = {};
    ###
    my $self = J.name;
    $pins->{$_}->{$self} = 1 for keys %{J.pins};
    while (my ($k,$v) = each %{J.inJ}) {
        $v eq v.mo.J || die "v.name not mo";
        v.pins || die "$k has no pins...";
        $pins->{$k}->{$k} = 1;
        $pins->{$_}->{$k} = 1 for keys %{v.pins};
    }
    my $la = J.pinla ||= {};
    my $new = [grep { !$la.>$_ } keys %$pins];
    if (@$new) {
        G.GW || return;
        #say "pin listenings: + @$new";
        $A = G.GW.lA || die "GW no .lA :".wdump 2, G.W;
        Rw AddPins $A $J $new;
        $la.>$_ = 1 for @$new;
    }
    J.supins = $pins;
AddPins: | # resource use under gw_pin
    # given GW's A for UpPg, and J Oth whose id GW is listening to
    my $o;
    o.w = G.GW.at.Wid || die "No wid G_W";
    o.t = G.GW.at.Mid || die "no mid G_W";
    o.pid = $$;
    if (!J.gwup++) {
        #G&tyable,gw=>'w:text:primary:key,pid';
        #G&tyable,gw_pin=>'w:text:references:gw:on:delete:cascade';
        G&qp,<<'',o.w;
            delete from gw where w = ?
    }
    my $h = G&pet,gw=>$o;
    sayyl "Adding h.w -> ".join',  ', @$new;
    G&qp,<<'',h.w,$_ for @$new;
        insert into gw_pin (w,t) values (?,?)
Goh: |
    u UpPg
    # qua     ! ! !!! ! ! !!! 
    J.lA=$A=
    n GW
    #G&tyable,gho=>'file,s,dig,ts:timestamptz';
    J.ev.th = 'middle';
    J.ev.t.PgNotify.s = 'M';
    J.ev.f.Gup = 'Gohup';
    delete J.ev.li;
    J.lsit ||= G&liz;
    
    Rw restar if J.times++ > 123;
    Rw waito + $d=123;
Gohup: |
    $A = J.lA||die "Need an init J.name A"; #! ! !
    my $c;
    c.t = E.t;
    c.s = E.c.s;
    $c.>$_ = E.sc.>$_ for qw'ts file dig';
    my($o) = my @m = G&qh,<<'',c.t;
        select * from gho where t = ?
    die "Many c.t: ".wdump 4,\@m if @m > 1;
    # ts was noticed time
    saygr "Gohup c.file c.t";
    # tos is mtime of the paddock
    my ($ts) = map{_.ts} G&qh,<<'';
        select now() as ts
    my @s = (c.file,c.t,c.s,c.dig,$ts);
    if ($o) {
        G&qp,<<'',@s,c.t
            update gho set file=?, t=?, s=?, dig=?, ts=? where t = ?
    }
    else {
        G&qp,<<'',@s
            insert into gho (file,t,s,dig,ts) values (?,?,?,?,?)
    }
    c.ts = $ts;
    Rw Gonews $J $c;
    Rw w_way_file $k:c.t $v:c.s;
    
Gohdown: | # read pins from gho where t=$p, chucks in G.way
    my $J = G.GW || die "No GW";
    $A = J.lA || die "Need init GW A";
    
    my @w = G&qh,<<'',$p;
        select file,t,s,dig from gho where t = ?
    @w > 1 && die "Many ways to $p: ".wdump 3, \@w;
    my $w = shift @w;
    say "Gohdown way: $p";
    (my $fi = $p) =~ s/\W/-/g;
    my $was = G.way.>$fi;
    
    G.way.>$fi = w.s;
    
    if ($was) {
        write_file('/tmp/gohgon',$was);
        write_file('/tmp/gohdon',w.s);
        sayre "WAOKs out $p: ". `diff /tmp/gohgon /tmp/gohdon`;
    }
Gonews: |
    # look at hosts->host_pins table, invents from Gohup
    if (!ar.do) {
        push @{J.todo||=[]}, ar.c || die "No arc! ".wdump 1, $ar;
        Rw wayty $J $p=Gonews $do=1 $woping=3oe;
        return;
    }
    #
    my @pins = uniq map{_.t} @{delete J.todo};
    my $where = join' or ',map{"t = ?"}@pins;
    my $wh={};
    acum $wh, _.w, _.t for G&qh,<<''.$where,@pins;
        select * from gw_pin where 
    # Go
    while (my ($Wid,$pins) = each %$wh) {
        my $m = "Pinup;".join',',@$pins;
        say "$Wid -> $m";
        G&zen,$Wid,$m
    }
    saygr "No remotes" if !keys %$wh;
Goat: |
    n GW
    n Ghost
    #  !
    Rw restar if J.times++ > 23;
    Rw waito + $d=27;
Ghost: | # farm # #
    u trows
    y.in=y.out=0.3;
    J.VV.N = 1;
    my @c = map {"Ghost/c/$_"} qw'2 5 6 99 47 7 48 8*';# 1* 8* à¶¬ 11 61 43'; #####!###
    $A=
    n C.t=>9=>{}
    # #
    my $cmd = "ls -rt --full-time --inode @c";
    J.fast ||= do {
        Rw recur $d=0.5 $cb:_ for sub {
            my $stuff = G&batik,$cmd;
            return if J.fast_stuff eq $stuff;
            my $fir = !J.fast_stuff;
            J.fast_stuff = $stuff;
            return sayre " - - First!" if $fir;
            Rw waito $J;
        };
        1
    };
    my @z = grep {!/(?!8)\d\d\d$/} G&batik,$cmd;
    # #
    $A=
    n sha=>1=>slm(20,dig(join"\n",@z))
    my ($sha) = @{A.M};
    #
    if (sha.c.s eq J.wz.sha.c.s) {
        J.lies = 1; # 
        y.ope = T.nose = 1;
        return saybl"------- C.t    sha.c.s";
    }
    else {
        saygr "ls sha off:\n sha.c.s \n J.wz.sha.c.s"; ##
    }
    # !!!! !! !!! # # # # # # #
    for (@z) {
        chomp;
        s/^\s+|\s+$//sg;
        my ($ino,$mo,$qua,$use,$grp,$size,$date,$time,$tz,$file)
            = split /\s+/, $_, 11;
        $time =~ s/\.?0+$//g;
        my $o = {
            ts=>"$date $time $tz",
            ino=>$ino,
            size=>$size
        };
        my $oC = J.wz.>$file;
        my $was = 1 && $oC;
        $was || say "No find $file amung: ".join ', ', sort keys %{J.wz};
        o.hard = 1 if !$was;
        
        my @dif = G&hesl,oC.sc,$o;
        
        if ($was && !@dif) {
            y.ope = 1;
            J.lie.>$file = 1;
            say "Nexting  /  lie $file";
            next;
            
        }
        #
        m $file=>-Ghost=>$o
    }
    y.ope = 1;
    
pi/Ghost: | # paddock #
    y.at.>$_ = c&$_ || die "no $_ givec" for qw'ts ino size';
    y.in=y.out=0.3;
    #  # #
    $A=
    n sha=>1=>(`sha1sum $s` =~ /^(\S+)/)[0]
    my ($sha) = @{A.M};
    
    if (!delete c&hard && sha.c.s eq J.wz.sha.c.s) {
        J.lies = 1;
        saybl"Skiping same C.t";
        y.ope = 1;
        return;
    }
    
    my $file = $s;    
    my $am = LoadFile($file);
    my @l = sort keys %$am;
    my @ch;
    for (@l) {
        # should be on sev somewhere, impose new ts by s/dig change, maintain this W ##
        my $s = $am.>$_;
        my $wa = J.wz.>$_;
        
        sayre("Jaws missing: $_") if !$wa;
        my $dig = slm(9,dig($s));
        if ($dig ne wa.sc.dig) {
            my $c;
            c.t = $_;
            c.c.s = $s;
            c.sc.pi = 'Gup';
            (c.sc.ts) = map{_.ts} G&qh,<<'';
                select now() as ts
            c.sc.tos = J.at.ts;
            c.sc.dig = $dig;
            c.sc.file = $file;
            sayyl "Was a change: $file -> c.t\t:    $dig ne wa.sc.dig";
            push @ch, $c;
        }
        n $_=>3=>$s,{dig=>$dig}
    }
    y.ope = 1;
    if (@ch) {
        say "zending ".@ch;
        G&zen,Goh=>@ch if @ch;
        Rw waito $J:J.mo.J $W=Sefission;
    }
    # sev fold 3 - ! #
    
trows: | # osc at 5 fillin at time 2, goat cheese
    u allact
    n UpPg
    
    n Arow =>32,<<'','%code:U,v:scJ'
        if (0) {
            G&tyable,@$_
            for 
            [goat=><<''],
                s,ts:timestamptz,jid:serial:primary:key,jup:int
            [cheese=><<''];
                s,ts:timestamptz,jid:int:references:goat:on:delete:cascade
            
        }
        my $o = {t=>C.t};
        o.jup = C.c.W ? \'is null' : do {
            my $up = J.Jiter.trow || die "No trow upin ".ki J.Jiter;
            up.jid
        };
        J.trow = G&pet,goat=>$o;
        
        J.aws = {map{_.t=> $_} G&qh,<<'',J.trow.jid };
            select * from cheese where jid = ?
        
        J.wz = {map{_.t=> G&decj,$_ }values %{J.aws}};
        
        J.pich.trows = {any=>1,u=>'trows'};
    
    # grab current (just past) things we said
    n rows =>5,<<'','%code:Sev,v:yat'
        my $V = C.c.V;
        my $J = C.c.J;
        if (C.y.cv == 0.9) {
            return if delete J.lies;
            my @bu = map { V.ta->{$_} || die "No $_ on V f ".ki$C }
                C.y.k, sort keys %{at.V};
            
            my @ea = map {
                {t=>_.t, s=>_.c.s, c=>sjson(_.c), sc=>sjson(_.sc)}
            } @bu;
            
            
            my @gone;
            my @put;
            my $tw = {};
            for (@ea) {
                my $o = J.aws.>_.t;
                next if J.lie.>_.t;
                if (G&heq,$o,$_ ) {
                    $tw.>_.t = 1;
                }
                else {
                    push @put, $_;
                }
            }
            while (my ($k,$v) = each %{J.aws}) {
                next if delete J.lie.>$k;
                push @gone, $v unless $tw.>$k;
            }
            
            my @ts;
            my $and = join(" or ",map{push@ts,_.t;'t = ?'}@gone);
            
            my $qa = <<'';
                delete from cheese where jid = ?
            $qa .= " and ($and)" if @ts;
            unshift @ts, J.trow.jid;
            G&qp,$qa,@ts;
            
            for (@put) {
                if (delete J.lie.>_.t ) {
                    $_ = J.wz.>_.t || die "No _.t to same";
                }
                G&qp,<<'',J.trow.jid,_.t,_.s,_.c,_.sc;
                    insert into cheese (jid,t,s,c,sc) values (?,?,?,?,?)
            }
        }
    
    
    
    
    
    
    
    # #
So: | # gonish vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    #u urw #
    u Deso
    #u ishfi
    J.VV.N = 1;
ambth: | # e,biertoho, does the 0.3 things (should do 6 and compress into 3"
    while (my ($k,$v) = each %{J.El.Pre.v->{'0.3'}}) {
        next unless v.sc.pi;
        say "J.name ambients v.sc.J.name" unless J.name eq 'Follower';
        n v.t=>v.y.cv=>{pi=>v.sc.pi,s=>v.c.s}
    }
pi/sol: | # file anywhere, together
    # everything this s can get a copy of the ,,,
    y.at.oWl = 1;
    $s || die "Sol: ".wdump 2, $C;
    n Film=>$C
    
Film: |
    J.ev.th = 'middle';
    # acum
    J.ev.f.sol = 'SpaceFlos';
    J.ev.opl = 'panop';
    # answer
    J.ev.f.line = 'yJLong';
    # make otherwise so solflos, syncs panops to Follower
    # to sleep
    y.ope = 1;
    Atime(2);
SpaceFlos: | # node write, collected goo sticks (active agent & hi wires) gets E.t to thingdex routes to remote by C
    return sayre "E.t iutno self E.sc.J.name\n\n\n\n"
        if E.sc.J && E.sc.J.mo.J eq $J;
    
    my $K = ref E.c.s ? E.c.s.t || die "not: Ecs C: ".ki E.c.s
        : E.c.s || E.t;
    $K || die "noK? ".ki $E;

    A.V&E &&
    sayyl "SPACE ELVIS: C.t: for $K   "
        .(E.sc.J && "E.sc.J.mo.J.name  E.sc.J.name");
    
    
    if (my $so = J.ev.so) {
        my ($h) = map{_.nj}
        n $K=>3=>{pi=>$so=>s=>$K}

        E.c.s.sc.pi || die "E.t Ecs Holding strange: ".wdump 2, E.c.s;

        E.c.s.c.h = $h;
        # esc gas radar, sol can embed or so
    }
    #
    my $opl = J.ev.opl || 'annopl';
    my $was =
    n $K=>6=>{pi=>$opl=>s=>$E},"%qs"
    
    sayyl "The was was: was.talk    was.nj.name";
    
pi/pane: |
    #u perCcsomethingtracepha
    n $_ for map{values %$_}values %$s
    
pi/panop: |
    Rw pi/anoply;
    n Follower=>6,{W=>Follower=>e=>$C},'%qs,qz'
pi/anoply: |
    y.ope =  1;
    y.at.oWl = 1;
    $s || die "no anoply in";
    my ($t,$l) = Rw idToE;
    $t || die "anoply noi $t: ".wdump [$C,$s];
    n $t =>{}=>{}=>{opel=>sjson($l)}
    
pi/annopl: | # route table
    y.ope = 1;
    my ($t,$l) = Rw idToE;
    n $t =>{}=>{}=>{opel=>sjson($l)}
    
Follower: | # follws E.t as -cfile, hooks -lines to send -line(s) to E.t, has panopoly of Film like things to unify changesity into therermore panoply actioney changesity
    # (everything threes)
    y.ope = 1;
    y.cvil = 1;
    y.at.oWl = 1;
    J.pix = {pi=>'lines',u=>'followlines'};
    
    # G ambientow
    acum $G=>all=>$J;
    
    #J.VV.N = 1;
    J.ev.th ||= 'middle';
    # acum
    J.ev.f.panop = 'SpaceFlos';
    J.ev.so = 'cfile';
    # answer
    J.ev.f.line = 'yJLong';
    # do lot
    J.ev.amb = 'ambth';
    Atime(2);
    
followlines: |
    u allovse
    n '','','%of:Sev'
    n LinesFollow =>4431=><<'',{Td=>'V/*/new',Tdarge=>'iv,ov'}
        T.noTd = 1;
        return unless C.sc.pi eq 'line';
        !V.rv && return; #sayre "J.name started with lines: C.c.s"
        my $oJ = $J;
        $J = J.mo.J;
        .
        $C = I.d&hup,$C;
        .
        C.c.was = !Y.root.y.ta;
        # should be refering to the one and the one of the event
        saybl "J.name    Got pi line!             C.c.s   C.c.was";
        n J.C.t,$C,$oJ
        # may like to grab the element before it
        # like a curve continuing
    

