
So: |
    #u urw
    u Deso
    #u ishfi
    J.VV.N = 1;
    n $_=>3=>'%mtime,fsize' for grep {!/\/[12]\d\d$/} glob 'g/c/*';
Deso: |
    u allvse
    
    n mtime=>5=><<'','%code:Mo'
        C.sc.mtime = (stat C.t)[9];
    
    n fsize=>5=><<'','%code:Mo'
        C.sc.fsize = -s C.t;
svsync: |
    my ($from,$to) = ('s','v');
    
    my $date = `ssh $from date`;
    my $dath = `ssh $to date`;
    chomp $date;
    chomp $dath;
    
    say "From $from: $date";
    saybl "Over $to:  $dath";
    `ssh $to "sudo date --set '$date'"`;
    sayyl "Done $to now: ".`ssh $to date`;
    
    return;
    # sudo -u postgres vacuumdb s
    
    # some day:
    n \ask=>\"sudo date --set '$date'";
    saybl wdump 3, u.M;
ambth: | # e,biertoho, does the 0.3 things (should do 6 and compress into 3"
    while (my ($k,$v) = each %{J.El.Pre.v->{'0.3'}}) {
        next unless v.sc.pi;
        say "J.name ambients v.sc.J.name" unless J.name eq 'Follower';
        n v.t=>v.y.cv=>{pi=>v.sc.pi,s=>v.c.s}
    }
pi/sol: | # file anywhere, together
    # everything this s can get a copy of the ,,,
    y.at.oWl = 1;
    $s || die "Sol: ".wdump 2, $C;
    n Film=>$C
    
Film: |
    J.ev.th = 'middle';
    # acum
    J.ev.f.sol = 'SpaceFlos';
    J.ev.opl = 'panop';
    # answer
    J.ev.f.line = 'yJLong';
    # make otherwise so solflos, syncs panops to Follower
    # to sleep
    y.ope = 1;
    Atime(2);
SpaceFlos: | # node write, collected goo sticks (active agent & hi wires) gets E.t to thingdex routes to remote by C
    return sayre "E.t iutno self E.sc.J.name\n\n\n\n"
        if E.sc.J && E.sc.J.mo.J eq $J;
    
    my $K = ref E.c.s ? E.c.s.t || die "not: Ecs C: ".ki E.c.s
        : E.c.s || E.t;
    $K || die "noK? ".ki $E;

    A.V&E &&
    sayyl "SPACE ELVIS: C.t: for $K   "
        .(E.sc.J && "E.sc.J.mo.J.name  E.sc.J.name");
    
    
    if (my $so = J.ev.so) {
        my ($h) = map{_.nj}
        n $K=>3=>{pi=>$so=>s=>$K}

        E.c.s.sc.pi || die "E.t Ecs Holding strange: ".wdump 2, E.c.s;

        E.c.s.c.h = $h;
        # esc gas radar, sol can embed or so
    }
    #
    my $opl = J.ev.opl || 'annopl';
    my $was =
    n $K=>6=>{pi=>$opl=>s=>$E},"%qs"
    
    sayyl "The was was: was.talk    was.nj.name";
    
pi/pane: |
    #u perCcsomethingtracepha
    n $_ for map{values %$_}values %$s
    
pi/panop: |
    Rw pi/anoply;
    n Follower=>6,{W=>Follower=>e=>$C},'%qs,qz'
pi/anoply: |
    y.ope =  1;
    y.at.oWl = 1;
    $s || die "no anoply in";
    my ($t,$l) = Rw idToE;
    $t || die "anoply noi $t: ".wdump [$C,$s];
    n $t =>{}=>{}=>{opel=>sjson($l)}
    
pi/annopl: | # route table
    y.ope = 1;
    my ($t,$l) = Rw idToE;
    n $t =>{}=>{}=>{opel=>sjson($l)}
    
Follower: | # follws E.t as -cfile, hooks -lines to send -line(s) to E.t, has panopoly of Film like things to unify changesity into therermore panoply actioney changesity
    # (everything threes)
    y.ope = 1;
    y.cvil = 1;
    y.at.oWl = 1;
    J.pix = {pi=>'lines',u=>'followlines'};
    # G ambientow
    A.jr&all,1;
    
    #J.VV.N = 1;
    J.ev.th ||= 'middle';
    # acum
    J.ev.f.panop = 'SpaceFlos';
    J.ev.so = 'cfile';
    # answer
    J.ev.f.line = 'yJLong';
    # do lot
    J.ev.amb = 'ambth';
    Atime(2);
    
followlines: |
    u allovse
    n '','','%of:Sev'
    n LinesFollow =>4431=><<'',{Td=>'V/*/new',Tdarge=>'iv,ov'}
        T.noTd = 1;
        return unless C.sc.pi eq 'line';
        !V.rv && return; #sayre "J.name started with lines: C.c.s"
        my $oJ = $J;
        $J = J.mo.J;
        .
        $C = I.d&hup,$C;
        .
        C.c.was = !Y.root.y.ta;
        # should be refering to the one and the one of the event
        saybl "J.name    Got pi line!             C.c.s   C.c.was";
        n J.C.t,$C,$oJ
        # may like to grab the element before it
        # like a curve continuing
    

