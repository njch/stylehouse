lod/C:
   wam/on: noe 0.1 eye/o {ou:eye,blur:5px}
   fresh_init: Rw J5 wa;
   recoded_init: |
     $G->pub('S/hut/K', 'do make/up'); 
lod/u:
   shv/curves: [EZ: floorish]
   wam/on: noe 0.1 g/c/1  {ou:eye,blur:5px}
   fresh_init: Rw J5 wam;
   recoded_init: |
      rand(5) > 3 &&
      Rw J5 wam;
floorish: |
    spun 0 -0.12
    zoom 0 1 
    y    0  0.84 
    x    0  0
    curve 0 -0.4 
brack: |
     Rw J5 shv;
aww:
   yJ: |
     my $A = J.most.A = {};
     A.time = sub{ 
         warn "HI";
         my ($J,$wa) = shift;
         J.A.time >= $wa ? 1 : do {
             A.fopi->{J.id} = $J;
             0;
         };
     };
     'clw gui heag sope waz Atime';
wa:
   yJ: |
     'aww'
   M: |
    if (J.runt++ > 3) {sayre "ex";sleep 2;
        Rw rez;
    }
    Jn(shedful => '', {pi=>'seas',s=>'w/k'});  
    
   Hosp: |
    my $d = Jn(qw'life 0.1 life/H/');
    Mn(hoisp => '',{pi=>'liv',s=>d.s});
    
Wp:
   yJ: |
     'aww'
   M: |
    Rw wa/Fact;
   Fact: |
    Mn(shedful => '', {pi=>'seas',s=>'w/c'});
    
   Hosp: |
    my $d = Jn(qw'life 0.1 life/H/');
    Mn(hoisp => '',{pi=>'liv',s=>d.s});
    
pi/seas: |
     Jn(see => 0.1 => C.s,'%hs:7398'); 
     for my $t (split /\s+/, C.s) {
         Mn($t => '', {pi=>'loadc',s=>$t});
     }
pi/loadc: |
     my $l = C.s;
     Jn(l => 0.1 => $l);
     $l =~ s/\/*$/\//;
     my @f = map{chomp$_;$_}`find $l -type f`;
     @f || die "no $l";
     for my $file (@f) {
         Mn($file => '', {pi=>'cfile',s=>$file});
     }
pi/cfile: |
     my $file = C.s;
     Jn(file => 0.1 => $file);
     saybl "Loading $file";
     my $s = read_file($file);
     my $h;
     my @ks;
     while ($s =~ m/^(\S+)(:.+?)(?=^\S|\Z)/smg) {
         push @ks, $1;
         $h->{$1} = $2;
     }
     my $in = {map{$_=>1}@ks};
     my $m = Load($s);
     exists $in->{$_} || die "$_" for keys %$m;
     
     for my $p (@ks) {
         my $n = $m->{$p};
         my $dig = dig($h->{$p});
         Mn($p => '', {pi=>clife=>s=>$n},{dig=>$dig});
     }
pi/clife: |
     Jn(c=>0.1=>'c'=>'%hs:8474');
     Mn(c=>'',{pi=>''=>s=>slim(30,"C.s")});
waz:
    up: |
      my $coi = Rw pha $J $k=jo;
      my $M=[];
      my $y = {o=>$M};
      
      Rw suck */M $J $M $y;
      
      Jn('zoo',$y) if @$M;

      Jn('hoos',0.9,'S@T');
      Rw vortex $J around $d=14;
      coi.exactl->();
      
sope/out: |
    #Rw oJ $J geo &up $noesc=1;
    #Rw chuv $J;
J6: |
   my $sc; 
   sc.ok = 6;
   Rw J5 + $sc; 
S/ghostchanges: |
    Rw loD;
    sayyl "loded";
    Rw J5 $file:m;
    Rw rego; 
rego: |
    Rw recoded_init;
J5: |
   my $r = {%$ar};
   r.J = delete($r->{m})->[0] if ar.m;
   delete r.R;
   my $d;
   d.c = $r;
   Rw oo $J:G.oin $d;
oo: |
   d.sc = delete d.c.sc if d.c.sc;
   d.t = !ref d.c.J ? d.c.J : d.c.J.name if d.c.J;
   d.t = d.c.file if d.c.file;
   d.cv = 0.4 if d.c.file;
   d.cv = 0.3 if d.c.J;
   sayyl ki 1, $d;
   
   my $jr = sub {
       my $s = shift;
       my $v = shift;
       $s = '%'.$s if $s;
       my $r = "d.t$s\td.cv";
       !defined $v ? J.bb->{$r} :
       do { J.bb->{$r} = $v;
         sub { delete J.bb->{$r} } 
       }
       ;
   };
   
   d.s = $jr->();
   if (d.c.J) {
       die if ref d.c.J;
       if (!d.s) {
           my $o = {name=>d.c.J};
           d.s = Rw JJ $o;
           sayyl "Made o.name";
       }
       die if !ref d.s;
   }
   if (d.c.file) {
       warn "d.c.file ist d.s";
       return if !d.s;
   }
   if (d.sc.ok) {
       my $ok = d.sc.ok;
       my $co = jr&ok-$ok;
       #$ok && hitime-
       return d.s;warn wdump d.sc;
   }
   my $ig = {map{$_,1}qw'file J ok'};
   my @jh = grep{!$ig->{$_}}keys %{d.c};
   #warn "Have: @jh" if @jh;
   my $hav = 1 if @jh;
   # some alt ^ make round v
   # 7
   die if !d.t;
   die if !d.cv;
   die if !ref d.s;
   
   J.bz->("d.t\td.cv",d.s);
   
   do {
       my $ar = {%{d.c}};
       ar.J=d.s;
       return d.s if !$hav && jr&ok-9;
       my $n = $hav ? sub{} : jr&ok-9,9;
       Rw around;
       $n->();
   };
   d.s
etc: |
   maky something

