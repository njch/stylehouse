

oAiC: |
     if (my $c = $G->gip(A.J.A.in, C.t)) { # outside in
         $c = c._ || return;
         say "C.t in: ".wdump $c;
         g.extend->($C, $c);
     }
oJ2: | # MOD wo
    die "what the hell $v" if ref $v;
    C.c.W = $v;
    A.ztime = 3;
oW2: | # some get-J or weave wires protocol - hosts
    my $t = $v;
    $t = v.name if ref $t;
    at.J = ref $v ? $v : $t;
    at.W = $t;
    C.c.J ||= $v;
    
    if (ref $v) {
        die wdump ["onto W J.name:",$v] if $v ne v.most.J;
    }
    
    
    #sayyl "OW: $t 0.3    on J.name";
    C.t ||= $t;
    C.y.cv ||= 0.3;
    
    A.jr = Rw Ajr $J:G.oin $t $cv=0.3;
opi2: | # approach
    at.pi = $v || 'guess';
    C.c.J = 'pie';
    
    my $oJ = $J;
    $oJ = C.y.o.J if C.y.o && C.y.o.J;
    A.jr = Rw Ajr $J:oJ $C;
   
oJ3: | # MOD  being repeater
    my $ca = A.jr&J; # gets W from oin(etc)  or  abdomisa
    my $sp = C.sc.J;
    C.sc.J = $ca if $ca; # resolve
    
    die "diff c W-J  " if C.c.W && C.c.W ne C.c.J;
    die "sp: $sp -> $ca" if ref $sp && ref $ca && $sp ne $ca;
    sayre "ref CcJ J.name  ".k2 $C if ref C.c.J;
    ref C.sc.J && C.sc.J.dead && undef C.sc.J;
    return
    Rw join/inX
    if ref C.c.X;
    
    if (!ref C.sc.J) {
        if (C.sc.pi) {
            C.sc.J = Rw spinash $J;
        }
        else {
            my $o = {name=>C.c.J};
            o.style = delete C.c.style if C.c.style;
            C.sc.J = Rw JJ $o;
            sayyl "J3   Made o.name";
        }
    }
    
    my $J = C.sc.J;
    
    die "noovewr   C.c.J ne $J" if ref C.c.J && C.c.J ne $J;
    
    A.jr&J,$J;
    A.jr->('',"Jay");
    at.J = $J;
    
    # ^ gets & replaces, C.sc.J now it
    # time
    Rw oA3 + $J;
oA3: |
    # Atime(2) means the header bz'd - pha exact->abandon, avoid work
    # Atime(4) means everything wants to happen later, plant J
    # Atime(8) means while 
    # !pi means J.most.J, ie Eming
    # pi means J.most.A enqueues J.most.J recomb
    #   skipping the just-done and filling in the gaps
    #   as long as no C.y.o.J
    # 
    
    # C.c.W always returns J.most.J, checks time, may wedge in
    # C.c.J an indifferent W, avoids runway til 3
    if (J.most.J eq $J) {
        # stores reintent style via A.jr
        # join refluxes
        J.most.A.time = sub {
             my ($J,$wa) = @_;
             sayyl F_delta()."Mostlook a A.J.name J.most.J.name >> J.name   J.A.ztime  > $wa";

             J.A.ztime >= $wa ? 1 : do {
                 sayre gp($J)." Wants time, $wa" for 1..5;
                 # what kind of time it wants: 8 is background flow
                 # 2 is that this can avoid work, sync state
                 # 
                 #acum $A, fo => $J;
                 0;
             };
        };
    }
    
    J.most.A || die;
    J.A.time = sub {
        J.most.A.time->(@_);
    };
    
    
    J.A.ztime = 6 if !J.A.left;
    
    J.A.ztime ||= 6;
    
    #A.time = J.A.time
    
    sayyl "oA3 C.t   C.sc.pi  A.ztime  J.A.ztime   J.A.left"
    unless exists C.sc.pi;
    
    
    J.A.in = $G->gip(J.Jiter.A.in, C.t)||{} if J.Jiter;
    
    
    
    
    if (C.sc.pi) {
        die if J.most.J eq $J;
        die if J.Jiter ne A.J;
        J.A.d = J.Jiter.A.d + 1;
        J.name = "J.A.d . C.c.pi C.t";
        

        J.A.coi = Rw pha $J ako;

        J.d = J.C = $C;
        J.r = C.r;
        J.bz->("/\t0.9" => "y");
    }
    else {
        die if J.most.J ne $J;
        A.thet += 6;
        J.A.thet += 6;
        sayyl "J.name oA3" unless J.yt.quiet;
        sayyl "J.name $A   J.A".A.thet."    ".k2($C)."  \n\n "
        .wdump 2,[$A,J.A] if J.name eq 'Wkcs';

        A.ztime ||= C.c.time || 8;

        A.time = sub {
             my ($J,$wa) = @_;
                 sayre "toooocomb $wa/A.ztime J.most.eo J.name   $wa\n";
             A.ztime >= $wa ? 1 : do {
                 #Rw comb oo $J $A $d $wa;
                 sayre "comb J.most.eo J.name   $wa\n\n";
             };
        };
    }
oJ6: | # https://www.youtube.com/watch?v=tL8N_3tln0Y
    return
    Rw opi6
    if C.sc.pi;

    return C.sc.J if !A.hav && A.jr&ok-9;
    
    # lock unless ooing some ar
    my $n = A.hav ? sub{} : A.jr&ok-9,9;
    aft { $@ && do{sayre" BONG"for 1..10}; $n->(); };
    
    saybl "oJ6 C.t" unless C.sc.J.yt.quiet;
    {
        my $ar = {%{C.c}};
        ar.J=C.sc.J||die'noj';
        ar.C=$C;
        ar.A=$A;
        Rw around;
    }
       
waz/up: |
      my $coi = Rw pha $J $k=jo;
      my $M=[];
      my $y = {o=>$M};
      my $A = J.A;
      A.ztime ||= 2;
      my $C = J.C;
      
      Rw Jhead;
      Rw suck + */M $A $J $C $M $y;
      
      Jn('zoo',$y) if @$M;

      Jn(st=>0.9=>"o",'%hs:8427,fs:4');
      coi.qui = 1;
      coi.exactl->();
      
opi6: |
       sayyl "oJ3pi  C.t  oo  A.ztime" if A.ztime;
       my $oJ = $J;
       $J = C.sc.J||die;
       my $A = J.A;
       my $T = {};
       
       my $M=[];
       my $y = {o=>$M};
       
       $v = C.sc.J||die'noj';
       v.cv = C.c.gp.cv || C.c.cv || 0.6;
       die'csnod' if v.d ne $d || v.d.c ne d.c;
       
       my $path = C.sc.pi||die'nopi';
       $path = 'text' if J.A.d > 5;
       
       
       my $s = C.c.s;
       Rw pi/$path $A $J $u:s $s $C $M $y; 
       
       
       Jn('zoo',$y) if @$M;
       
       
       sayyl "Done pi   J.name ".F_delta;
       A.coi.qui = 1;
       A.coi.exactl->();
oJ7: |
    return
    Rw opi7
    if ar.A && ar.C.sc.pi;
    
    my $J = C.sc.J;
    
    say "oJ7 J.name" unless J.yt.quiet;
    Rw oJ $J geo &up $noesc=1;
    Rw J.most.eo $J;
opi7: | # MOD pi     out cup           # REF JOIN A.c/sc
    my $J = C.sc.J;
    
    my $aj = Rw J.most.eo $J $catj=1;
    
    die aj.s if aj.s;
    #sayre "Upto J.r go ".slim 70, sjson aj.c if @{aj.c};
    J.Ec = [@{aj.c}];
    die wdump $aj if @{aj.sc};
       
oJ75: | # chov J
    if (C.sc.pi) {
        die wdump $C if !ref C.sc.J;
        $v = C.sc.J || die'enoJ'.C.t;
        die "Pi v.r has s" if v.s;
        delete at.s if defined at.s;
        die wdump $C if !ref v.Ec;
        die "Pi v.r no .Ec" if !@{v.Ec};
        acum $at, 'Esc', $_ for @{v.Ec};
    }
    else {
        say "AM v.name  rrrrr J.name";
        at.s = "Vrrr v.name";
    }

