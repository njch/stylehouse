TheKnobbies: |
    u allsvse
    
    n lumquest =>5=><<''
         J.lum.lev->("knobs\t0.08" => sub {
             my $J2 = shift; 
             J2 bz lable 0.1 "knobs "
             J2.lev->("knobs\t0.2" => sub {
               my $J3 = shift;
               J3 bz slide 0.2 "<input type=range min=1 value=$cra max=9 step=0.25>", "%ishtml"=>1, "%idly" => 'slide', '%css'=>'font-size:50%'
             });
         }); 

    n stylesheest =>5=><<''
            input[type=range] {
                -webkit-appearance: none;
                background: black;
                height: 2px;
            }
            input[type=range]::-webkit-slider-thumb {
              -webkit-appearance: none;
              background: url(i/copper_anodes.jpg);
              height: 12px;
              width: 12px;
              border-radius: 6px;
              cursor: crosshair;
              box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
            }
       


pi/lim: |
    n file=>pi=>{mtime=>1=>s=>$s}
    y.at.distorb = 'J/mo/J';
alljs: |
    n 'allarejs=s'=>2,{s=><<''},{code=>'In 42'}
        C.sc.acgt = 's' if !exists C.sc.acgt;
        C.sc.js = 1;
alljse: |
    n alljs
    n 'allarejse=s'=>2,{s=><<''},{code=>'In 419'}
        return T.not = 1 for
            map { A.J.A.vse->{$_} = C.c->{$_} }
            grep {exists C.c->{$_}} qw'of nk';
        my $av = A.J.A.vse;
        C.sc.of ||= av.of||'om';
        unless (C.sc.any) {
            C.sc.nk ||= av.nk||'sc';
            C.sc.gk ||= C.t;
        }
        my $cv = C.y.cv || 1;
        $cv =~ s/^0\.//;
        C.t = C.sc.of."_".C.t."_".$cv;
reJSlines: | # could spiral intuit re$W to just this - A coney islands
    y.at.ressur = 'jshang';
JSlines: |
    y.at.jslines = 1;
    y.ope = 1;
    n $C
Precoall: |
    n allsvse
    n ReoCur
    n TeCurve
    n GeoSlur
    n odeo
    

codeo: | # the in osc ^
    n odeo
    u allsvse
    n '','','%of:Art'
    # root lv.II <- at.V.*.rv.II
    # plucked Ktv spots X running upwards
    n code =>5=><<''
        lv.op.sc.code = 1;
        my $v = {};
        Rw ym/conoi $A $C:at $G $T $v;
        lv.X = $v;
    
jseo: | # the in osc ^
    n odeo
    u allsvse
    n '','','%of:Art'
    n js =>5=><<''
        sayyl "jseo: A.J.name the C.t  via ".ki C.sc;
        lv.op.sc.js = 1;
        return sayre "C.t is js running ooze" if !C.sc.acgt;
        my $v = {}; # spots indexes
        Rw ym/jscoi $A $C:at $G $T $v;
        lv.X = $v;
pi/try: | # W use-output-only er, limb pile
    
    C.sc.try = $s;
odeo: |
    u allsvse
    n '','','%of:Art'
    
    n X =>7=><<''
        lv.X = $X;
        saybl "Got X from sc: C.t   J.name";
        at.sc.notX = Rw sumX $X:lv.X;
    
    # also trW, the W cache user
    n try =>7=><<''
        my $isle = C.c.Y.root;
        my $isl = isle.sc.isle;
        return sayre "no isle on isle.t" if !$isl;
        my $f = "w/$isl/$try";
        if (-f $f) {
            lv.X = LoadFile($f);
            at.sc.f = $f;
            at.sc.notX = Rw sumX $X:lv.X;
        }
    
    n J =>7=><<''
        return sayre "BanJ" if C.c.root;
        my $rv = lv.do.Duv || die "Noduv";
        rv.X || sayre "A.J.name  Not Xceiving C.t  (C.sc.J.name)";
        lv.X ||= rv.X;
        #lv.do->{V.name} = $rv;
    
    n root =>7=><<'','%nv:croot'
        lv.X ||= vl.X || {My=>"self"}; # disappears
        my $src = [];
        for my $k (@{C.c.V.os}) {
            my $kv = lv.do->{$k} || die "nondo $k";
            push @$src, [$k,kv.X] if kv.X;
        }
        Rw spII $A $II:lv.X $src;
        lv.X.My eq 'self' && die "Didndt get any C.sc.isle off J.name: ".wdump C.c.V.os;
    
    n coil =>701=><<''
        my $N = [];
        my $X = lv.X || die "no X on J.name for isl";
        sayyl "C.t: coils: ". Rw sumX $X $N;
        for $D (grep { _.sc.tldo }@$N) {
            Rw D.sc.tldo $D $N;
        }
        
    n '','','%of:em'
    n isle =>3=><<''
        my $X = C.y.lv.X || die "no X on J.name for isl $isle";
        Rw down $f=$isle/C.t $s:X;
    
    # jagged seral
    n jsl =>3=><<'',{cg=>'J,em'}
        $jsl = "js" if $jsl eq '1';
        $jsl eq 'js' || die "No regoc $jsl langoup";
        my $X = C.y.lv.X || die "no X on J.name for isl $jsl";
        my $N = [];
        sayyl "jsl $jsl: ". Rw sumX $X $N;
        my $S = Rw humms $J $N spots;
        my $l = em.lines = [];
        push @$l, map{" a\.e(".sjson($_).");"} @{S.z};
        push @$l, Rw JSpots $II:S.X;
        C.c.os = 1 if !grep {/\S/} @{S.z};
        C.sc.Wc = 1;
    
slowmoving: |
    u allvse
    n '','','%of:Mo'
    n J=>435=><<''
        saybl " *" for 1..2;
        saybl " * THink about resu J.name  ".ki $C;
        saybl " *" for 1..2;

EmJSlines: |
    my $N = [@{em.lines||die"Nop"}];
    @$N = Rw humms $J $N wongui _;
    @$N = sort { a.t cmp b.t }
    Rw humms $J $N notnotjs _;
    
    if (C.sc.jslines == 2) {
        sayre "HEavily JSLINES: J.name";
        my ($don,$not);
        for (@$N) {
            ++$don && next if _.sc.args;
            $not++;
            sayre " the _.t  has not been processed .... ".ki _.sc;
        }

        if ($not && !$don) {
            sayyl "In Em jscoi $don done, $not remain";
            my $II = Rw humms $J $N jscoi;
            # N will be changed...
            sayre "DedstilL: _.t   ".ki _.sc 
                for grep{!_.sc.args} @$N;
        }
        elsif (!$not && $don) {
            say "Is good jscoi";
        }
        else {
            die "Mis somewhere".wdump 3, $N;
        }
    }
    
    my $S = Rw humms $J $N spots;
    if (S.X) {
        sayyl "J.name has in em jslines X";
        my $lv = C.y.lv;
        my $vl = C.y.vl;
        if (vl.X) {
            Rw qsp $I:S.X $II:vl.X;
            #sayre "Should under at: ". wdump 3, vl.X;
        }
        lv.X = {%{S.X}};
        delete S.X->{$_} for 'ooI','Ii';
        sayyl "Alltook: ".F_delta();
    }
    
    my $l = em.lines = [];
    push @$l, map{" a\.e(".sjson($_).");"} @{S.z};
    push @$l, Rw JSpots $II:S.X;
    C.c.os = 1 if !grep {/\S/} @{S.z};
    C.sc.Wc = 1;
qsp: | # ensure II underneath I, no-9 X stretcher (jslines alljsers when jslines all lv.X)
    for my $K (keys %$II) {
        die "ooIIi" if $K eq 'Ii' || $K eq 'ooI';
        my $cvs = $II->{$K};
        my @cvs = ();
        for my $cv (keys %$cvs) {
            my $ts = $cvs->{$cv};
            my @ts;
            for my $t (keys %$ts) {
                $I->{$K}->{$cv}->{$t} ||= $ts->{$t};
            }
        }
    }
ym/jscoi: |
    my $s = C.sc.js || return;
    if (C.sc.acgt) {
        sayre "acgt js: C.t already C.sc.args" if C.sc.args;
        C.sc.args ||= join',','A,C,G,T',grep{$_ ne '1'}C.sc.acgt;
    }
    die "wonky C.t   of ".ki $C if C.t =~ /\W/;
    C.sc.args =~ s/ /,/g;
    my $poing = qr/\w+(?:\.\w+)?/;
    C.c.s =~ s/^t\&([^\s;]+)(;)?/!G\&t,$1 and return;/gm;
    C.c.s =~ s/($poing)\&(\$)?(\w+)(,[^\s;]+)?(;)?/
        my $t = $2 ? "$3" : "'$3'";
        my $h = $1 eq 'G' ? ".h(A,C,G,T,$t" : "\[$t\](A,C,G,T";
        $1.$h."$4)$5"
    /smge;
    C.c.s =~ s/^(.+) \|\|\= (.+)(;)?$/if (!$1) {
        $1 = $2
    }/gm;
    C.c.s =~ s/^(.+?) and (.+)(;)?$/if ($1) {
        $2
    }/gm for 1..3;
    C.c.s = "a.".C.t." = function(".C.sc.args.") {\n".C.c.s."};\n";
    C.sc.dige = slm 12, dig C.c.s;
    delete C.c.from; # as 7, S over
    $v->{js}->{C.y.cv}->{C.t} = $C;
JSpots: |
    my @sup;
    for my $K (sort keys %$II) {
        die "ooIIi" if $K eq 'Ii' || $K eq 'ooI';
        my $cvs = $II->{$K};
        my @cvs = ();
        for my $cv (sort keys %$cvs) {
            my $ts = $cvs->{$cv};
            my @ts;
            for my $t (sort keys %$ts) {
                my $D = $ts->{$t};
                my $s = {%{D.sc}};
                die "collajsee s.args".ki $D if s.args ne 'A,C,G,T,s';
                delete $s->{$_} for qw'of acgt args dige lines js';
                push @ts, [$t,$s];
            }
            push @cvs, [$cv, \@ts];
        }
        push @sup, sjson({eine=>[$K,\@cvs]});
    }
    @sup
ym/spots: |
    v.i ||= 0;
    v.X->{C.sc.of}->{C.y.cv}->{C.t} = $C if C.sc.of; # vetc
    v.Z->{v.i} = $C;
    push @{v.z||=[]}, $v->{l}->{v.i++} = C.c.s;
    
    

