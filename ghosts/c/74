Otherway: |
    u allacgts
    
    # G.h&In # finds relevant A.I to AI.d&Other with, returning ($A,$I)
    n Other =>''=>{s=><<''}
        my $ar = $F[0]->{ar};
        my $A = Rw WeBase $t:s;
        my $I = A.I;
        I.d&n,$A,{},$G,{};
        I.d&An;
        A.t&1;
        A.t&11111 || warn "NO 1";
    
Seven: |
    n Otherway =>W
    n Yesoo =>W
    n Yools =>W
    n Yeoso =>W
Yesoo: |
    u allvse
    n '','','%of:Mo'
    n J =>69,<<''
        sayyl "Seventy J.name" for 1..5;
        return if T.nose;
        return sayre "Yesoo: Same J.name" if T.same;
        say "Yesoo: 77 J.name" unless J.yt.quiet || C.sc.pi;
        Rw Seve $A $J;
        # dosgeo ^ Yesui as O or so
        # A pile vs. spiral, hive of change
Seve: |
    sayyl "SEV!" for 1..5;
    ar.C ||= [Elvis=>''=>{Y=>'Pres',V=>'Dsuv'}];
    my ($A,$I) = G.h&Sev;
    my $i;
    while (@{A.N}) {
        $i++ > 1000 && die "Huge A.am";
        my ($A,$C,$T) = I.d&Act,$A;
                T.not&&next;
        A.t&6;
                T.not&&next;
        I.d&flywheels;
                T.not&&next;
        A.t&78;
                T.not&&next;
    }
    continue { I.d&z; }
    A.t&8;
    I.d&recycle;
Yools: |
    u allacgts
    
    n hup =>'',<<'','%code:Sev 1'
        my $CC = {%$s};
        $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;
        $CC;
    
Yeoso: |
    u allvse
    n '','','%of:Sev'
    
    # time impersonator
    n Y =>12=><<''
        C.c.V || die "NO V";
        C.c.Y || die "NO Y";
        C.c.Y = Rw Elj $J:A.J $name:C.c.Y;
    
    # exchange        
    n Y =>13=><<''
        Rw Elvis $J:A.J $Y;
    
    # root of etc (yin)
    n Y =>14=><<''
        Y.il = Y.tv->{"0.9\t/"}
            || Y.tv->{"0.9\t".J.name}
            || Y.tv->{"0.9\t".J.uname}
              || die " noroot J.name: showing 0.9s: "
                .wdump [map{ki $_}values %{Y.v->{0.9}}];
        .
        my $N = [grep { $_ ne Y.il } @{Y.vs}];
        push @$N, Y.il;
        # should be able to s/A.mo.re/T.Z/
        # Z.cv = 1 makes selves, array others (yarN) which may Acquire
        push @{A.mo.re->{0.15}||=[]}, map{
            my $CC = I.d&hup,$C;
            # all spreads out to play Y/V
            I.d&xot,$CC,{c=>C.c};
            [undef,$CC]
        }@$N;
    
    n Y =>16=><<''
        sayyl "Was in! ".ki $C;
Nooqdles: |
    my $A = {J=>$J};
    A.talk = "A.J.name ".(A.J.le && A.J.le.name);
    # then we could I when doing:
    my $Y = Rw Elvus $J Pre;
    # providing the source pretend of c/sc ray anarchy
    # v to ^
    Y.il = Y.tv->{"0.9\t/"}
        || Y.tv->{"0.9\t".J.name}
        || Y.tv->{"0.9\t".J.uname}
          || die " noroot J.name: showing 0.9s: "
            .wdump [map{ki $_}values %{Y.v->{0.9}}];
    
    my $N = [grep { $_ ne Y.il } @{Y.vs}];
    push @$N, Y.il;
    A.N = [@$N];
    
    my $hup = sub {
        my $C = shift;
        my $CC = {%$C};
        $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;
        $CC;
    };
    
    my $V = Rw El Duv;
    V.os = [];
    while (@{A.N}) {
        my $C = shift @{A.N};
        ref C.y || die"nospace".ki $C;
        ref C.y || sayre("Weird".ki$C) && next;
        
        my $k = C.y.cv."\t".C.t;
        push @{V.os}, $k unless $C eq Y.il;
        
        next unless $C eq Y.il ||
        # if change is, or just diff in perceiving it
        Rw diffre $J $C $k $Y $V;
        
        # O
        my $lv = {k=>$k};
        lv.C = $C;
        my $at = Rw OSC $A $J $C $k $Y $V $lv;
        
        my $ta = V.ta->{$k};
        my $vl = V.lv->{$k};
        
        if ('force') {
            at.c.el = 1;
            lv.force = 'el';
            lv.selfs = 1;
            lv.grab = [at.t, at.y, {el=>8}];
            lv.rmnsc = [at.t, at.y, {el=>9}];
            # and or ID
            # ID makes possible to throw into the W (most J) tiniest specs of change
            # maybe 8regate
        }
        
        # crazy has places to hide in
        my $heq = sub {
            my ($o,$t) = @_;
            if (ref $o && ref $t) {
                keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o
            }
            elsif (!ref $o && !ref $t) {
                $o eq $t
            }else{0}
        };
        for my $nk (qw't y c sc V') {
            my $v = $at->{$nk};
            my $o = $ta->{$nk};
            if (!$heq->($v, $o)) {
                Rw ACT $J $C $k $Y $V $at $ta $lv $vl $nk $v $o;
            }
        }
        
        V.ta->{$k} = $hup->($at); 
        V.tv->{$k} = $hup->($C);
        
        Rw OMP $J $C $k $Y $V $at $ta $lv $vl;
        
        V.lv->{$k} = $lv;
        
        if ($C eq Y.il) {
            V.rl = $vl;
            V.rv = $lv;
        }
    }
    Rw TNews $J $talk:A.talk $rl:V.rl $rv:V.rv
        if J.V;
    $V
    # bloop
VOD: |
    my @each = lv.oso ? @{V.os} : sort keys %{lv.do};
    my $san = {map{$_=>1}keys %{lv.do}};
    
    my $ded = [];
    my $z = [];
    # occasionally wants to add/subtract from the thing
    # the whole sending rms vs moving the remainders
    # also if re-c desired soon, factor vortex
    if (my $go = lv.od.go) {
        for my $ea (sort keys %$go) {
            my $ov = $go->{$ea};
            ref ov.c || die "noovc";
            my $oov = vl.do->{$ea} if $vl;
            $ov eq $oov || die "difoov $ov, $oov";
            $san->{$ea} && die " $ea goes but still in do..";
            if (!ov.rmnsc) {
                lv.op.V->{$ea} = 1 && die " wtf";
            }
            push @$ded, ov.rmnsc;
        }
    }
    
    my $left;
    for my $ea (@each) {
        delete $san->{$ea};
        my $iv = lv.do->{$ea}||die;
        my $ov = vl.do->{$ea} if $vl;
        
        if (lv.od.new->{$ea}) {
            $ov && die "new had ov";
            if ($left && left.grab) {
                push @$z, left.grab if lv.od.ll->{left.k};
                # om lv.prepend(iv) until one
                # then last z/c:el:* gives iv.appendAfter(left)
                # chuck in the el:8 if we skip over anything
                # ie if left is od.ll this round...
                # can have no el:8 and switch everything else out
            }
            push @$z, grep{defined} @{iv.c}, @{iv.sc};
        }
        elsif (lv.od.gr->{$ea}) {
            $ov || die "novodo $ea";
            iv.c eq ov.c || die "wasn't satbv c";
            my $ray = Rw scd $rl:ov $rv:iv;
            #sayyl "gr $ea    ov.i     iv.i    ".ki $ray if J.V;
            
            push @$z, @{ray.z};
            
        }
        elsif (lv.od.over->{$ea}) {
            sayyl "OVER $ea";
            lv.selfs || die "no way to...";
            # el:1 will replace the old by t/y or something
            # chuck ids on everything?
            
            push @$z, grep{defined} @{iv.c}, @{iv.sc};
        }
        elsif (lv.od.ll->{$ea}) {
            #say "keep $ea" if J.V;
        }
        else {die "wtf $ea "}
        $left = $iv;
    }
    my @have = map { keys %{lv.od->{$_}} } grep {$_ ne "go"} keys %{lv.od};
    my $ha = {map{$_=>1}@have};
    delete $ha->{$_} for @each;
    die "difs".wdump $ha if keys %$ha;
    die "!!! forgot $_" for keys %$san;
    
    unshift @$z, @$ded if @$ded;
    
    @$z = () if C.sc.J && $J eq C.sc.J;
    
    ne.sc.z = $z if @$z;
OMP: |
    my $talk = "J.name OMP ".join"  ", ($vl?"vl":"**"),
        (map{"$_:".ki(1,$lv->{$_})}qw'pur op'), wdump 2, lv.od;
        
    say $talk if J.V > 2 && $vl && (lv.pur || lv.op || lv.od);
    
    !$vl && !lv.op && die "unopposed to not-bfore";
    
    my $ne = {};
    if (!lv.op) {
        for my $nk (keys %{lv.pur}) {
            my $sv = lv.pur->{$nk};
            if (ref $sv eq 'HASH') {
                for my $ck (keys %$sv) {
                    $ne->{$nk}->{$ck} = $at->{$nk}->{$ck};
                }
            }
            else {
                ref $sv && die "wtf $sv";
                $ne->{$nk} = $at->{$nk};
            }
        }
    }
    else {
        $ne = $at;
        # grab can also transplant inners for a minorish
        # not re-c but recreate element a move things in
        # while re-cing anything within that can't be grabbed
        # element rebuild may be crucial for undoing anything we cant undo
        # something may restate its entire c
        # including any inner c..sc tents
    }
    
    if (lv.od) {
        Rw VOD + $ne $talk;
    }
    
    my $nn = sub { my $n=shift; [n.t, n.y||{}, n.c||{}, n.sc||{}] };
    if (lv.op) {
        # make sure z is full...
        lv.c = [$nn->($ne)];
        lv.sc = [];
    }
    elsif (keys %$ne) {
        die wdump [lv.op, $ne]  if lv.op;
        ne.t = at.t;
        ne.y = at.y;
        ne.c->{lv.force} = 3;
        
        lv.c = vl.c || die"novlc";
        lv.sc = [@{vl.sc}, $nn->($ne)];
        # Rw doc 5 [lv.c,lv.sc];
        # the two pronged link
        # circuity internet
    }
    else {
        #sayyl "$talk unopposed" if J.V;
        lv.c = vl.c;
        lv.sc = vl.sc;
    }
    # but there is intended to wipe clean or just redo the surface
    # much more is liking to collapse the past into the future in degrees as the c fulls
    # pur and sc
    # handleable od
    lv.ma = ($vl?vl.ma:0)+1;
    lv.i = "lv.c ".@{lv.sc};
ACT: |
    my $talk = "J.name ACT $nk: $k\t";
    if (ref $v eq 'HASH') {
        my $wt = Rw wtfch $Jb:v $Yb:o;
        my $nonnew = keys %{wt.gone} || keys %{wt.diff} || keys %{wt.still};
        
        for my $wk (qw'gone diff new still') {
            for my $gk (sort keys %{$wt->{$wk}}) {
                my $talk = "$talk $wk: $gk";
                my $s = $at->{$nk}->{$gk};
                
                if ($nk eq 'V') {
                    Rw AC_V + $talk $nonnew $gk $wt $wk $s;
                }
                elsif ($nk eq 'c') {
                    Rw AC_c + $talk $nonnew $gk $wt $wk $s;
                }
                elsif ($nk eq 'sc') {
                    Rw AC_sc + $talk $nonnew $gk $wt $wk $s;
                }
                else {die"wtfis  '$nk'"}
            }
        }
        saybl "$talk    is all new" if $vl && !$nonnew && keys %{wt.new};
    }
    else {
        my $wk = !$vl ? "new" : !exists $at->{$nk} ? "gone" : "diff";
        $talk .= "$wk: ";
        if ($nk eq 't' || $nk eq 'y') {
            if ($wk ne 'new') {
                die "HOWTO $talk";
            }
            sayyl $talk unless !$vl;
            
            lv.op->{$nk} = 1;
        }
        else {die"wtfis $v $nk".wdump[$v,$o]}
    }
AC_c: |
    if ($wk eq 'gone') {
        die "how delete a c $gk";
        die "would have" if !$vl;
        # most of these can re c if they get confused
        # care later to grab /in, recreate holster, replace
        # or however we whatever
        # protocols for travel regroup
        
        lv.op.c->{$gk} = 9;
    }
    elsif ($wk eq 'new') {
        die "how inject a c $gk" if $vl;
        
        lv.op.c->{$gk} = 9;
    }
    elsif ($wk eq 'diff') {
        sayyl "$talk  ".slim(45,$v->{$gk})." <--- ".slim(45,$o->{$gk});
        
        if ($gk eq 's') {
        
            lv.pur.c->{$gk} = 1;
        }
        else {
            die "how to c dif $gk";
            
            lv.op.c->{$gk} = 9;
        }
    }
    elsif ($wk eq 'still') {}
    else {die 'wtwhack'.$wk}
AC_sc: |
    if ($wk eq 'gone') {
        die "how delete a c $gk";
        die "would have" if !$vl;
        # most of these can re c if they get confused
        # care later to grab /in, recreate holster, place
        # or however we whatever
        
        lv.op.sc->{$gk} = 9;
    }
    elsif ($wk eq 'new') {
        sayyl "$talk  !!!!  $v->{$gk} " unless !$nonnew;
        
        lv.pur.sc->{$gk} = 1;
    }
    elsif ($wk eq 'diff') {
        sayyl "$talk  $v->{$gk} <--- $o->{$gk}";
        
        lv.pur.sc->{$gk} = 1;
    }
    elsif ($wk eq 'still') {}
    else {die 'wtwhack'.$wk}
    
AC_V: |
    my $iv = lv.do->{$gk};
    my $ov = vl.do->{$gk};
    ov.i && (ov.i eq $o->{$gk} || warn "no ovi ogk");
    if ($wk eq 'gone') {
        ov.rmnsc || die "no remin";
        !$iv || die "gone had iv";
        # ^ sc plumb its destruction
        # can void if our c reframes by implicitly clearing 
        saybl "$talk  is GONE!";
        
        lv.od.go->{$gk} = $ov;
    }
    elsif ($wk eq 'new') {
        $iv || die;
        # may like to grab the element before it
        # like a curve continuing
        saybl "$talk    new!" unless !$nonnew;
        
        lv.od.new->{$gk} = $iv;
    }
    elsif ($wk eq 'diff') {
        if (iv.c eq ov.c) {
            iv.sc eq ov.sc && die "same c fluc sc $gk";
            my $in = @{iv.sc};
            my $out = @{ov.sc};
            if (@{iv.sc} > @{ov.sc}) {
                saybl "$talk GROWs" if J.V > 2;
                
                lv.od.gr->{$gk} = $iv;
            }
            else {
                warn "WTFF ".wdump 2,[$iv,$ov];
            }
        }
        else {
            saybl "$talk  REPLACES c";
            
            lv.od.over->{$gk} = $iv;
        }
    }
    elsif ($wk eq 'still') {
        lv.od.ll->{$gk} = $iv;
    }
    else {die 'wtwhack'};
OSC: | # sheets of language up to da
    my $at = {};
    
    at.t = C.t;
    at.y.cv = C.y.cv;
    sayre "OSC7 C.t no c_s" if !exists C.c.s;
    at.c.s = C.c.s;
    at.sc = {%{C.sc}};
    delete at.sc->{$_} for qw'geo idly ml nspc path yspc';
    if (my $v = at.sc.J) { # J unifies -
        at.sc.J = v.name;
        
        my $nV = v.El->{V.name}||{};
        my $rv = nV.rv || {LIES=>"from v.name"};
        
        lv.do->{V.name} = $rv;
        at.V->{V.name} = rv.i;
    }
    if ($C eq Y.il) { # / unifies  <
        lv.voso = 1;
        for my $ik (@{V.os}) {
            my $iv = V.lv->{$ik};
            sayre("Skip self in self") && next if C.sc.J && C.sc.J eq A.J;
            lv.do->{$ik} = $iv;
            at.V->{$ik} = iv.i;
        }
    }
    at.sc.geo = ki(at.sc.geo) if at.sc.geo;
    at.y = at.y.cv if keys %{at.y} == 1 && exists at.y.cv;
    for my $up (qw'tag id') {
        at.c->{$up} = delete at.sc->{$up} if exists at.sc->{$up}
    }
    
    $at;
diffre: |
    my $heq = sub {
        my ($o,$t) = @_;
        keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o;
    };
    my $toen = 1;
    
    if (my $di = Y.lo->{$k}) {
        my $not;
        if (keys %$di == 1 && di.diff) {
            my $CC = V.tv->{$k};
            if (!$CC) {
                sayre "never heard of (V_tv) diff J.name : $k ";
                return 1;
            }
            for my $tk (keys %{di.diff}) {
                if ($tk eq 'geo') {
                    $not++ if 0 && !$heq->(C.sc.geo,CC.sc.geo);
                    if ($not && 0) {
                        sayyl "Geo was $not a difference in the thing";
                        sayyl sjson(C.sc.geo);
                        saybl sjson(CC.sc.geo);
                    }
                }
                elsif ($tk eq '') {
                    $not++ unless ref C.c.s && C.sc.dige && C.sc.dige eq CC.sc.dige;
                }
                else {
                    saybl "J.name $k has diffre: $tk";
                    $not++;
                }
            }
        }
        else {
            $not = 1;
        }
        $toen = 0 if !$not;
    }
    if (!$toen) {
        if (my $JJ = C.sc.J) {
            my $ta = V.ta->{$k};
            if (my $nV = JJ.El->{V.name}) {
                my $iv = nV.rv;
                my $oi = ta.V->{V.name};
                if ($oi ne iv.i) {
                    $toen = 1;
                    #sayyl "J.name  $k   about JJ.name: $toen \n"
                    #.($toen&&" ^ iv.i\n | $oi");
                }
            }
            else {
               sayre "no El V.name on JJ.name";
            }
        }
    }
    $toen
     

