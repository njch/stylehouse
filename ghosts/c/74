
Yodness: |
    J.V = 1;
    n Yod =>W
    n Yools =>W
    n Ydo =>W
    n YdoV =>W
    n Yex =>W
Yeoodle: | # how is at (lv,at now & vl,ta then)
    u allovse
    n '','','%of:Sev'
    
    # is the other of this vector:
    n force =>41=><<''
        at.c.el = 1;
        lv.force = 'el';
        lv.selfs = 1;
        lv.grab = [at.t, at.y, {el=>8}];
        lv.rmnsc = [at.t, at.y, {el=>9}];
        # ID makes possible to throw into the W
        #    (most J) tiniest specs of change
        # receiving with ID means most.J knows ID to Jpath (bottom up easy)
        #   also wants to know originating light cone 
        # - figure that once things on screen again!
        # maybe 8regate
        # greg annotates the flyby
    
    # like actual
    n acttle =>42=><<''
        for my $nk (qw't y c sc V') {
            my $v = $at->{$nk};
            my $o = $ta->{$nk};
            I.d&heq,$v,$o && next;
            Rw ACT $J $A $I $C $k $Y $V $at $ta $lv $vl $nk $v $o;
            # wants to be embedded A.t&A,3-4 per T.nk or so
            # ex flywheel arbiter more into T
        }
    
Yod: |
    u allovse
    n '','','%of:Sev'
    
    # overs Yeoodle
    n mkTd =>42=><<''
        sayre "MakeTid";
        for my $nk (qw't y c sc V') {
            my $v = $at->{$nk};
            my $o = $ta->{$nk};
            saybl "<Male C.t $nk $v <-=-- $o";
            I.d&heq,$v,$o && next;
            my $d;
            d.v = $v;
            d.o = $o;
                saybl "up";
            if (ref $v eq 'HASH') {
                my $wt = Rw wtfch $Jb:v $Yb:o;
                saybl "YTelo";
                #my $nonnew = keys %{wt.gone} 
                #|| keys %{wt.diff} || keys %{wt.still};
                for my $wk (qw'gone diff new still') {
                    for my $gk (sort keys %{$wt->{$wk}}) {
                        my $dd = {};
                        dd.v = $at->{$nk}->{$gk};
                        dd.o = $ta->{$nk}->{$gk};
                        if ($wk eq 'new' && $nk eq 'V') {
                            dd.v || sayre "$nk $gk missing: ".wdump 5, $at;
                        }
                        d.T.d->{$gk} && die "C.t: $nk,$gk ($v) rep.";
                        d.T.d->{$gk} =
                            dd.T.d->{$wk} = $dd;
                    }
                }
            }
            else {
                my $wk = !$vl ? "new" : !exists $at->{$nk} ? "gone" : "diff";
                my $dd = {%$d};
                d.T.d.s =
                    dd.T.d->{$wk} = $dd;
            }
            T.d->{$nk} = $d;
            #next unless C.t eq 'Car';
            #sayyl "TDback $nk: ".wdump 7,$d;
        }


    n doTd =>48=><<''
        # pick T bones, dot Is
        # a 9 for the Td (ill 8) consciousness rendezvou
        return unless C.t eq 'Car';
        saybl wdump 5, T.d.V.T.d;
    
coiTd: |
    my $Q;
    Q.path = [split '/', C.sc.Td];
    die if @{Q.path} < 1;
    
    my $form = C.sc.Tdform || 'nk/gk/wk';
    Q.atar = [split '/', $form];
    @{Q.atar} = @{Q.atar}[0 .. (@{Q.path}-1)];
    
    Q.onpa = [split '/', 'T/d'];
    Q.caps = {map{$_=>1}split',',C.sc.Tdarge} if C.sc.Tdarge;
    # like rg but from $s
    C.sc.sr && die "already sr";
    C.sc.sr = join ',', grep{$_} d=>o=>v=>talk=> @{Q.atar}, sort keys %{Q.caps||{}};
    for my $sr (split ',', C.sc.sr) {
        die "mixo $sr" if $sr =~ /\W/;
        push @$ara, "    my \$".$sr." = s\.$sr;";
    }
    C.sc.Ifs.Td = $Q;
    
Ydo: |
    u allovse
    n '','','%of:Sev'
    J.V = 1;
    # tee to 4 sc ^T.* to T looks compinkgk 6
    # this alternating data, which brings in middle terms
    # all T.d is a divable rhythm like:
    #   T.d.$nk (o/v of nk) .T.d.$gk (o/v of gk) .T.d.$wk (o/v of gk)
    # lives in pools and across pools, being beside it notes a kind of transience for it
    # for string nk the gk would be s, same o/v as nk, and also has wk
    # oseverato carte copies T.d to A.T.d 
    #     which AZ back into new T (usu most transient part)
    #     except for this shape of consciousness
    # ex to note Td acks, perhaps on T.d.*, $d, so it wanders
    # arf on anything we dont eventually understand in T.d, - total options tho
    # other flywheel stuff for lv.op button presses
    # wk = still is fine (usu)
    n tsnew =>4311=><<'',{Td=>'t/s/new'}
        lv.op.t = 1;
    
    n ysnew =>4312=><<'',{Td=>'y/*/new'}
        lv.op.y = 1;
    
    n ysnew =>4312=><<'',{Td=>'y/s/still'}
        lv.op.y = 1;
        sayre "SJDFIJDIG";
    
    
    n cnew =>4321=><<'',{Td=>'c/*/new'}
        die "how inject a c $gk" if $vl;
        lv.op.c->{$gk} = 9;
        
    n cgone =>4321=><<'',{Td=>'c/*/gone'}
        die "how delete a c $gk";
        lv.op.c->{$gk} = 9;
    
    n csdiff =>4323=><<'',{Td=>'c/s/diff'}
        lv.pur.c->{$gk} = 1;
    
    # ^ should avoid v (matched paths)
    n cdiff =>4324=><<'',{Td=>'c/*/diff'}
        warn "how to c dif $gk";
        lv.op.c->{$gk} = 9;
    
    
    
    n scnew =>4331=><<'',{Td=>'sc/*/new'}
        lv.pur.sc->{$gk} = 1;
        
    n scgone =>4332=><<'',{Td=>'sc/*/gone'}
        die "how delete a sc $gk";
        lv.op.sc->{$gk} = 9;
    
    n scdiff =>4333=><<'',{Td=>'sc/*/diff'}
        #sayyl "C.t $nk $gk $wk:  ".slim(30,$v)." <--- ".slim(30,$o);
        saybl "YEP";
        lv.pur.sc->{$gk} = 1;
    
    
YdoV: |
    u allovse
    n '','','%of:Sev'
    
    # without being a match prepare the Vacuumosd iv/ov
    n Vsup =>434=><<'',{Td=>'V/*/*'}
        saybl "NO WHAT $talk           s.d ";#. wdump 7,[$s];
        d.iv = lv.do->{$gk};
        d.ov = vl.do->{$gk};
        d.ov.i && (d.ov.i eq $o->{$gk} || warn "no ovi ogk  d.ov.i eq $o->{$gk}");
        T.noTd = 1;
    
    n Vnew =>4341=><<'',{Td=>'V/*/new',Tdarge=>'iv,ov'}
        saybl "NO WHAT $talk           s.d ";#. wdump 7,[$s];
        # may like to grab the element before it
        # like a curve continuing
        $iv || sayre("News cap no iv: ".wdump $s) && return;
        sayyl "$talk  ($iv) NEW!";
        lv.od.new->{$gk} = $iv;
    
    n Vgone =>4342=><<'',{Td=>'V/*/gone',Tdarge=>'iv,ov'}
        ov.rmnsc || die "no remin";
        !$iv || die "gone had iv";
        # ^ sc plumb its destruction
        # can void if our c reframes by implicitly clearing
        lv.od.go->{$gk} = $ov;
    
    n Vdiff =>4343=><<'',{Td=>'V/*/diff',Tdarge=>'iv,ov'}
        sayre "Digfip";
        if (iv.c eq ov.c) {
            iv.sc eq ov.sc && die "same c fluc sc $gk";
            my $in = @{iv.sc};
            my $out = @{ov.sc};
            if (@{iv.sc} > @{ov.sc}) {
                saybl "$talk GROWS" if J.V > 2;
                lv.od.gr->{$gk} = $iv;
            }
            else {
                warn "WTFF ".wdump 2,[$iv,$ov];
            }
        }
        else {
            saybl "$talk  REPLACES c";
            lv.od.over->{$gk} = $iv;
        }
    
    n Vstill =>4344=><<'',{Td=>'V/*/still',Tdarge=>'iv,ov'}
        say "Wegode: ".wdump 2, $d;
        lv.od.ll->{$gk} = $iv;
    

