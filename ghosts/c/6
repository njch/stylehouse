Jong: | # time holes
    u allvse
    
    # https://www.youtube.com/watch?v=tL8N_3tln0Y
    n J =>0.6=>{s=><<''},{code=>'Mo 6'}
        die "C.c.J vs C.sc.J" if C.c.J ne C.sc.J;
        my $talk = "T J.most.J.name /// J.A.d J.name  J.A.ztime  ----- A.ztime";
        sayyl "isn!   $talk       C.t " if J.V;
        # pi runs controlled by mostJ
        # which is run when A.ztime uppity, convene
        return T.not = 1 unless exists C.sc.pi || Atime(6);
        # runs i K=J cv 1-7, flywheels
        # set of pha tooling around the light cone
        A.t&J,7,1;
        # T.same == could skip 7?
        # may wanna be sure, timestamp prevAIling
        # AI is where it's a live
    
    n J =>0.7=>{s=><<''},{code=>'Mo 7'}
        say "oJ7777 J.name" unless J.yt.quiet || C.sc.pi;
        Rw J.most.eo $J;
        # dos geo ^ Yesui
    
    #c J2 locatre code
    n J =>0.62=>{s=><<''},{code=>'J 62'}
        return if exists C.c.pi;
        .
        if (A.ztime < 9) {
            my @am = A.jr&bol;
            die "doubly".wdump [@am] if A.jr&bol;
            A.bangdesk.aft.unblocknine = A.jr&bol,9;
        }
        A.bangdesk.bang.bang_ts = sub {
            A.jr&bang_ts,hitime
        };
        C.c.pin = J.name;

    n pi =>0.62=>{s=><<''},{code=>'J 62'}
        die'csnod' if $C ne J.C;
        J.cv = C.c.gp.cv || C.c.cv || 0.6;
        my $path = C.sc.pi||die'nopi';
        if (J.A.d > 9) {
            $path = 'text';
            warn "J.name J.A.d limit to text";
        }
        C.c.pin = "pi/$path";
        
    #c J63 overlay light cones
    # the use-full
    n J =>0.631=>{s=><<''},{code=>'J 631'}
        T.alk = "T J.most.J.name /// J.A.d J.name  A.ztime";
        A.coi = Rw pha $J ako;
        # ^ would want bangdesk catchundo
        # but lets just have forked recently and discard errors
    
    # the use-less - in a good way
    n J =>0.632 =>{s=><<''},{code=>'J 632'}
        return unless exists C.sc.pi;
        map { # telephone winch
             J.A->{$_} = J.Jiter.A->{$_}
             if J.Jiter && J.Jiter.A->{$_};
        } qw'ljm ljmo';
        A.time = sub {
            my($JJ,$q) = @_;
            # then - is
            # crux to pi
            $J eq $JJ || die "wtf";
            # point to give up
            # so can much very, sculpt
            if ($q == 2) {
                A.ico = Rw pha $J ico;
                A.ico.qui = 1;
                A.ico.as->(A.coi);
                my $wt = A.ico.exactl->();
                .
                if (wt.last && !wt.same) {
                    my $uf = join "\n", map{"$_: ".wdump(1,$wt->{$_})}
                        grep {keys %{$wt->{$_}}} qw'new diff gone';
                    saybl "T.talk  2222  $uf";
                }
                .
                Rw eighthnot $J
                 ? do { A.ico.wt.same = 0; }
                 : wt.same && return 0;
                .
                # for jamcs screenfly
                J.A.ljm = [];
                J.A.ljmo = "fr  J.name";
                return 1;
            }
            warn "T.alk other $q";
            if ($q == 8) {
                # until J.most coord attention evaporates
                # as in pulling on a list
            }
            A.ztime >= $q;
        };
    
    #c J66 T code exetcjer
    n J =>0.66=>{s=><<''},{code=>'J 66'}
        my $M=[];
        my $y = {o=>$M};
        my $ar = {%{C.c}};
        ar.u = ar.s;
        die "no ars" if !exists ar.s;
        ar.pin = C.c.pin || die "nopin";
        .
        my $tw = Rw huck + $A $C $G $T $J $M $y;
        # TODO: my $tw = Rw huck $A $C $G $T + $M $y;
        # place %$ar in + in the new ar
        .
        $tw || die "nothing! J.name";
        sayre "SWel didit";
        die "many".ki $tw if keys %$tw > 1;
        # set our C.c.s to [that], noise probe case, maybe
        Jn('z',$y) if @$M;
        # T may cause big recoil of Mo/J, miss pha closures:
    
    #c J67 exact light
    n J =>0.672=>{s=><<''},{code=>'J 672'}
        return unless A.ico && A.ico.wt.same;
        # first the superstilled
        # anything T_D can arrange through time...
        # wants to join G subtly vis T and so....
        # should be no M in the first bit
        # it is just pinpricks of consciousness keeping it alive, like mtime
        # be nicer to do with an I that can T out of this whole change res patch
            my $cut = @{A.ico.ord};
            my @cc = @{A.coi.ord};
            if (@cc > $cut) {
                warn"J.name entered stuff after 2!".wdump [@cc, 
                '                 =============', @{A.ico.ord}];
            }
            A.coi.abandon->();
            if (my $ljm = J.A.ljm) {
                for my $ar (@$ljm) {
                    ar.noR=1;
                    Rw jamsc;
                }
            }
            sayre "SKIP $talk" if J.V || J.most.J.V;
            T.whack = 1; # exit A.t&J
            T.same = 1; # exit Mo, T.not but not, kind of unlet ztime6->7
    
    # ^ may take over (whack) from the usual given full cone:
    n J =>0.677=>{s=><<''},{code=>'J 677'}
            A.coi.qui = 1;
            my $wt = A.coi.exactl->();
            if (wt.same) {
                if (++J.A.wch > 4) {
                    J.A.wch = 0;
                    # ^ rate to avoid v see J 632 eighthnot
                }
                else {
                   sayre "SAME $talk" if J.V || J.most.J.V;
                   T.same = 1;
                }
            }
    
oT6: |
    my $talk = "T J.most.J.name /// J.A.d J.name  J.A.ztime A.ztime";
    A.coi = Rw pha $J ako;
    
    if (exists C.sc.pi || J.most.ww2) {
        # telephone winch
        for (qw'ljm ljmo') {
             J.A->{$_} = J.Jiter.A->{$_}
             if J.Jiter && J.Jiter.A->{$_};
        }
        A.time = sub {
            my($JJ,$q) = @_;
            # then - is
            # crux to pi
            $J eq $JJ || die "wtf";
            # point to give up
            # so can much very, sculpt
            if ($q == 2) {
                A.ico = Rw pha $J ico;
                A.ico.qui = 1;
                A.ico.as->(A.coi);
                my $wt = A.ico.exactl->();
                
                if (wt.last && !wt.same) {
                    my $uf = join "\n", map{"$_: ".wdump(1,$wt->{$_})}
                        grep {keys %{$wt->{$_}}} qw'new diff gone';
                    saybl "$talk  2222  $uf";
                }
                
                Rw eighthnot $J
                 ? do { A.ico.wt.same = 0; }
                 : wt.same && return 0;
                
                # for jamcs screenfly
                J.A.ljm = [];
                J.A.ljmo = "fr  J.name";
                return 1;
            }
            warn "$talk other $q";
            if ($q == 8) {
                # until J.most coord attention evaporates
                # as in pulling on a list
            }
            A.ztime >= $q;
        };
    }

    my $M=[];
    my $y = {o=>$M};
    
    my $tw = Rw huck + $M $y;
    
    $tw || die "nothing! J.name";
    die "many".ki $tw if keys %$tw > 1;
    # set our C.c.s to [that], noise probe case, maybe

    Jn('z',$y) if @$M;
    
    my $sol = "?";
    # first the superstilled
    # anything T_D can arrange through time...
    # wants to join G subtly vis T and so....
    # should be no M in the first bit
    # it is just pinpricks of consciousness keeping it alive, like mtime
    # be nicer to do with an I that can T out of this whole change res patch
    if (A.ico && A.ico.wt.same) {
        my $cut = @{A.ico.ord};
        my @cc = @{A.coi.ord};
        if (@cc > $cut) {
            warn"J.name entered stuff after 2!".wdump [@cc, 
            '                 =============', @{A.ico.ord}];
        }
        A.coi.abandon->();
        if (my $ljm = J.A.ljm) {
            for my $ar (@$ljm) {
                ar.noR=1;
                Rw jamsc;
            }
        }
        sayre "SKIP $talk" if J.V || J.most.J.V;
        T.last = 1;
        $sol = "skip";
    }
    else {
        A.coi.qui = 1;
        my $wt = A.coi.exactl->();
        if (wt.same) {
            if (++J.A.wch > 4) {
                J.A.wch = 0;
                $sol = "same";
            }
            else {
               $sol = "skip";
               sayre "SAME $talk" if J.V || J.most.J.V;
                T.last = 1;
            }
        }
        else {
            $sol = "notsame";
        }
    }
    
    
oJ6: | # https://www.youtube.com/watch?v=tL8N_3tln0Y
    my $J = C.sc.J;
    my $talk = "T J.most.J.name /// J.A.d J.name  J.A.ztime  ----- A.ztime";
    sayyl "isn!   $talk       C.t " if J.most.J eq 'Hypo';
    
    unless (exists C.sc.pi) {
        return T.last = 1 unless Atime(6);
        
        my $n = sub{};
        if (A.ztime < 9) {
            my @am = A.jr&bol;
            sayre "doubly".wdump[@am] if A.jr&bol;
            $n = A.jr&bol,9;
        }
        aft {
            $n->();
            $@||return;
            sayre "BANG J.name" for 1..3;
            A.jr&bang_ts,hitime
            if J.most.J eq $J;
        };
    }
    
    %$ar = (%$ar, %{C.c});
    
    if (exists C.sc.pi) {
        Rw opi6 + $J;
    }
    elsif (J.most.wq) { saybl "oJ6666 C.t" unless J.yt.quiet;
        my $p = J.name;
        Rw oT6 + $A $C $J $T $p;
    }
    else {
        saybl "oJ6 C.t" unless J.yt.quiet;
        Rw around + $J;
        A.roundi = 1;
    }
       
opi6: |
    die'csnod' if $C ne J.C;
    die if !ar.T;
    
    J.cv = C.c.gp.cv || C.c.cv || 0.6;
    my $s = C.c.s;
    my $path = C.sc.pi||die'nopi';
    if (J.A.d > 9) {
        $path = 'text';
        warn "J.name J.A.d limit to text";
    }
    my $pin = "pi/$path";
    
    Rw oT6 + $pin $s $u:s;
waz/up: | # a strain
    #sayre "J.name is wazing";
    if (!J.yt.nohead) {
        Rw Jhead;
        Jn(st=>0.9=>"o",'%hs:8427,fs:4');
    }
    die if !ar.T;
    Rw oT6 + $p=*/M $J $A:J.A $C:J.C $T;

