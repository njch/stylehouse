Jing: | # higher crinkles
    n Jlaces =>W
    n Joot =>W
    # ^ 2,3
    n Jamping =>W
    n Jumps =>W
    # ^ 4:6,7
Jlaces: | # wires of together
    u allvse
    
    n '','','%of:Mo'
    
    # early, do later
    n J =>3211,<<''
        C.c.W = $J;
        die "In self: J.name" if $J eq A.J;
        A.ztime = 3 if A.J.name ne 'qq'; # break off
        
    n time =>3212,<<''
        A.ztime = delete C.c.time;
        
    # crunch gravel, spreaders
    n pi =>3213,<<''
        # - c. language is map to some u before 6ing
        ref $pi && die"refpi: ".wdump 2, $pi;
        T.at.pi = $pi || 'guess';
        C.c.J = 'pi';
        my $oJ = A.J;
        $oJ = C.y.o.J if C.y.o && C.y.o.J;
        A.jr = Rw Ajr $J:oJ $C;
    
    # Weave wires protocol, host pools
    n W =>32132,<<''
        my $jr = Rw Ajr $J:G.oin $t:W $cv=0.3;
        .
        return C.c.W = die "SOIDNG RESEAR".  jr&J if C.c.pi; # doing research
        A.jr = $jr; # being
        .
        my $t = $W;
        $t = W.name if ref $t;
        T.at.W = $t;
        T.at.J = ref $W ? $W : $t;
        C.c.J ||= $W;
        C.t = $t;
        C.y.cv ||= 0.3;
        # and where the thrust (J.A?)
        if (C.c.vv) {
            A.ztime = delete C.c.vv;
            A.jr&vv,'',9
        }
    
Joot: | # RW between being schute and J =+-   its A.jr
    u allvse
    
    n '','','%of:Mo'
    
    # resolve,<<''
    n J =>431,<<''
        my $f = A.jr&J;
        my $j = C.sc.J;
        ref $j && ref $f && ($j eq $f || die ".sc J dif $f $j");
        # should T.at so vis, substrate insecting
        C.c.J = T.at.J = $f if $f && ref $f && !f.dead;
    
    n X =>432,<<''
        my $J = C.sc.J;
        sayre "DELING J.name".ki$C;
        $J || die "X no J";
        ref $J || die "Nofound $J  C.t   C.y.cv";
        $X eq $J || die "noovewr X  C.c.X ne $J";
        A.jr&J,$J,9;
        J.dead = 1;
        # SNat bail, we have balin by now so hole in space this time
        T.not = 1;
    
    n J =>433,<<''
        return if ref $J;
        $J = Rw Jto $name:J;
        ref $J || die 'watt'.$J;
        if (exists C.c.pi) {
            J.Jiter = A.J; # erse rev
            J.most->{$_} = A.J.most->{$_} for keys %{A.J.most||{}};
        }
        # til the I train shows up:
        J.V = J.most.J.inV || 1 if A.J.V == 2 || J.most.J.inV;
        J.A.Indo = 2;
        #C.c.s ||= 'Wildy';
        sayyl "J33   Made J.name" unless J.Jiter;
        T.at.J = $J;
        A.jr&J,$J; # sc, c, and on sphere
        die "noovewr   C.c.J ne $J" if ref C.c.J && C.c.J ne $J;
Jamping: | # timing of 6 & 7
    u allvse
    
    n '','','%of:Mo'
    
    # time out
    n J =>434,<<''
        $J = C.c.J = C.sc.J;
        # TODO: soft acuminy over \d esp. until .bb or something
        A.mo.Js->{J.name} = $J;
        # A falls
        # A.mo exits
        # J.A persists
        J.A.first ||= hitime();
        if (C.sc.W && G.oin ne $J) {
            my $lev = G.oin.A.tid;
            if (J.A.tidi && (J.A.tidi + 3) > $lev) {
                A.ztime = 4;
            }
            else {
                J.A.tidi = $lev;
            }
        }
        sayre "same A.J.name inside J.name" if A.J eq $J;
        if (exists C.sc.pi) {
            die 'JiternotAJ' if J.Jiter ne A.J;
            die 'pimostJ'if J.most.J eq $J;
        }
        else {
            die 'esel' if J.most.J ne $J;
        }
        A.ztime ||= 6;
        A.time && die "Had atime";
        A.time = sub { # A.t& cover, serve single digit ad hocs, like 2
            my ($JJ,$q) = @_; die"JTIMEJ" if $JJ ne $J;
            A.ztime >= $q
        };
        if (C.sc.pi) {
            J.A.d = J.Jiter.A.d + 1;
            J.ind = join '  ', ('') x J.A.d;
            J.name = "J.A.d. C.c.pi*C.t";
            J.d = J.C = $C;
            A.ztime = 6 if A.ztime < 6;
        }
        A.talk .= " J: J.name";
Jumps: | # doing of 6 & 7
    u allvse
    n '','','%of:Mo'
    
    # https://www.youtube.com/watch?v=tL8N_3tln0Y
    # have the timesack, Subtle means even wide N J completely per C
    # bumps within decide servi
    # like being ones selves
    n J =>6,<<''
        T.alk = "A.talk  TT  A.ztime";
        Atime(6) || return do {
            say "SKive! T.alk" if A.J.V;
            T.nose = 1;
        };
        sayyl "J6 ! T.alk";
        A.Subtle.J = 1;
        A.t&J,9,1;
    
    n J =>7,<<''
        return sayre"nose T.alk" if T.nose;
        return sayre "same T.alk" if T.same;
        J.most.eo = 'Sev' if J.A.II.Sev;
        say "oJ77 77 T.alk     -> J.most.eo" unless J.yt.quiet || C.sc.pi;
        Rw J.most.eo $J $A;
    
Jong: | # time holes
    n Jiterbug =>W
    n Juperfi =>W
Jiterbug: |
    u allvse
    n '','','%of:J'
    # ^ or C.t be II's K
    # last minute resolves of the self
    
    n J =>6211,<<''
        return if exists C.c.pi;
        .
        if (A.ztime < 9) {
            if (A.jr&bol) {
                sayre "STOPPING ".ki($C) for 1..3;
                # TODO stop
            }
            A.bangdesk.aft.unblocknine = A.jr&bol,9;
        }
        A.bangdesk.bang.bang_ts = sub {
            A.jr&bang_ts,hitime
        };
        .
        C.c.pin = J.name;
    
    n J =>6212,<<''
        return unless exists C.c.pi;
        .
        die'csnod' if $C ne J.C;
        J.cv = (C.c.gp && C.c.gp.cv) || C.c.cv || 0.6;
        my $path = C.sc.pi||die'nopi';
        if (J.A.d > 9) {
            $path = 'text';
            warn "J.name J.A.d limit to text";
        }
        C.c.pin = "pi/$path";
    
    
    n J =>631,<<''
        A.coi = I.d&pha,$J,'ako';
    
    n J =>66,<<''
        my $M = [];
        my $y = {o=>$M};
        my $ar = {%{C.c}};
        #sayre "no ars" if !exists ar.s;
        ar.s = '' if !exists ar.s;
        ar.u = ar.s;
        ar.pin = C.c.pin || die "nopin";
        .
        Rw ar.pin + $A $C $G $T $J $M $y;
        # set our C.c.s to [that], noise probe case, maybe
        if (@$M) {
            n z=>$y=>{}
        }
        # T may cause big recoil of Mo/J, miss pha closures:
    
    # full exact light ^ may take over (whack) from the usual given full cone:
    n J =>677,<<''
        if (J.name eq 'Oth') {
            sayyl "Leaving J.name open pha...";
            I.d&end,A.coi;
            return;
        }
        A.coi.qui = 1;
        my $wt = I.d&exactl,A.coi;
        if (wt.same) {
            if (++J.A.wch > 4) {
                J.A.wch = 0;
                # ^ rate to avoid v see J 632 eighthnot
            }
            else {
               sayre "SAME T.alk";# if J.V || J.most.J.V;
               T.same = 1;
            }
        }
    
Juperfi: |
    u allvse
    n '','','%of:J'
    
    # use less -
    n J =>632,<<''
        return unless exists C.sc.pi;
        .
        map { # telephone winch, propaganda (top-er levels receiving stuff)
             J.A->{$_} = J.Jiter.A->{$_}
             if J.Jiter && J.Jiter.A->{$_};
        } qw'ljm ljmo';
        .
        A.time = sub {
            my($JJ,$q) = @_;
            $J eq $JJ || die "wtfJure";
            # wanna A.t&T,2,0 us to difference streams
            # they could be xot maps or code to run
            # then all over things 
            .
            if ($q == 2) {
                A.ico = I.d&pha,$J,'ico';
                A.ico.qui = 1;
                I.d&as,A.ico,A.coi;
                my $wtf = I.d&exactl,A.ico;
                .
                if (wtf.last && !wtf.same) {
                    my $uf = join "\n", map{"$_: ".wdump(1,$wtf->{$_})}
                        grep {keys %{$wtf->{$_}}} qw'new diff gone';
                    saybl "T.alk  2222  $uf";
                }
                .
                Rw eighthnot $J
                 ? do { A.ico.wtf.same = 0; }
                 : wtf.same && return 0;
                .
                # for jamcs screenfly
                J.A.ljm = [];
                J.A.ljmo = "fr  J.name";
                return 1;
            }
            .
            warn "T.alk other $q";
            if ($q == 8) {
                # until J.most coord attention evaporates
                # as in pulling on a list
            }
            A.ztime >= $q;
        };
    
    # if early exact light, no A.ico if not to (to)... scIfy thing (sees ACGT)
    n J =>672,<<''
        return unless A.ico && A.ico.wtf.same;
        # first the superstilled
        # anything T_D can arrange through time...
        # wants to join G subtly vis T and so....
        # should be no M in the first bit
        # it is just pinpricks of consciousness keeping it alive, like mtime
        # be nicer to do with an I that can T out of this whole change res patch
        my $cut = @{A.ico.ord};
        my @cc = @{A.coi.ord};
        if (@cc > $cut) {
            warn"J.name entered stuff after 2!".wdump [@cc, 
            '                 =============', @{A.ico.ord}];
        }
        I.d&bandon,A.coi;
        if (my $ljm = J.A.ljm) {
            for my $s (@$ljm) {
                s.noR=1;
                I.d&jamsc,$s;
            }
        }
        sayre "SKIP T.alk";# if J.V || J.most.J.V;
        T.whack = 1; # exit A.t&J
        T.same = 1; # exit Mo, T.not but not, kind of unlet ztime6->7
    

