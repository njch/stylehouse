oo/flows/ooj: |
   flow 1
   ing 3
   Sty 5
   #ing 2 
   #file 2 
ooj/flow: |
   d.sc = delete d.c.sc if d.c.sc;
   d.t = !ref d.c.J ? d.c.J : d.c.J.name if d.c.J;
   warn "dt    d.t"; 
   d.t = d.c.file if d.c.file;
   d.cv = 0.4 if d.c.file;
   d.cv = 0.3 if d.c.J;
   sayyl ki 1, $d; 
   
   my $jr = sub {
       my $s = shift;
       my $v = shift;  
       $s = '%'.$s if $s;  
       my $r = "d.t$s\td.cv";
       !defined $v ? J.bb->{$r} :
       do { J.bb->{$r} = $v;
         sub { delete J.bb->{$r} } 
       }
       ;
   };
   
   # 5
   
   d.s = $jr->();
   if (d.c.J) {
       die if ref d.c.J;
       if (!d.s) {
           my $o = {name=>d.c.J};
           d.s = Rw JJ $o;
           sayyl "Made o.name";
       }
       die if !ref d.s;
   }
   if (d.c.file) {
       warn "d.c.file ist d.s";
       return if !d.s;
   }
   if (d.sc.ok) {
       my $ok = d.sc.ok;
       my $co = jr&ok-$ok;
       #$ok && hitime-
       return d.s;warn wdump d.sc;
   }
   
   # 7
   my $ig = {map{$_,1}qw'file J ok'};
   my @jh = grep{!$ig->{$_}}keys %{d.c};
   #warn "Have: @jh" if @jh;
   my $hav = 1 if @jh;
   # some alt ^ make round v
   # 
   die if !d.t;
   die if !d.cv;
   die if !ref d.s;
   
   J.bz->("d.t\td.cv",d.s);
   
   do {
       my $ar = {%{d.c}};
       ar.J=d.s;
       return d.s if !$hav && jr&ok-9;
       my $n = $hav ? sub{} : jr&ok-9,9;
       Rw around;
       $n->();
   };
   d.s
ooj/ing: 
   - MZ: Cc:C
   -
    - J
    - 3
    - |
      die "J! $v ".gp $v;
ooj/Sty:
    -
     - cts_C #
     - 5
     - |
       my $g = wJ.ctx.C;
       for my $ct (@{wJ.cts.C}) {
           next unless ct.any or exists $d->{ct.t_k}->{ct.t};
           my $v = $d->{ct.t_k}->{ct.t} unless ct.any;
           my $at = {};
           my $A = {J=>$J,d=>$d}; 
           my $C = $d; # bendy stick throw
           my $c = C.c; # <v contation
           
           wJ.ctx.C->{ct.x}->($A,$J,$C,$c,$d,$v,$g,$at);
           
           for my $k (keys %$at) {
               d.cs->{"$k#".ct.x} = d.sc->{$k} = $at->{$k};
           }
       }
       

