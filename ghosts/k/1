oo/flows/ooj: |
   flow 1
   Y 2
   C 4
   time 7
   ing 3
   JJ 3
   file 3
   
ooj/flow: |
   my $A = {J=>$J,d=>$d};
   
   
   # 3
   
   # 7
   
   # 9
   d.s
ooj/Y:
    -
     - cts_Y #
     - 2
     - |
       for my $ct (@{wJ.cts.Y}) {
           next unless ct.any or exists $d->{ct.t_k} && exists $d->{ct.t_k}->{ct.t};
           my $v = $d->{ct.t_k}->{ct.t} unless ct.any;
           my $at = {};
           my $T = {};
           my $C = $d; # bendy stick throw
           my $c = C.c; # <v contation
           my $g = wJ.ctx.Y;
           
           wJ.ctx.Y->{ct.x}->($A,$J,$C,$c,$d,$v,$g,$at,$T);
           
           return die @{T.return} if T.return;
           die "atgot ". ki $at if %$at;
           die "Tgot ". ki $T if %$T;
       }
       
ooj/C:
    -
     - cts_C #
     - 5
     - |
       A.note = {};
       my $not = sub {
           my ($ct,$k) = @_;
           A.note.>$ct.>$k = 1;
       };
       my $g = wJ.ctx.C;
       for my $ct (@{wJ.cts.C}) {
           next unless ct.any or exists $d->{ct.t_k}->{ct.t};
           my $v = $d->{ct.t_k}->{ct.t} unless ct.any;
           ct.t_k eq "c" && not&c,ct.t;
           my $at = {};
           my $T = {};
           my $C = $d; # bendy stick throw
           my $c = C.c; # <v contation
           
           wJ.ctx.C->{ct.x}->($A,$J,$C,$c,$d,$v,$g,$at,$T);
           
           
           if (%$at) {
               sayyl "atgot ". ki $at;
               Rw jamsc $J $d $sc:at;
           }
           return @{T.return} if T.return;
           last if T.last;
           die "Tgot ". ki $T if %$T;
       }
       
ooj/ing: 
   - MZ: Cc:Y
   -
    - sc
    - 1
    - |
     d.sc = delete d.c.sc;
      
   - MZ: Cc:Cany
   -
    - gets
    - 2
    - |
      d.s = A.jr->();
      A.comp = $d;
      A.selif = Rw cscomp $d $igtk:A.note;
      sayyl 'jring  '.A.selif;
   -
    - puts
    - 7
    - |
       my $ig = {map{$_,1}qw'file J ok'};
       my @jh = grep{!$ig->{$_}}keys %{d.c};
       warn "Have: @jh" if @jh;
       my $hav = 1 if @jh;
       # some alt ^ make round v
       # 
       die if !d.t;
       die if !d.cv;
       die if !ref d.s;
       
       J.bz->("d.t\td.cv",d.s);
ooj/JJ: 
   - MZ: Cc:Y
   -
    - J
    - 3
    - |
     d.t = ref $v ? v.name : $v;
     d.cv = 0.3;
     
   - MZ: Cc:C
   -
    - J
    - 1
    - |
       die "tis" if ref d.c.J;
   -
    - J
    - 3
    - |
       if (!ref d.s) {
           my $o = {name=>d.c.J};
           d.s = Rw JJ $o;
           sayyl "oo Made o.name";
       }
       die if !ref d.s;

   - MZ: Cc:Cany
   -
    - Joing 
    - 8
    - |
       my $ar = {%{d.c}};
       ar.J=d.s;
       
       return d.s if !A.hav && A.jr&ok-9;
       my $n = A.hav ? sub{} : A.jr&ok-9,9;
       Rw around;
       $n->();
ooj/time:
   -
    - jr
    - 3
    - |
      A.jr = sub {
         my $s = shift;
         my $v = shift;  
         $s = '%'.$s if $s;  
         my $r = "d.t$s\td.cv";
         !defined $v ? J.bb->{$r} :
         do { J.bz->($r, $v);
           sub { delete J.bb->{$r} } 
         };
      };
   - MZ: Cc:Yany
   -
    - time
    - 3
    - |
      A.ztime = d.c.time || 6;
      A.time = sub {
           my ($J,$wa) = @_;
           A.ztime >= $wa ? 1 : do {
               saybl "COMB ".gp($J)." d.t A.ztime } to $wa";
               A.fopi->{J.id} = $J;
               0;
           };
      };
      
   - MZ: Cc:C
   -
    - ok
    - 2.2
    - |
       A.ztime = 1;
       
       my $co = A.jr&ok-$v;
       
       my $til = $co - hitime;
       sayyl wdump[ $co, $til ];   
       my $del = $v; 
       if ($co && $til < 0) {
           sayyl "low not $til " for 1..3;
           A.ztime = $v if $v > A.ztime;
           A.latime = $til;
           undef $co;
       }
       elsif (!$co) {
           $del = 0.8;
       }
       if (ref d.s) {
           
       }
       $del *= 4;
       $del *= 1.2 if rand 5 > 3;
       $co ||= do { sayyl "Combackin: $del"; $del + hitime; };
          
       A.jr&ok-$v,$co;
        
       sayyl "co $v : $co";
       
       #$ok && hitime- 
   - MZ: Cc:Cany
   -
    - time2
    - 2.9
    - |
       Atime(2) or T.return = [];
   -
    - time4
    - 4.9
    - |
       Atime(4) or T.return = [];
ooj/file:
   - MZ: Cc:Y
   -
    - file
    - 3
    - |
     d.t = $v;
     d.cv = 0.4;
     
   - MZ: Cc:C
   -
    - file
    - 1
    - |
      sayyl "YEAH! $v ist d.s";
   -
    - file
    - 3
    - |
       return if d.s;
       
       T.return = [];
 

