name: Styling
dials:
  max_depth: 7
  form: 42
hooks:

  T_end: |
    my $t = $G->{_trail} ||= [];
    my $xL = $L; 
    
    my $yL = $xL->{t};
    my ($ytw, $ylw) = ([],[]);
    for my $yw (@{$yL->{o}}) {
        if ($yw->{B}->{Li}) {
            push @$ytw, $yw
        }
        else {
            push @$ylw, $yw
        }
    }
    my $yiw = $yL->{i} || $G->nw()->from({K=>"notTheWayIn!"});
    my $xiw = $xL->{i};
    
    my $h = {};
    my $ha = sub {
        my ($attr,$y,$w,$thing) = @_;
        push @{$h->{$attr}||=[]}, { y=>$y,w=>$w,t=>$thing };
    };
    
    my $x = {id=>$xL->{uuid}};
    
    for my $ya (['l',$ylw],['t',$ytw],['i',[$yiw]]) {
        my ($y,$yww) = @$ya;
        for my $w (@$yww) {
            $H->error("$y sez $yL->{t} ".wdump($w)) && next unless $w && ref $w eq "Way";
            w u[$xL, $yL, $ylw, $ytw, $yiw, $xiw,         $y, $w, $ha];
        }
    }
    
    w h[$xL, $yL, $ylw, $ytw, $yiw, $xiw,         $h, $x];
    
    
    w diagontrail[$xL, $yL, $ylw, $ytw, $yiw, $xiw, $h, $x];
    return unless $xL->{depth} == 0;
    @$r = "HTML!";
  h: |
    # grep $h for content, apply whittling...
    my $content = $h->{content} || [];
    $content = [grep { $_->{y} ne 't' } @$content];
    $content = [
        (grep { $_->{y} eq 'l' } @$content),
        (grep { $_->{y} eq 'i' } @$content),
    ];
    $H->error("multiple contents", $content) if @$content > 1;
    
    if (!@$content && !@$ytw) {
        @$content = {y=>"?",t=>encode_entities($yL->{t})};
    }
    if (@$content && @$ytw) {
        $H->error("contents & things", $content, $ar);
        @$content = ();
    }
    if (@$content) {
        $x->{content} = $content->[0]->{t}; # favour loose style over wayin
    }
    
    my $div = $h->{div} || [];
    my $todiv = [ grep { $_->{y} ne 't' } @$div ];
    my $div = [
        (grep { $_->{y} eq 'l' } @$div),
        (grep { $_->{y} eq 'i' } @$div),
    ];
    
    if (@$ytw && !@$div) {
        $H->error("no div & things", $div);
    }
    if (@$div) {
        $H->error("multi div", $div) if @$div > 1;
        my $v = $div->[0]->{t};
        my ($X,$Y) = split "x", $v; $v =~/^x/&&die"?";
        $x->{div} = "$X * $Y";
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    # etc
    
        
    
  up:
    - h: value
      escape_html: 1
      hh: content
      
    - h: conty
      hh: content
      
    - hh: div
  u: |
    my @wup = $G->findways('up');
    for my $up (@wup) {
        my $v = $up->{h} 
            ? $G->w("B/s/$up->{h}", {}, $w)
            : $w->find("B/s/$up->{hh}");
        $v = encode_entities($v) if $up->{html} && defined $v;
        $ha->( $up->{hh} => $y,$w, $v ) if defined $v;
    }
    
  diagontrail: |
    my $htalk = "";
    while (my ($attr, $hh) = each %$h) {
        $htalk .= join("\n", "$attr:", map{"  ".ki($_)} @$hh)."\n";
    }
    my $diag = {
        "an thing" => ghostlyprinty($yL->{t}),
        h => $htalk,
        x => ki($x)
    };
    
    for my $ya (['l',$ylw],['t',$ytw],['i',[$yiw]]) {
        my ($y,$yww) = @$ya;
        $diag->{"z $y"} = [ map {
            "!html $y ".
            (ref $_ eq "Way" ?
            ($_->pint             .($y ne 't' ?
                '<t style="color:white;">'.ki($_->{B}->{s}).'</t>' : "") )
            : "iww!www: $_")
        } @$yww ]
    }
    push @{ $G->{_trail} }, $diag;
   

