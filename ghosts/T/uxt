name: Styluxyio
dials:
  max_depth: 7
  form: 42
chains:
 - K: xW #c
   dom_depth: 0
   arr_if: |
     ref $thing eq "Wormhole";
   B_: |
     $thing
   foreach_travel:
     each: grep { $_->{depth} == 0 } @{$thing->{script}}
   print: |
     ".$Li->{n}"
 
 - K: xL
   iK: xW|xL
   arr_if: |
     ref $thing eq "HASH"
     && ref $thing->{o} eq "ARRAY"
   print: |
     ".$Li->{n}"
   foreach_travel:
     each: grep { defined $_ } map { $_->{B}->{Li} } @{$thing->{o}};
hooks:
  event: |
    my $yL = L.t;
    my $yiK = yL.i.K;
    Say " $yiK - click yL.t";
    if ($yiK eq "Thing") {
        my $nothing = yL.t;
        $O Tw arr[$nothing];
    }
    if ($yiK eq "WaysOut") {
        my $nothing = yL.t;
        $O Tw arr[$nothing];
    }
  x_to_h: |
    my $x = L.i.B.x;
    my $h = L.i.B.h = {};
    my $attr = {};
    my @style = ();
    my @class = ();
    attr.id = x.id          if exists x.id;
    attr.title = x.title if exists x.title;
    
        for my $a (qw{height width left top}) {
            if (exists $x->{$a}) {
                my $v = $x->{$a};
                $v = ($v * 100).'%' if $v !~ /em$/;
                push @style, "$a:$v"; 
            }
        }
        if (exists x.height && x.height =~ /em$/ && x.width == 1) {
            push @style, "float:left";
        }
        if (exists x.left || exists x.top) {
            push @style, "position:absolute";
        }
        if (x.class) {
            push @class, @{x.class};
        }
        if (x.style) {
            for my $styley (@{x.style}) {
                my $styles = [ flatline($styley) ];
                push @style, @$styles;
            }
        }
         
        my $tag = x.tag || "uh";
        if (!defined L.i.B.Lo) {
            $tag = "wormhole";
            my $W = $G->W;
            attr.title = G.name;
            (attr.id) = W.id =~ /-(\w+)$/;
        }
        
        attr.style = join "; ", @style if @style;
        attr.class = join " ", @class if @class;
        
        h.attr = $attr;
        h.tag = $tag;
        h.children = L.o;
        h.content = sub {
            return x.content if x.content;
            return join "", grep {defined}
                map { _.B.h.ash->() }
                grep { _.B && _.B.h } @{h.children}
        };
        h.ash = sub {
            "<h.tag ".join(" ", map {"$_=\"h.attr->{$_}\""} sort keys %h.attr).">"
            ."\n".ind("  ", h.content->())."\n"."</h.tag>\n"
        };
    
    
    
    
    # etc
    
        
    
  T_end: |
    push @{G.Torail||=[]}, $L;
    if (L.i.K eq "T?") {
        my $html = w next_phase;
        @$r = ($html);
        G.Torail=[];
        #die wdump($html);
    }
        
  next_phase: |
      for my $L (@{G.Torail}) {
            w style_to_x[$L];
      }
      for my $L (@{G.Torail}) {
            w x_to_h[$L];
      }
      return L.i.B.h.ash->();
      
  style_to_x: |
    my $x = L.i.B.x = {};
    my $yL = L.t;
    my @oo = grep { !_.O } @{yL.o};
    my $got = {
    l => [ grep { !_.B.Li } @oo ],
    t => [ grep { _.B.Li } @oo ],
    i => [ yL.i ],
    };
    my $hg = sub {
        my ($what, $order) = @_;
        my @R;
        for my $yg (split '', $order) {
            for my $w (@{$got->{$yg}}) {
                if (w.B && w.B.s) {
                    if (exists w.B.s->{$what}) {
                        push @R, w.B.s->{$what}
                    }
                    if (exists w.B.s->{$what."_D"}) {
                        push @R, $G->w("B/s/".$what."_D", {}, $w)
                    }
                }
            }
        }
        @R
    };
    
    
    my @content = $hg->(content => 'li');
    @content > 1             && die "cont > 1";
    #@content && @{got.t}     && die "cont & t";
    ($x->{content}) = @content if @content;
    
    $x->{class} = [ flatline($hg->(class => 'il')) ];
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    ($x->{tag}) = grep {defined} flatline($hg->(tag => 'li')), "te";
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    $x->{id} = L.uuid;
    $x->{title} = "yL.n yL.depth ".pint(yL.t.i) if ref yL.t eq 'HASH';
    
    my @div = $hg->(div => 'li');
    @div > 1                 && die "div > 1";
    if (@div) {
        my ($v) = @div;
        my $vi = {};
        ($vi->{width},$vi->{height}) = split "x", $v; $v =~/^x/&&die"?";
        while (my ($iv, $parts) = each %$vi) {
            if (!$parts) {
                next;
            }
            my $inc;
            if ($parts =~ /em$/) {
                $inc = $parts;
                $parts = 1;
            }
            $parts = 0+@{ L.o }    if $parts eq "...";
            $parts = 1    if $parts == 0;
            $inc ||= sprintf("%.3f", 1 / $parts);
            my $side = $iv eq "width" ? "left" : "top";
            my $i = 0;
            
            for my $w (@{ L.o }) {
                die "lower w.B.x not yet" unless w.B.x;
                my $ox = w.B.x;
                if ($parts == 1) {
                    $ox->{$iv} = $inc;
                }
                else {
                    $ox->{$side} = $i;
                    $i += $inc;
                    $ox->{$iv} = $inc;
                }
            }
        }
    }
    
    
  diagontrail: |
    my $htalk = "";
    while (my ($attr, $hh) = each %$h) {
        $htalk .= join("\n", "$attr:", map{"  ".ki($_)} @$hh)."\n";
    }
    my $xt = join "", map { "$_\n" } @{$x->{children}};
    $xt .= "  $_:$x->{$_}" for grep { $_ ne 'children'} keys %$x;
    my $diag = {
       #"an thing" => ghostlyprinty($yL->{t}),
        "D" => join("",("DDDD")x$yL->{depth}), 
        h => $htalk,
        x => $xt,
        X => $xiw->{B}->{s}->{x}, 
    };
    
    my $ytalk = "!html ";
    for my $ya (['l',$ylw],['t',$ytw],['i',[$yiw]]) {
        my ($y,$yww) = @$ya;
        $ytalk .= join "", map {
            "$y ".
            (ref $_ eq "Way" ?
            ($_->pint.'<t style="color:white;">'.ki($_->{B} ? $_->{B}->{s} : {}).'</t>')
            : "iww!www: $_")."\n"
        } @$yww
    }
    $diag->{ytalk} = $ytalk;
    push @{ $G->{_trail} }, $diag;
   

