name: Styluxyio
dials:
  max_depth: 7
  form: 42
chains:

hooks:
  ways:
    ux:
      K: ux
      O: ux
      print: |
          pint(S.Lu.i)
    uy:
      K: uy
      O: uy
      print: |
          ki($B)
          
  event: |
    my $ux = L.i;
    ux.O eq "ux" || $H->error("uxL.i sposed to be ux, L=", $L);
    $O->{O}->w(somewhere => {thing => ux.Lu});
    
  ux: |
    Say @$Ls." lines -> ux from $Ls->[0]->{name}";
    
    
    my $accum = sub {
        my ($a, $t) = @_
        if (!grep { $_ eq $t } @$a) {
            push @a, $t
        }
    };
    
    my $mku_;
    my $uL_o_uxs = sub {
        $G->findO(ux => uL.o)
    };
    my $uL_o_Lu_find = sub {
        my $t = shift;
        grep { $t eq _.Lu } $uL_o_uxs->();
    };
    
    my $cu_Lu = sub {
        my $w = shift;
        w.Li && $uL_o_Lu_find->(w.Li)
    };
    my $Luyon = sub {
        my $n = shift;
        grep { _.O eq "uy" && exists _.B->{$n} } $uL_o_uxs->();
    };
    my $uxguts = sub {
        # spawn guts
        for my $o (@{L.o}) {
            die "ux on L_o not uL_i" if o.O eq "ux" && $o ne $ux;
        }
        for my $o (@{L.o}) {
            next if o.O eq "ux";
            # makes a non-Lu-having uL O:uy for non-ux ways out
            # which get B sets of instructions to style & whatever from
            if ($cu_Lu->($o)) {
                # line is there
            }
            else {
                # way may lead somewhere if o.Li or some comp changes
                $mku_->(uy => {B=>{o=>$o}})
            }
        }
        
        my $i = L.i;
        for my $n (qw'a i t o m w') {
            next if $Luyon->($n);
            my $y = $L->{$n};
            $mku_->(uy => {B=>{$n=>$y}})
        }
    };
    my $uyguts = sub {
        if (_.B.i) {
            unless (grep { _.B.t } @{uL.o}) { # t uy there
                $mku_->(uy => {B=>{t=>$t}})
            }
        }
    };
    $mku = sub {#c
        my $way = shift;
        $G->nw()->from($G->findway('ways/'.$way))->from({B=>{@_}});
    };
    my $findu = sub {
        my $u = shift;
        my $L;
        for $LL (@{$G->W->{script}}) {
            my $i = LL.i;
            if ($i eq $u) {
                push $L, $i;
                last;
            }
            elsif (u.B) {
                my $f = 0;
                for my $k (keys %{u.B}) {
                    $f = 1 unless u.B->{$k} eq i.B->{$k}
                }
                $L = $LL unless $f;
            }
        }
        return L.i if $L;
    };
    my $ul = sub { # look for u way
        my $z = {@_};
        my $u = z.u;
        $u = $findu->(z.u)                    unless u.Li;
        $G->T("anu: ".pint($u), undef, $u) unless u.Li;
        die                                   unless u.Li;
        if (z.p){
            $accum->(z.p.o => $u)
            if (u.O eq "ux") {
                u.Lo = z.p
            }
            elsif (u.O eq "uy") {
                $accum->(u.B.Lo, $u);
            }
            else {
                die
            }
        }
        $u
    };
    
    my @uxs;
    for my $Lu (@{$Ls}) { # install ux outways to Lu
        push @uxs, $ul->(
            u => $mku->(ux => {Lu=>$Lu}),
            p => $Lu,
        );
    }
    my @tux;
    for my $ux (@uxs) {    # join uL lines together like the origin
        my $Lu = ux.Lu || die;
        my $pLu = Lu.i.Lo; # up and over
        my ($pux) = $G->findO(ux => pLu.o) if $pLu;
        unless ($pux) {
            push @tux, $ux;
        }
        else {
            $ul->(
                u => $uxoLu,
                p => $pux,
            );
        }
    }
    my $antop = sub {
        my $u = uL.i;

        ux.O eq "ux" ?
            $uxguts->()
        : ux.O eq "uy" ?
            $uyguts->()
        : die;


        for my $cu (@{uL.o}) {
            my $cuL = cu.Li || die;
            w antop[$X, $uL, $M];
        }

        my $at = {};

        at.id = uL.uuid;

        if (u.K eq 'uy') {
            die if u.Lu;
            for (qw'a i t o m') {
                u.B->{$_} || next;
                at.tag = at.styles = "L_$_";
            }
        }
        if (u.K eq "ux") {
            $subat->(styles => 'te');
        }
        elsif (u.K eq "uy") {
            $subat->(styles => 'te w?');
        }

        my $jj = sub {
            my $a = shift;
            join " ", $G->(styles => join " ", ) };


        my @html = '<te id="'.uL.uuid.'" style="'.$G->styles('te').'">';
        push @html, '

        <L_i style="'.$G->styles('rel').'">

            <t style="'.$G->styles('topleft white little').'">i:</t>
            '.pint(L.i)
        .'</L_i>
         = <L_t style="'.$G->styles('rel').'">

            <t style="'.$G->styles('topleft white little').'">t:</t>
            '.gpty(L.t)
        .'</L_t>
        ';

        my $ohtml = join "\n", grep { defined } map { _.html } @uxs;
        push @html, ind '    ', 
            '<wo style="'.$G->styles('wo').'">'."\n"
            .$ohtml."\n"
            .'</wo>' if $ohtml;




        push @html, "</te>";
        say "ux antop ".$G->F_delta();
        ux.html = join "\n", @html;


    };
    
    my @eh;
    for my $uL (@tops) {
        $antop->($uL);
        push @eh, uL.i.html;
    }
    
    my $W = $G->W;
    my ($id) = W.id =~ /-(\w+)$/;
    
    return join "\n", '<wormhole style="font-size:70%;position:relative;"id="'.$id.'">', @eh, '</wormhole>';
    
  styles:
    te: |
      q {border-bottom:1px solid black},
      qw{ padding:0.4em margin-left:2em },
      qw{width:100% float:left position:relative},
    rel: |
      qw'position:relative'
    topleft: |
      qw'position:absolute top:-5px left:-5px'
    white: |
      qw'color:white'
    little: |
      qw'font-size:60%'
    fulw: |
      qw {height:100% float:left position:absolute},
    wo: |
      qw{width:30% font-size:7 padding-left:2em}, q {border: 2px solid pink},
  x_to_h: |
    my $x = L.i.B.x;
    my $h = L.i.B.h = {};
    my $attr = {};
    my @style = ();
    my @class = ();
    attr.id = x.id          if exists x.id;
    attr.title = x.title if exists x.title;
    
        for my $a (qw{height width left top}) {
            if (exists $x->{$a}) {
                my $v = $x->{$a};
                $v = ($v * 100).'%' if $v !~ /em$/;
                push @style, "$a:$v"; 
            }
        }
        if (exists x.height && x.height =~ /em$/ && x.width == 1) {
            push @style, "float:left";
        }
        if (exists x.left || exists x.top) {
            push @style, "position:absolute";
        }
        if (x.class) {
            push @class, @{x.class};
        }
        if (x.style) {
            for my $styley (@{x.style}) {
                my $styles = [ flatline($styley) ];
                push @style, @$styles;
            }
        }
         
        my $tag = x.tag || "uh";
        if (!defined L.i.B.Lo) {
            $tag = "wormhole";
            my $W = $G->W;
            attr.title = G.name;
            (attr.id) = W.id =~ /-(\w+)$/;
        }
        
        attr.style = join "; ", @style if @style;
        attr.class = join " ", @class if @class;
        
        h.attr = $attr;
        h.tag = $tag;
        h.children = L.o;
        h.content = sub {
            return x.content if x.content;
            return join "", grep {defined}
                map { _.B.h.ash->() }
                grep { _.B && _.B.h } @{h.children}
        };
        h.ash = sub {
            "<h.tag ".join(" ", map {"$_=\"h.attr->{$_}\""} sort keys %h.attr).">"
            ."\n".ind("  ", h.content->())."\n"."</h.tag>\n"
        };
    
    
    
    
    # etc
    
        
    
  next_phase: |
      for my $L (@{G.Torail}) {
            w style_to_x[$L];
      }
      for my $L (@{G.Torail}) {
            w x_to_h[$L];
      }
      return L.i.B.h.ash->();
      
  style_to_x: |
    my $x = L.i.B.x = {};
    my $yL = L.t;
    my $got = {
    l => [ grep { !_.B.Li } @{yL.o} ],
    t => [ grep { _.B.Li } @{yL.o} ],
    i => [ yL.i ],
    };
    my $hg = sub {
        my ($what, $order) = @_;
        my @R;
        for my $yg (split '', $order) {
            for my $w (@{$got->{$yg}}) {
                if (w.B && w.B.s) {
                    if (exists w.B.s->{$what}) {
                        push @R, w.B.s->{$what}
                    }
                    if (exists w.B.s->{$what."_D"}) {
                        push @R, $G->w("B/s/".$what."_D", {}, $w)
                    }
                }
            }
        }
        @R
    };
    
    
    my @content = $hg->(content => 'li');
    @content > 1             && die "cont > 1";
    @content && @{got.t}     && die "cont & t";
    ($x->{content}) = @content if @content;
    
    $x->{class} = [ flatline($hg->(class => 'il')) ];
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    ($x->{tag}) = grep {defined} flatline($hg->(tag => 'li')), "te";
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    $x->{id} = L.uuid;
    $x->{title} = "yL.n yL.depth ".pint(yL.t.i) if ref yL.t eq 'HASH';
    
    my @div = $hg->(div => 'li');
    @div > 1                 && die "div > 1";
    if (@div) {
        my ($v) = @div;
        my $vi = {};
        ($vi->{width},$vi->{height}) = split "x", $v; $v =~/^x/&&die"?";
        while (my ($iv, $parts) = each %$vi) {
            if (!$parts) {
                next;
            }
            my $inc;
            if ($parts =~ /em$/) {
                $inc = $parts;
                $parts = 1;
            }
            $parts = 0+@{ L.o }    if $parts eq "...";
            $parts = 1    if $parts == 0;
            $inc ||= sprintf("%.3f", 1 / $parts);
            my $side = $iv eq "width" ? "left" : "top";
            my $i = 0;
            
            for my $w (@{ L.o }) {
                die "lower w.B.x not yet" unless w.B.x;
                my $ox = w.B.x;
                if ($parts == 1) {
                    $ox->{$iv} = $inc;
                }
                else {
                    $ox->{$side} = $i;
                    $i += $inc;
                    $ox->{$iv} = $inc;
                }
            }
        }
    }
    
    

