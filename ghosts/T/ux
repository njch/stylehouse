name: Styluxyio
include: T/braid T/ravel
C:
  - K: Wormhole
    O: ux
    S:
      tag: wormhole
      id_D: |
        my $W = $G->W;
        my ($id) = W.id =~ /-(\w+)$/;
        $id
     
  - K: ux
    O: ux
    styles: te
    conor: 1
    print: |
       "(".pint(S.B.Lu.i)." \t".gpty(S.B.Lu.t).")"
    T_remembers_last: 1
    C_n_spawn: [i, t, o]
    lness:
       Lo: called Lu if diff_ghost
       
  - K: i
    in_dos:
      Lu_grab_n: i
      n_uys_to_w_n: w
      
    C_n_spawn: [w]
    conor: -0.5
    
  - K: t
    uy_in_dos:
      Lu_grab_n: t
      
    content_D: |
      die "t content fullity" if S.B.raw || S.raw;
      my $con = gpty($t);
      $con = ($con=~/^(.{30})/s)[0]."..." if length($con) > 50;
      $con;
      
  - K: o
    uy_in_dos:
      Lu_grab_n: i
      n_uys_to_w_n: w
      
    C_n_spawn: [w]
    conor: 0.5
    
  - K: w
    content_D: |
      pint($w);
      
  - K: e
    styles: topleft white little
    content_D: |
      $e
   
   
dials:
  max_depth: 7
  form: 42

hooks:
  event: |
    my $u = L.i;
    my $ux = uxL.i;
    my $E = {%$ar};
    E.L = ux.B.Lu;
    E.uyL = $L if $L ne $uxL;

    E.L.G->w(event => $E);
  ux: |
    Say @$Ls." lines -> ux from $Ls->[0]->{name}";
    
    my $top = 0->TafuB(Wormhole => {W => G.W});
    
    0->visTp({
        i => $top,
    });
    
    my @uxs;
    for my $Lu (@{$Ls}) { #say "install ux outways to Lu";
        push @uxs, 
            0->visTp_TafuBl(
                {L=>$Lu},
                [ux => {Lu=>$Lu}],
            );
    }
    
    my $parent_ux_via_B_Lu_Lo_o = sub {
        my $ux = shift;
        my $Lu = ux.B.Lu || die "no Lu on ux";
        my $pLu = Lu.i.Lo if exists Lu.i.Lo; # up and over
        my ($pux) = findO(ux => pLu.o) if $pLu;
        $pux;
    };
    my $LuWs;
    my $parent_ux_links_B_Lu_G_W = sub {
        my $ux = shift; 
        my $W = ux.B.Lu.G.W;
        $LuWs->{"$W"} ||=
            0->visTp_TafuBl(
                {i=>$top},
                [Wormhole => {W => $W}],
            );
    };
    
    my @tux;
    for my $ux (@uxs) {
        # join uxLis together like the origin
        my $ix = $parent_ux_via_B_Lu_Lo_o->($ux);
        
        # or chuck it under a ux for its ghost
        $ix ||= $parent_ux_links_B_Lu_G_W->($ux);
        
        0->visTp_l_u({i=>$ix}, $ux);
        
        die "ix not Li " unless ix.Li;
        die "ux not in above ux o: ".sw({uxs=>\@uxs,ix=>$ix})
            unless ix.O ne "ux" || grep { $_ eq $ux } @{ix.Li.o};
    }
    
    # now go from/to the ux for $G->W, which T is at already
    w braid(Ds => 'uxalot');

    my $html = top.html;
    
    G.view->takeover($html);
    U->send_contents_awaiting();
    Say $html;
    Say "ux antop ".$G->F_delta()."\n\n\n";
    
  any_init: |
    
    G.U.jgd = sub { join " ", grep { defined } @_ };
    G.U.send_contents_awaiting = sub {
        my $awa = G.contents_awaiting ||= [];
        G.fuckery = 0;
        for my $ait (reverse @$awa) {
            my $u = ait.u;
            my $sel = ait.sel;
            my @htmls = U->contor(@{u.at.contents});
            #die wdump([$u,\@htmls]);
            for my $html (@htmls) {
                #next if G.fuckery++ > 7;
                $H->JS("\$('$sel').append('$html');");
            }
        }
        G.contents_awaiting = [];
    };
    G.U.contor = sub {
        grep { defined }
        map { _.html || _.content } @_
    };
  uxalot:
    0.1: | #c
      my $u = T.i;
        my $Lu = u.B.Lu || die "no Lu" if u.K eq "ux";
        # B into style
        # spawn guts
        # ways can compress/Loose (and look UP) via K
        
        my $uyBs = $G->findway('uyBs');
        my $uyBsK = sub { 
            my $uyK = shift;
            my ($uyB) = grep { _.K eq $uyK } @$uyBs;
            $uyB || die "No such uyK $uyK";
            { %$uyB } 
        };
        my @fluyB;
        my $pafly = sub {
            my $from = shift;
            push @fluyB, { %$from, @_ }
        };
        if (my $uys = u.B.uys) { 
            for my $uyK (split ' ', $uys) {
                my $uyB = $uyBsK->($uyK);
                next if u.K eq "ux";
                
                if (my $to = u.B.yBs->{"n_uys_to_".uyB.K."_n"}) {
                    $uyB->{$to} = u.B->{u.B.n};
                    uyB.n = $to;
                }
                if (my $n = uyB.yBs.Lu_grab_n) {
                    my $y = $Lu->{$n};
                    $uyB->{$n} = $y;
                    uyB.n = $n;
                }
                my @uyBits = ($uyB);
                if (my $n = uyB.yBs.multi_n) {
                    if (my $y = $uyB->{$n}) {
                        if (ref $y eq "ARRAY") {
                            @uyBits = ();
                            my $i = 0;
                            for my $o (@$y) {
                                push @uyBits, {
                                    %$uyB,
                                    $n => $o,
                                    K => uyB.K."[".$i++,
                                };
                            }
                        }
                    }
                }
                for my $uyB (@uyBits) {
                    $pafly->($uyB);
                }
            }
        }
        for my $uyB (@fluyB) {
            if (1) {
                U->uys($uyB);
            }
            else {
                my $u = 0->TafuBl(uy => $uyB);
                #die "liney" if u.Lo ne G.L;
                die "miso" if !grep{$_ eq $u}@{G.L.o};
                die wdump($u);
            }
        }
    0.5: | #c
      for my $i (@{T.L.o}) {
          next if $i eq T.i;
          w anTop[$i];
      }
    0.6: | #c
      my $u = T.i;
        
        my $Lu;
        if (u.K eq "ux") {
            $Lu = u.B.Lu
                || die " no Lu".sw({" no Lu"=>$u})
        }
        else {
            u.B.Lu && die "Lu non ux ";
        }
        
        die "ux has no ways out, expected SOMETHING!?".sw(u.Li)
        
            if u.K eq "ux" && !@{u.Li.o};
        
        my $at; # heres some state
        
        at.id = w $u S/id_D[$at];
        at.id ||= u.Li.uuid; # meaning competition
        # the process for creating the above line of code
        # needs to be like 'u S id' typed
        # some thing implied by space
        # some mystery chased
        # where/how is important nature
        # things get grabbed by typing and clicking
        # those patterns are truth to style from
        # then style collapses into
        # they might be nearby visually
        # pulled out of the unified field 
        # so style vortex creates code
        
        at.styles = U->jgd(u.styles); # coalescing
        my $y = u.K eq "uy";
        if ($y) {
            my $n = u.B.n;
            at.tag = "y$n";
            at.content = w $u B/content_D;
            
            at.styles = U->jgd(at.styles, "y$n", u.B.styles);
        }
        at.tag ||= U->jgd(u.B.tag, u.tag);
        die "no tag" .wdump($u) if !at.tag;
        
        # think about styles
        #
        #       lots     of     fast     EXPR    business
        #
        #   various ways to involve Cs
        #    equations to observe
        # one of those points in time again
        # with all the stuff
        # to be synapses
        # and string together meaning from a flow of impressions, logic
        # logic EXPR style EXPR css...
        #       
        #   whole braid state should be straight forward
        #   bendy stuff would work too
        #   just need to create time in the braid
        #   which is the separation of 0 and 1
        #
        #   how it treats time, also
        #   state could be a game
        #   travel could be rhythmic
        #   
        #   like painting a family vs painting like drums
        #
        #   T._trail.i is some A
        #   it leads to the whole braid
        #  
        # EXPR branches these trails of inquiry logically and however
        # all along the allele tower
        # lets logic flow around satellites
        # 
        # sifts entropy through meshes of different dimensions
        # a tour of satellites
        #   look
        # then see more in u.o or so
        
        # used to say: # at = Doing if Lu S u_O=u.O && u_B_n=u.B.n
        # so at is a beast
        # and all that remains at the ends is... yeah
        # querying _trail for a path is the A buzz
        # useful for attaching stuff without whole mess around
        # pathways of EXPR could stretch out through dimensions
        # and time... things may be moving around that know about time
        
        u.E_at = u.at;
        u.at = $at;
        my $tag = sub {
            my $content = shift || '';
            my $attr = { %{u.at} };
            attr.style = $G->styles(delete attr.styles); # or so
            attr.style .= "position:relative;"
            unless attr.style =~ /position[^\w]+absolute/;
            my $tag = delete attr.tag;
            my $conty = delete attr.content if exists attr.content;
            $conty = "" if!defined $conty;
            delete attr.contents;
            
            $attr = join " ", map {
                $_.'="'.$attr->{$_}.'"' } sort keys %$attr;
            "<$tag $attr>$conty$content</$tag>";
        };
        
        my @content = grep { _.O =~ /^u[xy]$/ } @{u.Li.o};
        
        
        @content = sort { (a.conor || a.B.conor) <=> (b.conor || b.B.conor) } @content;
        
        at.contents = [@content];
                
        my $content_max = 2000;
        my $content =
            (defined u.content ? u.content : "")
            .join "\n", U->contor(@content);
        
        if (length($content) > $content_max) {
            $content = "";
            @content = ();
            # via travel add: #$uxid > #$id # in case of mid-y splits...
            my $id = u.at.id;
            my $uxid = G.last_ux.at.id if G.last_ux;
            my $sel = "#$id";
            $sel = "ux#$uxid > $sel" if $uxid && $uxid ne $id;
            push @{G.contents_awaiting||=[]}, {
                sel => $sel,
                u => $u,
            };
        }
            
        #die wdump(3,[u.at, $content]) if u.K eq "ux";
        $content = "\n".ind("  ", $content)."\n" if @content;
        
        u.html = $tag->($content);
 
  styles:
    te: |
      q'border-bottom:1px solid black',
      qw' padding:0.4em margin-left:2em
            width:100% float:left position:relative'
    yw: |
        q' margin-left:0.5em '
    yo: |
        q' border:2px solid #fca;'
    20pt: |
      'font-size:20pt;'
    yi: |
        q' border:2px solid #ba8; margin-left:0.5em '
        
    yt: |
        q' padding:0.5em; background:rgba(200,80,130,0.5);'
    
    shlink: |
        q" -webkit-transform:rotate(45deg) scale(1,0.5); ";
        
    rel: |
      qw'position:relative'
    abs: |
      qw'position:absolute'
    topleft: |
      qw'position:absolute top:-5px left:-5px'
    white: |
      qw'color:white'
    little: |
      qw'font-size:60%'
    fulw: |
      qw {height:100% float:left position:absolute},

