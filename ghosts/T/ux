name: Styluxyio
dials:
  max_depth: 7
  form: 42
chains:

hooks:
  ways:
    ux:
      K: ux
      O: ux
      print: |
          pint(S.Lu.i)
          
  findO: |    
    my ($k, $o) = %$ar;
    grep { _.O eq $k } @$o
  event: |
    my $ux = L.i;
    ux.O eq "ux" || Error "uxL.i sposed to be ux", $L;
    $O->{O}->w(somewhere => {thing => ux.Lu});
    
  ux: |
    Say @$Ls." lines -> ux from $Ls->[0]->{name}";
    my @uxs;
    for my $Lu (@{$Ls}) { # install ux outways to Lu
        my ($ux) = w findO(ux => Lu.o);
        if (!$ux) {
            $ux = $G->nw(Lu=>$Lu)->from($G->findway('ways/ux'));
            push @{Lu.o}, $ux;
        }
        push @uxs, $ux;
    }
    
    my @uLs;
    for my $ux (@uxs) {
        push @uLs, w T_uxline[$ux];
    }
    my @tops;
    for my $uL (@uLs) {    # join uL lines together like the origin
        my $ux = uL.i;
        my $Lu = ux.Lu;
        # find parent ux via origin W (Lu)
        my $pLu = Lu.i.Lo; # up and over
        my ($pux) = w findO(ux => pLu.o) if $pLu;
        if (!$pux) {
            push @tops, $uL;
        }
        else {
            $pL = w T_uxline(ux => $pux);
            push @{pL.o}, $ux;
            ux.Lo = $pL;
        }
    }
    
    my $X = {
        spill => [],
        andthen => [],
    };
    my @eh;
    for my $M (qw{M}) {
        for my $uL (@tops) {
            w antop[$X, $uL, $M];
            push @eh, uL.i.html;
        }
    }
    
    my $W = $G->W;
    my ($id) = W.id =~ /-(\w+)$/;
    
    return join "\n", '<wormhole style="font-size:70%;position:relative;"id="'.$id.'">', @eh, '</wormhole>';
    
  antop: |
    #$G->w("an/$M", $ar);
    my $ux = uL.i;
    my $L = ux.Lu;
    my @uxs = w findO(ux => uL.o);
    for my $cux (@uxs) {
        my $uL = cux.Li || die;
        w antop[$X, $uL, $M];
    }
    my $sty = {
        te => "border:5px solid black;padding:1em;margin-left:2em;",
        fullh => 'width:100%; float:left; position:relative; overflow:hidden;',
        fulw => 'height:100%; width:33.3%; float:left; position:absolute;',
        wo => 'font-size:7; padding-left:2em; border: 2px solid pink;',
    };
    
    my @html = '<te id="'.uL.uuid.'" style="'.$sty->{te}.$sty->{fullh}.'">';
    push @html, '  <t style="width:100%;">'.pint(L.i)." = ".gpty(L.t).'</t>';
    
    my $ohtml = join "\n", grep { defined } map { _.html } @uxs;
    push @html, ind '    ', 
        '<wo style="'.$sty->{wo}.'">'."\n"
        .$ohtml."\n"
        .'</wo>' if $ohtml;
        
    push @html, "</te>";
    ux.html = join "\n", @html;
    
    
  T_uxline: |
    my ($L) = grep { _.i eq $ux } @{$G->W->{script}};
    return $L if $L;
    $G->T("uxL: ".pint($ux), undef, $ux);
    $L = ux.Li || die;
    
  x_to_h: |
    my $x = L.i.B.x;
    my $h = L.i.B.h = {};
    my $attr = {};
    my @style = ();
    my @class = ();
    attr.id = x.id          if exists x.id;
    attr.title = x.title if exists x.title;
    
        for my $a (qw{height width left top}) {
            if (exists $x->{$a}) {
                my $v = $x->{$a};
                $v = ($v * 100).'%' if $v !~ /em$/;
                push @style, "$a:$v"; 
            }
        }
        if (exists x.height && x.height =~ /em$/ && x.width == 1) {
            push @style, "float:left";
        }
        if (exists x.left || exists x.top) {
            push @style, "position:absolute";
        }
        if (x.class) {
            push @class, @{x.class};
        }
        if (x.style) {
            for my $styley (@{x.style}) {
                my $styles = [ flatline($styley) ];
                push @style, @$styles;
            }
        }
         
        my $tag = x.tag || "uh";
        if (!defined L.i.B.Lo) {
            $tag = "wormhole";
            my $W = $G->W;
            attr.title = G.name;
            (attr.id) = W.id =~ /-(\w+)$/;
        }
        
        attr.style = join "; ", @style if @style;
        attr.class = join " ", @class if @class;
        
        h.attr = $attr;
        h.tag = $tag;
        h.children = L.o;
        h.content = sub {
            return x.content if x.content;
            return join "", grep {defined}
                map { _.B.h.ash->() }
                grep { _.B && _.B.h } @{h.children}
        };
        h.ash = sub {
            "<h.tag ".join(" ", map {"$_=\"h.attr->{$_}\""} sort keys %h.attr).">"
            ."\n".ind("  ", h.content->())."\n"."</h.tag>\n"
        };
    
    
    
    
    # etc
    
        
    
  next_phase: |
      for my $L (@{G.Torail}) {
            w style_to_x[$L];
      }
      for my $L (@{G.Torail}) {
            w x_to_h[$L];
      }
      return L.i.B.h.ash->();
      
  style_to_x: |
    my $x = L.i.B.x = {};
    my $yL = L.t;
    my $got = {
    l => [ grep { !_.B.Li } @{yL.o} ],
    t => [ grep { _.B.Li } @{yL.o} ],
    i => [ yL.i ],
    };
    my $hg = sub {
        my ($what, $order) = @_;
        my @R;
        for my $yg (split '', $order) {
            for my $w (@{$got->{$yg}}) {
                if (w.B && w.B.s) {
                    if (exists w.B.s->{$what}) {
                        push @R, w.B.s->{$what}
                    }
                    if (exists w.B.s->{$what."_D"}) {
                        push @R, $G->w("B/s/".$what."_D", {}, $w)
                    }
                }
            }
        }
        @R
    };
    
    
    my @content = $hg->(content => 'li');
    @content > 1             && die "cont > 1";
    @content && @{got.t}     && die "cont & t";
    ($x->{content}) = @content if @content;
    
    $x->{class} = [ flatline($hg->(class => 'il')) ];
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    ($x->{tag}) = grep {defined} flatline($hg->(tag => 'li')), "te";
    $x->{style} = [ flatline($hg->(style => 'il')) ];
    $x->{id} = L.uuid;
    $x->{title} = "yL.n yL.depth ".pint(yL.t.i) if ref yL.t eq 'HASH';
    
    my @div = $hg->(div => 'li');
    @div > 1                 && die "div > 1";
    if (@div) {
        my ($v) = @div;
        my $vi = {};
        ($vi->{width},$vi->{height}) = split "x", $v; $v =~/^x/&&die"?";
        while (my ($iv, $parts) = each %$vi) {
            if (!$parts) {
                next;
            }
            my $inc;
            if ($parts =~ /em$/) {
                $inc = $parts;
                $parts = 1;
            }
            $parts = 0+@{ L.o }    if $parts eq "...";
            $parts = 1    if $parts == 0;
            $inc ||= sprintf("%.3f", 1 / $parts);
            my $side = $iv eq "width" ? "left" : "top";
            my $i = 0;
            
            for my $w (@{ L.o }) {
                die "lower w.B.x not yet" unless w.B.x;
                my $ox = w.B.x;
                if ($parts == 1) {
                    $ox->{$iv} = $inc;
                }
                else {
                    $ox->{$side} = $i;
                    $i += $inc;
                    $ox->{$iv} = $inc;
                }
            }
        }
    }
    
    

