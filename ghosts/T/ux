name: Styluxyio
include: T/braid
dials:
  max_depth: 7
  form: 42
chains:
hooks:
  ways:
    ux:
      K: ux
      O: ux
      styles: te
      tag: ux
      print: |
        "(".pint(S.Lu.i)." \t".gpty(S.Lu.t).")"
    uy:
      K: uy
      O: uy
      stoop_arr: |
        $S
      print: |
        "(".join(",  ", map { "$_ = ".pty(S.B->{$_}) } keys %{S.B}).")"
          
  event: |
    my $u = L.i;
    my $ux = uxL.i;
    my $E = {%$ar};
    E.L = ux.Lu;
    E.uyL = $L if $L ne $uxL;

    ux.Lu.G->w(event => $E);
  uyBs: # TODO ways build up from places like this
   - K: i
     uys: w
     conor: -0.5
   - K: t
     content_D: |
       my $con = gpty($t);
       $con = ($con=~/^(.{30})/s)[0]."..." if length($con) > 50;
       $con;
   - K: o
     uys: w
     nah: 0
   - K: w
     nah: 1
     content_D: |
       #U->ups($S, 'shlink') if
       #    (grep { $_ eq $w } G.L.o) && findO(ux => w.Li.o);
       # ^ w on a line. octave lower display & glue?
       pint($w);
   - K: e
     styles: topleft white little
     nah: 1
     content_D: |
       $e
  
   
  any_init: |
    G.U.stoops = [ sub {#c
        my $u = G.L.i;
        my $uL = G.L;
        my $Lu = u.Lu || die "no Lu" if u.O eq "ux";
         # B into style
        # spawn guts
        # ways can compress/Loose (and look UP) via K
        
        my $old = { map { _.B.K => $_ } findO(uy => uL.o) };
        G.U.h.ul.creating_that_u = sub {
            my $uy = shift;
            $old->{uy.B.K} &&
            0->deaccum($uL, "o", $old->{uy.B.K});
        };
        
        my $uyBs = $G->findway('uyBs');
        my $uyBsK = sub {
            my $uyK = shift;
            (grep { _.K eq $uyK } @$uyBs)[0]
        };
        my $pafly = sub {
            my $from = shift;
            push @fluyB, { %$from, @_ }
        };
        
        for my $uyB (@$uyBs) { # ux spawns uys
            next if u.O ne "ux";
            next if uyB.nah;
            $uyB = { %$uyB };
            my $n = uyB.n ||= uyB.K;
            my $y = $Lu->{$n};
            if ($n eq "o" && ref $y eq "ARRAY") {
                my $i = 0;
                for my $o (@$y) {
                    next if o.O eq "ux";
                    $pafly->(
                        $uyB,
                        $n => $o,
                        K => uyB.K."[".$i++,
                    );
                }
            }
            else {
                $pafly->(
                    $uyB,
                    $n => $y,
                );
                if ($n eq "t") {
                    
                }
            }
        }
        if (my $uys = u.B.uys) { 
            for my $uyK (split ' ', $uys) {
                my $uyB = $uyBsK->($uyK);
                my $n = uyB.n ||= uyB.K;
                $pafly->(
                    $uyB,
                    $n => u.B->{ u.B.n },
                )
            }
        }
        if (u.O eq "uy" && u.B.K ne "e") {
            #die wdump(2, $u);
            #$pafly->($uyBsK->("e"), n => 'e', e => u.B.n);
        }
        for my $uyB (@fluyB) {
            if (1) {
                U->uys($uyB);
            }
            else {
                T.L = G.L;
                T.o = G.L.o;
                my $u = 0->TafuBl(uy => $uyB);
                #die "liney" if u.Lo ne G.L;
                die "miso" if !grep{$_ eq $u}@{G.L.o};
                die wdump($u);
            }
        }
        delete G.U.h.ul.creating_that_u;
    } ];
    G.U.jgd = sub { join " ", grep { defined } @_ };
    G.U.toos = [ sub { #c
        my $u = G.L.i;
        my $uL = G.L;
        die "empty Lu on ".wdump($u)  if u.Lu && !%{u.Lu};
        die "uy Lu".wdump(2, $u)      if u.K eq 'uy' && u.Lu;
        die "uy Lu".wdump(2, $u)      if u.K eq 'ux' && !u.Lu;
        die "ux has no ways out"      if u.K eq "ux" && !@{uL.o};
        
        my $at;
        
        at.id = uL.uuid;
        at.styles = U->jgd(u.styles);
        if (u.K eq "uy") {
            my $n = u.B.n;
            at.tag = "y$n";
            at.content = $G->w('B/content_D', {}, $u);
            
            at.styles = U->jgd(at.styles, "y$n", u.B.styles);
        }
        at.tag ||= U->jgd(u.B.tag, u.tag);
        die "no tag" .wdump($u) if !at.tag;
        
        u.E_at = u.at;
        u.at = $at;
        my $tag = sub {
            my $content = shift || '';
            my $attr = { %{u.at} };
            attr.style = $G->styles(delete attr.styles); # or so
            attr.style .= "position:relative;"
            unless attr.style =~ /position[^\w]+absolute/;
            my $tag = delete attr.tag;
            my $conty = delete attr.content if exists attr.content;
            $conty = "" if!defined $conty;
            delete attr.contents;
            
            $attr = join " ", map {
                $_.'="'.$attr->{$_}.'"' } sort keys %$attr;
            "<$tag $attr>$conty$content</$tag>";
        };
        
        my @content = 
        sort { (a.conor || a.B.conor) <=> (b.conor || b.B.conor) }
        (findO(uy => uL.o), findO(ux => uL.o));
        
        at.contents = [@content];
                
        my $content_max = 2000;
        my $content =
            (defined u.content ? u.content : "")
            .join "\n", U->contor(@content);
        
        if (length($content) > $content_max) {
            $content = "";
            @content = ();
            # via travel add: #$uxid > #$id # in case of mid-y splits...
            my $id = u.at.id;
            my $uxid = G.last_ux.at.id if G.last_ux;
            my $sel = "#$id";
            $sel = "ux#$uxid > $sel" if $uxid && $uxid ne $id;
            push @{G.contents_awaiting||=[]}, {
                sel => $sel,
                u => $u,
            };
        }
            
        #die wdump(3,[u.at, $content]) if u.K eq "ux";
        $content = "\n".ind("  ", $content)."\n" if @content;
        
        u.html = $tag->($content);
 
    } ];
    G.U.contor = sub {
        grep { defined }
        map { _.html || _.content } @_
    }; 
    G.U.send_contents_awaiting = sub {#c
        my $awa = G.contents_awaiting ||= [];
        G.fuckery = 0;
        for my $ait (reverse @$awa) {
            my $u = ait.u;
            my $sel = ait.sel;
            my @htmls = U->contor(@{u.at.contents});
            #die wdump([$u,\@htmls]);
            for my $html (@htmls) {
                #next if G.fuckery++ > 7;
                $H->JS("\$('$sel').append('$html');");
            }
        }
        G.contents_awaiting = [];
    };
  ux: |
    Say @$Ls." lines -> ux from $Ls->[0]->{name}";
    my @uxs;
    for my $Lu (@{$Ls}) { #say "install ux outways to Lu";
        push @uxs, U->ul(
            u => U->mku(ux => {Lu=>$Lu}),
            p => $Lu,
        );
    }
    # ux could be all new
    # could be (new)ux.uL.i.Lo.ux(old): wedge in
    # 
    my @tux;
    for my $ux (@uxs) {   #say "join uL lines together like the origin (ux.Lu.i.K - ux.Lu.t)";
        G.L = ux.Li;
        my $Lu = ux.Lu || die;
        my $pLu = Lu.i.Lo if exists Lu.i.Lo; # up and over
        my ($pux) = findO(ux => pLu.o) if $pLu;
        unless ($pux) {
            push @tux, $ux;
        }
        else {
            #say "joining ".pint($ux).' to '.pint($pux);
            U->ul(
                u => $ux,
                p => pux.Li,
            );
            #say "put ".pint($ux)." onto ".pint($pux)."\n\n";
            die unless grep { $_ eq $ux } @{pux.Li.o};
        }
    }
    
    
        for my $ux (@tux) {
            G.L = ux.Li || die "no ux Li";
            U->antop();
        }
        
    my @eh;
    for my $ux (@tux) {
        push @eh, ux.html;
    }
    #die "hue" if @tux > 1;
    
    my $W = $G->W;
    my ($id) = W.id =~ /-(\w+)$/;
    
    my $html = join "\n", '<wormhole style="font-size:70%;position:relative;"id="'.$id.'">', @eh, '</wormhole>';
    
    G.view->takeover($html);
    U->send_contents_awaiting();
    Say $html;
    Say "ux antop ".$G->F_delta()."\n\n\n";
    
  styles:
    te: |
      q'border-bottom:1px solid black',
      qw' padding:0.4em margin-left:2em
            width:100% float:left position:relative'
    yw: |
        q' margin-left:0.5em '
    yo: |
        q' border:2px solid #fca;'
        
    yi: |
        q' border:2px solid #ba8; margin-left:0.5em '
        
    yt: |
        q' padding:0.5em; background:rgba(200,80,130,0.5);'
    
    shlink: |
        q" -webkit-transform:rotate(45deg) scale(1,0.5); ";
        
    rel: |
      qw'position:relative'
    abs: |
      qw'position:absolute'
    topleft: |
      qw'position:absolute top:-5px left:-5px'
    white: |
      qw'color:white'
    little: |
      qw'font-size:60%'
    fulw: |
      qw {height:100% float:left position:absolute},

