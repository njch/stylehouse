name: Trabambeist
hooks:
  arr: |
    my $cs = [];
    my $doing = sub {
      my $w = shift;
      my @rc;
      for my $c (@$cs) {
            my $rc = $G->w($w, {c=>$c,cs=>$cs});
          push @rc, $rc if $rc;
      }
      @$cs = @rc;
    };
    
    my @chains = w exact_chains;
    for my $c (@chains) {
        if (w $c arr_if) {
            push @$cs, $c->spawn;
        }
    }
    # all these motions we want to grab finer pictures of eventually
    
    $doing->("c_follow_as");    
    $doing->("c_eat");
    $doing->("c_grav_add");
    $doing->("figureout");
    w aft_arr;
  exact_chains: |
    my @chains = $G->chains;
    
    @chains = grep {
        !defined $_->{iK} || $G->{i}->{K} =~ /$_->{iK}/
    } @chains;
    
    @chains = grep {
        !defined $_->{exact_depth} || $_->{exact_depth} == $G->{depth}
    } @chains;
    
    my @dom = grep {
        defined $_->{dom_depth} && $_->{dom_depth} == $G->{depth}
    } @chains;
    @chains = @dom if @dom;
    
    @chains
  c_eat: |
    return $c unless $c->{eat};
    for my $oc (@$cs) {
        if ($oc->{K} eq $c->{eat}) {
            $oc->{eaten_by} = $c
        }
    }
  c_grav_add: |
    return $c unless $c->{grav_add};    
    for my $oc (@$cs) {
        $oc->{gravity} += $c->{grav_add} 
    }
  revisit: |
    my $W = $G->RW;
    my $und = $G->crank(max_depth => $line->{depth} + $ar->{push_depth});
    
    $G->T($line->{t}, undef, $line->{i}, $line->{depth});
    
    $und->();
    my $N = $G->W->CS;
    my @fore;
    push @fore, shift @$W until !@$W || $W->[0]->{uuid} eq $line->{uuid};
    my $O = shift @$W;
    @$W = (@fore, @$N, @$W);
    $G->W->{script} = $W;
    return $N;
  figureout: |
    my $gravity = $c->{gravity} || $c->{as_from}->{gravity} || 0;
    my $max = $G->{max_depth} + $gravity;
    
    return if $G->{depth} >= $max;
    
    if (my $fe = $c->{foreach_travel}) {
        w figure_foreach_travel;
    }
    elsif (w figure_some_chain(c=>$c)) {
        # sweet
    }
    else {
        die "canot figure out ".ki($c);
    }
    
    w aft_figureout;
  figure_foreach_travel: |
        my $fe = $c->{foreach_travel};
        my @list;
        if ($fe->{each}) {
            @list = $G->doo($fe->{each}, $ar);
        }
        elsif ($fe->{find_files}) {
            my $found = sub {
                 my $na = $File::Find::name;
                Hostinfo::fixutf8($na);
                next unless -f $na;
                push @list, $na;
            };
            my $dir = $G->doo($fe->{find_files}, $ar);
            File::Find::find($found, $dir);
        }
            
        if (my $ei = $c->{eaten_by}->{each_ignore}) {
            @list = grep { my $on = $_; !grep { $on eq $_ } split ' ', $ei } @list;
        }
        if (my $eo = $c->{eaten_by}->{each_order}) {
             my %k = map { $_ => 1 } @list;
             my @k;
             if ($k{id} && $k{huid} && $thing->{id} =~ /$thing->{huid}$/) {
                 delete $k{huid};
             }
             for (split ' ', $eo) {
                 push @k, $_ if delete $k{$_}
             }
             for (@list) {
                 push @k, $_ if $k{$_}
             }
             @list = @k;
        }
       
        my $i = 0;
        for my $each (@list) {
            # eddies of lingo
            my $next_thing = $fe->{next_thing} ? $G->doo(
                $fe->{next_thing}, {%$ar, each => $each}
            ) : $each;
            my $oc = $c->spawn; # TODO spawn a fresh chain here
            # so W Sline->{i} is nice to look at
            $oc->{travel_this} = $next_thing;
            $oc->{i} = $i++;
            $oc->{each} = $each;
            
            push @{$G->{o}}, $oc;
        }
  c_follow_as: |
    return $c unless $c->{as};
    
    my @really = $G->grep_chains("K" => $c->{as});
    @really == 1 || die "cannot find ref=$c->{as}".ddump($c).ddump([@really]);
    
    my $asc = shift @really;
    my $nc = $asc->spawn;
    $nc->{as_from} = $c;
    return $nc

