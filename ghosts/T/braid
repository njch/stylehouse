name: spiral braid
hooks:
  recoded_init: |
    H.G->w('re/exec');
  any_init: |
  
    G.U ||= {};

    
    
    
  DooB: |
    my $Bs = 0->sway({CsK => 'Bs', K => $K}) || die "noK $K";
    delete ar.K;
    Bs.ar = $ar if %$ar;
    for my $d (qw'D Y') {
        my $E = 0->EgyB($Bs->{$d});
        $Bs->{$d.'o'} = [ map {
            # 0.6666* => Y => 6/9
            { $_ => { $d => $E->{$_} } }
        } sort keys %$E ];
    }
    
    0->visTp({
        Bs => $Bs,
        r => { noo => 1 },
    }, "Fun");
    Bs.top = $T;
    
    
    Say "BRRRRRRRRRAID! $K $K $K";
    
    Bs.Doi = 0;
    my $s;
    while (defined( my $s = Bs.Do->[ Bs.Doi ] )) {
        (Bs.Dangle, my $B_K) = %$s;
        (my $_B, Bs.DK) = %$B_K;
        $_B eq "D" || die "noB";
        w anTop[$Bs];
        Bs.Doi++;
    }
    
    w $Bs done;
  anTop: |
    my $ds = 0->Tind();
    saybl "$ds anTop i->".ar.i.K if ar.i;
    saybl "$ds anTop Bs->".ar.Bs.Bangle if ar.Bs;
    0->visTp($ar, "Fun") if ar.i;
    
    my $Bs = T.Bs;
    my ($for, $aft) = ([], []);
    my @Ds = ($for, {'D' => Bs.DK}, $aft);
    for my $s (@{ Bs.Yo||[] }) {
        (my $Yangle, my $Y_K) = %$s;
        
        my $to = $Yangle > Bs.Dangle ? $aft : $for;
        
        push @$to, $Y_K; # {Y => $YK}
    }
    
    my $s = "  >";
    for my $D (flatline(@Ds)) {
        (my $d, my $K) = %$D;
        
        my $_s = $s;
        $_s = " - " if $d eq "Y";
        $_s = " - $ds  $_s  Bs.K-$d-$K T.i.K";
        #sayyl($_s) if $d eq "Y";
        saybl($_s) if $d eq "D";
        $s = "<  " if $d eq "Y";
        
        my $D = $Bs->{$d}->{$K};
        $G->doo($D, {
            %{Bs.ar||{}}, ar=>Bs.ar,
            d=>$d,K=>$K,TiK=>T.i.K,
        });
    }

