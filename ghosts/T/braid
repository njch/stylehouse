name: spiral braid
hooks:
  recoded_init: |
    H.G->w('re/exec');
  any_init: |
  
    G.U ||= {};

    
    
    
  DooB: |
    my $B = 0->sway({CsK => 'B', K => $K}) || die "noK $K";
    delete ar.K;
    B.ar = $ar if %$ar;
    for my $d (qw'B Y') {
        my $E = 0->EgyB($B->{$d});
        
        $B->{$d.'o'} = [ map {
            { $_ => { $d => $E->{$_} } }
        } sort keys %$E ];
    }
    
    0->visTp({
        B => $B,
        r => { noo => 1 },
    }, "Fun");
    B.top = $T;
    
    sw($B);
    T.B.Boi = 0;
    my $s;
    while (defined( my $s = T.B.Bo->[ T.B.Boi ] )) {
        (T.B.Bangle, $s) = %$s;
        ($s, T.B.BK) = %$s;
        w anTop[$B];
        T.B.Boi++;
    }
  braid: |
    my $Ds = ar.Ds || T.Ds || die "No Ds to braid";
    unless (ref $Ds eq "HASH") {
        $Ds = $G->findway($Ds);
        die "malformed Ds ".wdump($Ds)
            unless ref $Ds eq "HASH";
    }
    $Ds = {%$Ds};
    
    my $Y = delete $Ds->{0.5} if $Ds->{0.5};
    
    my @Ds = map {
        { K => $_, D => $Ds->{$_} }
    } sort keys %$Ds;
    
    my $p = {};
        p._trail._no_circles = 1;
        p._braid = {};
    0->visTp($p, "Fun");
    
    my $Tbr = T._braid;
    Tbr.Ds = \@Ds;
    Tbr.Di = 0;
    T.Y = $Y; 
    
    while (defined( my $Dw = Tbr.Ds->[Tbr.Di] )) {
        say "Doing Di=Tbr.Di  at Dw.K";
        w anTop[$Dw];
        Tbr.Di++;
    }
  anTop: |
    my $ds = 0->Tind();
    say "$ds anTop ".join "     ",
        (ar.B && "BK -> ar.B.BK"),
        (ar.i && ref ar.i eq "Way" && "i -> ar.i.K");
    0->visTp($ar, "Fun") if %$ar;
    
    my $B = T.B;
    my ($for, $aft) = ([], []);
    my @Ds = ($for, {'B' => T.B.BK}, $aft);
    for my $Y (@{ T.B.Yo||[] }) {
        (my $Yangle, $Y) = %$Y;
        my $to = $Yangle > B.Bangle ? $aft : $for;
        push @$to, $Y; # {Y => $YK}
    }
    
    my $s = "  >";
    for my $D (flatline(@Ds)) {
        ($D, my $K) = %$D;
        my $w = $B->{$D}->{$K};
        
        say " - $ds  $s  $D $K T.i.K" if $D eq "B" && $G->deeby;
        $s = "<  " if $D eq "Y";
        
        $G->doo($w, {
            %{B.ar||{}}, ar=>B.ar,
            D=>$D,K=>$K,TiK=>T.i.K,
        });
    }

