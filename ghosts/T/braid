name: spiral braid
hooks:
  recoded_init: |
    H.G->w('re/exec');
  any_init: |
  
    G.U ||= {};

    
    
    
  DooB: |
    my $B = 0->sway({CsK => 'B', K => $K}) || die "noK $K";
    delete ar.K;
    B.ar = $ar if %$ar;
    for my $d (qw'B Y') {
        my $E = 0->EgyB($B->{$d});
        $B->{$d.'o'} = [ map {
            # 0.6666* => Y => 6/9
            { $_ => { $d => $E->{$_} } }
        } sort keys %$E ];
    }
    
    0->visTp({
        B => $B,
        r => { noo => 1 },
    }, "Fun");
    B.top = $T;
    
    
    Say "BRRRRRRRRRAID! $K $K $K";
    
    T.B.Boi = 0;
    my $s;
    while (defined( my $s = T.B.Bo->[ T.B.Boi ] )) {
        (T.B.Bangle, my $B_K) = %$s;
        (my $_B, T.B.BK) = %$B_K;
        $_B eq "B" || die "noB";
        w anTop[$B];
        T.B.Boi++;
    }
  anTop: |
    my $ds = 0->Tind();
    saybl "$ds   anTop ".ki($ar);
    saybl "$ds  ar.B.K B move -> ar.B.Bangle  ---  ar.B.BK"     if ar.B;
    saybl "$ds i -> ar.i.K"     if ar.i && ref ar.i eq "Way";
    saybl "$ds ==== T.i.K ";
    sayre "$ds GUNNA ".ki($ar) if %$ar;
    
    0->visTp($ar, "Fun") if ar.i; # not if B, loses...
    T.B = ar.B if ar.B;
    
    my $B = T.B;
    my ($for, $aft) = ([], []);
    my @Ds = ($for, {'B' => T.B.BK}, $aft);
    for my $s (@{ T.B.Yo||[] }) {
        (my $Yangle, my $Y_K) = %$s;
        
        my $to = $Yangle > B.Bangle ? $aft : $for;
        
        push @$to, $Y_K; # {Y => $YK}
    }
    
    my $s = "  >";
    my @cop = @Ds;
    for my $D (flatline(@Ds)) {
        (my $d, my $K) = %$D;
        
        sayyl "$ds Diding a B.K-$d-$K";
        my $D = $B->{$d}->{$K};
        saygr "$ds whichis", ind("$ds   ", $D);
        
        say " - $ds  $s  B.K-$d-$K T.i.K" if $d eq "B";
        $s = "<  " if $d eq "Y";
        sayyl "$ds Y Y Y Y YY Y Y Y YYY Y YYY " if $d eq 'Y';
        sayre "B=".ki($B);
        $G->doo($D, {
            %{B.ar||{}}, ar=>B.ar,
            d=>$d,K=>$K,TiK=>T.i.K,
        });
        sayre "$ds done B.K-$d-$K    T.i.K";
    }
    sayre "$ds< back"

