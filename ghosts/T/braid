name: spiral braid
hooks:
  recoded_init: |
    H.G->w('re/exec');
  any_init: |
  
    G.U ||= {};

    
    
    
  DooB: |
    my $B = 0->sway({CsK => 'B', K => $K}) || die "noK $K";
    delete ar.K;
    B.ar = $ar if %$ar;
    for my $d (qw'B Y') {
        my $E = 0->EgyB($B->{$d});
        $B->{$d.'o'} = [ map {
            # 0.6666* => Y => 6/9
            { $_ => { $d => $E->{$_} } }
        } sort keys %$E ];
    }
    
    0->visTp({
        B => $B,
        r => { noo => 1 },
    }, "Fun");
    B.top = $T;
    
    T.B.Boi = 0;
    my $s;
    while (defined( my $s = T.B.Bo->[ T.B.Boi ] )) {
        (T.B.Bangle, $s) = %$s;
        ($s, T.B.BK) = %$s;
        w anTop[$B];
        T.B.Boi++;
    }
  anTop: |
    my $ds = 0->Tind();
    say "$ds anTop ".join "     ",
        (ar.B && "BK -> ar.B.BK"),
        (ar.i && ref ar.i eq "Way" && "i -> ar.i.K");
    0->visTp($ar, "Fun") if %$ar;
    
    my $B = T.B;
    my ($for, $aft) = ([], []);
    my @Ds = ($for, {'B' => T.B.BK}, $aft);
    for my $Y (@{ T.B.Yo||[] }) {
        my $ye = $Y;
        (my $Yangle, $Y) = %$Y;
        my $to = $Yangle > B.Bangle ? $aft : $for;
        Say "well theeene  $Yangle > B.Bangle ";
        push @$to, $Y; # {Y => $YK}
        die "Y $Y ".wdump($ye) if ref $Y ne "HASH";
    }
    
    my $s = "  >";
    my @cop = @Ds;
    for my $D (flatline(@Ds)) {
        
        die sw([
            [@Ds], [@cop], [flatline(@Ds)]
            ]) unless ref $D eq "HASH";
        ($D, my $K) = %$D;
        my $w = $B->{$D}->{$K};
        
        say " - $ds  $s  $D $K T.i.K" if $D eq "B" && $G->deeby;
        $s = "<  " if $D eq "Y";
        
        $G->doo($w, {
            %{B.ar||{}}, ar=>B.ar,
            D=>$D,K=>$K,TiK=>T.i.K,
        });
    }

