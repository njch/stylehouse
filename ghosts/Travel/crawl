name: ghost data structure crawl
chains:
 - K: 'HASH'
   arr_if: |
     ref $thing eq 'HASH'
   foreach_travel:
     each: sort keys %$thing
     next_thing: $thing->{$each}
   print: |
        $S->{each}
 
 
 
 - K: 'HASHish'
   arr_if: |
     ref $thing && "$thing" =~ /=HASH/
   foreach_travel:
     each: |
       my %k = map { $_ => 1 } keys %$thing;
       my @k;
       if ($k{id} && $k{huid} && $thing->{id} =~ /$thing->{huid}$/) {
           push @k, "id";
           delete $k{$_} for qw'huid id';
       }
       if (ref $thing eq "Ghost") {
           if (defined $thing->{way}) {
               push @k, "way";
               delete $k{way};
           }
       }
       push @k, sort keys %k;
       return @k;
     next_thing: $thing->{$each}
   print: |
        $S->{each}
     
 - K: 'ARRAY'
   arr_if: ref $thing eq 'ARRAY'
   foreach_travel:
     each: @$thing
     next_thing: $each
   print: |
        $S->{i}
dials:
  max_depth: 1
hooks:
  arr: |
    my @actcs;
    for my $c ($G->chains) {
        if (w $c arr_if) {
            say "ACting $c->{K}";
            push @actcs, $c->spawn;
        }
    }
    my @f;
    for my $c (@actcs) {
        push @f, w c_follow_as(+ c => $c);
    }
    @actcs = @f;
    for my $c (@actcs) {
        w figureout(+ c => $c);
    }
    # all these motions we want to grab finer pictures of eventually
  crank: |
    my ($dial, $to) = %$ar;
    exists $G->{$dial} || die "no $dial";
    my $o = $G->{$dial};
    my $undo = sub { $G->{$dial} = $o };
    $G->{$dial} = $to;
    $undo;
  revisit: |
    my $W = $G->RW;
    my $und = w crank(max_depth => $line->{depth} + $ar->{push_depth});
    
    $G->T($line->{t}, undef, $line->{i}, $line->{depth});
    
    $und->();
    my $N = $G->W->CS;
    my @fore;
    push @fore, shift @$W until !@$W || $W->[0]->{uuid} eq $line->{uuid};
    my $O = shift @$W;
    @$W = (@fore, @$N, @$W);
    $G->W->{script} = $W;
    return $N;
  figureout: |
    # these borders of my code our data... the language invention streams only just upstream from each other
    
    if ($G->{depth} >= $G->{max_depth}) {
        say "depth ends: $G->{depth} (max: $G->{max_depth})" for 1..3;
        return;
    }
    
    if (my $fe = $c->{foreach_travel}) {
        my @list = $G->doo(
            $fe->{each}, $ar
        );
        my $i = 0;
        for my $each (@list) {
            # eddies of lingo
            my $next_thing = $G->doo(
                $fe->{next_thing}, {%$ar, each => $each}
            );
            my $oc = $c->spawn; # TODO spawn a fresh chain here
            # so W Sline->{i} is nice to look at
            $oc->{travel_this} = $next_thing;
            $oc->{i} = $i++;
            $oc->{each} = $each;
            
            push @{$G->{o}}, $oc;
        }
    }
    else {
        die "canot figure out".ddump($c);
    }
  c_follow_as: |
    my $as = $c->{as};
      return $c unless $as;
    
    my @really = $G->grep_chains("K" => $as);
    @really == 1 || die "cannot find ref=$c->{as}".ddump($c).ddump(@really);
    
    my $asc = shift @really;
    my $nc = $asc->spawn;
    $nc->{as_from} = $c;
    return $nc

