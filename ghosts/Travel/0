name: wormhole splatter
hooks:
  splat_wormhole: |
    say "Wormhole Splattur: $view->{divid}";
    say $wormhole->describe_size();
    
    my $lines = [];
    for my $line (@{$wormhole->{script}}) {
        $ar->{R} = [];
        $ar->{B} = {};
        $ar->{line} = $line;
        my $ghost = $line->{ghost};
        
        w $ghost line/to_row($ar);
        
        
        push @$lines, { _spawn => [ $ar->{R}, {
            tuxts_to_htmls => sub {
                say "Inner! $line->{depth}";
            },
        }]};
    }
        
    $view->newtext($lines, {
        spatialise => sub { { left => 20, space => 15, top => 50 } },
    });
  line:
    to_row: |
      for my $hh (qw[i o t e]) {
          my $v = $G->w("line/$hh", $ar);
          $v = "!B=$hh $v";
          say " - $v";
          push @$R, $v;
      }
      for (values %$B) {
          $_->{style} .=
              "font-size: 15pt; ".w random_shadow().";";
      }
    t: |
      $line->{thing};
    i: |
      my $wi = $line->{wayin};
      my $wt = w tuxt_a_waychain({ %$ar, chain => $wi });
      "!html <pre>".enc($wt)."</pre>";
    o: |
      my $wo = $line->{wayout};
      my $wt = join "\n.\n", map {
        w tuxt_a_waychain({ %$ar, chain => $_ })
      } @$wo;
      "!html <pre>o".enc($wt)."</pre>";
    
  wdump: |
    use Data::Dumper;
    $Data::Dumper::Maxdepth = 2;
    return Dumper($in);
    
  tuxt_a_waychain: |
    return "?" unless $chain;
    $chain = { %$chain };
    my $as_from = delete $chain->{as_from};
    delete $chain->{way}; # TODO random hack
    my $l;
    if ($chain->{print}) {
        $l = $G->doo($chain->{print},
            {chain => $chain});
    }
    else {
        $l = join " }{ ",
            map { "$_: $chain->{$_}" }
            sort keys %$chain;
    }
    if ($as_from) {
        my $li = w tuxt_a_waychain({ %$ar, chain => $as_from });
        $l .= ind("  sa ", $li);
    }
    return $l
    

  colorf: |
    my $fing = $in;
    my ($l,$r,$b) = @_;
    my ($color) = ($in || "0") =~ /\(0x....(...)/;
    $color ||= $fing if $in && ref \$in eq "SCALAR" && $in =~ /^(\x{3}|\x{6})$/;
    $color ||= "663300";
    $l ||= 0;
    $r ||= 0;
    $b ||= 3;
    return "text-shadow: ${l}px ${r}px ${b}px #$color;";

  random_shadow: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "text-shadow: 0px 0px 4px rgb($rgb);";
  random_colour: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "rgb($rgb);";
  random_colour_background: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "rgb($rgb);";

