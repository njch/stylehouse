name: wormhole splatter
hooks:
  splat_wormhole: |
    say "Wormhole Splattur: $view->{divid}";
    say $wormhole->describe_size();
    
    my $lines = [];
    for my $line (@{$wormhole->{script}}) {
        push @$lines, w make_line({%$ar,
            line => $line,
            R => [],
            B => {},
        });
    }
    my $t = $view->newtext($lines, {
        nospace => 1,
        class => 'menu',
        tuxtstyle => 'width: 100%;',
    });
  load_ways_post: |
    say "Reloaded!";
  make_line: |
    my $ghost = $line->{ghost};

    w $ghost line/value($ar);
    

    return { _spawn => [ $R, {
        nospace => 1,
        B => $B,
        tuxtstyle => 'position: relative; float: left; border: 1px solid #CCFF33; padding: 2px;',
        tuxts_to_htmls => sub {
            my $texty = shift;
            $ar->{tuxts} = $texty->{tuxts};
            w tuxtsB($ar);
            w $ghost line/style($ar);
        },
    }]}
  tuxtsB:
      $B->{$_->{bb}}->{s} = $_ for @$tuxts;
  
  line:
    value: |
      for my $bb (qw[d i t o m]) {
          my $b = $B->{$bb} = {line => $line, bb => $bb};
          my $v = $G->w("line/$bb/v", {%$ar, b=>$b});
          $v = "!bb=$bb $v" unless ref $v;
          push @$R, $v;
      }
      # ^ v here's the void; many R come to B
    style: |
        while (my ($bb, $b) = each %$B) {
            $G->w("line/$bb/s",{%$ar,
            b => $b, s => $b->{s}, line => $b->{line}});
        }
    m:
      v: |
        my $t = $line->{thing};
        
        my $menu = [
          Ώ => sub {
            my $v =  $line->{thing};
            say "\n  Heading to $v\n\n";
            $O->somewhere($v);
          },
        ];
        
        {
        contyt => { bb => $b->{bb} },
        _spawn => [ [], {
        event => { menu => $menu },
        class => 'menu',
        }]
        }
      s: |
        $s->{style}.="border: none;"
    t:
      v: |
        my $t = $line->{thing};
        ref $t ? "$t" : $t;
      s: |
        $s->{style}.="color: #FF6600;" unless ref $line->{thing};
        $s->{style}.="color: blue; font-style: underlined;" if ref $line->{thing};
    d:
      v: |
        $line->{depth}
      s: |
        $s->{style}.="color: blue;";
        $s->{style}.="width: ".($line->{depth} * 2 + 0.5)."em;";
    i:
      v: |
        $b->{c} = $line->{wayin};
        w desc/chain({%$ar, 
              c => ($b->{c} = $line->{wayin})
          })
      s: |
        for ($b->{c}->{name}) {
            $s->{style}.="width: 7em;" if /HASH crawl/;
            $s->{style}.="width: 4em;" if /ARRAY crawl/;
        }
    o:
      v: |
        my $wt = w desc/chain({%$ar, c => $b->{c}});
        w desc/chain({%$ar, 
              c => ($b->{c} = $line->{wayout})
          })
    
  desc:
    chain: |
      return "?" unless $c;
      
      if (ref $c eq "ARRAY") {
          my @cl;
          
          for my $cc (@$c) {
              push @cl,
            scalar w desc/chain({%$ar, c => $_})
          }
          return join(", ", @cl) || ".";
      }
      my $l =
          $c->{print} ?
          $G->doo($c->{print},
             {c => $c})
        :
          join ", ",
              map { "$_: $c->{$_}" }
              sort keys %$c;
      
     
      if (0 && $c->{as_from}) {
          $l .= "<".w desc/chain({%$ar, 
              c => $c->{as_from},
          });
      }
      return $l
    
  wdump: |
    use Data::Dumper;
    $Data::Dumper::Maxdepth = 2;
    return Dumper($in);

  colorf: |
    my $fing = $in;
    my ($l,$r,$b) = @_;
    my ($color) = ($in || "0") =~ /\(0x....(...)/;
    $color ||= $fing if $in && ref \$in eq "SCALAR" && $in =~ /^(\x{3}|\x{6})$/;
    $color ||= "663300";
    $l ||= 0;
    $r ||= 0;
    $b ||= 3;
    return "text-shadow: ${l}px ${r}px ${b}px #$color;";

  random_shadow: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "text-shadow: 0px 0px 4px rgb($rgb);";
  random_colour: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "rgb($rgb);";
  random_colour_background: |
    my ($rgb) = join", ", map int rand 255, 1 .. 3;
    return "rgb($rgb);";

