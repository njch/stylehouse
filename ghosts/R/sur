
Ds:
  - K: key #c
    D: |
        my $k = shift;
        
        if (R.keysuc) {
            if ($k eq "\r") {
                $R->keysucd;
            }
            else {
                push @{R.keysuc}, $k; 
            }
        }
        else {
            $R->popJtrav        if $k eq '-'; # look R.A.upwards...
            $R->intJtrav($k)    if $k =~ /[0-9]/;
            R.keysuc = []     if $k eq 'Ã€'; # tilde key

        }
        say "Key sucked! $k";
  - K: keysucd #c
    D: |
      my $s = join"",@{delete R.keysuc};
      my ($w) = $s =~ /^(.+)$/;
      say "KEYS SUCKED: $w";
      return $R->intJtrav($1) if $w =~ /^(\d+)$/;
      die "sucked in whatnow? '$s'";
      
  
  - K: uni #c
    D: |
      my $J = R.J || die;
      my $i = J.from || die;
      my $t = J.trav || "";
      #  from => $H,
      #  trav => "{G{GGs",
      while ($t =~ m/(\W)(\w+)/sg) {
          say "Snapped $i       $1 $2";
          last if $1 eq " ";
          $i = $i->{$2} if $1 eq "{";
          $i = $i->[$2] if $1 eq "[" && (ref $i eq 'ARRAY' || die "NOT!");
      }
      if ($t =~ m/^.+? (.+)$/) {
          say "Had some more: $1";
      }
      $i
      
  - K: popJtrav #c
    D: |
      R.J.trav =~ s/\W\w+$//;
  - K: intJtrav #c
    D: |
      my $k = shift;
      return $R->popJtrav if $k == 0;
      my $i = $k - 1;
      die "no $i" unless exists R.J.at->[$i];
      my $r = R.J.at->[$i];
      my ($hop) = $r->[0] =~ /^(\W\w+)/;
      R.J.trav .= $hop;
  - K: upi #c
    D: |
      my $u = shift;
      my $de = G::gp($u);
      $de =~ s/^(.{42})(.*)$/"$1 ..".length($2)/se if length($de) > 48;
      $de
  - K: S #c style splat
    D: |
      my $a = shift;
      a.e ||= R.S.e || die;
      a.i ||= $R->uni;
      a.tr.rowlimit = 9*3;
      
      
      my $d = $R->du($a);
      
      my @or = sort keys %$d;
      @or = map {[ $_, $d->{$_} ]} @or;
      $_->[2] = $R->upi($_->[1]) for @or;
      R.J.at = \@or;
      
      my $i = 1;
      my @rows = map {
          join "  ",
          $R->f(blue_fs60 => $i++),
          $R->f(black => $_->[0]),
          $R->f(white_fs120 => $_->[2]),
      } @or;
      
      my $title = "= ".$R->f(white_fs150 => G::gp(a.i));
      my $Jpi = "J ".$R->f(white => G::gp(R.J.from))
          ."  ".$R->f(black => R.J.trav);
      
      join "\n", $Jpi, $title, @rows;

