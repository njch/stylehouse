






name: kasplat

C:
  - K: 'Key'
    Gw: 1
    
hooks:
  Key:
    flows_D: |
      B.key ||= e.k;
      B.key ||= "?â²®?";
      B.key = lc(B.key) if !e.S;
      S.hitime = hitime();
      
      my $k = S.B.key;
      #L ^ here's _, 

      say join($k, (" ")x28) for 1..4;
       

      # could use Redis to do the news pub sub
      # nah thats for higher level stuff, a keystroke is low level energy
      # that must be built up to something more somewhere to ...
      0->sing(
          "keytrig $k" => sub {
              w $S keydosubs;
              $G->mess(Key => $S);
          },
          begin => 0.00000000001,
          block => 0.2,
      );
      
    print: |
      return "??? ?" unless ar.key;
      my $and = "";
      $and .= "$_+" for grep { $e->{$_} } qw{S C A M};
      $and. ar.key
      
    keydosubs: |
      my $full = w $S print;
      sayyl "Doing $full ... or $key .... ".@{G.subs};
      for my $g (@{ G.subs }) {
          my $kh = $g->findway("keys");
          my $pa = "keys/".($kh->{$full} ? $full : $key);
          $G->timer(0, sub { $g->w($pa, {Key => $S}) });
      }
  Arr: |
    my $a = {e=>ar.e};
    my $u = 0->TB(Key => $a);

  event: |
    #w throwlog(Event => $e);
    if (eval { $ar->{e}->[1]->{C} }) {
        my $id = $ar->{e}->[1]->{id};
        $H->JS("\$('#$id').empty();");
    }
    if (eval { $ar->{e}->[1]->{S} }) {
        my $id = $ar->{e}->[1]->{id};
        $H->JS("\$('#mess').toggleClass('inface');");
    }
    
  fresh_init: |
    $H->JS("keyon();");
    G.subs = [];    
  any_init: |
    $H->JS("handelay = 5;");

