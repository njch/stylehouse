
name: the sky
hooks:
  fresh_init: |
    # w< ...etc?
    $G->{cg} = sub {
        $G->{gcol} ||= $H->{G}->Gf("colour") || die;
        $G->Tw($G->{gcol}, shift, {name => "#sky", @_});
    };
    $G->{cg}->("arr", set_css_background => "#sky");
    
    w colours;
    w ambientness;
  flood_init: |
      my $self = $O->{O};
      my $sky = View->new($self->intro, $self, "sky",
          "height:$O->{horizon}; background: #00248F; width: 100%; overflow: scroll; position: absolute; top: 0px; left: 0px; z-index:3;"
      );
      # TODO css pointer-events:none to pass clicks through to ground
      # and rgba on sky colour
      # blur mask layer? punch holes into codon grids
      # ground top set to horizon for now...
      $sky->{on_event} = sub {
          G sky ->w('touch', {e => [@_]});
      };
      $self->{sky} = $sky;
  recoded_init: |
      w doof;
      $G->timer(0.1, sub {
          Say "Flasbss111";
          $L->w(  somewhere => {thing => $G->stackway} ) 
      }, "skyrecode;stack"); 
  doof: |
    $ar->{t} ||= 100;
    $ar->{c} ||= '333';
    w colourchange;
    waylay touch(t=>500);
  ambientness: |
    my $c = w colourchange(t=>15000);
    throwlog( Ambientness => $c );
    waylay 19 ambientness;

  colourchange: |
    $ar->{t} ||= 5000;
    $G->{cg}->("arr", t => $ar->{t}, change => 1);
  getundercontrol: |
    $H->JS("\$('#mess').toggleClass('widdle').animate({'max-width': '26%'});");
  touch: |
    if (eval { $ar->{e}->[1]->{C} }) {
        w getundercontrol;
    }
    $@ = "";
    $ar->{t} ||= 300;
    Info "sky touch" => w colourchange;

