
name: the sky
hooks:
  fresh_init: |
    # w< ...etc?
    $G->{cg} = sub {
        $G->{gcol} ||= $H->{G}->Gf("colour") || die;
        $G->Tw($G->{gcol}, shift, {name => "#sky", @_});
    };
    $G->{cg}->("arr", set_css_background => "#sky");
    
    w colours;
    w ambientness;
  recoded_init: |
      w doof;
      $G->timer(0.1, sub {
          Say "Flasbss111";
          $L->w(  somewhere => {thing => $G->stackway} ) 
      }, "skyrecode;stack");
  doof: |
    w colourchange(t=>100, c => '333');
    $G->timer(0.2, sub {
        w touch(t=>500);
    });
  ambientness: |
    w colourchange(t=>15000);
    $G->timer(19, sub { w ambientness }, "ambiento");
  colours: |
    $G->{colours} = [ shuffle
    '77a9a0','6699cF','3366cF',
    '6699cc','005F6B',
    '86999F','4C3380',
    '336699','8F00B2',
    '336aa9','72a699','6B8FB2'];
  colourchange: |
    $ar->{t} ||= 5000;
    $G->{cg}->("change", t => $ar->{t}, c => $ar->{c});
  getundercontrol: |
    $H->JS("\$('#mess').toggleClass('widdle').animate({'max-width': '26%'});");
  touch: |
    if (eval { $ar->{e}->[1]->{C} }) {
        w getundercontrol;
    }
    $@ = "";
  
    $ar->{t} ||= 1000;
    w colourchange;
  rotate_colourwheel: |
    $G->{colours} || w colours;
    my $c = shift @{$G->{colours}};
    push @{$G->{colours}}, $c;
    #return G colour Tw randomcolour(name => "sky");
    return $c;
    

