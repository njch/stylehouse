
hooks:
  mess: |
    # TODO sa* all over
    # by voltage!
    my $mess = "$what: @$thing";
    $mess = slim(500,500,$mess);
    $H->pub("S/H.style/H.name/sa", $mess);
  aj: |
    my $W = j.G.W;
    my $ww = W.at.id;
    my $to = $ww;
    if (j._) {
        $to .= "/_";
        # ww homing
        my $hol = "H.style/H.name/H.id";
        my $etc = 1 if W.at.styles =~ /\bNZ\b/;
        my $hold = join ' ', $hol, $etc, $H->hitime;
        H.r->set("W/$ww" => $hold);
        H.r->set("V/H.id/$ww" => 1);
        G0.Wh->{$ww} = $W;
    }
    
    my @lot = reverse @{j.s}; # until whole
    push @lot, reverse @{j.c}; # from whole
    
    return sayre "empty J aj" unless @lot; 
    
    @lot = join " ", @lot;
    for my $m (@lot) {
        ref $m && die;
        $m = " $m"; # two spaces, tells js to eval
        H.G w send_Elvis[$m, $to]; 
    }
  jaw: |
    my $s = $H->mkuuid();
    ($s) = reverse split '-', $s;
    G.jaws->{$s} = delete ar.cb; # TODO a Z awaits, sucks $m
    ar.m = 
        " var e = function(){ $js };"   
        ."var m = e();"
        ."s\.reply({jaw:{h:'H.ol',s:'$s',e:m}});";
    my $pi = ar.E->pi if ar.E;
    sayyl "jaw $s $pi  ".slim(30,30,$js);
    sayyl ki $ar;
    w send_Elvis;
  Teeth: |
    saybl (ar.E && ar.E->pi."-")." > ".slim(75,80,$m);
    my $j = $H->djson($m);
    
    if (ref $j eq "HASH") {
        if (keys %$j != 1) {
            die "hash wide/skinny ".wdump($j);
        }
        my ($uno) = keys %$j;
        my $a = {
            j => $j,
            m => $m,
            $uno => $j->{$uno},
        };
        a.E = ar.E if ar.E;
        w S/$uno(%$a);
        # hit or not? see post 6 with r 
        return;
    }
    
    die "weird shit: '$m'" if ref $j;
    
    if ($j =~ /^([\w\/]+) (.+)$/) {
        my $a = {m => $2};
        a.E = ar.E if ar.E;
        w S/$1(%$a);
    }
    else {
        die "wei tet '$j'";
    }
  reS: |
    my ($way, $am) = split /\s+/, $m, 2;
    sayyl "$top >> $m" if $way ne 'hostinfo/ack';
    $way || die "wtf $m";
    w S/$way(%$ar,m=>$am);
  S:
    percC: | #c
        my $way = "C".($m?" $m":"");
        my $n = H.nn++;
        my $P = [{GAK => "C$n $way"}];
        H.G w percs[$P];
    
    jaw: | #c TODO route with H.id
      $j = j.jaw;
      my $s = j.s || die "no s";
      my $hol = j.h || die;
      if (H.ol eq $hol) {
          my $cb = G.jaws->{$s} || die "no such jaw $s";
          saygr "Jaw doing $s ... ";
          $cb->(j.e); # TODO Z sucktion
      }
      else {
          $H->pub("S/$hol", "speaks $m");
      }
    speaks: | #c concealed elvis input
      w Teeth[$m];
      
    er: | #c
      die "much JS error..." if H.JErrors++ > 3;
      sayre "javascript error from client", j.m, j.e;
    event: | #c
      my $e = ar.e = j.event;
      
      return w S/key if e.type =~ /^key/;
      
      return w S/W if e.W;
      
      return w S/TV if e.id;
      
      sayre "Strange event", $e;
      
    key: | #c
      # if key is ww switcher...
      if (H.name eq "O") {
          G.keysto || die "no key subber";
          if (G.keysto ne H.ol) {
                return $H->pub("S/G.keysto" => "speaks $m");
          }
      }
      return H.keydo->($e) if H.keydo;
      
    TV: |
      w duu/TV;
  
    On: |
      die "!";
      $m =~ s/^H.style\/H.name // && w reS[$m];
    W: | #c
        $e->{$_} =~ /^\w+$/ || delete $e->{$_} for qw'id ux W';
        
        my $hold = H.r->get("W/e.W") || die "no such e.W but also H.G.A.W->{e.W}";
        my ($hol, $etc) = split /\s+/, $hold, 2; # JJJ
        
        G.keysto = $hol;
        
        my $a = {};
        if (my $W = G0.Wh->{e.W}) {
            my $find = sub {
                w W.W fi(f => {id => shift});
            };
            a.W = $W;
            a.i = $find->(e.id);
            a.ux = $find->(e.ux);
            a.e = $e;
            
            say "to ".W.G->pi."    ".W.W.G->pi;

            W.G w event(%$a);
        }
        elsif ($hol ne H.ol) {
            sayyl "$hol ne H.ol";
            $H->pub("S/$hol", "speaks $m");
        }
    
    reextet: | #c
        if (H.name eq 'o') {
            my $g = G:S/o || die;
            $g w reextet;
            return;
        }
        my @m = grep { $_ ne "H.style/H.name" } split ',', $m;
        $G->timer(1.3, sub {
            if (H.name eq "O") {
                $H->pub("S/hut/Z", "reextet ".join',',@m);
            }
            elsif (H.name eq "Z") {
                sleep 1;
                $H->pub("S/$_", "reexec") for @m;
            }
            w reexec;
        });

