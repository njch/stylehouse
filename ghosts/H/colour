
name: H colour
tractors:
  - K: 'H/colour'
    arr_if: |
      $name || die;
    B_: |
      $name
    print: |
      $S->{K} .": ". $S->{B}->{_}
    first_time: |
      $S->{B}->{personalities} ||= [
          sub { int rand 50 },
          sub { int rand 123 },
          sub { int rand 255 },
          sub { 100 + int rand 155 },
      ];
      Sw set;
    every_time: |
      Sw change_person if $ar->{e} && $ar->{e}->{C};
      if ($ar->{change}) {
            Sw change;
      }
      else {
          Sw set if $ar->{force_set}
      }
    set: |
      Sw set_background if $ar->{set_css_background};
    set_background: |
      my $colour = Sw wtc;
      $ar->{t} ||= 0.2;
      $H->JS("\$('$set_css_background').stop().animate({backgroundColor: '$colour'}, $ar->{t}*1000);");
    change_person: |
      Say "Personality switch del $name";
      push @$personalities, shift @$personalities;
    person: |
      $personalities->[0]
    randomcolour: |
      $B->{personalities} || die "no preson!?";
      my $as = Sw person;
      my ($rgb) = join", ", map {$as->()} 1 .. 3;
      return $S->{B}->{colour} = "rgb($rgb)";
    change_colour: |
      $S->{B}->{colour} = $ar->{c} || Sw randomcolour;
    change: |
      Sw change_colour;
      Sw set;
      return Sw wtc;
    wtc: |
      $B->{colour} ||=  Sw randomcolour;
hooks:
  any_init: |
  have: |
    die;
  arr: |
    my $S = Arr[(%$ar)];
  randomcolour: |
    my $S = Afind[$name];
    return w $S randomcolour(%$ar);
  change_person: |
    my $S = Afind[$name];
    return w $S change_person;

