






name: kasplat
tractors:
  - K: 'mess'
    max_populi: 10
    arr_if: |
      $thing && $what
    B_: |
      $thing
    first_time: |
      $S->{K}="m$what";
    wheresplain: |
      $S->{waystack} ? w $S->{waystack} wheresplain : "";
    print: |
      my $f = $thing->[0];
      my $p;
      if (ref $f eq "Way") {
          $p = w $f print;
      }
      $p ||= $f || "";
      join " ", $S->{K}, $p;
hooks:
  fresh_init: |
    $G->{db} = -1;
    G tractor ->{db} = -1;
  throwlog: |
    my $S = Arr[$thing, $what];
    if ($G->{_post_throw}) {
        $G->{_post_throw}->($S);
    }
    return "yep" if $what eq "Info";
  throwthrow: |
    
    print colored(ind("$what  ", $string)."\n", $what eq "Error"?'red':'green');
    if ($string =~ /DOOF/) {
        $self->JS("\$('#mess').animate({'max-width': '80%'}, 500);");
    }
    $string = encode_entities($string);
    $string =~ s/'/\\'/g;
    $string =~ s/\n/\\n/g;
    return $self->error("Recusive error messaging, check console")
        if $string =~ /amp;amp;amp;/;
    $self->{throwings}->{$what} || $self->timer(0.1, sub { $self->throwlog_throw });
    $self->{throwings}->{$what} = $string;
    
  event: |
    #w throwlog(Event => $e);
    if (eval { $ar->{e}->[1]->{C} }) {
        my $id = $ar->{e}->[1]->{id};
        $H->JS("\$('#$id').empty();");
    }
    if (eval { $ar->{e}->[1]->{S} }) {
        my $id = $ar->{e}->[1]->{id};
        $H->JS("\$('#mess').toggleClass('inface');");
    }
    

