






name: kasplat
tractors:
  - K: 'mess'
    populi:
      max: 10
    B_: |
      for (qw{Vitals Ambientness}) {
          return $_ if $what eq $_ ;
      }
      return $thing;
    arr_if: |
      $thing && $what
    first_time: |
      $S->{K}="m$what";
    wheresplain: |
      $S->{waystack} ? w $S->{waystack} wheresplain : "";
    print: |
      join " ", $S->{K}, ghostlyprinty($thing);
hooks:
  fresh_init: |
  flood_init: |
      my $messborder = "border: 2px solid rgb(64,150,227);";
      my $m = $H->{sky}->spawn_floozy($G, mess => "max-width:39%; right:0px; bottom:0px;"
          ."position:absolute; overflow: scroll; height:100%;"
          ."$messborder z-index: -10; background: rgba(175,160,47, 0.5); color: #030; font-weight: bold; ");

      $m->spawn_floozy(
          Error => "width:100%; $messborder background: rgba(16,0,50, 0.7); color: rgba(178,71,0, 0.7); font-weight: bold; overflow-x: scroll; white-space: pre; word-wrap: break-word; max-height: 100%;",
      );

      $m->spawn_floozy(
          'Info' => "width: 100%; overflow: scroll; $messborder  background: #44ag39; font-weight: bold; color: #66c339; opacity: 0.7; z-index: 50; white-space: pre; word-wrap: break-word; max-height: 100%;",
      );

      $m->spawn_floozy(
          'Say' => "width: 100%; overflow: scroll; $messborder background: rgba(102,255,102, 0.7); color: #030;  font-weight: bold;  opacity: 0.7; z-index: 50; white-space: pre; word-wrap: break-word; max-height: 100%;",
      );
  throwlog: |
    my $S = Arr[$thing, $what];
    return "yep" if $what eq "Info" && 0;
  throwthrow: |
    
    print colored(ind("$what  ", $string)."\n", $what eq "Error"?'red':'green');
    if ($string =~ /DOOF/) {
        $self->JS("\$('#mess').animate({'max-width': '80%'}, 500);");
    }
    $string = encode_entities($string);
    $string =~ s/'/\\'/g;
    $string =~ s/\n/\\n/g;
    return $self->error("Recusive error messaging, check console")
        if $string =~ /amp;amp;amp;/;
    $self->{throwings}->{$what} || $self->timer(0.1, sub { $self->throwlog_throw });
    $self->{throwings}->{$what} = $string;
    
  event: |
    my $id = $e->{id};
    if ($e->{C}) {
        my @id = $id eq "mess" ? ('Er'.'ror','In'.'fo','Sa'.'y'} : $id;
        $H->JS("\$('#$_').empty();") for @id;
    }
    if ($e->{S}) {
        $H->JS("\$('#mess').toggleClass('inface');");
    }
    

