
name: osts
hooks:
  fresh_init: |
    say "     H 2 ! init H.style H.name";
    
  z:
    getgeometry: |
      $H->send(" w".".reply({geometry: {x: screen.availWidth, y: screen.availHeight}});");
    empty_body: |
      $H->send("\$('body').empty();");
    clon: |
      $H->send("clon();");
        
  stylehut:
    reexec: |
      exec "perl l/S".".pm";
    minorport: |
      1
    in: |
      G!H/mess;
      waylay stylehut/play;
      
    play: |
      H.h = G!Ϡ;
    
    elvus: |
      sayg "elvission modio";
      
      G:Ϡ w elvis_enters;
    
    elvibe: |
      H.notunderworld = 1;
      $E->send(" s\.r('wsy '+ w\.conin +' '+ s\.conin );");
      # get clicked out of spaces:
      $E->send(" s\.reply({conz:conz});");
      # shed empties body, hehe
      
    singul: |
      sayg "sSingu mode";
      
      G:Ϡ w elvis_enters;
      
      $H->send(" clon();");
      
      *Ghost::sw = sub { say "switching to G::sw @_";G::sw(@_) };
      
      $H->send(sprintf "version is v%vd", $^V);
      
      Mojo::IOLoop->recurring(32 => sub{ w stylehut/yup; });
      Mojo::IOLoop->recurring(6 => sub{ w stylehut/honk; });
    honk: |
      $H->send('.'. (("  ")x int(2 + rand 10))."!!!");
    yup: |
      $G::swdepth = 10;
      say "yup: ".sw("styleh00t ".sprintf('%.5f',rand()));
      
      
  styleshed:
    reexec: |
      exec "perl stylehouse.pl SHED";
    in: |
      G!H/mess; # due to spawn syntax
    elvibe: |
      say "Elvibin";
      w z/getgeometry;
      w z/empty_body;
      w z/clon;
    play: |
      G!H/keys;
      
      G!Ϡ;
      
      my $Dambi = sub { G:sky w ambientness; };
      w wtf(div => 26, way => 'sky amb', D => $Dambi);
      
  stylehouse:
    reexec: |
      exec "perl stylehouse.pl HOUSE";
    in: |
      G!H/mess; # due to spawn syntax
    elvibe: |
      $H->send($_) for 
        "w".".reply({geometry: {x: screen.availWidth, y: screen.availHeight}});",
        "\$('body').empty();", # or not...
        "clon();";
      w H.style/play;
      G!H/colour; # TODO R
      
      G!H/sky ->w('flood_init');
    play: |
      G!H/ground ->w('flood_init');
      Git->new($H->intro);
      Codo->new($H->intro);
      $H->JS("\$('#sky').stop().slideUp();");

