name: Elvission
C: # Elvis, J
  - K: Elvis
    max_tooth_Hz: 12
    Gw: 1
hooks:  
  Elvis: #
      # here we want to graph things out real careful
      # because it is how things get around
      # the one to the many
      # apps can be multicasting too
      # none of these workings should be trapped at this level
      # send it out there and get the hair on it
    flows_D: |
      Sw tx_uglies;
      say "Elvis appears from B.address";
      S.mouth = [];
      
      Sw populi if ! H.h; # dodge
      H.who = $S if ! H.h; # hut later
      B.elvii = ++H.elvii;
      B.sign ||= join "", (`figlet '<<<<'`)[-2]; chomp B.sign;
      
    swoosh: |
      saygr $sign;
      
    humms_D: |
      w elvibe(E=>$S);
    
    print: |
      "$elvii $elvii === $address";
    
    send: |
      $tx->send(J.B.m, J.B.cb);
      
    speaks: |      
      my $E = $S;#1
      my $J = 0->Bu(J => {m=>$m});#2
      if (w $S mouthfull[$J]) {#3 pyramid full
          sayyl "elvis losing teeth ".$S->pi;
          return; # more stim than stamp
      }
      w Teeth[$J, $E];#...
      
    disconecktie: |
      $EE->send(" C[s\.conin] = s;");
      $tx->finish;
      S.disco = 1;
      
    mouthfull: |
      for my $mJ (@{S.mouth}) {
            return 1 if mJ.dig eq J.dig &&
                (1 / (J.hitime - mJ.hitime)) > S.max_tooth_Hz
      }
      push @{S.mouth}, $J;
      shift @{S.mouth} if @{S.mouth} > 3;
      return 0;
    
    populi: |
      my @all = 0->rei({K=>"Elvis"});
      if (@all > 1) {
          sayre " Elvis is taking over!";
          _.B.tx->finish for @all;
          sayre " restarting...";
          w reexec;
      }
      
    leaves: |
      sayre "Elvis leaves: ".$S->pi."  $address - $code, $reason";
    
    tx_uglies: |
      Mojo::IOLoop->stream($tx->connection)->timeout(300000);
      $M->on(message => sub {
          my ($M, $m) = @_;
          eval { Sw speaks[$m]; };
          $H->error("$@") if $@;
          $@ = "";
      });
      $M->on(finish => sub {
          my ($M, $code, $reason) = @_;
          Sw leaves[$code, $reason];
      });
      B.address = $tx->remote_address;

