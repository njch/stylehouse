
name: hostinfo
C:
  - K: J
    Gw: 1
  - K: j
    Gw: 1
  - K: R
    Gw: 1
  - K: Elvis
    max_tooth_Hz: 12
    Gw: 1
R:
 - K: ivm
hooks:
  Elvis: #
      # here we want to graph things out real careful
      # because it is how things get around
      # the one to the many
      # apps can be multicasting too
      # none of these workings should be trapped at this level
      # send it out there and get the hair on it
    flows_D: |
      Sw tx_uglies;
      S.mouth = [];
      
      Sw populi if ! H.h; # dodge
      H.who = $S if ! H.h; # hut later
      B.elvii = ++H.elvii;
      B.sign ||= join "", (`figlet '<<<<'`)[-2]; chomp B.sign;
      
    swoosh: |
      saygr $sign;
      
    humms_D: |
      w elvibe(E=>$S);
    
    print: |
      "$elvii $elvii =B.style=B.name=B.id B.conin $address";
    
    send: |
      $tx->send(J.B.m, J.B.cb);
      
    speaks: |      
      my $E = $S;#1
      my $J = 0->Bu(J => {m=>$m});#2
      if (w $S mouthfull[$J]) {#3 pyramid full
          sayyl "elvis losing teeth ".$S->pi;
          return; # more stim than stamp
      }
      H.who = $E;
      w Teeth[$J, $E];#...
      
      
    disconecktie: |
      $EE->send(" C[s\.conin] = s;");
      $tx->finish;
      Sw disco;
    disco: |
      S.disco = 1;
      G:Ϡ w elvis_leaves(E=>$S) if G:Ϡ;
      
    mouthfull: |
      for my $mJ (@{S.mouth}) {
            return 1 if mJ.dig eq J.dig &&
                (1 / (J.hitime - mJ.hitime)) > S.max_tooth_Hz
      }
      push @{S.mouth}, $J;
      shift @{S.mouth} if @{S.mouth} > 3;
      return 0;
    
    populi: |
      my @all = 0->rei({K=>"Elvis"});
      if (@all > 1) {
          sayre " Elvis is taking over!";
          _.B.tx->finish for @all;
          sayre " restarting...";
          w reexec;
      }
      
    leaves: |
      sayre "Elvis leaves: ".$S->pi."  $address - $code, $reason";
      Sw disco;
    
    tx_uglies: |
      Mojo::IOLoop->stream($tx->connection)->timeout(300000);
      $M->on(message => sub {
          my ($M, $m) = @_;
          eval { Sw speaks[$m]; };
          $H->error("$@") if $@;
          $@ = "";
      });
      $M->on(finish => sub {
          my ($M, $code, $reason) = @_;
          Sw leaves[$code, $reason];
      });
      B.address = $tx->remote_address;
  fresh_init: |
    say "     H Fresh init H.style";
    push @{G.GGs||=[]}, $G; # H self
    
    0->GAK(Hm => G!H/mess);
    
    H.r = w enRedis;
    w figure_port;
    
    my $reS = sub { w reS(m => shift->{m}); };
    0->su(S => $reS);
    0->su("S/H.style/H.name" => $reS);
    
    $G->timer(60*9+(20 * rand 4),
        sub { sayre "voluntary reexec" for 1..13; w reexec; })
        if H.name !~ /Z/;
    
    G.rivm = $G->R(ivm => {timer => 0.4});
    G.rivm->wtf({div => 1, way => 'check/script'}) if H.name !~ /O|Z/;
    G.rivm->wtf({div => 1, way => 'redission'});
    G.rivm->wtf({div => 17, way => 'check/vitals'});
    # start git torrent
    # do it all
    # $0 has become a runtime
    waylay H.style/in;
      
  figure_port: |
    my $listen = readlink('listen');
    my ($host,$port, $wa) = split ':', $listen;
    die "too much listen" if $wa;
    ($port, $host) = (2000, undef) if !$port && $host =~ /^\d+$/;
    $port ||= 2000;
    $host ||= '127.0.0.1';

    $port += w H.style/minorport;
    
    H.listen_http = "http://$host:$port";
    H.listen_ws = "ws://$host:$port/s";
    
  websocket: | # Mojo throws connection over here
    0->TafuB(Elvis => {tx => $M->tx, M => $M});
  websockout: | # we make websockets out # BROKE
    Say "Ws out $conin";
    use Mojo::UserAgent;
    my $ua = Mojo::UserAgent->new;
    $ua->websocket($conin => sub {
      my ($ua, $tx) = @_;
      die "HELLO!";
      die "WebSocket handshake failed! $conin" and return unless $tx->is_websocket;
      Say "Connecto!";
      0->TafuB(Elvis => {tx => $tx, M => $tx, %$ar});
    });
    Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
  jaw: |
    my $s = $H->mkuuid();
    G.jaws->{$s} = delete ar.cb; # TODO a Z awaits, sucks $m
    ar.m = 
        " var e = function(){ $js };"
        ."var m = e();"
        ."s\.reply({jaw:{s:'$s',e:m}});";
    w send_Elvis;
  Teeth: |
    w $J print_in(pi => $E->pi);
    my $m = J.B.m;
    w $J decode;
    my $j = J.B.j;
    
    if (ref $j eq "HASH") {
        if (keys %$j != 1) {
            die "hash wide/skinny ".wdump($j);
        }
        my ($uno) = keys %$j;
        saygr "cuno $uno";
        my $a = {
            j => $j,
            $uno => $j->{$uno},
            E => $E,
        };
        w S/$uno(%$a);
        # hit or not? see post 6 with r
        return;
    }
    
    die "weird shit: '$m'" if ref $j;
    
    if ($j =~ /^([\w\/]+) (.+)$/) {
        $ar = {m => $2, E => $E}; #J?
        w S/$1; # < or v
        w H.style/S/$1;
    }
    else {
        die "wei tet '$j'";
    }
    
    w $E swoosh;#9
    

  reS: |
    sayyl "S > $m";
    $m =~ /^(\S+) ?(.+)?$/ ? do{    w S/$1(%$ar,m=>$2); } : die "wtf iS $m ???";
  S:
    # these are data structurey aliens to S but just to keep together
    jaw: |
      $j = j.jaw;
      my $s = j.s || die "no s";
      my $cb = G.jaws->{$s} || die "no such jaw $s";
      $cb->(j.e); # TODO Z sucktion
    claw: |
      $H->claw($j);
    er: |
      die "much JS error..." if H.JErrors++ > 3;
      $H->error("javascript error from client", j.m, j.e);
    event: |
      my $e = ar.e = j.event;
      
      return w S/key if e.type =~ /^key/;
      
      return w S/W if e.W;
      
      return w S/TV if e.id;
      
      $H->error("Strange event", $e);
      
    key: |
      return H.keydo->($e) if H.keydo;
      
      G.keys ||= G:keys;
      G.keys || die "no keys!";
      G:keys ->w(Arr => {e => $e});
    TV: |
      w duu/TV;
    
    conz: |
        while (my ($id, $conin) = each %$conz) {
            next unless $conin eq H.listen_ws; # ours
            next if H.G.A.W->{$id}; # current # lookup (into the unified)
            $E->send(" delete conz['$id']; \$('#$id').remove();");
        }
  
    # from redis or so, published to S is "push_conin $style $name $id $conin"
    # so happens everywhere unless you:
    On: |
      "H.style/H.name" =~ $m && $m =~ s/^\S+ // && w reS[$m];
    W: |
        $e->{$_} =~ /^\w+$/ || delete $e->{$_} for qw'id ux W';
        
        my $a = {};
        a.W = H.G.A.W->{e.W} || die;
        a.L = a.W->findL(e.id);
        a.uxL = a.W->findL(e.ux);
        a.e = $e;

        a.W.G w event(%$a);
    push_conin: |
      G:Ϡ w pull_conin if H.singul;
    please_push_conin: |
      G:Ϡ w push_conin if !H.singul;
    wsy: |
      my $C = G.conz ||= {};
      my ($w, $s) = split ' ', $m;
      # check the tip for dup
      my $EE = G.conz->{$w};
      if ($EE && !EE.disco) {
          w elvash[$E, $EE];
      }
      G.conz->{$w} = $E;
      (E.c->{w}, E.c.s) = ($w, $s);
      E.singul = 1 if $w eq $s; 
      
      w z/conz;
      w elvjs;
    ghostchanges: |
      return if H.G.wtf.gitdission;
      say "S ghostchanges";
      my $Gd = {map { $_ => 1 } split ', ', $m};
      $G0 w _gitdission[$Gd];
  z:
    getgeometry: |
      $H->send(" w".".reply({geometry: {x: screen.availWidth, y: screen.availHeight}});");
    empty_body: |
      $H->send("\$('body').empty();");
    clon: |
      $H->send(" clon();");
    keon: |
      $H->send(" keon();");
    hitground: |
      $H->JS("\$('#sky').stop().slideUp();");
    conz: |
      $E->send(" s\.reply({conz:conz});");
    wzy: |
      $E->send(" s\.r('wsy '+ w\.conin +' '+ s\.conin );");
    coninto: |
      $H->send(" a\.con({conin: '$conin'});");
  elvash: |
    # close older one? closes newer, $E
    ($E, $EE) = ($EE, $E);
    sayre "Already on $w ".$EE->pi."  disco necktie ing => ".$E->pi;
    w $E disconecktie[$EE];
  elvjs: | # elvis swam through wsy, is js client
    saygr $E->pi." E.c.w, E.c.s \n\n";
    
    say "Elvis swims     ".(E.singul ? "SINGULARLY":"");
    if (E.singul) {
        H.who = $E;
        H.singul = 1;
        w H.style/singul;
    }
    else {
        H.singul = 0;
        w H.style/elvus;
    }
  elvibe: |
    Say "En nnnn Elvis ?? J | ".$E->pi;
    if (E.B.style) {
        Say "Elvis got it ".$E->pi;
        return;
    }
    w H.style/elvibe;
    w z/wzy; # conz, swim
  wtf: |
    # TODO combine with check, fractionating importantness into spacetime
    if (ar.way && ar.div) {
        my $a = { %$ar, now => 0 };
        $G->{ar.riv||'wtf'}->{ar.way} = $a;
        return;
    }
    my $riv = $G->{ar.riv} ||= {};
    my @to;
    while (my ($way,$r) = each %$riv) {
        r.now++;
        if (r.now >= r.div) {
            r.now = 0;
            $G->timer(0, sub {
                return r.D->() if r.D;
                $G->w("$way");
            });
        }
    }
  mess: |
    unless (H._future) { # TODO delete _future after burning SHED
        # TODO move mess into H, it's just one C
        # tractor to allow trig subs to each K
        # between H.G being here and G:mess being here
        saygr "prefut ar.what  = ".
        join"  ", map {gpty($_)} flatline(ar.thing);
        return;
    }
    my $m = G:mess;
    $m || die'no mess!';
    H._future = 0;
    
    eval { $m ->w(Arr => $ar); };
    if ($@) {
        die "Throwing mess mess: $@\n\n\n".wdump($ar);
    }
    
    H._future = 1;

  suRedis: |
    my $a = {%$ar};
    a.div ||= 3;
    a.top || die "no su top";
    my $D = a.cb || die "no su cb";
    a.way ||= $top." D=$D"; # uniq
    
    a.r = w enRedis;
    a.r->subscribe($top => $D);
    a.r.wassubbedto = $top;
    a.riv = 'redission';
    G.redission->{a.way} = $a;
    
    my $riv = G.redission ||= {};
    my @to = values %$riv;
    G.redisco = w waits(to => \@to, towait => 0.1);
  redission: |
    my $ord = G.redisco ||= {};
    for my $k (sort keys %$ord) { # numbers wall timespace
        my $int = $ord->{$k}; # a time
        for my $t (@$int) { # in time
            t.r->wait_for_messages($k); # ooh the key
        }
    }
  enRedis: |
    my $r = Redis->new(
        server => 'localhost:8888',
        reconnect => 1,
        every => 10000,
    );
    r.gest = sub { # do a R::edis module
        my ($k, $make) = @_;
        my $c = H.r->get($k);
        return ref \$c eq "SCALAR" ? $H->fixutf8($c) : $c if $c;
        $c = $make->();
        H.r->set($k => $c);
        return $c;
    };
    $r
  waits: |
    my $towait = ar.towait || 1;
    my $to = ar.to;
    
    my $max = max map { _.div } @$to;
    _.span = $max / _.div for @$to;
    
    my $tot = sum map { _.span } @$to;
    my $one = $towait / $tot;
    
    my $ord = {};
    for my $t (@$to) {
        my $waits = $one * t.span;
        $waits = sprintf("%.7f", $waits);
        t.waits = $waits;
        push @{ $ord->{$waits} ||= [] }, $t
    }
    return $ord;
    
  check:
    script: |
      my $script = $0;
      my $nc = (stat $script)[10];
      die "no ctime?" unless $nc;
      if (H.Sctime && $nc ne H.Sctime) {
          Say "Rwestarting! ctime changeon $script";
          w reexec;
      }
      H.Sctime = $nc;
    vitals: |
      $G->susgdb;
      my @v = (
          w check/MemAvailable,
        w check/ps,
        w check/LoC,
      );
      $G->mess(Vitals => \@v);
    MemAvailable: |
      my ($a) = `cat /proc/meminfo | grep MemAvailable`;
      ($a) = $a =~ /(\d+) kB/;
      $a = int($a / 1024);
      kill 'KILL', $$         if !$a || $a < 50 || $! ;
      $a < 500 ? "MemAvail: ${a}mB" : ()
    ps: |     
      my @ps = `ps -p$$ fu`;
      my ($u, $pid, $m, $c) = (split /\s+/, $ps[1])[0,1,2,3];
      $m /= 100;
      $c /= 100;
      sayre "memory usage $m" if $m > 0.4;
      w reexec if $m > 0.9; # unlikely to be effective from inside
      "$u`$pid  m$m  c$c"
    LoC: |
      my $tot = (`wc -l lib/* ghosts/*/*`)[-1];
      ($tot) = $tot =~ /(\d+) total/;
      "$tot lines"
  send_Elvis: |
    my $Elvis = ar.Elvis || ar.E || H.who || die "no infiduvial? $m";
    my $J = 0->Bu(J => {m => ar.m, cb => ar.cb});
    w $J print_out(pi => $Elvis->pi);
    w $Elvis send[$J];
  Elvi: |
    grep { !_.disco } 0->rei({K=>"Elvis"});
  J: # 
    Bu_D: |
      B.m =~ s/\n?$/\n/s;
      S.dig ||= $H->dig(B.m);
      S.hitime = $F[0]->{hitime};
    decode: |
      if ($m =~ /^"(.+)"\n$/s) {
          B.j = $1;
      }
      else {
          B.j = $H->djson($m);
      }
      
    print_out: |
      return if $m =~ /\$\('#(worm|mess|sky|path|land|func|somewhere|flood)/;
      # ^ trace F, tractoriose
      my $short = length($m) < 200 ? $m : substr($m,0,23*9)." >SNIP<";
      chomp $short;
      print colored("< send $pi\t\t", 'blue');
      print colored($short, 'bold blue');
      say "";
    print_in: |
      my $pi = ar.pi || S.id;
      my $m = $m;
      chomp $m;
      print colored("recv > $pi\t\t", 'red');
      print colored($m, 'bold red');
      say "";
  j: #
    D: |
      # god object
      # bit that rattles around from here
      # that is from Elvis talk held in J
      # so J is the still meaning of the activity
      #    J is uncarved block of wood
      # j changes as it goes
      # spiralling, modding
      # harmon stacks procedures geometries
      # much like T but not about a line, about physics, energy, meta
      # behaviour stuff joins 
      # all of that is travelly 9 wrapz
      # in things more dynamically
      
      # in a dimension that mods
      
      # like keyword-only, plumbing-sparse talking can dilute/narrow meaning on the receiving end
      
      # the data from JSON of the websocket line will do now
      # as an origin of the energy and a place to cling complications
      # this is ACGT or whatever language
      # hash has named sentences
      # send tences - the web tightens as it nests
      
      
      
  reexec: |
      exec "nice perl $0 @ARGV";
  sing: |
    G.singing ||= {};
    return sayre "\t\t\t\t $name BLOCKED"
        if G.singing->{$name}
            && G.singing->{$name}++; # ignore sing until...
    G.singing->{$name} = 1;
    my $t = ar.block || ar.again || 0.04;
    my $d = ar.begin || 0.001;
    $G->timer($d, sub {
        $G->timer($t, sub {
            my $splatter = delete G.singing->{$name};
            if ($splatter > 1 && ar.again) {
                $G->Flab("Sig reps $splatter... again!  $name");
                w sing(%$ar);
            }
        }, "sing-block        $name");
        G.singing->{$name} = 1;
        $code->();
    }, "pre-sing     $name");
    
    
  reinit:
    everything: |
      $H->error("restarting!");
      `touch stylehouse.pl`;
  
  data:
    get_apps: |
      my $apps = {};
      my $d = $O->data;
      for (keys %$d) {
          next unless /^[A-Z]\w+$/;
          $apps->{$_} = $d->{$_};
      }
      return $apps;
  duu:
    TV: |
      my $id = $e->{id};
      if ($id eq "ux") {
          sayre "NO SKY" for 1..14;
      }
      else {
          sayre "no TV" for 1..8;
      }
      sayyl "event handled in ".$G->F_delta()."\n\n";
  

