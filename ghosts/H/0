
name: hostinfo
C:
  - K: J
    Gw: 1
  - K: j
    Gw: 1
  - K: R
    Gw: 1
  - K: Elvis
    max_tooth_Hz: 12
    Gw: 1
  - K: mess  # j?
    print: |
        "m S.m".
        G::gp($thing); # R gp
R:
 - K: ivm
hooks:
  fresh_init: |
    say "     H Fresh init H.style H.name";
    H._future = 1;
    push @{G.GGs||=[]}, $G; # H self
    
    H.r = w enRedis;
    H.sur = w enRedis;
    w figure_port;
    
    
    0->su('H*' => sub { w Hi(a=>shift); }) if H.name eq "O";
      
    my $reS = sub { w reS(m => shift->{m}); }; 
    0->su(S => $reS);
    0->su("S/H.style/H.name" => $reS);
    0->su("S/H.style/H.name/H.id" => $reS);
    H.r->set("H/H.style/H.name/H.id" => $H->hitime); # TODO lots
    $H->pub("H/H.style/H.name/H.id" => $$);
    
    
    $G->timer(60*9+(20 * rand 4),
        sub { sayre "voluntary reexec" for 1..13; w reexec; })
        if H.name !~ /Z/;
    
    
    Mojo::IOLoop->recurring(0.1 => sub {
        H.sur->wait_for_messages(0.07);
     });
    
    G.rivm = $G->R(ivm => {timer => 0.4});
    G.rivm->wtf({div => 1, way => 'check/script'}) if H.name !~ /S|O|Z/;
    #G.rivm->wtf({div => 1, way => 'redission'});
    G.rivm->wtf({div => 1, way => 'gitdission'}) if H.name =~ /Z/;
    G.rivm->wtf({div => 17, way => 'check/vitals'});
    # start git torrent
    # do it all
    # $0 has become a runtime
    waylay in;
  pubbedElvis: | # message for elvis via redis
      sayre "su a.top ".slim(30,30,a.m);
      my $m = a.m;

      my ($El, $st, $na, $ww, $uni) = split '/', a.top;
      if ($uni) {
            # meta
          sayyl "unifid $st $na $ww !";
          
          my $hold = H.r->get("W/$ww") || die "no such $ww";
          my ($hol, $etc) = split /\s+/, $hold, 2;
          if ($etc) {
              my $E = H.who;
              sayyl "Retiling";
              0->sing(retile => sub { G:Ϡ w retile[$E]; }, begin => 0.8);
          }
      }

      H.G w send_Elvis[$m];
  Teeth: |
    w $J print_in;
    my ($m, $j) = w $J decode;
    
    if (ref $j eq "HASH") {
        if (keys %$j != 1) {
            die "hash wide/skinny ".wdump($j);
        }
        my ($uno) = keys %$j;
        saygr "cuno $uno";
        my $a = {
            j => $j,
            m => $m,
            $uno => $j->{$uno},
        };
        a.E = ar.E if ar.E;
        w S/$uno(%$a);
        # hit or not? see post 6 with r
        return;
    }
    
    die "weird shit: '$m'" if ref $j;
    
    if ($j =~ /^([\w\/]+) (.+)$/) {
        my $a = {m => $2};
        a.E = ar.E if ar.E;
        w S/$1(%$a);
    }
    else {
        die "wei tet '$j'";
    }
  jaw: |
    my $s = $H->mkuuid();
    ($s) = reverse split '-', $s;
    G.jaws->{$s} = delete ar.cb; # TODO a Z awaits, sucks $m
    ar.m = 
        " var e = function(){ $js };"   
        ."var m = e();"
        ."s\.reply({jaw:{s:'$s',e:m}});";
    w send_Elvis;
  reS: |
    sayyl "S > $m";
    my ($way, $am) = split /\s+/, $m, 2;
    $way || die "wtf $m";
    w S/$way(%$ar,m=>$am);
  S:
    speaks: | # concealed elvis input
      my $J = 0->Bu(J => {m=>$m});#2
      w Teeth[$J];
      
    jaw: | # TODO route with H.id
      $j = j.jaw;
      my $s = j.s || die "no s";
      my $cb = G.jaws->{$s} || die "no such jaw $s";
      $cb->(j.e); # TODO Z sucktion
    er: |
      die "much JS error..." if H.JErrors++ > 3;
      $H->error("javascript error from client", j.m, j.e);
    event: |
      my $e = ar.e = j.event;
      
      return w S/key if e.type =~ /^key/;
      
      return w S/W if e.W;
      
      return w S/TV if e.id;
      
      $H->error("Strange event", $e);
      
    key: |
      # if key is ww switcher...
      if (H.name eq "O") {
            G.keysto || die "no key subber";
          $H->pub("S/G.keysto" => "speaks $m");
      }
      else {
          return H.keydo->($e) if H.keydo;
      }
      
    TV: |
      w duu/TV;
  
    ghostchanges: |
      return if H.G.wtf.gitdission;
      say "S ghostchanges";
      my $Gd = {map { $_ => 1 } split ', ', $m};
      $G0 w _gitdission[$Gd];
      
    zl: |
      say "yeah well $m";
      
    On: |
      die "!";
      $m =~ s/^H.style\/H.name // && w reS[$m];
    W: |
        $e->{$_} =~ /^\w+$/ || delete $e->{$_} for qw'id ux W';
        
        my $a = {};
        if (a.W = H.G.A.W->{e.W}) {
            a.L = a.W->findL(e.id);
            a.uxL = a.W->findL(e.ux);
            a.e = $e;

            a.W.G w event(%$a);
        }
        else {
            my $hold = H.r->get("W/e.W") || die "no such e.W";
            my ($hol, $etc) = split /\s+/, $hold, 2;
            $H->pub("S/$hol", "speaks $m");
            G.keysto = $hol;
        }
  wtf: |
    # TODO combine with check, fractionating importantness into spacetime
    if (ar.way && ar.div) {
        my $a = { %$ar, now => 0 };
        $G->{ar.riv||'wtf'}->{ar.way} = $a;
        return;
    }
    my $riv = $G->{ar.riv} ||= {};
    my @to;
    while (my ($way,$r) = each %$riv) {
        r.now++;
        if (r.now >= r.div) {
            r.now = 0;
            $G->timer(0, sub {
                return r.D->() if r.D;
                $G->w("$way");
            });
        }
    }
  gitdission: |
    my @diff = `git diff`;
    my $f;
    my $d = {};
    for (@diff) {
        if (/^diff --git "?a\/(.+?)"? "?b\/.+"?/) {
            $f = $1;
            next if -d $f; # git submodeul
            $f =~ s/^ghosts\/\\317\\240/ghosts\/Ϡ/sg;
            die "how to git diff unicode? $f" if $f =~ /\\\d+/;
        }
        else {
            $d->{$f} .= $_
        }
    }
    
    while (my ($f, $D) = each %$d) {
        $d->{$f} = {
            f => $f,
            D => $D,
            dig => $H->dig($D),
        };
    }
    
    return G.last_git_diff = $d if !G.last_git_diff;
    
    my $od = {%{G.last_git_diff}};
    
    my $Gd;
    while (my ($f, $n) = each %$d) { 
        my $o = delete $od->{$f};
        
        my $change = !$o || n.D ne o.D;
        
        next unless $change;
        
        if ($f =~ /^ghosts/) {
            n.o = $o;
            $Gd->{$f} = $n;
        }
        elsif ($f =~ /^l\//) { 
            # compilato del shed iggy
        }
        else {
            say join("  <>  ", ($f)x38);
            w reexec;
        }
    }
    
    # to undiffering, was commit? whatever
    for my $f (keys %$od) {
        next;
    }
    
    G.last_git_diff = $d;
    
    if (keys %$Gd) { 
        my $m = join", ", keys %$Gd;
        say "Ghost changes $m";
        $H->pub(S => "ghostchanges $m");
        $G0 w _gitdission[$Gd];
    }
  suRedis: |
    
    my $s = 'subscribe';
    $s = "p$s" if $top =~ /\*/;
    
    my $D = sub {
      my $d = {};
      (d.m, d.top, d.sutop) = map { $H->fixutf8($_) } @_;
      $G->timer(0.00001, sub {
            $cb->($d);
      });
      1;
    };
    
    H.sur->$s($top => $D);
    
    sayyl "Subbed to a.top";

  enRedis: |
    my $r = Redis->new(
        server => 'localhost:8888',
        reconnect => 1,
        every => 10000,
    );
    r.gest = sub {
        my ($k, $make) = @_;
        my $c = H.r->get($k);
        return ref \$c eq "SCALAR" ? $H->fixutf8($c) : $c if $c;
        $c = $make->();
        H.r->set($k => $c);
        return $c;
    };
    $r
  waits: |
    my $towait = ar.towait || 1;
    my $to = ar.to;
    
    my $max = max map { _.div } @$to;
    _.span = $max / _.div for @$to;
    
    my $tot = sum map { _.span } @$to;
    my $one = $towait / $tot;
    
    my $ord = {};
    for my $t (@$to) {
        my $waits = $one * t.span;
        $waits = sprintf("%.7f", $waits);
        t.waits = $waits;
        push @{ $ord->{$waits} ||= [] }, $t
    }
    return $ord;
    
  check:
    script: |
      my $script = $0;
      my $nc = (stat $script)[10];
      die "no ctime?" unless $nc;
      if (H.Sctime && $nc ne H.Sctime) {
          Say "Rwestarting! ctime changeon $script";
          w reexec;
      }
      H.Sctime = $nc;
    vitals: |
      $G->susgdb;
      my @v = (
          w check/MemAvailable,
        w check/ps,
        w check/LoC,
      );
      $G->mess(Vitals => \@v);
    MemAvailable: |
      my ($a) = `cat /proc/meminfo | grep MemAvailable`;
      ($a) = $a =~ /(\d+) kB/;
      $a = int($a / 1024);
      kill 'KILL', $$         if !$a || $a < 50 || $! ;
      $a < 500 ? "MemAvail: ${a}mB" : ()
    ps: |     
      my @ps = `ps -p$$ fu`;
      my ($u, $pid, $m, $c) = (split /\s+/, $ps[1])[0,1,2,3];
      $_ = $_ / 100 for $c, $m;
      sayre "memory usage $m" if $m > 0.4;
      w reexec if $m > 0.9; # unlikely to be effective from inside
      "$u`$pid  m$m  c$c"
    LoC: |
      my $tot = (`wc -l lib/* ghosts/*/*`)[-1];
      ($tot) = $tot =~ /(\d+) total/;
      "$tot lines"
  J: # 
    Bu_D: |
      B.m =~ s/\n?$/\n/s;
      S.dig ||= $H->dig(B.m);
      S.hitime = $F[0]->{hitime};
    decode: |
      if ($m =~ /^"(.+)"\n$/s) {
          B.j = $1;
      }
      else {
          B.j = $H->djson($m);
      }
      (B.m, B.j)
      
    print_out: |
      return if $m =~ /\$\('#(worm|mess|sky|path|land|func|somewhere|flood)/;
      # ^ trace F, tractoriose
      my $short = length($m) < 200 ? $m : substr($m,0,23*9)." >SNIP<";
      chomp $short;
      print colored("< send $pi\t\t", 'blue');
      print colored($short, 'bold blue');
      say "";
    print_in: |
      my $pi = ar.pi || S.id;
      $pi = ar.E->pi if ar.E;
      my $m = $m;
      chomp $m;
      print colored("recv > $pi\t\t", 'red');
      print colored($m, 'bold red');
      say "";
  j: #
    D: |
      # god object
      # bit that rattles around from here
      # that is from Elvis talk held in J
      # so J is the still meaning of the activity
      #    J is uncarved block of wood
      # j changes as it goes
      # spiralling, modding
      # harmon stacks procedures geometries
      # much like T but not about a line, about physics, energy, meta
      # behaviour stuff joins 
      # all of that is travelly 9 wrapz
      # in things more dynamically
      
      # in a dimension that mods
      
      # like keyword-only, plumbing-sparse talking can dilute/narrow meaning on the receiving end
      
      # the data from JSON of the websocket line will do now
      # as an origin of the energy and a place to cling complications
      # this is ACGT or whatever language
      # hash has named sentences
      # send tences - the web tightens as it nests
      
      
      
  reexec: |
      exec "nice perl $0 @ARGV";
  sing: |
    G.singing ||= {};
    # where from?
    return #sayre "\t\t\t\t $name BLOCKED"
        if G.singing->{$name}
            && G.singing->{$name}++; # ignore sing until...
    G.singing->{$name} = 1;
    my $t = ar.block || ar.again || 0.04;
    my $d = ar.begin || 0.001;
    $G->timer($d, sub {
        $G->timer($t, sub {
            my $splatter = delete G.singing->{$name};
            if ($splatter > 1 && ar.again) {
                $G->Flab("Sig reps $splatter... again!  $name");
                w sing(%$ar);
            }
        }, "sing-block        $name");
        G.singing->{$name} = 1;
        $code->();
    }, "pre-sing     $name");
    
    
  reinit:
    everything: |
      $H->error("restarting!");
      `touch stylehouse.pl`;
  
  duu:
    TV: |
      my $id = $e->{id};
      if ($id eq "ux") {
          sayre "NO SKY" for 1..14;
      }
      else {
          sayre "no TV" for 1..8;
      }
      sayyl "event handled in ".$G->F_delta()."\n\n";
  

