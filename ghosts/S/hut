hooks:
  in: |
      H.h = G.A->spawn(G => "Ï ", 'S', "S/H.style", "S/H.style/H.name");
  node:
    C:
      - D: |
          sayre "Gahahaha!";
      - GAK: C
    S:
       - GAK: bacg C/ool
         P:
          - K: Ims
            flo: 2
            B:
              dir: /s/public/i
          - GAK: U
            InC:
                 W:
                   Z:
                     z-index: -1
                     background: url(i/greencush.jpg)
    Z:
      - GAK: 0
  mess: |
    # TODO sa* all over
    # by voltage!
    $H->pub("S/H.style/H.name/sa", "$what: $thing");

  Teeth: |
    die "steal teeth";
    
  # heisto thing
  aj: |
    if (j._) { # TODO extra uni out to O and for way back in:
        saygr j.G->pi." unified field! see for ".@{j.s};
        H.G.A.W->{j._.at.id} = j.G.W;
    }
    
    my @lot = reverse @{j.s}; # until whole
    push @lot, reverse @{j.c}; # from whole
    
    for my $l (@lot) {
        ref $l && die "reff $l";
        H.G w send_Elvis(m=>$l); 
    }
    
    if (j._) { # TODO on O
        saygr "j.G.name unified field hits tiles!";
        #0->sing(retile => sub { w retile[$E]; }, begin => 0.8);
    }
    
  send_Elvis: |
    $H->pub("Elvis/H.style/H.name", ar.m);
    # Jid?
    # the id that unified fields of things pour out at
    # receiver to spool randoms for a while as forked may complete before parent
    

