
name: o
C:
  - K: Hi
hooks:
  fresh_init: | # sub hostinfos before w in does our hostinfo
    $G->su("Hi", sub { my $m = shift; w Hi[$m]; });
    $G->su("Hostinfo", sub { my $m = shift; w Hostinfo[$m] });
    $G->recur(10, sub {
        my $fi = `find ghosts -type f`;
        $fi =~ s/\n/ /g;
        saygr "lies: ".((`wc -l $fi`)[-1]  =~ /(\d+) total/)[0];
    });
    
    H.G w hostinfo;
    
  in: |
    $G->timer(9, sub{w Hiwtidy;});
  Hostinfo: |
        my ($hol, $inf) = split ' ', $m, 2;
        $hol =~ s/\x{0}//sgm;
        $G->pub("S/$hol", "hostinfo/ack $m", 'ig');
        saygr "from $hol -> $inf";
        G.hostinfo->{$hol} = {
            info => $inf,
            when => $H->hitime,
        };
  Hi: |
      sayyl "--------\n---------\n------\n   Hi  to $m";
      my ($hol, $m) = split ' ', $m, 2;
      (my $sn = $hol) =~ s/\/\w+$//;
      
      my @olds = uniq map { /^H\/(.+)\/.+?$/;$_ } `find life/H/$sn -type f`;
      for my $oth (@olds) {
          say "OLD: $oth";
          $oth =~ s/^.+H\///;
          my ($Hid) = reverse split '/', $oth;
          sayre "o $oth";
          if ($oth eq $hol) {
              sayyl " haf self";
                next;
          }
          #sayyl "Life:\n".`find life | grep $Hid`;
          my $js;
          for my $vh (glob("life/V/$Hid*")) {
              my @v = split '/', $vh;
              my $ww = $v[2];
              $js .= w jsrm(id=>$ww);
              sayre "DEL $vh   && W/$ww";
              #H.r->del($vh);
              #H.r->del("W/$ww");
          }
          $H->send($js) if $js;
          sayre "DEL H/$oth";
          #H.r->del("H/$oth");
      }
  jsrm: |
    " \$('#ux > #$id').fadeOut(1000, function() { \$(this).remove(); });";
  Hiwtidy: |
    my $js = 
    " var e = []; \$('#ux > ww').each(function(){"
        ."e\.push(\$(this).attr('id'));" # could take more clues
    ."});"
    ."return e\.join(' ');";
    my $cb = sub { my $m = shift; w Hiwtidy_ja[$m]; };
    H.G w jaw[$js, $cb];
  Hiwtidy_ja: |
    die ;
    my @W = split ' ', $m;
    @W = grep { !H.r->get("W/$_") } @W;
    say "Wild: @W";
    my $js;
    for (@W) {
        # TODFO javascript guns
        #die;
        $js .= w jsrm(id=>$_);
    }
    saybl $js;
    $H->send($js) if $js;
    say "Done Hiwtidy";
    
  reextet: |
    my @olds = uniq map { /^H\/(.+)\/.+?$/ } `find life/H -type f`;
    @olds = grep {$_ ne "H.style/H.name"} @olds;
    say wdump[@olds];
    #$G->pub('S/hut/O', "reextet ".join",",@olds);
    # pipes gone, slurp ps and kill hup
    my @perls = map { /^\S+\s+(\d+)/||die'pspar'; $1 } 
        grep {/S\.pm/} `ps faux | grep perl`;
    say wdump[@perls];
    `rm $_` for `find life/ -type f`;
    for my $pid (@perls) {
        next if $pid eq $$;
        kill 'HUP', $pid;
    }
    H.G w reexec;
    

