--- 
I: 
  "0.1": 
    cole: 
      c: 
        el: 2
        s: "A.I.cole = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $h;\n    (h.r, h.g, h.b, h.a) = ($1, $2, $3, $4)\n        if $s =~ /^(\\w)(\\w)(\\w)(\\w)?$/ || die \"not cole: $s\";\n    if (defined h.a) {\n       # do an rgba(255,255,255,1)\n       for my $k (qw'r g b a') {\n           my $e = $h->{$k};\n           $e = \"$e$e\" if length $e == 1; # out of 255\n           $h->{$k} = hex $e;\n       }\n       h.la = sprintf '%.2f', h.la / 255; # out of 1\n       return \"rgba(h.r,h.g,h.b,h.a)\";\n    }\n    else {\n       return sprintf \"#%s%s%s\", h.r, h.g, h.b;\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 17ab7a97b981
      t: cole
      "y": '0.3'
    defsa: 
      c: 
        el: 2
        s: "A.I.defsa = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    s.v || s.et\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 77c95668df80
      t: defsa
      "y": '0.3'
    empc: 
      c: 
        el: 2
        s: "A.I.empc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    $s .= 'em' if $s !~ /(%|em|px)/;\n    $s =~ s/^-?0em$/0%/;\n    $s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a71a55805458
      t: empc
      "y": '0.3'
    hsle: 
      c: 
        el: 2
        s: "A.I.hsle = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @m;\n    for ($s) {\n        @m = split ' ', $_;\n        last if @m == 3 || @m == 4;\n        @m = split /\\./, $_;\n        last if @m == 3 || @m == 4;\n        @m = split '', $_;\n        last if @m == 3 || @m == 4;\n        @m = ();\n    }\n    @m || die \"not hsle: $s\";\n    my $h;\n    (h.h, h.s, h.l, h.a) = map{0+(\"0.\".$_)}@m;\n    \n    h.h = h.h * 360 if h.h < 1;\n    \n    $h->{$_} = ($h->{$_}*100).'%' for 's','l';\n    \n    my $al = \", h.a\" if defined h.a;\n    \"hsl\".($al?'a':'').\"(h.h, h.s, h.l$al)\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: bd33fc9e0ce6
      t: hsle
      "y": '0.3'
    hundr: 
      c: 
        el: 2
        s: "A.I.hundr = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s*100).'%';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 0082c413df9b
      t: hundr
      "y": '0.3'
    hunine: 
      c: 
        el: 2
        s: "A.I.hunine = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s*9).'%';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e335e609672f
      t: hunine
      "y": '0.3'
    mean: 
      c: 
        el: 2
        s: "A.I.mean = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($to,$fro,$mix,@Me) = @M;\n    my $I = A.I;\n    $mix ||= 0.5;\n    my $yu = $fro - $to;\n    $yu = $yu * $mix;\n    $fro -= $yu;\n    $fro\n};\n"
      sc: 
        acgt: to,fro,mix
        args: A,C,G,T,to,fro,mix
        code: I 1
        dige: e465093efb10
      t: mean
      "y": '0.3'
    meat: 
      c: 
        el: 2
        s: "A.I.meat = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($k,$v,@Me) = @M;\n    my $I = A.I;\n    my $f = $v;\n    my $mv = C.sc->{$k};\n    $f = I.d&mean,$f,$mv;\n    C.sc->{$k} = $f;\n};\n"
      sc: 
        acgt: k,v
        args: A,C,G,T,k,v
        code: I 1
        dige: 16486e072e02
      t: meat
      "y": '0.3'
    mksc: 
      c: 
        el: 2
        s: "A.I.mksc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $t = I.d&mos,$s;\n    I.d&xot,C.sc,$t;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6c70a35929b6
      t: mksc
      "y": '0.3'
    mos: 
      c: 
        el: 2
        s: "A.I.mos = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @t = split ',',$s;\n    for (@t) {\n        my ($k, $v) = split ':', $_;\n        $T.>$k = $v;\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 79ec92d3b771
      t: mos
      "y": '0.3'
    numb: 
      c: 
        el: 2
        s: "A.I.numb = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s);\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: cfe09d49b1d6
      t: numb
      "y": '0.3'
    ori: 
      c: 
        el: 2
        s: "A.I.ori = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    @{s.et} > 2 && die \"Many et for ori s.v: @{s.et}\";\n    my ($t,$f) = @{s.et};\n    return s.v =~ /[1ay]/ ? $t : $f\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d68915c91260
      t: ori
      "y": '0.3'
    plus: 
      c: 
        el: 2
        s: "A.I.plus = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    s.v + s.et\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: b7dfa07a876d
      t: plus
      "y": '0.3'
    radun: 
      c: 
        el: 2
        s: "A.I.radun = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $o = $RADIAN*4;\n    my $swish = $o;\n    $swish *= -1 if $s < 0;\n    my $i = 0;\n    my $ori = $s;\n    $s -= $swish until\n        do {$i++>5&&die\"$i muchwind from $ori ... $s\";0}\n        ||\n        $o*-1 < $s && $s < $o;\n    return $s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: abfde1e30618
      t: radun
      "y": '0.3'
    saydeg: 
      c: 
        el: 2
        s: "A.I.saydeg = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s).'deg';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 5e7ada839c6c
      t: saydeg
      "y": '0.3'
    saypx: 
      c: 
        el: 2
        s: "A.I.saypx = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return $s if $s =~ /px$/;\n    $s.'px';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 45775017d410
      t: saypx
      "y": '0.3'
    sayurl: 
      c: 
        el: 2
        s: "A.I.sayurl = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    \"url('$s')\"\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 586d4e0b28ea
      t: sayurl
      "y": '0.3'
    shadole: 
      c: 
        el: 2
        s: "A.I.shadole = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @m = split m/\\s/, $s;\n    $m[-1] = I.d&cole,$m[-1];\n    return sprintf '%dpx %dpx %dpx %s', @m;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 72d2fab5b281
      t: shadole
      "y": '0.3'
    whipre: 
      c: 
        el: 2
        s: "A.I.whipre = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return $s =~ /[1p]/ ? 'pre' : \n    $s =~ /[2n]/ ? 'nowrap' : \n    die \"Canot $s whipre?\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1f6463e93179
      t: whipre
      "y": '0.3'
    wordbreakwords: 
      c: 
        el: 2
        s: "A.I.wordbreakwords = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die \"Wordbreaku: $s\" if $s ne '1';\n    'break-word';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: fec6238facc3
      t: wordbreakwords
      "y": '0.3'
Ii: 0.3	cole:HASH + 0.3	defsa:HASH + 0.3	empc:HASH + 0.3	hsle:HASH + 0.3	hundr:HASH + 0.3	hunine:HASH + 0.3	mean:HASH + 0.3	meat:HASH + 0.3	mksc:HASH + 0.3	mos:HASH + 0.3	numb:HASH + 0.3	ori:HASH + 0.3	plus:HASH + 0.3	radun:HASH + 0.3	saydeg:HASH + 0.3	saypx:HASH + 0.3	sayurl:HASH + 0.3	shadole:HASH + 0.3	whipre:HASH + 0.3	wordbreakwords:HASH
