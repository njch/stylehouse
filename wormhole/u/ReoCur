--- 
Ii: J_3212 0.3212 ARRAY 0:HASH
Sev: 
  "0.3212": 
    J_3212: 
      c: 
        s: "A.I.J_3212 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $c = C.c;\nmy $J = C.c.J;\nmy $Y = C.c.Y;\nmy $lv = C.y.lv;\nmy $vl = C.y.vl;\n# eat, rob, art\nreturn sayre \"J.name is not mo: J.mo.J.name but is trying to have curve\"\n    if $J ne J.mo.J;\nmy $host;\nif (C.c.root) {\n    $host = C.sc.anch || 'TeCurve';\n    return $host eq 'TeCurve' || sayre \"topleve C.t is self\"\n        if $host eq C.t;\n    return saygr \"top C.t is blank anch, C.sc.geo\" if $host eq '1';\n    my ($cur) = map {_.nj}\n    n $host =>$C\n    my $wat = cur.El.Duv.ids->{C.sc.id};\n    C.sc.geo = wat.sc.geo || die \n    \"not foundcurve A.J.name fo J.name fo C.t ion $host: \".wdump [\n        $cur,\n        (IDD=>map{ki $_} values %{cur.El.Duv.ids}),\n        cur.El.Duv.tv\n    ];\n}\nelse {\n    $host = 'Claw';\n    my $st;\n    $st = Y.stackurv ||= do {\n        st.J = Rw findupi $I $J curv;\n        st.l = 'self curv';\n        st.J ||= do {\n            st.l = \"$host curv\";\n            Rw findupi $I $J:host curv;\n        };\n        $st\n    };\n    my $cJ = st.J;\n    $host = \"st.l\";\n    Rw curre $I $J:cJ $Y:cJ.El.Pre $V:cJ.El.Duv $C;\n}\nsaybl \"$host: C.y.cv       C.t   found  C.sc.geo\" if J.V;\n# might wanna crawl\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev
        dige: ec81c38ca573
        gk: J
        nk: c
        of: Sev
        rg: J,Y,ylv,yvl
        v: cJ
      t: J_3212
      "y": 
        cv: '0.3212'
