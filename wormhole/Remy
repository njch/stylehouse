--- 
I: 
  "0.1": 
    AZu: 
      c: 
        el: 1
        s: "A.I.AZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die 'amany' if keys %$s > 1;\n    my ($cv,$ac) = %$s;\n    my ($AA,$CC,$cov) = @$ac;\n    my $aa = $AA?\"AAcv=AA.cv\":\"NoAA\";\n    $AA ||= $A; # spawning cone thing\n    I.d&n,$AA,$CC,$G,$T;\n    $A = $AA;\n    # see I.ex, changes A.cv = $vb to avoid A.t fulfilling exited time\n    if (A.cv > $cv) {\n        #sayre \"Double comback A.cv > $cv: CC.t CC.y.cv \";\n        #return T.not = 1;\n    }\n    A.cv = $cov || $cv;\n    $T->{$_} = A.T->{$_} for keys %{A.T||{}};\n    I.d&An;\n    T.whack = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6faf184f70d4
        gro: Indulator/Servo
        l: Motion/oseverato
      t: AZu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    Act: 
      c: 
        el: 1
        s: "A.I.Act = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $A = {%$s};\n        $A->{mo}->{ont} = $A;\n        $A->{s} = shift @{$A->{N}};\n        $T = {};\n        $T->{oM} = [];\n        $I->{d}->(\"n\",$A,{},$G,$T);\n        $I->{d}->(\"An\");\n        $A->{t}->(\"2\");\n        map{$I->{nF}->{$_}}qw'A C T';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e24a2c98dffd
        gro: Indulator/Motion
      t: Act
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    An: 
      c: 
        el: 1
        s: "A.I.An = sub {\n    my ($A,$C,$G,$T,@Me) = @_;\n    my $I = A.I;\n        $A->{note} = {}; # pinging csc\n        $A->{talk} = \"$A->{J}->{name} \".($A->{J}->{le} && $A->{J}->{le}->{name});\n        $A->{c} = sub { $I->{d}->(\"c\",@_); };\n        $A->{e} = sub { $I->{d}->(\"e\",@_); };\n        $A->{us} = sub { $I->{d}->(\"us\",@_); };\n        $A->{t} = sub { $I->{d}->(\"t\",@_); };\n        $A->{V} = sub {\n            my $bl = shift;\n            $A->{J}->{VV} && $A->{J}->{VV}->{$bl}\n            || $A->{J}->{V}\n        };\n        $A\n};A.I.d&An;\n"
      sc: 
        acgt: 1
        args: A,C,G,T
        code: I 1
        dige: fb63d04c1357
        gro: Indulator/Motion
      t: An
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    Cngk: 
      c: 
        el: 1
        s: "A.I.Cngk = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$D,@Me) = @M;\n    my $I = A.I;\n    ref $A || die \"nmonref A!\";\n    aft { $@ .= \"\\nLookat: \".ki($s).\"\\nWith: \".ki($D) if $@ };\n    return 1 if D.c.any;\n    die \"nonNKnk\".ki$D if !D.c.nk;\n    return 0 if !exists $s->{D.c.nk};\n    return [$s->{D.c.nk}] if !exists D.c.gk;\n    return 0 if !exists $s->{D.c.nk}->{D.c.gk};\n    return [$s->{D.c.nk}->{D.c.gk}];\n};\n"
      sc: 
        acgt: s,D
        args: A,C,G,T,s,D
        code: I 1
        dige: 1ce95658c144
        gro: Indulator/C
      t: Cngk
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    ECu: 
      c: 
        el: 1
        s: "A.I.ECu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # extend C on the way in to another dome, magnetised into our M\n    # probably for collapsing roooves...\n    # dumber than sc decompresphere & playing out\n    # (is mailing itself further instructions, intro c, further lines)\n    # an In persona, joining our M\n    # push to dome\n    # that must in  A\n    ref $s eq 'ARRAY' || die;\n    my ($N,$c) = @$s;\n    # take 4s v             add 3s v         next 2 \n    $N = [{MZ=>A.fl}, {MZ=>{'3 doex'=>$c}}, @$N];\n    # and In could feel our light cone\n    Rw In $J:A.J $M:T.oM $N;\n    # ^but instead push to A.N and A.No, the sister strand Whare Y Whare\n    # and A walks through t&Y, d&Whare(6)\n    # turns via n&ACGT\n    # the time beams mapped... a W concat couldol\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c5cb93541aaa
        gro: Indulator/Servo
        l: Motion
      t: ECu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    EZu: 
      c: 
        el: 1
        s: "A.I.EZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $Z = I.d&iZu,$s;\n    warn \"About EZ\";\n    for my $k (sort keys %$Z) {\n        my $N = $Z->{$k};\n        $N = [ map { [$_] } split \"\\n\",$N ] if !ref $N;\n        Rw In $M:T.oM $N;\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6f35ecc1311d
        gro: Indulator/Servo
        l: Motion
      t: EZu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    El: 
      c: 
        el: 1
        s: "A.I.El = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= {bb=>{},name=>$name};\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 9fd87735d303
        gro: Modems/Pha
        l: "#c without a self"
      t: El
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    Elj: 
      c: 
        el: 1
        s: "A.I.Elj = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= Rw Jto - $le:J $name;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 3001808fbcce
        gro: Modems/Pha
        l: "#c with a self"
      t: Elj
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    Elvis: 
      c: 
        el: 1
        s: "A.I.Elvis = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$Y,@Me) = @M;\n    my $I = A.I;\n    my $wtf = I.d&wtfch,J.bb,Y.bb;\n    \n    Y.tw ||= {};\n    Y.lo = {}; # compile\n    \n    for my $mo (qw'gone diff new') {\n        for my $r (keys %{$wtf->{$mo}}) {\n            my $j = I.d&rJ,$r,$J;\n            j.r = $r;\n            j.lt = j.cv.\"\\t\".j.t;\n            if (!j.lt=~/\\S/) {\n                die \"Got $r =>   \".ki $j;\n            }\n            if ($mo eq 'gone') {\n                delete Y.bb->{j.r};\n                delete Y.tw->{j.lt}->{j.style};\n            }\n            else {\n                Y.bb->{j.r} = j.s;\n                Y.tw->{j.lt}->{j.style} = j.s;\n            }\n            Y.lo->{j.lt}->{$mo}->{j.style} = j.s;\n        }\n    }\n    \n    Y.tv ||= {};\n    Y.v ||= {};\n    Y.go = {};\n    my $same = 1;\n    for my $k (keys %{Y.lo}) {\n        my $tf = Y.lo->{$k};\n        my $cs = Y.tw->{$k};\n        if (tf.new && !tf.gone && !tf.diff && keys %{tf.new} == keys %$cs) {\n            $same = 0; # new line to make\n        }\n        if (tf.gone && !keys %$cs) {\n            $same = 0; # line to disappear\n            my $C = Y.go->{$k} = delete Y.tv->{$k};\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            delete Y.v->{$cv}->{$t};\n            delete Y.v->{$cv} unless keys %{Y.v->{$cv}};\n        }\n        if (tf.diff || tf.new) {\n            keys %$cs || die 'nokeys';\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            defined $cv || die \"twas $k\";\n            my $foam = sub {\n                my $C = shift;\n                %$C = (t=>$t,y=>{cv=>$cv},c=>{},sc=>{%$cs});\n                C.c.s = delete C.sc->{''} if exists C.sc->{''};\n            };\n            $foam->(Y.tv->{$k} ||= {});\n            $foam->(Y.v->{$cv}->{$t} ||= {});\n        }\n    }\n    if (!$same) {\n        Y.vs = [];\n        Y.kvi = {};\n        Y.cvi = {};\n        my $i = 0;\n        for my $k (sort keys %{Y.tv}) {\n            my $C = Y.tv->{$k} || die \"wtf $k\";\n            push @{Y.vs}, $C;\n            Y.kvi->{$k} = $i;\n            Y.cvi->{C.y.cv} ||= $i;\n            $i++;\n        }\n    }\n    \n    Y.ra = I.d&ratio,wtf.sami,wtf.tot;\n    Y.rato = wtf.tot;\n    Y.revs = !$same;\n    \n    $Y;\n};\n"
      sc: 
        acgt: J,Y
        args: A,C,G,T,J,Y
        code: I 1
        dige: 396ec3428b81
        gro: Modems/Pha
        l: "#c"
      t: Elvis
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    MZu: 
      c: 
        el: 1
        s: "A.I.MZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $uM = sub {\n        my ($k,$v) = @_;\n        if (defined $v && $v eq '0') {\n            delete A.fl->{$k}\n        }\n        else {\n            A.fl->{$k} = $v || 1;\n        }\n    };\n    ref $s eq 'HASH' ?\n        map{ $uM->($_,$s->{$_}) } keys %$s\n    :   map{\n            /^(.+?)(?::(.+))?$/ || die;\n            $uM->($1,$2);\n        } split /\\s+/, $s;\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 3ae04b5b0475
        gro: Indulator/Servo
      t: MZu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    Other: 
      c: 
        el: 1
        s: "A.I.Other = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $ar = $F[0]->{ar};\n        $A = $G->{w}->(\"RB\", {%$ar, t => $s}, $G);\n        $I = $A->{I};\n        # midnight at the oasis\n        $I->{d}->(\"n\",$A,{},$G,{});\n        $I->{d}->(\"An\");\n        $A->{t}->(\"1\");\n        $A->{t}->(\"11111\") || warn \"NO 1\";\n        ($A,$A->{I})\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 9e38e8306a8d
        gro: Indulator/Motion
      t: Other
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    Tat: 
      c: 
        el: 1
        s: "A.I.Tat = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $at = delete $T->{at};\n        $at || die \"youAT\";\n        $C->{sc}->{$_} = $at->{$_} for keys %$at; # sizling update sprites\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 0a4f4c661b5b
        gro: Indulator/Motion
      t: Tat
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    WZu: 
      c: 
        el: 1
        s: "A.I.WZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $Z = I.d&iZu,$s;\n    warn \"About WZ\";\n    for my $k (sort keys %$Z) {\n        my $s = $Z->{$k};\n        die wdump $s if ref $s ne 'ARRAY';\n        unshift @{A.N}, @$s;\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a36724ae5aaf
        gro: Indulator/Servo
        l: Motion
      t: WZu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    array: 
      c: 
        el: 1
        s: "A.I.array = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return I.d&fourreal,$s if @$s != 1 && !ref $s->[0] || $s->[0] =~ /^\\w+$/;\n    return I.d&fourstring,$s->[0] if @$s == 1 && !ref $s->[0];\n    # should stick In in first and M it? \n    # kind of motion that wants to be unsure in the wild\n    unshift @{A.N}, @$s;\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1621c6fcf424
        gro: Indulator/SlideEa
      t: array
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    as: 
      c: 
        el: 1
        s: "A.I.as = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$x,@Me) = @M;\n    my $I = A.I;\n    for (qw'begin bb ord tim wtf') {\n         exists $x->{$_} || next;\n         my $v = $x->{$_};\n         $v = [@$v] if ref $v eq 'ARRAY';\n         $v = {%$v} if ref $v eq 'HASH';\n         $s->{$_} = $v;\n    }\n};\n"
      sc: 
        acgt: s,x
        args: A,C,G,T,s,x
        code: I 1
        dige: e6a7402c5fdd
        gro: Modems/Pha
      t: as
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    bandon: 
      c: 
        el: 1
        s: "A.I.bandon = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    delete s.J.phy->{s.name};\n    s.abandoned = 1;\n    if (my $x = s.head) {\n        I.d&as,$s,$x;\n    }\n    I.d&end,$s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e6de6441b8ff
        gro: Modems/Pha
      t: bandon
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    c: 
      c: 
        el: 1
        s: "A.I.c = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    I.d&inDin,$C,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: a931936381c2
        gro: Indulator/C
      t: c
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    carebowl: 
      c: 
        el: 1
        s: "A.I.carebowl = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$iii,$x,$xrd,@Me) = @M;\n    my $I = A.I;\n    for my $ik (sort keys %$iii) {\n        my $D = $iii->{$ik};\n        if (my $nk = D.sc.nk) {\n            my $C = I.nF.C;\n            next if !exists $C->{$nk};\n            if (my $gk = D.sc.gk) {\n                next if !exists $C->{$nk}->{$gk};\n            }\n        }\n        my $act;\n        my $dont;\n        if (D.sc.acgt && D.sc.act) {\n            $act = 1;\n            # acgtsubs can be defined at any cv\n            # run themselves if act\n            # usu. one receiver (Ci) and the rest scheme\n            die \"D.t .act gets... D.sc.act\" if D.sc.act ne '1';\n            $dont = 1 if exists A.I->{D.t};\n        }\n        # way or acgt-setuping-way\n        unless ($dont) {\n            my $paw = join\"_\",'',I.k,I.cv,D.t;\n            $paw =~ s/\\W//g;\n            Rw $paw $A $C $G $T $__D:D;\n        }\n        # most tiny ticks\n        # this ind is all flywheel\n        # it's a kind of unity that wants to be a block of code like this\n        # and c\n        my @is = A.s;\n        @is = I.d&scIfs,D.sc.Ifs if D.sc.Ifs;\n        @is || next;\n        if ($act) {\n            push @$xrd, [I.k,$ik];\n            my $Ds = $x->{I.k}->{$ik} ||= {};\n            Ds.D = $D;\n            Ds.is = \\@is;\n            D.sc.its = @is;\n        }\n        # TreeD\n        $s->{I.k}->{I.cv}->{$ik} = $D;\n    }\n};\n"
      sc: 
        acgt: s,iii,x,xrd
        args: A,C,G,T,s,iii,x,xrd
        code: I 1
        dige: 1e38d8a681fb
        gro: Indulator/KnowTime
        l: "#c"
      t: carebowl
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    convog: 
      c: 
        el: 1
        s: "A.I.convog = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($in,$Q,@Me) = @M;\n    my $I = A.I;\n    Q.path && Q.onpa || die \"learn more\";\n    for my $pin (@{Q.path}) {\n        for my $pTn (@{Q.onpa}) {\n            I.d&pass,$pTn,$in;\n        }\n        I.d&pass,$pin,$in;\n    }\n};\n"
      sc: 
        acgt: in,Q
        args: A,C,G,T,in,Q
        code: I 1
        dige: f7fad22aaec1
        gro: Seven/Yools
      t: convog
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    d: 
      c: 
        el: 1
        s: "A.I.d = sub {\n    my ($s,@Me) = @_;\n    my $I = A.I;\n    # grease thje stomac\n    shift; # imporo\n    my $y = $I->{$s} || die \"no way named '$s'\";\n    my $P = I.nF ||= {};\n    P.A||die'PnoA!?'; # papto\n    $y->(P.A,P.C,P.G,P.T,@_);\n};\n"
      sc: 
        acgt: 1
        args: s
        code: I 1
        dige: 477afcd6828d
        gro: Indulator/IStuff
      t: d
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/IStuff/IStuff
    e: 
      c: 
        el: 1
        s: "A.I.e = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    I.d&inDin,C.c.e,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: 06747ef15695
        gro: Indulator/C
      t: e
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    end: 
      c: 
        el: 1
        s: "A.I.end = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = s.J.phl->{s.name} ||= {name=>s.name, l=>[]};\n    s.ended = hitime();\n    delete s.J.phy->{s.name};\n    shift @{y.l} while @{y.l} > 5;\n    # layers ^ rolling in time index .r -> the y.l\n    # so last phase of $name can be found?\n    push @{y.l}, $s;\n    if (s.bb) {\n        my $w = @{y.l};\n        y.l_bb->{$_} = $w for keys %{s.bb};\n    }\n    # somewhere thinks about what happened\n    $y\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 45e558668e71
        gro: Modems/Pha
      t: end
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    ex: 
      c: 
        el: 1
        s: "A.I.ex = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($i,$K,$cv,$av,@Me) = @M;\n    my $I = A.I;\n    # was Rw SNat $A $C $G $T $I $i $K $cv;\n    # baseism\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    my $sp = $av ? \" Flav $av (no A.cv)\" : \"\";\n    \n    my $talk = \"A.talk: $K$sp $Av > $c --- C.t \";\n    \n    my $aim = {$K=>1};\n    if ($aim->{A.am}) {\n        $aim->{$_} = 1 for @{A.Isl||[]};\n        aim.I = 1;\n    }\n    \n    my $yv = {};\n    # make K/cv/t -> cv/K/t\n    for my $k (sort keys %$i) {\n        my $ii = $i->{$k};\n    \n        next if $k eq 'Ii';\n        next if $k eq 'ooI';\n        ref $ii eq 'HASH' || die \"weird $k=$ii\";\n    \n        for my $vc (sort keys %$ii) {\n            my $iii = $ii->{$vc};\n            die'$k !0<$vc<1' unless $vc > 0 && $vc < 1;\n            $yv->{$vc}->{$k} = $iii;\n        }\n    }\n    \n    # do stuff\n    my $vb; # in fractions\n    my $wasSubtle;\n    for my $vc (sort keys %$yv) {\n        my $is = $yv->{$vc};\n        my $s = {};\n        my $x = {};\n        my $xrd = [];\n    \n        next if $vc <= $Av && $vc != $c;\n        next if $vc > $c;\n    \n        # our  osc (stay in K per Subtle ness);\n        my @iz = grep {\n            $aim->{$_} || (aim.I && (A.Iso->{$_} || I.also->{$_}))\n        } sort keys %$is;\n        next if !@iz;\n    \n        # decide inter cv wideness loop\n        if ($wasSubtle) {\n            undef $wasSubtle;\n        }\n        elsif ($vb && $vc > $vb && (\n            @{A.N} || @{A.mo.re->{$vb}||[]}\n            )) {\n            # sincing, wide order\n            # various others want to be around for only some of the process...\n            sayre \"$vb -> $vc  bump, \". @{A.N} if A.J.V > 1;\n            T.Z->{$vb} = 1;\n            A.cv = $vb; # so we dont wind up to 6 on the way out of t\n            return T.not = 1;\n        }\n    \n        # pin down poles\n        I.cv = $vc;\n        I.vb = $vb;\n        # draw curvles as spirals done\n    \n        for my $k (@iz) {\n            my $iii = $is->{$k};\n            I.k = $k;\n            I.d&carebowl,$s,$iii,$x,$xrd;\n        }\n        # suble\n        my $se = Rw TreeD $s $scby=gro \n            if A.J.V > 1 && keys %$s;\n        $c == 0.1 ? saygr $se : say $se if $se;\n    \n        my $o;\n        (o.vc,o.vb) = ($vc,$vb);\n        I.d&exood,$o,$x,$xrd;\n        ($vc,$vb) = (o.vc,o.vb);\n        if (o.Subtle && !o.nonSubtle) {\n            $wasSubtle = 1;\n        }\n    \n        return if T.not;  # will &z, oseve\n        return if delete T.whack;\n    }\n};\n"
      sc: 
        acgt: i,K,cv,av
        args: A,C,G,T,i,K,cv,av
        code: I 1
        dige: c1559663dda3
        gro: Indulator/KnowTime
        nois: "#c"
      t: ex
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    exactl: 
      c: 
        el: 1
        s: "A.I.exactl = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $q = shift;\n    my $y = I.d&end,$s;\n    my $cur = y.l->[-1];\n    my $last = y.l->[-2];\n    $cur eq $s || die \"sidf$cur $s\";\n    last.bb ||= {};\n    \n    my $wtf = I.d&wtfch,cur.bb,last.bb;\n    \n    delete s.J.bb->{$_} for keys %{wtf.gone};\n    \n    # see s.extill, time passing interesto...\n    # churn stats like 30% of last disappear, 20% new\n    s.wtf = $wtf;\n    $wtf;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c98060f45a3a
        gro: Modems/Pha
        l: "#c un-ins things from J"
      t: exactl
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    exood: 
      c: 
        el: 1
        s: "A.I.exood = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$x,$xrd,@Me) = @M;\n    my $I = A.I;\n    for my $kik (@$xrd) {\n        my ($k,$ik) = @$kik;\n        A.Subtle && A.Subtle->{$k} ? o.Subtle++ : o.nonSubtle++;\n        my $Ds = $x->{$k}->{$ik};\n        my $D = Ds.D;\n        for my $s (@{Ds.is}) {\n            D.sc.acgt eq 's'||die \"nonacgts\".wdump $D;\n            exists A.I->{D.t}||die \"acgtI D.t not up: \".wdump A.I;\n    \n            I.d&D.t,$s;\n    \n            I.acted and I.d&acted,$s;\n    \n            if (my $ut = T.ut) {\n                if (ut.matchTd) {\n                    my $d = s.d || die \"confuse\";\n                    d.od.s.T.q->{d.e.k} ||= $d;\n                    d.od.s.T.m->{d.e.k} ||= $d\n                        unless delete(T.noTd);\n                }\n                else { die\"utrowhat \".wdump 2, $ut }\n            }\n    \n            # outwave: schools of many fish (not upcv if !@is)\n            o.vb ||= o.vc if D.sc.v;\n    \n            last if T.not || T.whack;\n        }\n        delete T.ut;\n        last if T.not || T.whack;\n    }\n};\n"
      sc: 
        acgt: o,x,xrd
        args: A,C,G,T,o,x,xrd
        code: I 1
        dige: 6c322e69916e
        gro: Indulator/KnowTime
        l: "#c"
      t: exood
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    flywheels: 
      c: 
        el: 1
        s: "A.I.flywheels = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # wants to be a six alwayser... ,{code=>'I 6',act=>'all'} # $II->{All}? $II->{Fly}?\n        # its $I->{d}->(\"nded\") and holds things to code, $v a spiral it's filling up\n        # $v could be mounted... aj8 mysteries\n        for my $k (sort keys %{$A->{fl}}) {\n            my $v = $A->{fl}->{$k};\n            #   ^ bus to ride\n            $k = $2 if $k =~ /^(\\d+) (.+)$/;\n            $G->{w}->(\"ym/$k\", {I => $I, J => $A->{J}, A => $A, C => $C, v => $v, G => $G, T => $T}, $G);\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6a90e0b56807
        gro: Indulator/Motion
      t: flywheels
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    fourreal: 
      c: 
        el: 1
        s: "A.I.fourreal = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    (C.t, C.y) = @$s;\n    C.c  = $s->[2] if exists $s->[2];\n    C.sc = $s->[3] if exists $s->[3];\n    die'@>4'.wdump $s if @$s > 4;\n    die\"C.t from \".wdump $s if ref C.t; # dives\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 87baea0c56c8
        gro: Indulator/C
      t: fourreal
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    fourstring: 
      c: 
        el: 1
        s: "A.I.fourstring = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    I.d&MZu,$1 if $s =~ /^\\s*#?\\s*MZ (.+)$/;\n    if ($s =~ /^\\s*(#.*)$/) {\n       T.not = 1;\n       T.com = $1;\n    }\n    elsif ($s eq '') {\n       T.not = T.space = 1;\n    }\n    else {\n       my $ci = $s;\n       for my $nk (qw't y c sc') {\n           if ($ci =~ s/^(\\S+) *//) { # some t are types of space\n               my $v = $1;\n               $v = I.d&peel,$v if $nk ne 't' && $v =~ I.peels;\n               # << consumes more lines into $nk, then ...\n               $v = '' if $v =~ /^(''|\"\")$/;\n               $C->{$nk} = $v;\n           }\n       }\n    }\n    saybl \"4string: $s            \".ki $C;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 173505d9057f
        gro: Indulator/C
      t: fourstring
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    hash: 
      c: 
        el: 1
        s: "A.I.hash = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return %$C = %$s if exists s.t && s.y && s.c;\n    # some talking to self - how to C over exactly\n    # the object could be live\n    I.d&servehash,$s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d4c8ca29125b
        gro: Indulator/SlideEa
      t: hash
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    heq: 
      c: 
        el: 1
        s: "A.I.heq = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t,@Me) = @M;\n    my $I = A.I;\n    if (ref $o && ref $t) {\n        keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o\n    }\n    elsif (!ref $o && !ref $t) {\n        $o eq $t\n    }else{0}\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: cf50b212c65c
        gro: Seven/Yools
      t: heq
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    iZu: 
      c: 
        el: 1
        s: "A.I.iZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $way = $s =~ s/^\\/// ? 'fund' : 'muck';\n    my $Z = Rw $way - $p:s $dclone=1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: ba2b027e931c
        gro: Indulator/Servo
      t: iZu
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    inDin: 
      c: 
        el: 1
        s: "A.I.inDin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$D,@Me) = @M;\n    my $I = A.I;\n    die'nofA' if !I.nF.A;\n    #\n    return () unless defined $s;\n    return $s if $D eq 'C';\n    #\n    shift @M; # s\n    $D = I.d&interpD,@M if !ref $D;\n    #\n    my $v = I.d&Cngk,$s,$D;\n    #\n    return () unless $v;\n    # blankgk\n    A.note->{D.c.nk}->{D.c.gk} = $v if A.note;\n    #\n    die 'mulitAn' if @$v > 1;\n    if (D.c.as eq 'list') {\n        ref $v eq 'ARRAY' || die 'Cngk not array';\n        return @$v;\n    }\n    return 1;\n};\n"
      sc: 
        acgt: s,D
        args: A,C,G,T,s,D
        code: I 1
        dige: bc7f2cfdcb5f
        gro: Indulator/C
      t: inDin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    interpD: 
      c: 
        el: 1
        s: "A.I.interpD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($nk,$gk,@Me) = @M;\n    my $I = A.I;\n    my $defnk = 'c';\n    return $nk if ref $nk;\n    my $D = {};\n    D.c.as = 'list' if 1 || $nk =~ s/^_//;\n    while ($gk =~ s/^%(.+?):(.+?)(?=%|$)//g) {\n        D.c->{$1} = $2;\n        pop @M if @M == 2;\n    }\n    if (@M == 1 && $nk eq 't') {\n        D.c.nk = $nk;\n    }\n    elsif (@M == 1) { # or from t,,,\n        D.c.nk ||= $defnk;\n        D.c.gk ||= $nk;\n    }\n    elsif (@M == 2) {\n        D.c.nk = $nk;\n        D.c.gk = $gk;\n    }\n    delete D.c.gk if D.c.gk eq 'NOGK';\n    $D\n};\n"
      sc: 
        acgt: nk,gk
        args: A,C,G,T,nk,gk
        code: I 1
        dige: 688db989ec06
        gro: Indulator/C
      t: interpD
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    jamsc: 
      c: 
        el: 1
        s: "A.I.jamsc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $ar = $s;\n    my $sc = ar.sc || {};\n    my $J = ar.J || die \"jamsc noj\".ki$s;\n    ar.C = ar.d if ar.d;\n    my $t = defined ar.t ? ar.t\n        : ar.j ? ar.j.l\n        : ar.C ? ar.C.t : die'not';\n    my $cv = defined ar.cv ? ar.cv\n        : ar.j ? ar.j.cv\n        : ar.C ? ar.C.cv || ar.C.y.cv : die'cvoy';\n    \n    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {\n        my $J = ar.oJ;\n        if (my $ljm = J.A.ljm) {\n            my $Me = \"ar.oJ.ind ar.J.name \"\n            .\" J.A.ljmo <<< J.name  sends:\"\n            .\" $t\\t$cv  $ljm\";\n            sayyl $Me if J.V || ar.J.V;\n            push @$ljm, {%$ar};\n        }\n    }\n    \n    my @fobz;\n    push @fobz, [$cv,$t,undef,ar.s] if exists ar.s;\n    push @fobz, [$cv,$t,$_,$sc->{$_}] for keys %$sc;\n    my @tobz = map {\n        my ($cv,$t,$s,$v) = @$_;\n        my $r;\n        if (J.tt) { # FUTU\n            $r = $cv.\"\\t\".$t.\"\\t\".$s;\n        }\n        else {\n            my $s = $s;\n            $s = '%'.$s if $s;\n            $r = $t.$s.\"\\t\".$cv;\n        }\n        if ($s) {\n            ar.C.sc->{$s} = $v;\n        }\n        [$r,$v]\n    } @fobz;\n    \n    for (@tobz) {\n        my ($r,$v) = @$_;\n        J.bz->($r,$v);\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e4b9a5326152
        gro: Modems/Jamsc
        l: "#c"
      t: jamsc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Jamsc/Jamsc
    moy: 
      c: 
        el: 1
        s: "A.I.moy = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # groups, spread the moise over A\n        my $i = $A->{mo}->{y}->{$s}||die\"no$s\";\n        my $is = $i->{$C->{y}->{p}}; # things in our C's pool\n        {is=>$is,N=>[map{$is->{$_}}sort keys %$is]};\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 2fb4d87f09eb
        gro: Indulator/Motion
      t: moy
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    "n": 
      c: 
        el: 1
        s: "A.I.n = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($AA,$CC,$GG,$TT,@Me) = @M;\n    my $I = A.I;\n    I.nF = {A=>$AA,C=>$CC,G=>$GG,T=>$TT};\n};\n"
      sc: 
        acgt: AA,CC,GG,TT
        args: A,C,G,T,AA,CC,GG,TT
        code: I 1
        dige: 84db0b320205
        gro: Indulator/IStuff
      t: 'n'
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/IStuff/IStuff
    oseverato: 
      c: 
        el: 1
        s: "A.I.oseverato = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        if ($T->{d}) {\n            $A->{T}->{d} = $T->{d}; # carte\n        }\n        if (my $z = delete $T->{Z}) { # tease out the next times\n            my ($lo) = sort keys %$z; # next one\n            my $v = $z->{$lo};\n            push @{$A->{mo}->{re}->{$lo} ||= []},\n                ref $v eq 'ARRAY' ? @$v :\n                $v ne '1' ? [$A,$C,$v] :\n                [$A,$C];\n            @{$T->{oM}} = ();\n        }\n        if (!@{$A->{mo}->{N}} && $A->{mo}->{re}) {\n            my $ats = $A->{mo}->{re} || {};\n            my @wa = sort keys %$ats;\n            my ($lo) = @wa;\n            if ($lo) {\n                my $ay = delete $ats->{$lo};\n                my @N = map { {AZ=>{$lo=>$_}} } @$ay;\n                push @{$A->{mo}->{N}}, @N;\n                saybl \"Looping \".@N.\" to $lo\" if $A->{J}->{V} > 1;\n            }\n        }\n        # concoi severaliser, for conglom up; merging spiral snips of code\n        if (my $y = $T->{y}) {\n            for my $k (keys %$y) {\n                $A->{mo}->{y}->{$k}->{$C->{y}->{p}}->{$C->{y}->{cvt}} = $C;\n            }\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c2111bfab654
        gro: Indulator/Motion
      t: oseverato
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
    pas: 
      c: 
        el: 1
        s: "A.I.pas = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$d,@Me) = @M;\n    my $I = A.I;\n    my $s = d.s;\n    my $e = d.e;\n    my @ks = $pin eq '*' ? sort keys %$s\n        : exists $s->{$pin} ? $pin\n        : ();\n    map {\n        my $dd;\n        dd.e.k = $_;\n        dd.s = $s->{$_};\n        dd.d = d.d if d.d;\n        $dd;\n    } @ks\n};\n"
      sc: 
        acgt: pin,d
        args: A,C,G,T,pin,d
        code: I 1
        dige: f6ee4585b5c1
        gro: Seven/Yools
      t: pas
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    pass: 
      c: 
        el: 1
        s: "A.I.pass = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$s,@Me) = @M;\n    my $I = A.I;\n    @$s = grep{defined} map { I.d&pas,$pin,$_ } grep{defined} @$s;\n};\n"
      sc: 
        acgt: pin,s
        args: A,C,G,T,pin,s
        code: I 1
        dige: f2135db4468e
        gro: Seven/Yools
      t: pass
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    peel: 
      c: 
        el: 1
        s: "A.I.peel = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    $s =~ s/^%// || \n        $s =~ s/^{// && $s =~ s/}$//\n        || die \"unpealable $s\";\n    my $c;\n    for (split ',', $s) {\n        my ($k, $v) = split ':', $_, 2;\n        $v = 1 if !defined $v;\n        $c->{$k} = $v;\n    }\n    $c||{}\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 86d02e052c88
        gro: Indulator/C
      t: peel
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    peels: 
      c: 
        el: 1
        s: "A.I.peels = (sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    qr/^[\\{\\%]/;\n})->($A,$C,$G,$T);\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 2cef197e1b39
        gro: Indulator/C
        subpeel: 1
      t: peels
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    pha: 
      c: 
        el: 1
        s: "A.I.pha = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    # tracked being\n    # temporal phatness, per suJ (encap $M surges within)\n    if (my $x = J.phy->{$name}) {\n        sayre \"J.name 's $name was re entrant\";\n        I.d&end,$x;\n        # end - maybe new stuffright as some random part of this process\n        # hold yay minutes of changes in 10 second groups, etc\n    }\n    # bz multicasts\n    my $x = J.phy->{$name} = {};\n    x.begin = hitime();\n    x.name = $name;\n    x.J = $J;\n    x.bb = {};\n    x.ord = [];\n    #x.tim = {};\n    #x.wtf = {}; # F grab\n    #x.ap = sub{}; # bz do aftering\n    x.qui = 1;\n    x.head = J.phl->{$name}->{l}->[-1] if J.phy->{$name};\n    $x;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: ab1fd2a37714
        gro: Modems/Pha
      t: pha
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    rJ: 
      c: 
        el: 1
        s: "A.I.rJ = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($r,$J,@Me) = @M;\n    my $I = A.I;\n    my $j;\n    my $sing;\n    if (J.tt) {\n        $sing = 'J_tt';\n        (j.cv,j.t,j.style) = $r =~ /^(.*?)\\t(.*)\\t(.*?)$/;\n        if (!defined j.cv) {\n            sayre \"Hind $r  \" for 1..5;\n            (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n        }\n    }\n    else {\n        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n    }\n    defined j.cv || die \"$sing no $r    \".ki $j;\n    j.s = J.bb->{$r} if $J;\n    j.nos = 1 if $J && !exists J.bb->{$r};\n    $j;\n};\n"
      sc: 
        acgt: r,J
        args: A,C,G,T,r,J
        code: I 1
        dige: cbfd0ce46c1d
        gro: Modems/Jamsc
        l: "#c"
      t: rJ
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Jamsc/Jamsc
    ratio: 
      c: 
        el: 1
        s: "A.I.ratio = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t,@Me) = @M;\n    my $I = A.I;\n    my $ratio = $o / ($t||1);\n    0.01 * int(100*$ratio);\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: e592ace66dff
        gro: Modems/Timing
      t: ratio
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Timing/Timing
    recycle: 
      c: 
        el: 1
        s: "A.I.recycle = sub {\n    my ($A,$C,$G,$T,@Me) = @_;\n    my $I = A.I;\n    return if I.recyttl++ > 8;\n    G.drop.recycling->{A.J.id}->{A.am} = $I;\n};\n"
      sc: 
        acgt: 1
        args: A,C,G,T
        code: I 1
        dige: 070c7dc51b65
        gro: Indulator/IStuff
      t: recycle
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/IStuff/IStuff
    renc: 
      c: 
        el: 1
        s: "A.I.renc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.c = C.c =~ I.peels ? I.d&peel,C.c\n      : {s => C.c};\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: eae926764058
        gro: Indulator/SlideEa
      t: renc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    rensc: 
      c: 
        el: 1
        s: "A.I.rensc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.sc = C.sc eq '' ? {}\n        : C.sc =~ I.peels\n        ? I.d&peel,C.sc\n        : die \"C sc nostr: C.sc   of I.peels  \".ki $C\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 4e4662544dd1
        gro: Indulator/SlideEa
      t: rensc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    reny: 
      c: 
        el: 1
        s: "A.I.reny = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.y = C.y eq '' ? (I.blanky ? I.d&blanky : {})\n        : C.y =~ /^($NUM)$/ ? {cv=>$1}\n        : C.y =~ /^($NUM)-($NUM)$/ ? {in=>$1,out=>$2}\n        : C.y =~ /^($NUM)-($NUM)x($NUM)$/ ? {in=>$1,out=>$2,thi=>$3}\n        : C.y =~ /^([a-zA-Z]+)(?::(.+))?$/ ? do {\n            C.c->{$1} = $2 || C.t;\n            {};\n        }\n        : I.rey ? I.d&rey\n        : die \"C y wtf: C.y\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: eba66862923b
        gro: Indulator/SlideEa
      t: reny
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    scIfs: 
      c: 
        el: 1
        s: "A.I.scIfs = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @is;\n    for my $k (keys %$s) {\n        my $Q = $s->{$k};\n        my $tot = @{Q.path};\n        my $star = grep{$_ eq '*'} @{Q.path};\n        Q.weig = $tot - $star;\n    \n        my $in = [{s=>{T=>$T}}];\n        my $pi = 0;\n        for my $pin (@{Q.path}) {\n            for my $pTn (@{Q.onpa}) {\n                I.d&pass,$pTn,$in;\n            }\n            I.d&pass,$pin,$in;\n            @$in = map {\n                if (_.d) { # nonroot pattern mutable (into/on/off origin s)\n                    _.od ||= _.d;\n                    if (my $su = _.od.s.T.q->{_.e.k}) {\n                        $_ = $su;\n                        # deeper knowish\n                    }\n                }\n                _.d = $_;\n                _.e.lk = Q.atar->[$pi]||die\"no idea what $pi is\";\n                $_\n            } grep{defined} @$in;\n            $pi++;\n            last if !@$in;\n        }\n    \n        for my $d (@$in) {\n            # now inmost, .od leads above (without pTn inway)\n            # and each d.e.lk calls it something $nk $gk and $wk\n                # and avoid less specific after more specific\n                # or just avoid repeats\n                #   \n                # shaky but index\n                # the fish is shaking but on the deck\n            my $arg;\n            my $up = $d;\n            my $last = $up;\n            my $i = 0;\n            while ($up) {\n                $i++ > 8 && die \"LAST WANDERS\";\n                $arg->{up.e.lk} = up.e.k;\n                if (Q.caps) {\n                    for my $k (grep{Q.caps->{$_}} keys %$up) {\n                        $arg->{$k} ||= $up->{$k};\n                    }\n                }\n                $last = $up;\n                $up = up.od;\n                if ($up eq $last) {\n                    sayre \"D.t D.sc.Td  refers to itself as .od: \".wdump $last;\n                    last;\n                }\n            }\n    \n            arg.d = $d;\n    \n            for my $k (keys %{d.s}) {\n                next if $k eq 'T';\n                $arg->{$k} && die \"Already $k arg of \".wdump[$d,$arg];\n                $arg->{$k} = d.s->{$k};\n            }\n    \n            my $path = \"@{Q.path}\";\n            arg.talk = \"C.t  ($k:$path) C.t C.y.cv\"\n                .\":\\t\".join '/', map{$arg->{$_}} @{Q.atar};\n            d.weig ||= Q.weig;\n            d.path ||= $path;\n            if (d.weig > Q.weig) {\n                say \"Later $path  Q.weig < d.weig  d.path\" if A.J.V > 1;\n                next;\n            }\n            elsif (d.path ne $path) {\n                say \"Moreo $path  Q.weig > d.weig  d.path\" if A.J.V > 1;\n                d.weig = Q.weig;\n                d.path = $path;\n            }\n            push @is, $arg;\n            T.ut.matchTd = 1;\n            # Z/D wad of multiplicity\n            # D args $d and arg, $nk/$ov etc things plucked\n            # they must stay present to later Ds as well\n            # stored T.d path subtlates\n            # 6 ^\n            sayre(ki($arg)) if A.J.V > 1;\n        }\n    }\n    @is\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a1daba5fc7ed
        gro: Seven/Yools
      t: scIfs
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    scd: 
      c: 
        el: 1
        s: "A.I.scd = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($rv,$rl,@Me) = @M;\n    my $I = A.I;\n    my $r;\n    r.z = [];\n    r.oldz = [];\n    undef $rl if $rl && rl.c ne rv.c;\n    push @{$rl ? r.oldz : r.z}, @{rv.c};\n    \n    r.in = @{rl.sc||[]};\n    r.out = @{rv.sc};\n    if (r.out > r.in) {\n        r.ay = [r.in..(r.out - 1)];\n        push @{r.oldz}, @{rv.sc}[0..r.in] if r.in;\n        push @{r.z}, @{rv.sc}[@{r.ay}];\n    }\n    $r\n};\n"
      sc: 
        acgt: rv,rl
        args: A,C,G,T,rv,rl
        code: I 1
        dige: 66c846f2fdba
        gro: Modems/Timing
      t: scd
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Timing/Timing
    scyvle: 
      c: 
        el: 1
        s: "A.I.scyvle = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    for (qw'in out cv') {\n        if (my $so = C.y->{$_}) {\n            my $i;\n            while (C.y->{$_} <= -1 || C.y->{$_} >= 1) {\n                C.y->{$_} /= 10;\n                die \"Many i chewing on \".ki C.y if $i++ > 10;\n            }\n        }\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d054be1e9bda
        gro: Indulator/SlideEa
      t: scyvle
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    servehash: 
      c: 
        el: 1
        s: "A.I.servehash = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n      s.AZ ? I.d&AZu,s.AZ\n    : s.MZ ? I.d&MZu,s.MZ\n    : s.EZ ? I.d&EZu,s.EZ\n    : s.WZ ? I.d&WZu,s.WZ\n    : s.EC ? I.d&ECu,s.EC\n    : s.Elvis ? I.d&Elvisu,s.Elvis\n    : die 'hash: '.wdump($s);\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6cd29f303517
        gro: Indulator/Servo
      t: servehash
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Servo/Servo
    string: 
      c: 
        el: 1
        s: "A.I.string = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die \"string: $s\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 196a2239898a
        gro: Indulator/SlideEa
      t: string
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    t: 
      c: 
        el: 1
        s: "A.I.t = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($K,$cv,$av,@Me) = @M;\n    my $I = A.I;\n    ($K,$cv) = (A.am,$K) if !$cv && $K;\n    $av = 0+(\"0.\".$av) if $av;\n    die \"K$K cv$cv\" unless $K && $cv;\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    \n    # adapt to much  mergey       extendo  rubble\n    my $i = Rw collaspII $A;\n    die'difAvcol' if $Av ne ($av || A.cv);\n    #\n    my $ncv;\n    my $re;\n    my $dont;\n    if ($Av < 0.6 || $c >= 0.7) {\n        if ($c >= $Av) {\n            $ncv = $c;\n            $re = 1;\n        }\n        else {\n            $re = 0;\n            $dont = 1;\n            say \" deInc $Av - $cv $c\";\n        }\n        die \"pre bigger\" if $cv < $Av;\n    }\n    else {\n        if ($c < $Av) {\n            if ($Av == 0.6) { # scoop up all on entering timezone\n                $re = 1;\n                $dont = 1; # or will II fall away\n            }\n            else {\n                $re = 0;\n                $dont = 1;\n            }\n        }\n        elsif ($c == $Av) {\n            $re = 1;\n        }\n        elsif ($c > $Av) { # and $c < 0.7, is a next time\n            T.Z->{$c} = 1;\n            $re = 0;\n            $dont = 1;\n        }\n        else {die\"nof\"}\n    }\n    undef $ncv if $av; # aux K\n    my $was = A.cv;\n    $dont || I.d&ex,$i,$K,$cv,$av;\n    A.cv = $ncv if defined $ncv && A.cv == $was;\n    $re;\n};\n"
      sc: 
        acgt: K,cv,av
        args: A,C,G,T,K,cv,av
        code: I 1
        dige: 442c4320522f
        gro: Indulator/KnowTime
        nois: "#c"
      t: t
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    tlM: 
      c: 
        el: 1
        s: "A.I.tlM = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $os = $s;\n    $s = s.M if ref $s eq 'HASH';\n    ref $s eq 'ARRAY' || return \"S not N/M: \".wdump[$os];\n    Rw ZNews $N:s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 26c4c9eceb6f
        gro: Modulator/Rings
        nov: 1
      t: tlM
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Rings/Rings
    us: 
      c: 
        el: 1
        s: "A.I.us = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    my $E = C.c.e || return ();\n    push @M, 'NOGK' if @M == 1;\n    I.d&inDin,E.c.us,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: 0cdebb6cbbf0
        gro: Indulator/C
      t: us
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    writef: 
      c: 
        el: 1
        s: "A.I.writef = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($f,$s,$append,@Me) = @M;\n    my $I = A.I;\n    (my $d = $f) =~ s/\\/[^\\/]+?$//;\n    unless (-d $d) {\n        `mkdir -p $d`;\n    }\n    \n    $s = [$s] if !ref $s;\n    my $li = ref $s eq 'ARRAY' ? join(\"\",map{/\\n$/?$_:\"$_\\n\"}@$s)\n        : die \"Wsome other $f type: $s\";\n    $li = encode_utf8 $li;\n    \n    my $wa = {};\n    wa.append = 1 if $append;\n    write_file($f,$wa,$li);\n};\n"
      sc: 
        acgt: f,s,append
        args: A,C,G,T,f,s,append
        code: I 1
        dige: 40e5b67ad1ea
        gro: Seven/SevWo
      t: writef
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/SevWo/SevWo
    wtfch: 
      c: 
        el: 1
        s: "A.I.wtfch = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($Jb,$Yb,@Me) = @M;\n    my $I = A.I;\n    my $wtf = {};\n    wtf.same = 1;\n    $wtf->{$_} = {} for qw'new diff gone';\n    \n    for (sort keys %$Jb) {\n        if (!exists $Yb->{$_}) {\n            wtf.new->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        } \n        elsif ($Yb->{$_} ne $Jb->{$_}) {\n            wtf.diff->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        }\n        else {\n            wtf.sami++;\n            wtf.still->{$_} = $Jb->{$_};\n        }\n        wtf.tot++;\n    }\n    for (grep { !exists $Jb->{$_} } sort keys %$Yb) {\n        wtf.gone->{$_} = $Yb->{$_};\n        wtf.same = 0;\n    }\n    $wtf;\n};\n"
      sc: 
        acgt: Jb,Yb
        args: A,C,G,T,Jb,Yb
        code: I 1
        dige: 75e75366ec49
        gro: Modems/Pha
        l: "#c diff J"
      t: wtfch
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    xot: 
      c: 
        el: 1
        s: "A.I.xot = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$c,@Me) = @M;\n    my $I = A.I;\n    while (my($k,$v) = each %$c) {\n        $s->{$k} = ref $v ? {%{$s->{$k}||{}}, %$v} : $v;\n    }\n    $s\n};\n"
      sc: 
        acgt: s,c
        args: A,C,G,T,s,c
        code: I 1
        dige: f8940275bf17
        gro: Indulator/C
      t: xot
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/C/C
    z: 
      c: 
        el: 1
        s: "A.I.z = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $I->{d}->(\"oseverato\");\n        push @{$A->{M}}, @{$T->{oM}};\n        1\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 85ce5e302f71
        gro: Indulator/Motion
      t: z
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
  "0.11": 
    after: 
      c: 
        el: 1
        s: "A.I.after = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    A.bangdesk = {};\n    aft {\n        $_->() for values %{A.bangdesk.aft};\n        $@ || return;\n        A.bang && return;\n        A.bang = 21;\n        $_->() for values %{A.bangdesk.bang};\n        # want to sus $@ and hang vectors of what, should be autoish\n        my $m = \"J: I.nF.A.talk        A.mo.ont.cv\";\n        $m .= \"\\nC: \".k2 I.nF.C;\n        $m .= \"\\ns: \".wdump 3, I.nF.A.s unless length $m > 20;\n        $@ = \"$m\\n$@\";\n        # A.t&9,$@; # skippy\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 11
        dige: b585621f8302
        gro: Indulator/Bangdesk
        its: 1
      t: after
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Bangdesk/Bangdesk
  "0.12": 
    Ci: 
      c: 
        el: 1
        s: "A.I.Ci = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    !ref $s ? I.d&string,$s\n    :\n    ref $s eq 'ARRAY' ? I.d&array,$s\n    :\n    ref $s eq 'HASH' ? I.d&hash,$s\n    :\n    die \"mmtype:$s\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 12
        dige: 0ae2f062639c
        gro: Indulator/SlideEa
        its: 1
      t: Ci
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
  "0.18": 
    reasonlock: 
      c: 
        el: 1
        s: "A.I.reasonlock = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die\"reft\" if ref C.t;\n    my $istf = sub {\n        my $s = shift;\n        exists s.t && !ref s.t && ref s.y && ref s.c && 9 > keys %$s;\n    };\n    # uis a nested wave - falling ]]]]]]]\n    # allow much manufold\n    # knot this not this:\n    if (A.J.name eq 'qq' || A.J.most.J eq A.J) {\n        C.c.W = C.t unless C.c || C.sc || C.y;\n    }\n    # this form: NextWorm=>$C=>$J (C/J swappy)\n    if (ref C.y eq 'HASH' && (C.y.bb || $istf->(C.y))) {\n        if (C.y.bb) {\n            if (ref C.c eq 'HASH' && $istf->(C.c)) {\n                C.c = {e=>C.c};\n            }\n            C.c.s = C.y;\n        }\n        else {\n            if (ref C.c eq 'HASH' && C.c.bb) {\n                C.c = {s=>C.c};\n            }\n            C.c.e = C.y;\n        }\n        C.y = '';\n        C.c.W = C.t;\n    }\n    \n    I.d&renc if !ref C.c;\n    I.d&reny if !ref C.y;\n    I.d&rensc if !ref C.sc;\n    defined C.t && !ref C.t\n    && ref C.y && ref C.c && ref C.sc\n        || die \"reaso fail\".wdump [A.s,$C];\n    I.d&scyvle;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 18
        dige: 860ac48a38e1
        gro: Indulator/SlideEa
        its: 1
        li: "#c"
      t: reasonlock
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/SlideEa/SlideEa
  "0.71": 
    CoM: 
      c: 
        el: 1
        s: "A.I.CoM = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        push @{$T->{oM}}, $C unless $T->{Z};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 71
        dige: 7a9e6cff36b8
        gro: Indulator/Motion
        its: 1
      t: CoM
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Motion/Motion
  "0.9": 
    erg: 
      c: 
        el: 1
        s: "A.I.erg = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # must pre compile, see D severators\n    my $m = \"J: A.talk\";\n    $m .= \"\\nC: \".ki $C;\n    $m .= \"\\ns: \".wdump 3, A.s unless length $m > 20;\n    $@ = \"$m\\n$@\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 9
        dige: 1f5c81388334
        gro: Indulator/Bangdesk
      t: erg
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Indulator/Indulator/Bangdesk/Bangdesk
Ii: G/T/Wild:HASH + G/T/Seate:HASH
J: 
  "0.6211": 
    J_6211: 
      c: 
        el: 1
        s: "A.I.J_6211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return if exists C.c.pi;\n    \n    if (A.ztime < 9) {\n        if (A.jr&bol) {\n            sayre \"STOPPING \".ki($C) for 1..3;\n            # TODO stop\n        }\n        A.bangdesk.aft.unblocknine = A.jr&bol,9;\n    }\n    A.bangdesk.bang.bang_ts = sub {\n        A.jr&bang_ts,hitime\n    };\n    \n    C.c.pin = J.name;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6211
        dige: 613d690d5559
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_6211
      "y": 
        cv: '0.6211'
        cvt: 0.6211	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.6212": 
    J_6212: 
      c: 
        el: 1
        s: "A.I.J_6212 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless exists C.c.pi;\n    \n    die'csnod' if $C ne J.C;\n    J.cv = (C.c.gp && C.c.gp.cv) || C.c.cv || 0.6;\n    my $path = C.sc.pi||die'nopi';\n    if (J.A.d > 9) {\n        $path = 'text';\n        warn \"J.name J.A.d limit to text\";\n    }\n    C.c.pin = \"pi/$path\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6212
        dige: dd3968d99abd
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_6212
      "y": 
        cv: '0.6212'
        cvt: 0.6212	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.631": 
    J_631: 
      c: 
        el: 1
        s: "A.I.J_631 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    A.coi = I.d&pha,$J,'ako';\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 631
        dige: 59b0dc2b2481
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_631
      "y": 
        cv: '0.631'
        cvt: 0.631	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.632": 
    J_632: 
      c: 
        el: 1
        s: "A.I.J_632 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless exists C.sc.pi;\n    \n    map { # telephone winch, propaganda (top-er levels receiving stuff)\n         J.A->{$_} = J.Jiter.A->{$_}\n         if J.Jiter && J.Jiter.A->{$_};\n    } qw'ljm ljmo';\n    \n    A.time = sub {\n        my($JJ,$q) = @_;\n        $J eq $JJ || die \"wtfJure\";\n        # wanna A.t&T,2,0 us to difference streams\n        # they could be xot maps or code to run\n        # then all over things \n    \n        if ($q == 2) {\n            A.ico = I.d&pha,$J,'ico';\n            A.ico.qui = 1;\n            I.d&as,A.ico,A.coi;\n            my $wtf = I.d&exactl,A.ico;\n    \n            if (wtf.last && !wtf.same) {\n                my $uf = join \"\\n\", map{\"$_: \".wdump(1,$wtf->{$_})}\n                    grep {keys %{$wtf->{$_}}} qw'new diff gone';\n                saybl \"T.alk  2222  $uf\";\n            }\n    \n            Rw eighthnot $J\n             ? do { A.ico.wtf.same = 0; }\n             : wtf.same && return 0;\n    \n            # for jamcs screenfly\n            J.A.ljm = [];\n            J.A.ljmo = \"fr  J.name\";\n            return 1;\n        }\n    \n        warn \"T.alk other $q\";\n        if ($q == 8) {\n            # until J.most coord attention evaporates\n            # as in pulling on a list\n        }\n        A.ztime >= $q;\n    };\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 632
        dige: 1f93220cafe1
        gk: J
        gro: Modulator/Jong/Juperfi
        its: 1
        nk: c
        v: cJ
      t: J_632
      "y": 
        cv: '0.632'
        cvt: 0.632	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Juperfi/Juperfi
  "0.66": 
    J_66: 
      c: 
        el: 1
        s: "A.I.J_66 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $M = [];\n    my $y = {o=>$M};\n    my $ar = {%{C.c}};\n    #sayre \"no ars\" if !exists ar.s;\n    ar.s = '' if !exists ar.s;\n    ar.u = ar.s;\n    ar.pin = C.c.pin || die \"nopin\";\n    T.oy = $y;\n    \n    Rw ar.pin + $A $C $G $T $J $M $y;\n    # set our C.c.s to [that], noise probe case, maybe\n    if (@$M) {\n        n z=>$y=>{}\n    }\n    if (y.at) {\n        my $root = C.c.pi ? J.uname : J.name;\n        n J.name =>9=>{},delete y.at\n    }\n    # T may cause big recoil of Mo/J, miss pha closures:\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 66
        dige: 980246233c35
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_66
      "y": 
        cv: '0.66'
        cvt: 0.66	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.672": 
    J_672: 
      c: 
        el: 1
        s: "A.I.J_672 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless A.ico && A.ico.wtf.same;\n    # first the superstilled\n    # anything T_D can arrange through time...\n    # wants to join G subtly vis T and so....\n    # should be no M in the first bit\n    # it is just pinpricks of consciousness keeping it alive, like mtime\n    # be nicer to do with an I that can T out of this whole change res patch\n    my $cut = @{A.ico.ord};\n    my @cc = @{A.coi.ord};\n    if (@cc > $cut) {\n        warn\"J.name entered stuff after 2!\".wdump [@cc, \n        '                 =============', @{A.ico.ord}];\n    }\n    I.d&bandon,A.coi;\n    if (my $ljm = J.A.ljm) {\n        for my $s (@$ljm) {\n            s.noR=1;\n            I.d&jamsc,$s;\n        }\n    }\n    sayre \"SKIP T.alk\";# if J.V || J.most.J.V;\n    T.whack = 1; # exit A.t&J\n    T.same = 1; # exit Mo, T.not but not, kind of unlet ztime6->7\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 672
        dige: 8a8f5c43f7ab
        gk: J
        gro: Modulator/Jong/Juperfi
        its: 1
        nk: c
        v: cJ
      t: J_672
      "y": 
        cv: '0.672'
        cvt: 0.672	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Juperfi/Juperfi
  "0.677": 
    J_677: 
      c: 
        el: 1
        s: "A.I.J_677 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    if (T.oy.ope) {\n        sayyl \"Leaving J.name open pha...\" if A.V&ope;\n        I.d&end,A.coi;\n        return;\n    }\n    A.coi.qui = 1;\n    my $wt = I.d&exactl,A.coi;\n    if (wt.same) {\n        if (++J.A.wch > 4) {\n            J.A.wch = 0;\n            # ^ rate to avoid v see J 632 eighthnot\n        }\n        else {\n           sayre \"SAME T.alk\" if A.V&SAME;\n           T.same = 1;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 677
        dige: 8fbdf1b27fe5
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_677
      "y": 
        cv: '0.677'
        cvt: 0.677	C.t
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
Mo: 
  "0.1": 
    acted: 
      c: 
        el: 1
        s: "A.I.acted = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # wheels acts run into, 6* coupling\n    # we should scrub away any T we understand  (exactly)\n    # trace flop F and see the swims\n    I.d&Tat if T.at;\n    return die'tlast' if T.last;\n    1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Mo 1
        dige: 323b52543ebb
        gro: Modulator/Rings
      t: acted
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Rings/Rings
  "0.201": 
    bals_201: 
      c: 
        el: 1
        s: "A.I.bals_201 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $bals = C.c.bals;\n    # a non-s\n    my $N = C.c.bals;\n    $N = [ map { [$_] } split \"\\n\",$N ] if !ref $N;\n    my $y = C.y || die\"noy\";\n    y.o && return sayre \"bals y o already\".wdump[ki $C, $y, I.d&tlM,y.o ];\n    y.bal && return sayre \"bals y bal already\".wdump[ki $C, $y, I.d&tlM,y.bal ];\n    y.bal = [];\n    # have some minions to od thi:\n    A.oA || die \"wanting to s bab, no oA\";\n    Rw In $J:A.J $M:y.bal $N;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 201
        dige: 3c7cea229c38
        gk: bals
        gro: Modulator/Wrinkles
        nk: c
        v: cbals
      t: bals_201
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.21": 
    yo: 
      c: 
        el: 1
        s: "A.I.yo = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $o = C.y.o;\n        $o = $C->{y}->{o} = {M=>$o} if ref $o eq 'ARRAY';\n        $o->{M} ||= [$C];\n        # 4d jelly slower-downer\n        # so we should acquire many $A->{t}&\n        # this is an EC into our C's $T->{oM}, as $s->{M} now\n        # stackable A with stitchable others interleaved in time\n        # 6 FLIES\n        $o->{M} = [grep{defined}map{\n            my $d;\n            $d->{t} = $_->{t};\n            $d->{y} = {%{$_->{y}}};\n            $d->{c} = {%{$_->{c}}};\n            delete $d->{y}->{cv} if $y->{ecv};\n            # allow any cv to wander from yarNgrid:\n            #$y->{cvil} = 1 if defined $d->{y}->{cv};\n            $d->{sc} = {%{$_->{sc}||{}}};\n            # TRansituio, soul spread\n            if ($o->{ou}) {\n                # inside our, change slightly how we see\n                # spread compound\n                $d->{c}->{pi} = $o->{ou};\n                $d->{c}->{s} = $_;\n            }\n            $d->{sc}->{oJ} = $o->{oJ} if $o->{oJ};\n            # travel agent ^\n            # traveli\n            $G->{w}->(\"C14\", {I => $I, A => $A, C => $d}, $G);\n            #\n            $A->{J}->{V} && say \"AH $A->{J}->{name}  ::: $d->{t}   \".ki $d->{sc};\n            keys %$d ? $d : undef\n        }@{$o->{M}}];\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 21
        dige: 47ae0da15c18
        gk: o
        gro: Modulator/Space
        nk: 'y'
        v: yo
      t: yo
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Space/Space
  "0.22": 
    yon: 
      c: 
        el: 1
        s: "A.I.yon = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $o = C.y.o;\n         my $J = $A->{J};\n         my $Jy = $J->{C}->{y}; # pi's sea\n         # surface tesion, lum\n         if (my $lt = $C->{y}->{limn}) {\n             my $rl = int(9 * $lt * $Jy->{spc});\n             my $was = @{$o->{M}};\n             if ($was > $rl) {\n                 my @um = @{$o->{M}};\n                 @um = @um[0..$rl-1];\n                 @{$o->{M}} = @um;\n                 # space mod\n                 my $s = $was;\n                 $J->{n}->($J, \"lim\",0.7,\"$was>$rl\",'%fs:4,hs:7487');\n             }\n         }\n         $C->{y}->{bal} = $o->{M} || die\"nomo\";\n         # unless y unlimited...until\n         $o->{J} = $J->{most}->{J} if $Jy && $Jy->{o} && $Jy->{spc} > 0.1;\n         my $shut = $Jy && $Jy->{o} && !$o->{J};\n         $C->{y}->{over} = ($Jy->{o} && $Jy->{over} && $Jy->{over} || 0) + 0.06 if $y->{o}->{J};\n         #sayre \"Jyspace: spc:  $J->{d}->{y}->{spc}  or aspace: $Jy->{aspace}\" if $Jy;\n         # divvy space inside parent's share most J or in 3-4 of the pi\n         my $sl = $Jy->{spc} * 0.1;\n         $C->{y}->{in} ||= $shut ? 0.3 : $Jy ? $Jy->{cv} + $sl : 0.1;\n         $C->{y}->{out} ||= $shut ? 0.4 : $Jy ? $Jy->{ov} - $sl : 0.9;\n         $C->{c}->{lumfa} = 1 if $y->{lumfa};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 22
        dige: 759230040bf9
        gk: o
        gro: Modulator/Space
        nk: 'y'
        v: yo
      t: yon
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Space/Space
  "0.221": 
    yall: 
      c: 
        el: 1
        s: "A.I.yall = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    C.y = {thi => C.y} if !ref C.y;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 221
        dige: 789fe65d9c8f
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yall
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.223": 
    bal: 
      c: 
        el: 1
        s: "A.I.bal = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    y.thi = @$bal;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 223
        dige: b4091319be41
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: bal
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/bal/bal
  "0.23": 
    yin: 
      c: 
        el: 1
        s: "A.I.yin = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # build wave plot manifold\n    # solar systems\n    y.cv ||= 0.3 if !defined y.cv && !defined y.in;\n    y.in = y.cv if defined y.cv;\n    y.in ||= 0.1;\n    y.out = y.in + y.space if defined y.space;\n    y.out ||= 0.9; # up to, then low things big\n    y.thi ||= 1; \n    y.space = y.out - y.in;\n    y.space *= -1 unless y.space > 0;\n    y.aspace = y.space / y.thi;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 23
        dige: fdfe4641885e
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.233": 
    lum_thy: 
      c: 
        el: 1
        s: "A.I.lum_thy = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $lumfa = C.y.lumfa;\n    my $bal = C.y.bal;\n    # barel! vylum\n    # could put these mys on y.u.thing and loop Nautically in 32...\n    my $roll = 1;\n    my $lum = 3;\n    my $i = 0;\n    for (@$bal) {\n        _.y.thy+=$lum;\n        $i++;\n        if ($i > $roll) {\n            $lum -= $lum * 0.2 if $lum > 0.1;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 233
        dige: 6b3e342bb074
        gk: lumfa
        gro: Modulator/lum
        nk: 'y'
        rg: bal
        v: ylumfa
      t: lum_thy
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/lum/lum
  "0.241": 
    muav: 
      c: 
        el: 1
        s: "A.I.muav = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    my $total = sum(map { y.thy||1 } @$bal) || 1;\n    my $over = @$bal || 1;\n    y.u.muav = $over / $total;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 241
        dige: f14c544bc495
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: muav
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/bal/bal
  "0.26": 
    yarN: 
      c: 
        el: 1
        s: "A.I.yarN = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # twist, lay into segment\n    y.u.v = defined y.cv ? y.cv\n        : defined y.in ? y.in\n        : die \"no yiny\".ki$y;\n    y.thi || die \"Whythi\".ki$C;\n    # y.u. shares av, y. separates\n    # difference pours out of y.bal via y.i in 32\n    my @lot = map {\n        my $C = I.d&xot,{},$C;\n        C.y.i = $_-1;\n        $C\n    } 1..y.thi;\n    if (@lot > 1) {\n        push @{A.mo.re->{0.29}||=[]}, map{[undef,$_]}@lot;\n        T.not = 1;\n    }\n    else {\n        my ($CC) = @lot;\n        $CC || die \"not one?\";\n        %$C = %$CC;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 26
        dige: db3028bcce07
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yarN
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.3": 
    yinvout: 
      c: 
        el: 1
        s: "A.I.yinvout = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    y.mu = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3
        dige: cbb33f16956f
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yinvout
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.301": 
    balin: 
      c: 
        el: 1
        s: "A.I.balin = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    I.d&xot,$C,$bal->[y.i];\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 301
        dige: 29a22969e905
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: balin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/bal/bal
  "0.3211": 
    J_3211: 
      c: 
        el: 1
        s: "A.I.J_3211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    C.c.W = $J unless ref C.c.W;\n    ref C.c.W || !ref $J || C.c.W eq J.name || die \"J.name isn't\".ki(C.c);\n    !ref C.c.W || !ref $J || C.c.W eq $J || die \"nzoWJ\".ki(C.c);\n    # avoid 6ing, its doubling orso\n    A.ztime = 3 if A.J.name ne 'qq'; # break off\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3211
        dige: cde84b43b42c
        gk: J
        gro: Modulator/Jing/Jlaces
        nk: c
        v: cJ
      t: J_3211
      "y": 
        cv: '0.3211'
        cvt: 0.3211	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.3213": 
    pi_3213: 
      c: 
        el: 1
        s: "A.I.pi_3213 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pi = C.c.pi;\n    # - c. language is map to some u before 6ing\n    ref $pi && die\"refpi: \".wdump 2, $pi;\n    T.at.pi = $pi || 'guess';\n    C.c.J = 'pi';\n    my $oJ = A.J;\n    $oJ = C.y.o.J if C.y.o && C.y.o.J;\n    A.jr = Rw Ajr $J:oJ $C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3213
        dige: c5aa5fc1a21a
        gk: pi
        gro: Modulator/Jing/Jlaces
        its: 1
        nk: c
        v: cpi
      t: pi_3213
      "y": 
        cv: '0.3213'
        cvt: 0.3213	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.3214": 
    W_3214: 
      c: 
        el: 1
        s: "A.I.W_3214 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $W = C.c.W;\n    my $t = $W;\n    $t = W.name if ref $t;\n    my $jr = Rw Ajr $J:G.oin $t $cv=0.3;\n    \n    return C.c.W = die \"SOIDNG RESEAR(pi with W)\".  jr&J\n        if C.c.pi; # doing research\n    A.jr = $jr; # being\n    \n    T.at.W = $t;\n    T.at.J = ref $W ? $W : $t;\n    # going over J should be same...\n    C.c.J ||= $W;\n    C.t = $t;\n    C.y.cv ||= 0.3;\n    # and where the thrust (J.A?)\n    if (C.c.vv) {\n        A.ztime = delete C.c.vv;\n        A.jr&vv,'',9\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3214
        dige: e31ad819f6b6
        gk: W
        gro: Modulator/Jing/Jlaces
        its: 1
        nk: c
        v: cW
      t: W_3214
      "y": 
        cv: '0.3214'
        cvt: 0.3214	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.337": 
    balou: 
      c: 
        el: 1
        s: "A.I.balou = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    y.mu = y.thy if exists y.thy;\n    y.mu = y.mu * y.u.muav if y.u.muav;\n    #\n    say \"A.J.C.t  /  T.t ist y.mu  among y.u.muav\"\n        if A.J.V && y.u.muav != 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 337
        dige: 8c63999ab9c6
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: balou
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/bal/bal
  "0.34": 
    black: 
      c: 
        el: 1
        s: "A.I.black = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $was = y.u.v;\n    defined $was || die\"noAv\".ki$C;\n    # in:\n    y.cv = 0+sprintf '%.6f', y.u.v unless y.cvil && defined y.cv;\n    y.pcv = 0+sprintf '%.6f', y.i / C.y.thi;\n    # over:\n    my $in = y.aspace * y.mu;\n    y.u.v += $in;\n    # out: \n    y.ov = sprintf '%.6f', y.u.v;\n    y.spc = y.ov - y.cv;\n    #\n    sayyl \"Bend: C.t   $was += $in       y.aspace * y.mu       muav:y.u.muav\"\n        if A.J.V && y.u.muav && y.u.muav != 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 34
        dige: abd0aade89fb
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: black
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.341": 
    J_341: 
      c: 
        el: 1
        s: "A.I.J_341 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $f = A.jr&J;\n    my $j = C.sc.J;\n    ref $j && ref $f && ($j eq $f || die \".sc J dif $f $j\");\n    # should T.at so vis, substrate insecting\n    C.c.J = T.at.J = $f if $f && ref $f && !f.dead;\n    A.Iso.oJ = 1; # getting pinned into J\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 341
        dige: a66bb6c1e9e4
        gk: J
        gro: Modulator/Jing/Joot
        its: 1
        nk: c
        v: cJ
      t: J_341
      "y": 
        cv: '0.341'
        cvt: 0.341	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.342": 
    X_342: 
      c: 
        el: 1
        s: "A.I.X_342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $X = C.c.X;\n    my $J = C.sc.J;\n    sayre \"DELING J.name\".ki$C;\n    $J || die \"X no J\";\n    ref $J || die \"Nofound $J  C.t   C.y.cv\";\n    $X eq $J || die \"noovewr X  C.c.X ne $J\";\n    A.jr&J,$J,9;\n    J.dead = 1;\n    # SNat bail, we have balin by now so hole in space this time\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 342
        dige: 62f17d0fcd62
        gk: X
        gro: Modulator/Jing/Joot
        nk: c
        v: cX
      t: X_342
      "y": 
        cv: '0.342'
        cvt: 0.342	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.37": 
    ent: 
      c: 
        el: 1
        s: "A.I.ent = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    $y->{$_} = 0+sprintf('%.6f',$y->{$_}) for qw'cv ov aspace spc';\n    C.sc.yspc = y.spc if C.sc.nspc;\n    C.sc.ml = (C.y.over * 40).\"%\" if y.over;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 37
        dige: db61dce63689
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: ent
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
    spc_lum: 
      c: 
        el: 1
        s: "A.I.spc_lum = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $lum = C.y.lum;\n    my $spc = C.y.spc;\n    # feel effects of... f eel\n    my $upt = 0;\n    $spc = $upt if $spc < $upt;\n    # t-rewirey formulae:\n    my $fs = ($spc / 0.02) * 4;\n    C.sc.fs = $fs if $fs < 9;\n    C.y.spc = $spc;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 37
        dige: 61624a06967b
        gk: lum
        gro: Modulator/lum
        nk: 'y'
        rg: spc
        v: ylum
      t: spc_lum
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/lum/lum
  "0.42": 
    id_42: 
      c: 
        el: 1
        s: "A.I.id_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $id = C.c.id;\n    T.at.id = $id;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: 3c4f77654dfc
        gk: id
        gro: Modulator/Wrinkles
        nk: c
        v: cid
      t: id_42
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
    pwar_42: 
      c: 
        el: 1
        s: "A.I.pwar_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pwar = C.c.pwar;\n    T.at.pwar = $pwar;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: 997ea79deb48
        gk: pwar
        gro: Modulator/Wrinkles
        nk: c
        v: cpwar
      t: pwar_42
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
    pwth_42: 
      c: 
        el: 1
        s: "A.I.pwth_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pwth = C.c.pwth;\n    # 8case, to way\n    $pwth =~ s/^(?!!)/!/s;\n    C.c.path = $pwth;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: ae1051bf392f
        gk: pwth
        gro: Modulator/Wrinkles
        nk: c
        v: cpwth
      t: pwth_42
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.421": 
    path_421: 
      c: 
        el: 1
        s: "A.I.path_421 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $path = C.c.path;\n    # install sc path, wants idlyness (indexedness)\n    T.at.path = $path;\n    T.at.idly = 1 if !C.c.fo;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 421
        dige: bb050943fa9e
        gk: path
        gro: Modulator/Wrinkles
        nk: c
        v: cpath
      t: path_421
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.436": 
    time_436: 
      c: 
        el: 1
        s: "A.I.time_436 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $time = C.c.time;\n    A.ztime = delete C.c.time;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 436
        dige: 0997581cf491
        gk: time
        gro: Modulator/Jing/Jamping
        nk: c
        v: ctime
      t: time_436
      "y": 
        cv: '0.436'
        cvt: 0.436	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jamping/Jamping
  "0.77": 
    pin: 
      c: 
        el: 1
        s: "A.I.pin = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    return if delete T.oke;\n    my $oJ = A.J;\n    my $J = C.y.o && C.y.o.J || $oJ;\n    my $ar = {};\n    ar.s = C.c.s if exists C.c.s;\n    \n    Rw jamsc + $J $oJ $C $sc:C.sc;\n    \n    # man is an insect is a flame\n    \n    sayyl \"Hamsc! A.talk: C.t C.y.cv     \".ki(1,{c=>C.c,sc=>C.sc})\n        if A.J.V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 77
        dige: dc8edcf51f43
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: pin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modulator/Modulator/Spaci/Spaci
O: 
  "0.31": 
    tycsc_31: 
      c: 
        el: 1
        s: "A.I.tycsc_31 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.t = C.t;\n    at.y.cv = C.y.cv;\n    if (ref C.c.s eq 'HASH' && C.c.s.bb) {\n        # an other that is holding this\n        at.c.S = C.c.s eq A.J && C.sc.W ? ''\n            : C.c.s.name || \"unamed\";\n        # makes link\n    }\n    elsif (exists C.c.s) {\n        at.c.s = C.c.s\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 31
        dige: 3eeb6fba6ab3
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: tycsc_31
      "y": 
        cv: '0.31'
        cvt: 0.31	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.35": 
    J_35: 
      c: 
        el: 1
        s: "A.I.J_35 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    delete at.sc.J if C.c.S;\n    # conceal the multiJexits\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 35
        dige: d89f32f8eb51
        gk: 'Y'
        gro: Seven/SevWo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: J_35
      "y": 
        cv: '0.35'
        cvt: 0.35	C.t
        p: qq/Seven/Seven/SevWo/SevWo
  "0.36": 
    Jin_36: 
      c: 
        el: 1
        s: "A.I.Jin_36 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # so osci ^ can C.sc.\n    at.sc = {%{C.sc}};\n    for (qw'idly ml nspc path yspc') {\n        delete at.sc->{$_} && sayre \"C.t sc blocking $_\";\n    }\n    # haps to be crate later somewhere if we oWl/S\n    delete ta.V if ref ta.V eq 'HASH' && !keys %{ta.V};\n    \n    if (my $v = at.sc.J) { # J unifies -\n        at.sc.J = v.name;\n    \n        return sayre \"osc Without leaves A.J.name: v.name\"\n            if C.sc.W && Y.root.sc.oWl;\n        return sayre \"osc WivoSelf A.J.name: v.name\"\n            if C.sc.W && defined at.c.S && at.c.S eq '';\n    \n        my $nV = v.El->{V.name};\n        return sayre \"no V.name on v.name $v: El: \"\n            .join', ',sort keys %{v.El}\n            if !$nV;\n    \n        my $rv = nV.rv || {LIES=>\"from v.name\"};\n        return sayre \"no rv V.name on v.name\"\n            if !nV.rv;\n    \n        lv.do->{V.name} = $rv;\n        at.V->{V.name} = rv.i;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 36
        dige: ce6090aa86bb
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jin_36
      "y": 
        cv: '0.36'
        cvt: 0.36	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.37": 
    Jnine_37: 
      c: 
        el: 1
        s: "A.I.Jnine_37 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (C.c.root) { # / unifies  <\n        lv.voso = 1;\n        for my $ik (@{V.os}) {\n            my $iv = V.lv->{$ik};\n            my $C = iv.C;\n            do { sayre(\"Skip C.t: self in self\") for 1..6 } && next\n                if C.sc.J && C.sc.J eq A.J;\n            lv.do->{$ik} = $iv;\n            at.V->{$ik} = iv.i;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 37
        dige: f74da94e2bd6
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jnine_37
      "y": 
        cv: '0.37'
        cvt: 0.37	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.38": 
    sel_38: 
      c: 
        el: 1
        s: "A.I.sel_38 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.sc.geo = ki(at.sc.geo) if at.sc.geo;\n    at.y = at.y.cv if keys %{at.y} == 1 && exists at.y.cv;\n    # ^ to SlideEater decode array of y expressions, xotted together\n    for my $up (qw'tag id') {\n        at.c->{$up} = delete at.sc->{$up} if exists at.sc->{$up}\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 38
        dige: 99e90e7498d0
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: sel_38
      "y": 
        cv: '0.38'
        cvt: 0.38	C.t
        p: qq/Seven/Seven/Yosc/Yosc
S: 
  "0.24": 
    Y_24: 
      c: 
        el: 1
        s: "A.I.Y_24 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $di = Y.lo->{C.y.k}) {\n        if (keys %$di == 1 && di.diff) {\n            my $CC = V.tv->{C.y.k};\n            if (!$CC) {\n                sayre \"never heard of (V_tv) diff J.name : C.y.k \";\n                return 1;\n            }\n            for my $tk (keys %{di.diff}) {\n                if ($tk eq 'geo') {\n                    T.to = 1 if !I.d&heq,C.sc.geo,CC.sc.geo;\n                }\n                elsif ($tk eq '') {\n                    T.to = 1 unless ref C.c.s && C.sc.dige && C.sc.dige eq CC.sc.dige;\n                }\n                else {\n                    saybl \"J.name C.y.k has diffre: $tk\";\n                    T.to = 1;\n                }\n            }\n        }\n        else {\n            T.to = 1;\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 24
        dige: 4acc12e47726
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_24
      "y": 
        cv: '0.24'
        cvt: 0.24	C.t
        p: qq/Seven/Seven/Ysleep/Ysleep
  "0.25": 
    Y_25: 
      c: 
        el: 1
        s: "A.I.Y_25 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $JJ = C.sc.J) {\n        my $ta = V.ta->{C.y.k};\n        if (my $nV = JJ.El->{V.name}) {\n            my $iv = nV.rv;\n            my $oi = ta.V->{V.name};\n            if ($oi ne iv.i) {\n                T.to = 1;\n            }\n        }\n        else {\n            sayre \"no El V.name on JJ.name\";\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 25
        dige: cacb392f6070
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_25
      "y": 
        cv: '0.25'
        cvt: 0.25	C.t
        p: qq/Seven/Seven/Ysleep/Ysleep
Sev: 
  "0.1": 
    hup: 
      c: 
        el: 1
        s: "A.I.hup = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $CC = {%$s};\n    $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\n    $CC;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Sev 1
        dige: 2bc362811316
        gro: Seven/Yools
      t: hup
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
  "0.2": 
    JYV_2: 
      c: 
        el: 1
        s: "A.I.JYV_2 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    for my $K ('Y','V') {\n        my $name = C.c->{$K};\n        $name || die \"No $K\";\n        C.c->{$K} = I.d&Elj,$J,$name;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 2
        dige: 486c2792da09
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: JYV_2
      "y": 
        cv: '0.2'
        cvt: 0.2	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.21": 
    dElvis_21: 
      c: 
        el: 1
        s: "A.I.dElvis_21 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    I.d&Elvis,$J,$Y;\n    \n    V.os = [];\n    A.mo.retu && die \"J.name's  V.name: Already is  A.mo.retu.name\";\n    A.mo.retu = $V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 21
        dige: e7cd78979127
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: dElvis_21
      "y": 
        cv: '0.21'
        cvt: 0.21	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.22": 
    root_22: 
      c: 
        el: 1
        s: "A.I.root_22 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $rC = Y.tv->{\"0.9\\t/\"}\n        || Y.tv->{\"0.9\\t\".J.name}\n        || Y.tv->{\"0.9\\t\".J.uname}\n        || die \" noroot J.name: showing 0.9s: \"\n            .wdump [map{ki $_}values %{Y.v->{0.9}}];\n    rC.c.root = 1;\n    Y.root = $rC;\n    my $N = [grep { $_ ne $rC } @{Y.vs}];\n    $N = [] if rC.sc.dark;\n    unshift @$N, $rC;\n    # T.Z.$incv = 1||$setAcv makes A,Celf, \n    # A.mo.re array others (yarN) which may Acquire\n    push @{A.mo.re->{0.22}||=[]}, map{\n        my $CC = I.d&hup,$_;\n        # all spreads out to play Y/V\n        I.d&xot,$CC,{c=>C.c};\n        [undef,$CC]\n    }@$N;\n    T.not = 1; # or more 78ism\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 22
        dige: 1943ae62b7e5
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: root_22
      "y": 
        cv: '0.22'
        cvt: 0.22	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.23": 
    Y_23: 
      c: 
        el: 1
        s: "A.I.Y_23 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    C.y.k = C.y.cv.\"\\t\".C.t;\n    push @{V.os}, C.y.k unless C.c.root;\n    Y.root = $C if C.c.root;\n    # how happening to thingk\n    # must ,,,, A.t to gain perception (not mid ex but should)\n    # but yeah add things as lines rejoin\n    A.Iso.O = 1; # also ex O as I (whoever we are)\n    A.Subtle.S = 1; # only-S ex slips through time unwide\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 23
        dige: da4c5970cd85
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_23
      "y": 
        cv: '0.23'
        cvt: 0.23	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.231": 
    Y_231: 
      c: 
        el: 1
        s: "A.I.Y_231 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    return if C.c.root;\n    T.to = 0;\n    A.t&S,6,2;\n    T.not = 1 if !delete T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 231
        dige: a21d44321272
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_231
      "y": 
        cv: '0.231'
        cvt: 0.231	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.289": 
    Y_289: 
      c: 
        el: 1
        s: "A.I.Y_289 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    V.alv->{$k} = C.y.lv = {k=>$k,C=>$C};\n    C.y.at = {};\n    C.y.ta = V.ta->{$k};\n    C.y.vl = V.lv->{$k};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 289
        dige: ff9554a21c04
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk
        v: cY
      t: Y_289
      "y": 
        cv: '0.289'
        cvt: 0.289	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.345": 
    root_345: 
      c: 
        el: 1
        s: "A.I.root_345 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $root = C.c.root;\n    my $J = C.c.J;\n    my $Y = C.c.Y;\n    my $V = C.c.V;\n    if (C.c.root) { \n        Y.root = $C;\n        T.Z->{0.6} = 0.345;\n        T.not = 1;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 345
        dige: 19a76cc18f23
        gk: root
        gro: Seven/Yuni
        nk: c
        rg: J,Y,V
        v: croot
      t: root_345
      "y": 
        cv: '0.345'
        cvt: 0.345	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.41": 
    force_41: 
      c: 
        el: 1
        s: "A.I.force_41 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.c.el = 1;\n    lv.force = 'el';\n    lv.selfs = 1;\n    lv.grab = [at.t, at.y, {el=>8}];\n    lv.rmnsc = [at.t, at.y, {el=>9}];\n    # ID makes possible to throw into the W\n    #    (most J) tiniest specs of change\n    # receiving with ID means most.J knows ID to Jpath (bottom up easy)\n    #   also wants to know originating light cone \n    # - figure that once things on screen again!\n    # maybe 8regate\n    # greg annotates the flyby\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 41
        dige: b74fc53eff90
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: force_41
      "y": 
        cv: '0.41'
        cvt: 0.41	C.t
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.42": 
    mkTd_42: 
      c: 
        el: 1
        s: "A.I.mkTd_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    for my $nk (qw't y c sc V') {\n        my $v = $at->{$nk};\n        my $o = $ta->{$nk};\n        I.d&heq,$v,$o && next;\n        my $d;\n        d.v = $v;\n        d.o = $o;\n        if (ref $v eq 'HASH') {\n            my $wt = Rw wtfch $Jb:v $Yb:o;\n            for my $wk (qw'gone diff new still') {\n                for my $gk (sort keys %{$wt->{$wk}}) {\n                    my $dd = {};\n                    dd.v = $at->{$nk}->{$gk};\n                    dd.o = $ta->{$nk}->{$gk};\n                    d.T.d->{$gk} && die \"C.t: $nk,$gk ($v) rep.\";\n                    d.T.d->{$gk} =\n                        dd.T.d->{$wk} = $dd;\n                }\n            }\n        }\n        else {\n            my $wk = !$vl ? \"new\"\n                : !exists $at->{$nk} ? \"gone\"\n                : \"diff\";\n            my $dd = {%$d};\n            d.T.d.s =\n                dd.T.d->{$wk} = $dd;\n        }\n        T.d->{$nk} = $d;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 42
        dige: da851e73d0eb
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: mkTd_42
      "y": 
        cv: '0.42'
        cvt: 0.42	C.t
        p: qq/Seven/Seven/Yod/Yod
  "0.4311": 
    tsnew_4311: 
      c: 
        el: 1
        s: "A.I.tsnew_4311 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{t} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - t
              - s
              - new
        Td: t/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4311
        dige: 45beb479e8e9
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: tsnew_4311
      "y": 
        cv: '0.4311'
        cvt: 0.4311	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4312": 
    ysnew_4312: 
      c: 
        el: 1
        s: "A.I.ysnew_4312 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{y} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - 'y'
              - s
              - new
        Td: y/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4312
        dige: b11ce7cbcd47
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: ysnew_4312
      "y": 
        cv: '0.4312'
        cvt: 0.4312	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4321": 
    cgone_4321: 
      c: 
        el: 1
        s: "A.I.cgone_4321 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how delete a c $gk\";\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - gone
        Td: c/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: a64d33544bee
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cgone_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	C.t
        p: qq/Seven/Seven/Ydo/Ydo
    cnew_4321: 
      c: 
        el: 1
        s: "A.I.cnew_4321 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how inject a c $gk\" if $vl;\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - new
        Td: c/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: 16ada623d56d
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cnew_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4323": 
    csdiff_4323: 
      c: 
        el: 1
        s: "A.I.csdiff_4323 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{c}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - s
              - diff
        Td: c/s/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4323
        dige: 1d5364d09799
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: csdiff_4323
      "y": 
        cv: '0.4323'
        cvt: 0.4323	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4324": 
    cdiff_4324: 
      c: 
        el: 1
        s: "A.I.cdiff_4324 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        warn \"how to c dif $gk\".slim(30,$v).\" <--- \".slim(30,$o);\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - diff
        Td: c/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4324
        dige: 2fbafd6ff498
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cdiff_4324
      "y": 
        cv: '0.4324'
        cvt: 0.4324	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4331": 
    scnew_4331: 
      c: 
        el: 1
        s: "A.I.scnew_4331 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - new
        Td: sc/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4331
        dige: ed6a3580064b
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scnew_4331
      "y": 
        cv: '0.4331'
        cvt: 0.4331	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4332": 
    scgone_4332: 
      c: 
        el: 1
        s: "A.I.scgone_4332 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how delete a sc $gk\";\n        $lv->{op}->{sc}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - gone
        Td: sc/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4332
        dige: a50837aa4b0a
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scgone_4332
      "y": 
        cv: '0.4332'
        cvt: 0.4332	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4333": 
    scdiff_4333: 
      c: 
        el: 1
        s: "A.I.scdiff_4333 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        #sayyl \"$C->{t} $nk $gk $wk: \".slim(30,$v).\" <--- \".slim(30,$o);\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - diff
        Td: sc/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4333
        dige: 35a79ada67b8
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scdiff_4333
      "y": 
        cv: '0.4333'
        cvt: 0.4333	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.434": 
    Vsup_434: 
      c: 
        el: 1
        s: "A.I.Vsup_434 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    d.iv = lv.do->{$gk};\n    d.ov = vl.do->{$gk};\n    d.ov && d.ov.i && (d.ov.i eq $o || warn \"no ovi ogk  d.ov.i eq $o\");\n    T.noTd = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - "*"
        Td: V/*/*
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 434
        dige: ef43dc6a97ad
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: Vsup_434
      "y": 
        cv: '0.434'
        cvt: 0.434	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4341": 
    Vnew_4341: 
      c: 
        el: 1
        s: "A.I.Vnew_4341 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # may like to grab the element before it\n    # like a curve continuing\n    $iv || sayre(\"News cap no iv: \".wdump $s) && return;\n    lv.od.new->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - new
        Td: V/*/new
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4341
        dige: 692cb136bf07
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vnew_4341
      "y": 
        cv: '0.4341'
        cvt: 0.4341	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4342": 
    Vgone_4342: 
      c: 
        el: 1
        s: "A.I.Vgone_4342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (!ov.rmnsc) {\n        die \"no rm: hon A.J.name C.c.J.name =- C.sc.J.name ;; \"\n            .wdump 3, [$at,$ta,\"Cfor $gk pmtp\", vl.do, lv.do, $s];\n    }\n    !$iv || die \"gone had iv\";\n    # ^ sc plumb its destruction\n    # can void if our c reframes by implicitly clearing\n    lv.od.go->{$gk} = $ov;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - gone
        Td: V/*/gone
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4342
        dige: 2d1765414328
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vgone_4342
      "y": 
        cv: '0.4342'
        cvt: 0.4342	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4343": 
    Vdiff_4343: 
      c: 
        el: 1
        s: "A.I.Vdiff_4343 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (iv.c eq ov.c) {\n        iv.sc eq ov.sc && do {\n            sayre \"SAME FLUC SC $gk\";\n            die \"same c fluc sc $gk\";\n        };\n        my $in = @{iv.sc};\n        my $out = @{ov.sc};\n        if (@{iv.sc} > @{ov.sc}) {\n            saybl \"$talk GROWS\" if J.V > 2;\n            lv.od.gr->{$gk} = $iv;\n        }\n        else {\n            warn \"WTFF \".wdump 2,[$iv,$ov];\n        }\n    }\n    else {\n        saybl \"$talk  REPLACES c\";\n        lv.od.over->{$gk} = $iv;\n    }\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - diff
        Td: V/*/diff
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4343
        dige: 03b867b3b306
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vdiff_4343
      "y": 
        cv: '0.4343'
        cvt: 0.4343	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4344": 
    Vstill_4344: 
      c: 
        el: 1
        s: "A.I.Vstill_4344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    lv.od.ll->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - still
        Td: V/*/still
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4344
        dige: efc847006328
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vstill_4344
      "y": 
        cv: '0.4344'
        cvt: 0.4344	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.48": 
    doTd_48: 
      c: 
        el: 1
        s: "A.I.doTd_48 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # pick T bones, dot Is\n    # a 9 for the Td (ill 8) consciousness rendezvou\n    for my $nk (sort keys %{T.d}) {\n        my $d = T.d->{$nk};\n        for my $gk (sort keys %{d.T.d}) {\n            my $dd = d.T.d->{$gk};\n            if (dd.T.m) {\n                #say \"Answers  $nk $gk: \".wdump 4, $dd;\n            }\n            elsif (dd.T.q) {\n                #say \"probly $nk $gk\";\n            }\n            else {\n                sayre \"Unclear $nk $gk:  \". ki $dd;\n            }\n        }\n    }\n    delete T.d;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 48
        dige: 6060b1b69930
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: doTd_48
      "y": 
        cv: '0.48'
        cvt: 0.48	C.t
        p: qq/Seven/Seven/Yod/Yod
  "0.49": 
    Y_49: 
      c: 
        el: 1
        s: "A.I.Y_49 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    V.ta->{$k} = I.d&hup,$at;\n    V.tv->{$k} = I.d&hup,$C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 49
        dige: a3500cd5c349
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,yat
        v: cY
      t: Y_49
      "y": 
        cv: '0.49'
        cvt: 0.49	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.52": 
    OlOMP_52: 
      c: 
        el: 1
        s: "A.I.OlOMP_52 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    Rw OMP $J $A $I $C $k $Y $V $at $ta $lv $vl;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 52
        dige: 24e5784b5003
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: OlOMP_52
      "y": 
        cv: '0.52'
        cvt: 0.52	C.t
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.58": 
    Y_58: 
      c: 
        el: 1
        s: "A.I.Y_58 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    V.lv->{$k} = $lv;\n    if (C.c.root) {\n        V.rl = $vl;\n        V.rv = $lv;\n        Rw TNews $J $talk:A.talk $rl:V.rl $rv:V.rv\n            if J.V;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 58
        dige: 8afb999ae4f7
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,ylv,yvl
        v: cY
      t: Y_58
      "y": 
        cv: '0.58'
        cvt: 0.58	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.582": 
    root_582: 
      c: 
        el: 1
        s: "A.I.root_582 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $root = C.c.root;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    return unless A.J.most.J eq A.J || A.J.C.c.Wo;\n    my $r = Rw scd $rl:vl $rv:lv;\n    return unless @{r.z};\n    aft { $@ || return; sayre \"$@  !~!! \".wdump 9, $r; };\n    C.c.em && die'wtf';\n    \n    my $em = C.c.em = {};\n    em.lines = r.z;\n    em.i = @{r.oldz};\n    \n    A.Subtle.em = 1;\n    A.t&em,6,2;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 582
        dige: bb70d9483888
        gk: root
        gro: Seven/SevWo
        nk: c
        rg: ylv,yvl
        v: croot
      t: root_582
      "y": 
        cv: '0.582'
        cvt: 0.582	C.t
        p: qq/Seven/Seven/SevWo/SevWo
em: 
  "0.21": 
    em_21: 
      c: 
        el: 1
        s: "A.I.em_21 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $em = C.c.em;\n    em.lines || die \"Not lines\";\n    em.hitime = hitime();\n    em.is.W = C.sc.Wid || A.J.id;\n    em.is.M = C.sc.Mid || A.J.name;\n    em.id = em.is.W.'.'.(0+em.i);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: em 21
        dige: c304cc4fd1ff
        gk: em
        gro: Seven/SevWo/Meta
        nk: c
        v: cem
      t: em_21
      "y": 
        cv: '0.21'
        cvt: 0.21	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
  "0.3": 
    eve_3: 
      c: 
        el: 1
        s: "A.I.eve_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $eve = C.sc.eve;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    `touch life/W/em.is.W\\.e`;\n    J.mo.s.al.opt.fole = [Followe=>W=>\"life/W/em.is.W\\.e\"];\n    # routes ids[] into All(Oth)\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: 2845d7c631b6
        gk: eve
        gkiss: s
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: sceve
        rg: J,em
        v: sceve
      t: eve_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
    jslines_3: 
      c: 
        el: 1
        s: "A.I.jslines_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $jslines = C.sc.jslines;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    my $N = [@{em.lines||die\"Nop\"}];\n    @$N = Rw humms $J $N wongui _;\n    @$N = Rw humms $J $N notnotjs _;\n    my $S = Rw humms $J $N spots;\n    em.lines = [map{\n        \" a\\.e(\".sjson($_).\");\"\n    }@{S.z}];\n    C.c.os = 1 if !grep {/\\S/} @{S.z};\n    C.sc.Wc = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: a74597f1757e
        gk: jslines
        gkiss: s
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scjslines
        rg: J,em
        v: scjslines
      t: jslines_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
    ressur_3: 
      c: 
        el: 1
        s: "A.I.ressur_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ressur = C.sc.ressur;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    saybl \"Ressurrecting $ressur ...\";\n    die \"zomp $ressur\" if $ressur =~ /\\W/;\n    die \"bno JSlines\" unless -e \"life/W/$ressur\";\n    `cd life; ln -s ../W/$ressur J/em.id\\.c`;\n    my $catch = sjson {y=>J=>id=>em.id};\n    I.d&writef,\"life/J\\.s\",$catch,1;\n    T.whack = 1; # out of em\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: bc77ff177d9a
        gk: ressur
        gkiss: s
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scressur
        rg: J,em
        v: scressur
      t: ressur_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
    ux_3: 
      c: 
        el: 1
        s: "A.I.ux_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ux = C.sc.ux;\n    my $em = C.c.em;\n    my $J = G.oin;\n    my $M = ['','',{W=>J.id},{z=>em.lines}];\n    em.lines = [\" a\\.om({},\".sjson($M).\",a,{});\"];\n    C.sc.Wc = 1;\n    n GW\n    # ^ router, W with an .e v\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 3
        dige: 23201747d7da
        gk: ux
        gkiss: s
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scux
        rg: em
        v: scux
      t: ux_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
  "0.446": 
    Wc_446: 
      c: 
        el: 1
        s: "A.I.Wc_446 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $Wc = C.sc.Wc;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    saybl \"Downing em.is.M: em.is.W: \".wdump 5,em.lines;\n    I.d&writef,\"life/W/em.is.W\\.c\",em.lines,em.i;\n    \n    # is coming soon: (only space or)\n    C.c.as = !C.c.os;\n    C.c.As = C.c.as;\n    C.sc.meta = 1;\n    C.sc.speak = 1 if C.c.as;\n    C.sc.takeover = 1 if C.c.As;\n    saybl \"WHITESPACE S em.is.M\" if C.c.os;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 446
        dige: b363141aaa57
        gk: Wc
        gkiss: s
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scWc
        rg: J,em
        v: scWc
      t: Wc_446
      "y": 
        cv: '0.446'
        cvt: 0.446	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.47": 
    meta_47: 
      c: 
        el: 1
        s: "A.I.meta_47 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $meta = C.sc.meta;\n    my $em = C.c.em;\n    G.Wh->{em.is.W} && return;\n    G.Wh->{em.is.W} = A.J;\n    my $me = I.d&hup,$em;\n    delete me.lines;\n    $me = sjson $me;\n    I.d&writef,\"life/W/em.is.W\\.i\",$me;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 47
        dige: 30bf9edceb58
        gk: meta
        gkiss: s
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scmeta
        rg: em
        v: scmeta
      t: meta_47
      "y": 
        cv: '0.47'
        cvt: 0.47	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.48": 
    speak_48: 
      c: 
        el: 1
        s: "A.I.speak_48 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $speak = C.sc.speak;\n    my $em = C.c.em;\n    return if G.Jlone;\n    \n    I.d&writef,\"life/J/em.id\\.c\",em.lines;\n    \n    my $catch = sjson {y=>J=>id=>em.id};\n    I.d&writef,\"life/J\\.s\",$catch,1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 48
        dige: 0d76e3292b22
        gk: speak
        gkiss: s
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scspeak
        rg: em
        v: scspeak
      t: speak_48
      "y": 
        cv: '0.48'
        cvt: 0.48	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.49": 
    takeover_49: 
      c: 
        el: 1
        s: "A.I.takeover_49 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $takeover = C.sc.takeover;\n    my $em = C.c.em;\n    -l $_ && `unlink $_` for \"life/W/em.is.M\";\n    `cd life/W; ln -s em.is.W\\.c em.is.M`;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 49
        dige: 9e3b4735db14
        gk: takeover
        gkiss: s
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: sctakeover
        rg: em
        v: sctakeover
      t: takeover_49
      "y": 
        cv: '0.49'
        cvt: 0.49	C.t
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
oJ: 
  "0.343": 
    J_343: 
      c: 
        el: 1
        s: "A.I.J_343 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return if ref $J;\n    $J = Rw Jto $name:J;\n    ref $J || die 'watt'.$J;\n    if (exists C.c.pi) {\n        J.Jiter = A.J; # erse rev\n        J.most->{$_} = A.J.most->{$_} for keys %{A.J.most||{}};\n    }\n    # til the I train shows up:\n    J.V = J.most.J.inV || 1 if A.J.V == 2 || J.most.J.inV;\n    J.A.Indo = 2;\n    #C.c.s ||= 'Wildy';\n    sayyl \"J33   Made J.name\" unless J.Jiter;\n    C.c.J = T.at.J = $J;\n    A.jr&J,$J; # sc, c, and on sphere\n    die \"noovewr   C.c.J ne $J\" if ref C.c.J && C.c.J ne $J;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 343
        dige: 8ee6ec538437
        gk: J
        gro: Modulator/Jing/Joot
        its: 1
        nk: c
        v: cJ
      t: J_343
      "y": 
        cv: '0.343'
        cvt: 0.343	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.344": 
    J_344: 
      c: 
        el: 1
        s: "A.I.J_344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    # here before we could be interrupting\n    my $isJ = sub { my $J = shift; ref $J eq 'HASH' && J.bb };\n    if (A.J ne $J) {\n        # what we are holding out as .e and .s helps it leave\n        A.ztime = 6 if exists C.c.e;\n        sayre \"THosught of A.J.name  holds  J.name  \".ki C.c if A.V&V;\n        return;\n    }\n    unless (exists C.c.e || $isJ->(C.c.s)) { # subscribe maintain there\n        say \"threesorbtion: A.J.name to J.name\"\n            .\" is not holding e or sJ\" if A.V&V;\n        # absorb self Cing\n        T.not = 1;\n        return;\n    }\n    my $S = C.c.s;\n    $S = {name=>\"An: C.c.s\"} if !ref $S;\n    saybl \"In s A.J.name: J.name   \".ki(C.c.e)\n        .\"\\n   unto  S.name     \".ki $C if A.V&V;\n    die \" unable to count self ?\" if C.c.s eq $J;\n    die \"thoughts of a thous\" if A.J ne $J;\n    if (!exists C.c.e) {\n        # be thing=>W=>other, later\n        C.c.IsOn || return do {\n            say \"Comebacking J.name with C.t...\" if A.V&V;\n            Rw wayt $J $C $d=0.01 $p=jive;\n            T.not = 1;\n        }\n    }\n    # no J being tricks for handulation, event energy\n    A.Iso.th = 1;\n    delete A.Iso.oJ;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 344
        dige: f82611e00c9a
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_344
      "y": 
        cv: '0.344'
        cvt: 0.344	C.t
        p: qq/threes/threes
  "0.434": 
    J_434: 
      c: 
        el: 1
        s: "A.I.J_434 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    $J = C.c.J = C.sc.J;\n    # TODO: soft acuminy over \\d esp. until .bb or something\n    A.mo.Js->{J.name} = $J;\n    # A falls\n    # A.mo exits\n    # J.A persists\n    J.A.first ||= hitime();\n    if (C.sc.W && G.oin ne $J) {\n        my $lev = G.oin.A.tid;\n        if (J.A.tidi && (J.A.tidi + 3) > $lev) {\n            A.ztime ||= 4;\n        }\n        else {\n            J.A.tidi = $lev;\n        }\n    }\n    sayre \"same A.J.name inside J.name\" if A.J eq $J;\n    if (exists C.sc.pi) {\n        die 'JiternotAJ' if J.Jiter ne A.J;\n        die 'pimostJ'if J.most.J eq $J;\n    }\n    else {\n        die 'esel' if J.most.J ne $J;\n    }\n    A.ztime ||= 6;\n    A.time && sayre \"Had atime\";\n    A.time = sub { # A.t& cover, serve single digit ad hocs, like 2\n        my ($JJ,$q) = @_; die\"JTIMEJ\" if $JJ ne $J;\n        A.ztime >= $q\n    };\n    if (C.sc.pi) {\n        J.A.d = J.Jiter.A.d + 1;\n        J.ind = join '  ', ('') x J.A.d;\n        J.name = \"J.A.d. C.c.pi*C.t\";\n        J.d = $C;\n        A.ztime = 6 if A.ztime < 6;\n    }\n    J.C = $C;\n    A.talk .= \" J: J.name\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 434
        dige: 51bc0362e5f1
        gk: J
        gro: Modulator/Jing/Jamping
        its: 1
        nk: c
        v: cJ
      t: J_434
      "y": 
        cv: '0.434'
        cvt: 0.434	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jamping/Jamping
  "0.61": 
    J_61: 
      c: 
        el: 1
        s: "A.I.J_61 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        $T->{alk} = \"$A->{talk}  TT  $A->{ztime}\";\n        $A->{time}->($J, 6) || return do {\n            say \"SKive! $T->{alk}\" if $A->{V}->(\"skive\");\n            $T->{nose} = 1;\n        };\n        sayyl \"J6 ! $T->{alk}\" unless !$A->{V}->(\"sixes\") || $C->{sc}->{pi} || $T->{alk} =~ /^all/;\n        $A->{Subtle}->{J} = 1;\n        $A->{t}->(\"J\",9,1);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 61
        dige: 7184afd776e4
        gk: J
        gro: Modulator/Jing/Jumps
        its: 1
        nk: c
        v: cJ
      t: J_61
      "y": 
        cv: '0.61'
        cvt: 0.61	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jumps/Jumps
  "0.71": 
    J_71: 
      c: 
        el: 1
        s: "A.I.J_71 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        $T->{nose} && return do {\n            sayre\"nose $T->{alk}\" if $A->{V}->(\"nose\");\n        };\n        # if $T->{same} and no J action, rv says if concealed J action\n        # with some clues maybe, and a thin foundation W that leads to more\n        # W you may have around, for the dependency file\n        # there would be idly stuff, pi protocols registered to subscribe notifies\n        # wants to check Js for action\n        # pi columns could be optimised # A light leaks\n        #return sayre \"same $T->{alk}\" if $T->{same};\n        $J->{most}->{eo} = 'Sev' if $J->{A}->{II}->{Sev};\n        say \"oJ77 77 $T->{alk}     -> $J->{most}->{eo}\"\n            unless !$A->{V}->(\"sevens\") || $J->{yt}->{quiet} || $C->{sc}->{pi} || $T->{alk} =~ /^all/;\n        $G->{w}->(\"$J->{most}->{eo}\", {J => $J, A => $A}, $G);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 71
        dige: fef97be28189
        gk: J
        gro: Modulator/Jing/Jumps
        its: 1
        nk: c
        v: cJ
      t: J_71
      "y": 
        cv: '0.71'
        cvt: 0.71	C.t
        p: qq/Modulator/Modulator/Jing/Jing/Jumps/Jumps
th: 
  "0.4": 
    J_4: 
      c: 
        el: 1
        s: "A.I.J_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $ar;\n    ar.A=$A;ar.G=$G;ar.C=$C;ar.T=$T;ar.J=$J;\n    C.c.e ?\n        Rw threve\n    :\n        Rw thank;\n    if (T.oke) {\n        delete A.Iso.th;\n        A.Iso.oJ = 1;\n        A.ztime = 6;\n        return sayyl \"Tanking into J.name\";\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 4
        dige: db9c30797819
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_4
      "y": 
        cv: '0.4'
        cvt: 0.4	C.t
        p: qq/threes/threes
