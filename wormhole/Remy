--- 
Art: 
  "0.3": 
    muchofany_3: 
      c: 
        el: 2
        s: "A.I.muchofany_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    for my $k (keys %{T.D.sc.scindex||{}}) {\n        exists C.sc->{$k} || next;\n        A.Subtle.Styles = 1;\n        A.t&Styles,6,1;\n        return;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Art 3
        dige: 8b7e1a44637c
        nov: 1
        nv: 1
        rg: J,V,yk,yat,yta,ylv,yvl
        scindex: 
          bg: 1
          bgh: 1
          bgi: 1
          blr: 1
          bo: 1
          bottom: 1
          bri: 1
          co: 1
          con: 1
          deco: 1
          dis: 1
          float: 1
          fs: 1
          fsi: 1
          fw: 1
          gray: 1
          height: 1
          hs: 1
          hue: 1
          inv: 1
          lef: 1
          left: 1
          lh: 1
          ls: 1
          ma: 1
          mb: 1
          mih: 1
          miw: 1
          ml: 1
          mr: 1
          mt: 1
          opa: 1
          over: 1
          poi: 1
          rad: 1
          ri: 1
          right: 1
          sat: 1
          scale: 1
          sep: 1
          sha: 1
          top: 1
          tro: 1
          wb: 1
          width: 1
          ws: 1
          zi: 1
          zie: 1
          zig: 1
        tldo: scgkindex
        v: 1
      t: muchofany_3
      "y": '0.3'
I: 
  "0.1": 
    AZu: 
      c: 
        el: 1
        s: "A.I.AZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die 'amany' if keys %$s > 1;\n    my ($cv,$ac) = %$s;\n    my ($AA,$CC,$cov) = @$ac;\n    my $aa = $AA?\"AAcv=AA.cv\":\"NoAA\";\n    $AA ||= $A; # spawning cone thing\n    I.d&n,$AA,$CC,$G,$T;\n    $A = $AA;\n    # see I.ex, changes A.cv = $vb to avoid A.t fulfilling exited time\n    if (A.cv > $cv) {\n        #sayre \"Double comback A.cv > $cv: CC.t CC.y.cv \";\n        #return T.not = 1;\n    }\n    A.cv = $cov || $cv;\n    $T->{$_} = A.T->{$_} for keys %{A.T||{}};\n    I.d&An;\n    T.whack = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6faf184f70d4
        gro: Indulator/Servo
        l: Motion/oseverato
      t: AZu
      "y": 
        cv: '0.3'
        cvt: 0.3	AZu
        p: qq/Indulator/Indulator/Servo/Servo
    Act: 
      c: 
        el: 1
        s: "A.I.Act = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $A = {%$s};\n        $A->{mo}->{ont} = $A;\n        $A->{s} = shift @{$A->{N}};\n        $T = {};\n        $T->{oM} = [];\n        $I->{d}->(\"n\",$A,{},$G,$T);\n        $I->{d}->(\"An\");\n        $A->{t}->(\"2\");\n        map{$I->{nF}->{$_}}qw'A C T';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e24a2c98dffd
        gro: Indulator/Motion
      t: Act
      "y": 
        cv: '0.3'
        cvt: 0.3	Act
        p: qq/Indulator/Indulator/Motion/Motion
    An: 
      c: 
        el: 1
        s: "A.I.An = sub {\n    my ($A,$C,$G,$T,@Me) = @_;\n    my $I = A.I;\n        $A->{note} = {}; # pinging csc\n        $A->{talk} = \"$A->{J}->{name} \".($A->{J}->{le} && $A->{J}->{le}->{name});\n        $A->{c} = sub { $I->{d}->(\"c\",@_); };\n        $A->{e} = sub { $I->{d}->(\"e\",@_); };\n        $A->{us} = sub { $I->{d}->(\"us\",@_); };\n        $A->{t} = sub { $I->{d}->(\"t\",@_); };\n        $A->{V} = sub {\n            my $bl = shift;\n            $A->{J}->{VV} && $A->{J}->{VV}->{$bl}\n            || $A->{J}->{V}\n        };\n        $A\n};A.I.d&An;\n"
      sc: 
        acgt: 1
        args: A,C,G,T
        code: I 1
        dige: fb63d04c1357
        gro: Indulator/Motion
      t: An
      "y": 
        cv: '0.3'
        cvt: 0.3	An
        p: qq/Indulator/Indulator/Motion/Motion
    Cngk: 
      c: 
        el: 1
        s: "A.I.Cngk = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$D,@Me) = @M;\n    my $I = A.I;\n    ref $A || die \"nmonref A!\";\n    A.bangdesk.bang->{Cngek} = sub {\n        sayre \"was Cngk; \".ki($s).\"\\nWith: \".ki($D)\n    };\n    return 1 if D.c.any;\n    die \"nonNKnk\".ki$D if !D.c.nk;\n    return 0 if !exists $s->{D.c.nk};\n    return [$s->{D.c.nk}] if !exists D.c.gk;\n    return 0 if !exists $s->{D.c.nk}->{D.c.gk};\n    return [$s->{D.c.nk}->{D.c.gk}];\n};\n"
      sc: 
        acgt: s,D
        args: A,C,G,T,s,D
        code: I 1
        dige: 4136e2acff76
        gro: Indulator/C
      t: Cngk
      "y": 
        cv: '0.3'
        cvt: 0.3	Cngk
        p: qq/Indulator/Indulator/C/C
    ECu: 
      c: 
        el: 1
        s: "A.I.ECu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # extend C on the way in to another dome, magnetised into our M\n    # probably for collapsing roooves...\n    # dumber than sc decompresphere & playing out\n    # (is mailing itself further instructions, intro c, further lines)\n    # an In persona, joining our M\n    # push to dome\n    # that must in  A\n    ref $s eq 'ARRAY' || die;\n    my ($N,$c) = @$s;\n    # take 4s v             add 3s v         next 2 \n    $N = [{MZ=>A.fl}, {MZ=>{'3 doex'=>$c}}, @$N];\n    # and In could feel our light cone\n    Rw In $J:A.J $M:T.oM $N;\n    # ^but instead push to A.N and A.No, the sister strand Whare Y Whare\n    # and A walks through t&Y, d&Whare(6)\n    # turns via n&ACGT\n    # the time beams mapped... a W concat couldol\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c5cb93541aaa
        gro: Indulator/Servo
        l: Motion
      t: ECu
      "y": 
        cv: '0.3'
        cvt: 0.3	ECu
        p: qq/Indulator/Indulator/Servo/Servo
    EZu: 
      c: 
        el: 1
        s: "A.I.EZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $Z = I.d&iZu,$s;\n    warn \"About EZ\";\n    for my $k (sort keys %$Z) {\n        my $N = $Z->{$k};\n        $N = [ map { [$_] } split \"\\n\",$N ] if !ref $N;\n        Rw In $M:T.oM $N;\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6f35ecc1311d
        gro: Indulator/Servo
        l: Motion
      t: EZu
      "y": 
        cv: '0.3'
        cvt: 0.3	EZu
        p: qq/Indulator/Indulator/Servo/Servo
    El: 
      c: 
        el: 1
        s: "A.I.El = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= {bb=>{},name=>$name};\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 9fd87735d303
        gro: Modems/Pha
        l: "#c without a self"
      t: El
      "y": 
        cv: '0.3'
        cvt: 0.3	El
        p: qq/Modems/Modems/Pha/Pha
    Elj: 
      c: 
        el: 1
        s: "A.I.Elj = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= Rw Jto - $le:J $name;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 3001808fbcce
        gro: Modems/Pha
        l: "#c with a self"
      t: Elj
      "y": 
        cv: '0.3'
        cvt: 0.3	Elj
        p: qq/Modems/Modems/Pha/Pha
    Elvis: 
      c: 
        el: 1
        s: "A.I.Elvis = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$Y,@Me) = @M;\n    my $I = A.I;\n    my $wtf = I.d&wtfch,J.bb,Y.bb;\n    \n    Y.tw ||= {};\n    Y.lo = {}; # compile\n    \n    for my $mo (qw'gone diff new') {\n        for my $r (keys %{$wtf->{$mo}}) {\n            my $j = I.d&rJ,$r,$J;\n            j.r = $r;\n            j.lt = j.cv.\"\\t\".j.t;\n            if (!j.lt=~/\\S/) {\n                die \"Got $r =>   \".ki $j;\n            }\n            if ($mo eq 'gone') {\n                delete Y.bb->{j.r};\n                delete Y.tw->{j.lt}->{j.style};\n            }\n            else {\n                Y.bb->{j.r} = j.s;\n                Y.tw->{j.lt}->{j.style} = j.s;\n            }\n            Y.lo->{j.lt}->{$mo}->{j.style} = j.s;\n        }\n    }\n    \n    Y.tv ||= {};\n    Y.v ||= {};\n    Y.go = {};\n    my $same = 1;\n    for my $k (keys %{Y.lo}) {\n        my $tf = Y.lo->{$k};\n        my $cs = Y.tw->{$k};\n        if (tf.new && !tf.gone && !tf.diff && keys %{tf.new} == keys %$cs) {\n            $same = 0; # new line to make\n        }\n        if (tf.gone && !keys %$cs) {\n            $same = 0; # line to disappear\n            my $C = Y.go->{$k} = delete Y.tv->{$k};\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            delete Y.v->{$cv}->{$t};\n            delete Y.v->{$cv} unless keys %{Y.v->{$cv}};\n        }\n        if (tf.diff || tf.new) {\n            keys %$cs || die 'nokeys';\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            defined $cv || die \"twas $k\";\n            my $foam = sub {\n                my $C = shift;\n                %$C = (t=>$t,y=>{cv=>$cv},c=>{},sc=>{%$cs});\n                C.c.s = delete C.sc->{''} if exists C.sc->{''};\n            };\n            $foam->(Y.tv->{$k} ||= {});\n            $foam->(Y.v->{$cv}->{$t} ||= {});\n        }\n    }\n    if (!$same) {\n        Y.vs = [];\n        Y.kvi = {};\n        Y.cvi = {};\n        Y.te = {};\n        my $i = 0;\n        for my $k (sort keys %{Y.tv}) {\n            my $C = Y.tv->{$k} || die \"wtf $k\";\n            push @{Y.vs}, $C;\n            Y.kvi->{$k} = $i;\n            Y.cvi->{C.y.cv} ||= $i;\n            Y.te->{C.t}->{C.y.cv} = $C;\n            $i++;\n        }\n    }\n    \n    Y.ra = I.d&ratio,wtf.sami,wtf.tot;\n    Y.rato = wtf.tot;\n    Y.revs = !$same;\n    \n    $Y;\n};\n"
      sc: 
        acgt: J,Y
        args: A,C,G,T,J,Y
        code: I 1
        dige: 16dbd22a49a6
        gro: Modems/Pha
        l: "#c"
      t: Elvis
      "y": 
        cv: '0.3'
        cvt: 0.3	Elvis
        p: qq/Modems/Modems/Pha/Pha
    MZu: 
      c: 
        el: 1
        s: "A.I.MZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $uM = sub {\n        my ($k,$v) = @_;\n        if (defined $v && $v eq '0') {\n            delete A.fl->{$k}\n        }\n        else {\n            A.fl->{$k} = $v || 1;\n        }\n    };\n    ref $s eq 'HASH' ?\n        map{ $uM->($_,$s->{$_}) } keys %$s\n    :   map{\n            /^(.+?)(?::(.+))?$/ || die;\n            $uM->($1,$2);\n        } split /\\s+/, $s;\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 3ae04b5b0475
        gro: Indulator/Servo
      t: MZu
      "y": 
        cv: '0.3'
        cvt: 0.3	MZu
        p: qq/Indulator/Indulator/Servo/Servo
    Other: 
      c: 
        el: 1
        s: "A.I.Other = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $ar = $F[0]->{ar};\n        $A = $G->{w}->(\"RB\", {%$ar, t => $s}, $G);\n        $I = $A->{I};\n        # midnight at the oasis\n        $I->{d}->(\"n\",$A,{},$G,{});\n        $I->{d}->(\"An\");\n        $A->{t}->(\"1\");\n        $A->{t}->(\"11111\") || warn \"NO 1\";\n        ($A,$A->{I})\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 9e38e8306a8d
        gro: Indulator/Motion
      t: Other
      "y": 
        cv: '0.3'
        cvt: 0.3	Other
        p: qq/Indulator/Indulator/Motion/Motion
    Tat: 
      c: 
        el: 1
        s: "A.I.Tat = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $at = delete $T->{at};\n        $at || die \"youAT\";\n        $C->{sc}->{$_} = $at->{$_} for keys %$at; # sizling update sprites\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 0a4f4c661b5b
        gro: Indulator/Motion
      t: Tat
      "y": 
        cv: '0.3'
        cvt: 0.3	Tat
        p: qq/Indulator/Indulator/Motion/Motion
    WZu: 
      c: 
        el: 1
        s: "A.I.WZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $Z = I.d&iZu,$s;\n    warn \"About WZ\";\n    for my $k (sort keys %$Z) {\n        my $s = $Z->{$k};\n        die wdump $s if ref $s ne 'ARRAY';\n        unshift @{A.N}, @$s;\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a36724ae5aaf
        gro: Indulator/Servo
        l: Motion
      t: WZu
      "y": 
        cv: '0.3'
        cvt: 0.3	WZu
        p: qq/Indulator/Indulator/Servo/Servo
    ar: 
      c: 
        el: 1
        s: "A.I.ar = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $ar;\n        $ar->{A}=$A;$ar->{G}=$G;$ar->{C}=$C;$ar->{T}=$T;$ar->{I}=$I;\n        $ar;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 9e297269b850
        gro: Indulator/Motion
      t: ar
      "y": 
        cv: '0.3'
        cvt: 0.3	ar
        p: qq/Indulator/Indulator/Motion/Motion
    array: 
      c: 
        el: 1
        s: "A.I.array = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return I.d&fourreal,$s if @$s != 1 && !ref $s->[0] || $s->[0] =~ /^\\w+$/;\n    return I.d&fourstring,$s->[0] if @$s == 1 && !ref $s->[0];\n    # should stick In in first and M it? \n    # kind of motion that wants to be unsure in the wild\n    unshift @{A.N}, @$s;\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1621c6fcf424
        gro: Indulator/SlideEa
      t: array
      "y": 
        cv: '0.3'
        cvt: 0.3	array
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    as: 
      c: 
        el: 1
        s: "A.I.as = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$x,@Me) = @M;\n    my $I = A.I;\n    for (qw'begin bb ord tim wtf') {\n         exists $x->{$_} || next;\n         my $v = $x->{$_};\n         $v = [@$v] if ref $v eq 'ARRAY';\n         $v = {%$v} if ref $v eq 'HASH';\n         $s->{$_} = $v;\n    }\n};\n"
      sc: 
        acgt: s,x
        args: A,C,G,T,s,x
        code: I 1
        dige: e6a7402c5fdd
        gro: Modems/Pha
      t: as
      "y": 
        cv: '0.3'
        cvt: 0.3	as
        p: qq/Modems/Modems/Pha/Pha
    atom: 
      c: 
        el: 1
        s: "A.I.atom = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($last,$here,@Me) = @M;\n    my $I = A.I;\n    # spacin\n    here.dist = here.cv - last.cv;\n    # twistin spin inherit\n    here.spin += last.spin;\n    # scale local-local change\n    here.rad += here.spin * here.dist * 10;\n    # builds rad on rad\n    here.rad += last.rad;\n    # distort space + more ways, orbital\n    # chuck skeletons for mods\n    # adapt M meta for what kinda places things want\n    # into constellations of high level things\n    # atomised hairs\n    here.zoom ||= last.zoom;\n    here.dist *= here.zoom if here.zoom;\n    # and move\n    here.x = last.x + (here.rad ? cos(here.rad) : 0) * here.dist;\n    here.y = last.y + (here.rad ? sin(here.rad) : 1) * here.dist;\n};\n"
      sc: 
        acgt: last,here
        args: A,C,G,T,last,here
        code: I 1
        dige: a2b2426c55db
        gro: GeoSo
      t: atom
      "y": 
        cv: '0.3'
        cvt: 0.3	atom
        p: qq/GeoSo/GeoSo
    bandon: 
      c: 
        el: 1
        s: "A.I.bandon = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    delete s.J.phy->{s.name};\n    s.abandoned = 1;\n    if (my $x = s.head) {\n        I.d&as,$s,$x;\n    }\n    I.d&end,$s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e6de6441b8ff
        gro: Modems/Pha
      t: bandon
      "y": 
        cv: '0.3'
        cvt: 0.3	bandon
        p: qq/Modems/Modems/Pha/Pha
    c: 
      c: 
        el: 1
        s: "A.I.c = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    I.d&inDin,$C,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: a931936381c2
        gro: Indulator/C
      t: c
      "y": 
        cv: '0.3'
        cvt: 0.3	c
        p: qq/Indulator/Indulator/C/C
    carebowl: 
      c: 
        el: 1
        s: "A.I.carebowl = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$iii,$x,$xrd,@Me) = @M;\n    my $I = A.I;\n    for my $ik (sort keys %$iii) {\n        my $D = $iii->{$ik};\n        if (my $nk = D.sc.nk) {\n            my $C = I.nF.C;\n            next if !exists $C->{$nk};\n            if (my $gk = D.sc.gk) {\n                next if !exists $C->{$nk}->{$gk};\n            }\n        }\n        my $act;\n        my $dont;\n        if (D.sc.acgt && D.sc.act) {\n            $act = 1;\n            # acgtsubs can be defined at any cv\n            # run themselves if act\n            # usu. one receiver (Ci) and the rest scheme\n            die \"D.t .act gets... D.sc.act\" if D.sc.act ne '1';\n            $dont = 1 if exists A.I->{D.t};\n        }\n        # way or acgt-setuping-way\n        unless ($dont) {\n            my $paw = join\"_\",'',I.k,I.cv,D.t;\n            $paw =~ s/\\W//g;\n            Rw $paw $A $C $G $T $__D:D;\n        }\n        # most tiny ticks\n        # this ind is all flywheel\n        # it's a kind of unity that wants to be a block of code like this\n        # and c\n        my @is = A.s;\n        @is = I.d&scIfs,D.sc.Ifs if D.sc.Ifs;\n        @is || next;\n        if ($act) {\n            push @$xrd, [I.k,$ik];\n            my $Ds = $x->{I.k}->{$ik} ||= {};\n            Ds.D = $D;\n            Ds.is = \\@is;\n            D.sc.its = @is;\n        }\n        # TreeD\n        $s->{I.k}->{I.cv}->{$ik} = $D;\n    }\n};\n"
      sc: 
        acgt: s,iii,x,xrd
        args: A,C,G,T,s,iii,x,xrd
        code: I 1
        dige: 1e38d8a681fb
        gro: Indulator/KnowTime
        l: "#c"
      t: carebowl
      "y": 
        cv: '0.3'
        cvt: 0.3	carebowl
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    cole: 
      c: 
        el: 2
        s: "A.I.cole = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $h;\n    (h.r, h.g, h.b, h.a) = ($1, $2, $3, $4)\n        if $s =~ /^(\\w)(\\w)(\\w)(\\w)?$/ || die \"not cole: $s\";\n    if (defined h.a) {\n       # do an rgba(255,255,255,1)\n       for my $k (qw'r g b a') {\n           my $e = $h->{$k};\n           $e = \"$e$e\" if length $e == 1; # out of 255\n           $h->{$k} = hex $e;\n       }\n       h.la = sprintf '%.2f', h.la / 255; # out of 1\n       return \"rgba(h.r,h.g,h.b,h.a)\";\n    }\n    else {\n       return sprintf \"#%s%s%s\", h.r, h.g, h.b;\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 17ab7a97b981
      t: cole
      "y": '0.3'
    convog: 
      c: 
        el: 1
        s: "A.I.convog = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($in,$Q,@Me) = @M;\n    my $I = A.I;\n    Q.path && Q.onpa || die \"learn more\";\n    for my $pin (@{Q.path}) {\n        for my $pTn (@{Q.onpa}) {\n            I.d&pass,$pTn,$in;\n        }\n        I.d&pass,$pin,$in;\n    }\n};\n"
      sc: 
        acgt: in,Q
        args: A,C,G,T,in,Q
        code: I 1
        dige: f7fad22aaec1
        gro: Seven/Yools
      t: convog
      "y": 
        cv: '0.3'
        cvt: 0.3	convog
        p: qq/Seven/Seven/Yools/Yools
    d: 
      c: 
        el: 1
        s: "A.I.d = sub {\n    my ($s,@Me) = @_;\n    my $I = A.I;\n    # grease thje stomac\n    shift; # imporo\n    my $y = $I->{$s} || die \"no way named '$s'\";\n    my $P = I.nF ||= {};\n    P.A||die'PnoA!?'; # papto\n    $y->(P.A,P.C,P.G,P.T,@_);\n};\n"
      sc: 
        acgt: 1
        args: s
        code: I 1
        dige: 477afcd6828d
        gro: Indulator/IStuff
      t: d
      "y": 
        cv: '0.3'
        cvt: 0.3	d
        p: qq/Indulator/Indulator/IStuff/IStuff
    defsa: 
      c: 
        el: 2
        s: "A.I.defsa = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    s.v || s.et\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 77c95668df80
      t: defsa
      "y": '0.3'
    e: 
      c: 
        el: 1
        s: "A.I.e = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    my $e = I.d&sces,C.c.e||return();\n    I.d&inDin,$e,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: 2d0b2e86424f
        gro: Indulator/C
      t: e
      "y": 
        cv: '0.3'
        cvt: 0.3	e
        p: qq/Indulator/Indulator/C/C
    empc: 
      c: 
        el: 2
        s: "A.I.empc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    $s .= 'em' if $s !~ /(%|em|px)/;\n    $s =~ s/^-?0em$/0%/;\n    $s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a71a55805458
      t: empc
      "y": '0.3'
    end: 
      c: 
        el: 1
        s: "A.I.end = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = s.J.phl->{s.name} ||= {name=>s.name, l=>[]};\n    s.ended = hitime();\n    delete s.J.phy->{s.name};\n    shift @{y.l} while @{y.l} > 5;\n    # layers ^ rolling in time index .r -> the y.l\n    # so last phase of $name can be found?\n    push @{y.l}, $s;\n    if (s.bb) {\n        my $w = @{y.l};\n        y.l_bb->{$_} = $w for keys %{s.bb};\n    }\n    # somewhere thinks about what happened\n    $y\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 45e558668e71
        gro: Modems/Pha
      t: end
      "y": 
        cv: '0.3'
        cvt: 0.3	end
        p: qq/Modems/Modems/Pha/Pha
    ex: 
      c: 
        el: 1
        s: "A.I.ex = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($i,$K,$cv,$av,@Me) = @M;\n    my $I = A.I;\n    # was Rw SNat $A $C $G $T $I $i $K $cv;\n    # baseism\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    my $sp = $av ? \" Flav $av (no A.cv)\" : \"\";\n    \n    my $talk = \"A.talk: $K$sp $Av > $c --- C.t \";\n    \n    my $aim = {$K=>1};\n    if ($aim->{A.am}) {\n        $aim->{$_} = 1 for @{A.Isl||[]};\n        aim.I = 1;\n    }\n    \n    my $yv = {};\n    # make K/cv/t -> cv/K/t\n    for my $k (sort keys %$i) {\n        my $ii = $i->{$k};\n    \n        next if $k eq 'Ii';\n        next if $k eq 'ooI';\n        ref $ii eq 'HASH' || die \"weird $k=$ii\";\n    \n        for my $vc (sort keys %$ii) {\n            my $iii = $ii->{$vc};\n            die'$k !0<$vc<1' unless $vc > 0 && $vc < 1;\n            $yv->{$vc}->{$k} = $iii;\n        }\n    }\n    \n    # do stuff\n    my $vb; # in fractions\n    my $wasSubtle;\n    for my $vc (sort keys %$yv) {\n        my $is = $yv->{$vc};\n        my $s = {};\n        my $x = {};\n        my $xrd = [];\n    \n        next if $vc <= $Av && $vc != $c;\n        next if $vc > $c;\n    \n        # our  osc (stay in K per Subtle ness);\n        my @iz = grep {\n            $aim->{$_} || (aim.I && (A.Iso->{$_} || I.also->{$_}))\n        } sort keys %$is;\n        next if !@iz;\n    \n        # decide inter cv wideness loop\n        if ($wasSubtle) {\n            undef $wasSubtle;\n        }\n        elsif ($vb && $vc > $vb && (\n            @{A.N} || @{A.mo.re->{$vb}||[]}\n            )) {\n            # sincing, wide order\n            # various others want to be around for only some of the process...\n            sayre \"$vb -> $vc  bump, \". @{A.N} if A.J.V > 1;\n            T.Z->{$vb} = 1;\n            A.cv = $vb; # so we dont wind up to 6 on the way out of t\n            return T.not = 1;\n        }\n    \n        # pin down poles\n        I.cv = $vc;\n        I.vb = $vb;\n        # draw curvles as spirals done\n    \n        for my $k (@iz) {\n            my $iii = $is->{$k};\n            I.k = $k;\n            I.d&carebowl,$s,$iii,$x,$xrd;\n        }\n        # suble\n        my $se = Rw TreeD $s $scby=gro \n            if A.J.V > 1 && keys %$s;\n        $c == 0.1 ? saygr $se : say $se if $se;\n    \n        my $o;\n        (o.vc,o.vb) = ($vc,$vb);\n        I.d&exood,$o,$x,$xrd;\n        ($vc,$vb) = (o.vc,o.vb);\n        if (o.Subtle && !o.nonSubtle) {\n            $wasSubtle = 1;\n        }\n    \n        return if T.not;  # will &z, oseve\n        return if delete T.whack;\n    }\n};\n"
      sc: 
        acgt: i,K,cv,av
        args: A,C,G,T,i,K,cv,av
        code: I 1
        dige: c1559663dda3
        gro: Indulator/KnowTime
        nois: "#c"
      t: ex
      "y": 
        cv: '0.3'
        cvt: 0.3	ex
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    exactl: 
      c: 
        el: 1
        s: "A.I.exactl = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $q = shift;\n    my $y = I.d&end,$s;\n    my $cur = y.l->[-1];\n    my $last = y.l->[-2];\n    $cur eq $s || die \"sidf$cur $s\";\n    last.bb ||= {};\n    \n    my $wtf = I.d&wtfch,cur.bb,last.bb;\n    \n    delete s.J.bb->{$_} for keys %{wtf.gone};\n    \n    # see s.extill, time passing interesto...\n    # churn stats like 30% of last disappear, 20% new\n    s.wtf = $wtf;\n    $wtf;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c98060f45a3a
        gro: Modems/Pha
        l: "#c un-ins things from J"
      t: exactl
      "y": 
        cv: '0.3'
        cvt: 0.3	exactl
        p: qq/Modems/Modems/Pha/Pha
    exood: 
      c: 
        el: 1
        s: "A.I.exood = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$x,$xrd,@Me) = @M;\n    my $I = A.I;\n    for my $kik (@$xrd) {\n        my ($k,$ik) = @$kik;\n        A.Subtle && A.Subtle->{$k} ? o.Subtle++ : o.nonSubtle++;\n        my $Ds = $x->{$k}->{$ik};\n        my $D = Ds.D;\n        for my $s (@{Ds.is}) {\n            D.sc.acgt eq 's'||die \"nonacgts\".wdump $D;\n            exists A.I->{D.t}||die \"acgtI D.t not up: \".wdump A.I;\n    \n            T.D = $D;\n            I.d&D.t,$s;\n    \n            I.acted and I.d&acted,$s;\n    \n            if (my $ut = T.ut) {\n                if (ut.matchTd) {\n                    my $d = s.d || die \"confuse\";\n                    d.od.s.T.q->{d.e.k} ||= $d;\n                    d.od.s.T.m->{d.e.k} ||= $d\n                        unless delete(T.noTd);\n                }\n                else { die\"utrowhat \".wdump 2, $ut }\n            }\n    \n            # outwave: schools of many fish (not upcv if !@is)\n            o.vb ||= o.vc if D.sc.v;\n    \n            last if T.not || T.whack;\n        }\n        delete T.ut;\n        last if T.not || T.whack;\n    }\n};\n"
      sc: 
        acgt: o,x,xrd
        args: A,C,G,T,o,x,xrd
        code: I 1
        dige: 3cd32866a91c
        gro: Indulator/KnowTime
        l: "#c"
      t: exood
      "y": 
        cv: '0.3'
        cvt: 0.3	exood
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    flywheels: 
      c: 
        el: 1
        s: "A.I.flywheels = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # wants to be a six alwayser... ,{code=>'I 6',act=>'all'} # $II->{All}? $II->{Fly}?\n        # its $I->{d}->(\"nded\") and holds things to code, $v a spiral it's filling up\n        # $v could be mounted... aj8 mysteries\n        for my $k (sort keys %{$A->{fl}}) {\n            my $v = $A->{fl}->{$k};\n            #   ^ bus to ride\n            $k = $2 if $k =~ /^(\\d+) (.+)$/;\n            $G->{w}->(\"ym/$k\", {I => $I, J => $A->{J}, A => $A, C => $C, v => $v, G => $G, T => $T}, $G);\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6a90e0b56807
        gro: Indulator/Motion
      t: flywheels
      "y": 
        cv: '0.3'
        cvt: 0.3	flywheels
        p: qq/Indulator/Indulator/Motion/Motion
    fourreal: 
      c: 
        el: 1
        s: "A.I.fourreal = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    (C.t, C.y) = @$s;\n    C.c  = $s->[2] if exists $s->[2];\n    C.sc = $s->[3] if exists $s->[3];\n    die'@>4'.wdump $s if @$s > 4;\n    die\"C.t from \".wdump $s if ref C.t; # dives\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 87baea0c56c8
        gro: Indulator/C
      t: fourreal
      "y": 
        cv: '0.3'
        cvt: 0.3	fourreal
        p: qq/Indulator/Indulator/C/C
    fourstring: 
      c: 
        el: 1
        s: "A.I.fourstring = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    I.d&MZu,$1 if $s =~ /^\\s*#?\\s*MZ (.+)$/;\n    $s =~ s/^\\s+//;\n    if ($s =~ /^\\s*(#.*)$/) {\n       T.not = 1;\n       T.com = $1;\n    }\n    elsif ($s eq '') {\n       T.not = T.space = 1;\n    }\n    else {\n       my $ci = $s;\n       for my $nk (qw't y c sc') {\n           if ($ci =~ s/^(\\S+) *//) { # some t are types of space\n               my $v = $1;\n               $v = I.d&peel,$v if $nk ne 't' && $v =~ I.peels;\n               # << consumes more lines into $nk, then ...\n               $v = '' if $v =~ /^(''|\"\")$/;\n               $C->{$nk} = $v;\n           }\n       }\n    }\n    saybl \"4string: $s            \".ki $C if A.V&C;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: dbd7f1097b0d
        gro: Indulator/C
      t: fourstring
      "y": 
        cv: '0.3'
        cvt: 0.3	fourstring
        p: qq/Indulator/Indulator/C/C
    geo2lin: 
      c: 
        el: 1
        s: "A.I.geo2lin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($geo,@Me) = @M;\n    my $I = A.I;\n    # shove com toeget\n    # OR SOMETHING\n    # loses its compressibility as csz\n    my @am = qw'a? ab  x x  y y  r radial  s scale';\n    my @l;\n    while (@am) {\n        my $k = shift @am;\n        my $v = shift @am;\n        my $sens = $k =~ s/\\?$//;\n        push @l, ($sens && $k).$geo->{$v} if exists $geo->{$v};\n    }\n    my $l = join ' ', @l;\n    $l\n};\n"
      sc: 
        acgt: geo
        args: A,C,G,T,geo
        code: I 1
        dige: 755b1ccec764
        gro: GeoSo
      t: geo2lin
      "y": 
        cv: '0.3'
        cvt: 0.3	geo2lin
        p: qq/GeoSo/GeoSo
    givy: 
      c: 
        el: 1
        s: "A.I.givy = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    if (ref $s eq 'ARRAY') {\n        for my $yy (@$s) {\n            C.y = {};\n            I.d&givy,$yy;\n            ref $y || die \"notash \".ki $y;\n            I.d&xot,$y,C.y;\n            C.y = $y;\n        }\n    }\n    elsif (ref $s) {\n        ref $s eq 'HASH' || die \"no $s\";\n        if (I.d&taJe,$s ) {\n            my $yy = C.y;\n            C.y = {} if ref C.y ne 'HASH';\n            I.d&givy,$yy;\n        }\n        elsif ($y ne $s) {\n            I.d&xot,$y,$s;\n        }\n    }\n    elsif ($s eq '') {\n        my $x = I.blanky ? I.d&blanky : {};\n        I.d&xot,C.y,$x if keys %$x;\n    }\n    elsif ($s =~ /^($NUM)$/) {\n        y.cv = $1;\n    }\n    elsif ($s =~ /^($NUM)-($NUM)$/) {\n        y.in = $1;\n        y.out = $2;\n    }\n    elsif ($s =~ /^($NUM)-($NUM)x($NUM)$/) {\n        y.in = $1;\n        y.out = $2;\n        y.thi = $3;\n    }\n    elsif ($s =~ /^-(\\w+)$/) {\n        C.c.pi = $1;\n        C.c.s = C.t if !exists C.c.s || A.btw.cwass;\n    }\n    elsif ($s =~ /^([a-zA-Z]+)(?::(.+))?$/) {\n        C.c->{$1} = $2 || C.t;\n    }\n    else {\n        die \"C y wtf: $s\";\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 85c5e641ba7a
        gro: Indulator/SlideEa
      t: givy
      "y": 
        cv: '0.3'
        cvt: 0.3	givy
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    hash: 
      c: 
        el: 1
        s: "A.I.hash = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return %$C = %$s if exists s.t && s.y && s.c;\n    I.d&servehash,$s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a28cc9c268cf
        gro: Indulator/SlideEa
      t: hash
      "y": 
        cv: '0.3'
        cvt: 0.3	hash
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    heq: 
      c: 
        el: 1
        s: "A.I.heq = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t,@Me) = @M;\n    my $I = A.I;\n    if (ref $o && ref $t) {\n        keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o\n    }\n    elsif (!ref $o && !ref $t) {\n        $o eq $t\n    }else{0}\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: cf50b212c65c
        gro: Seven/Yools
      t: heq
      "y": 
        cv: '0.3'
        cvt: 0.3	heq
        p: qq/Seven/Seven/Yools/Yools
    here2geo: 
      c: 
        el: 1
        s: "A.I.here2geo = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($here,@Me) = @M;\n    my $I = A.I;\n    my $geo = {};\n    geo.rad = here.rad;\n    # unwind (into...)\n    my $o = $RADIAN*4;\n    my $swish = $o;\n    $swish *= -1 if geo.rad < 0;\n    my $i = 0;\n    geo.rad -= $swish until\n        do {$i++>5&&die\"$i muchwind\".ki$here;0}\n        ||\n        $o*-1 < geo.rad && geo.rad < $o;\n    # pan to hemisphere...\n    # from O- is it in the left hemisphere etc\n    my $rad = geo.rad;\n    my $radleg = -$RADIAN;\n    $radleg *= -1 unless $rad < -$RADIAN && $rad > $RADIAN;\n    $rad -= $radleg;\n    geo.radial = I.d&ron,$rad;\n    geo.x = here.x;\n    geo.y = here.y;\n    geo.ab = '100' if 1; # w=h=100,ab=1\n    geo.ab = '1' if here.swy eq 'atom';\n    # transform about\n    geo.tro = '0 0.5'; # midleft\n    geo.tro = '0 0' if 0; # topleft\n    #\n    my $fo = sub { (shift() * 100).'%' };\n    geo.tro = join' ',map{$fo->($_)}split' ',geo.tro;\n    \n    I.d&geo2lin,$geo;\n};\n"
      sc: 
        acgt: here
        args: A,C,G,T,here
        code: I 1
        dige: e22b8a8694ec
        gro: GeoSo
      t: here2geo
      "y": 
        cv: '0.3'
        cvt: 0.3	here2geo
        p: qq/GeoSo/GeoSo
    hsle: 
      c: 
        el: 2
        s: "A.I.hsle = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @m;\n    for ($s) {\n        @m = split ' ', $_;\n        last if @m == 3 || @m == 4;\n        @m = split /\\./, $_;\n        last if @m == 3 || @m == 4;\n        @m = split '', $_;\n        last if @m == 3 || @m == 4;\n        @m = ();\n    }\n    @m || die \"not hsle: $s\";\n    my $h;\n    (h.h, h.s, h.l, h.a) = map{0+(\"0.\".$_)}@m;\n    \n    h.h = h.h * 360 if h.h < 1;\n    \n    $h->{$_} = ($h->{$_}*100).'%' for 's','l';\n    \n    my $al = \", h.a\" if defined h.a;\n    \"hsl\".($al?'a':'').\"(h.h, h.s, h.l$al)\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: bd33fc9e0ce6
      t: hsle
      "y": '0.3'
    hundr: 
      c: 
        el: 2
        s: "A.I.hundr = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s*100).'%';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 0082c413df9b
      t: hundr
      "y": '0.3'
    hunine: 
      c: 
        el: 2
        s: "A.I.hunine = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s*9).'%';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e335e609672f
      t: hunine
      "y": '0.3'
    hup: 
      c: 
        el: 1
        s: "A.I.hup = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $CC = {%$s};\n    $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\n    return $CC;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 5c16f3716362
        gro: Indulator/C
      t: hup
      "y": 
        cv: '0.3'
        cvt: 0.3	hup
        p: qq/Indulator/Indulator/C/C
    iZu: 
      c: 
        el: 1
        s: "A.I.iZu = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $way = $s =~ s/^\\/// ? 'fund' : 'muck';\n    my $Z = Rw $way - $p:s $dclone=1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: ba2b027e931c
        gro: Indulator/Servo
      t: iZu
      "y": 
        cv: '0.3'
        cvt: 0.3	iZu
        p: qq/Indulator/Indulator/Servo/Servo
    inDin: 
      c: 
        el: 1
        s: "A.I.inDin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$D,@Me) = @M;\n    my $I = A.I;\n    die'nofA' if !I.nF.A;\n    #\n    return () unless defined $s;\n    return $s if $D eq 'C';\n    #\n    shift @M; # s\n    $D = I.d&interpD,@M if !ref $D;\n    #\n    my $v = I.d&Cngk,$s,$D;\n    saybl \"Got cnkgk: \".wdump 3,[\\@M,$D,$v,$s] if A.V&D;\n    die \"Unhandles any: $v: \".ki $D if $v eq '1';\n    #\n    return () unless $v;\n    # blankgk\n    A.note->{D.c.nk}->{D.c.gk} = $v if A.note;\n    #\n    @$v == 1 || die \"Many somehowed \".wdump 3,[ki($D),$v];\n    ($v) = @$v;\n    if (D.c.as eq 'list') {\n        ref $v eq 'ARRAY' || die 'Cngk for list not array '.ki $D;\n        return @$v;\n    }\n    return $v;\n};\n"
      sc: 
        acgt: s,D
        args: A,C,G,T,s,D
        code: I 1
        dige: eaa21ce92eb2
        gro: Indulator/C
      t: inDin
      "y": 
        cv: '0.3'
        cvt: 0.3	inDin
        p: qq/Indulator/Indulator/C/C
    interpD: 
      c: 
        el: 1
        s: "A.I.interpD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($nk,$gk,@Me) = @M;\n    my $I = A.I;\n    my $defnk = 'c';\n    return $nk if ref $nk;\n    my $D = {};\n    D.c.as = 'list' if $nk =~ s/^_//;\n    while ($gk =~ s/^%(.+?):(.+?)(?=%|$)//g) {\n        D.c->{$1} = $2;\n        pop @M if @M == 2;\n    }\n    if (@M == 1 && $nk eq 't') {\n        D.c.nk = $nk;\n    }\n    elsif (@M == 1) { # or from t,,,\n        D.c.nk ||= $defnk;\n        D.c.gk ||= $nk;\n    }\n    elsif (@M == 2) {\n        D.c.nk = $nk;\n        D.c.gk = $gk;\n    }\n    delete D.c.gk if D.c.gk eq 'NOGK';\n    $D\n};\n"
      sc: 
        acgt: nk,gk
        args: A,C,G,T,nk,gk
        code: I 1
        dige: 9d1fccaf5235
        gro: Indulator/C
      t: interpD
      "y": 
        cv: '0.3'
        cvt: 0.3	interpD
        p: qq/Indulator/Indulator/C/C
    ip: 
      c: 
        el: 1
        s: "A.I.ip = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$c,@Me) = @M;\n    my $I = A.I;\n    my $pass = 1;\n    for my $I (keys %$s) {\n        !ref $s->{$I} && $s->{$I} ne $c->{$I} && $pass--;\n        ref $s->{$I} eq 'HASH' && do {\n            if (my $not = $s->{$I}->{not}) {\n                $not eq 'def' && do {\n                    defined $c->{$I} && $pass--;\n                } \n                || $not eq $c->{$I} && $pass--;\n            }\n            else {\n                $s->{$I}->{$c->{$I}} eq '1' || $pass--;\n            }\n        };\n    }\n    $pass == 1\n};\n"
      sc: 
        acgt: s,c
        args: A,C,G,T,s,c
        code: I 1
        dige: 7498f581817c
        gro: Indulator/C
      t: ip
      "y": 
        cv: '0.3'
        cvt: 0.3	ip
        p: qq/Indulator/Indulator/C/C
    isC: 
      c: 
        el: 1
        s: "A.I.isC = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return 0 unless ref $s eq 'HASH';\n    exists s.t && defined C.t && !ref s.t\n    && ref s.y && ref s.c && 9 > keys %$s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 63202b6a0791
        gro: Indulator/SlideEa
      t: isC
      "y": 
        cv: '0.3'
        cvt: 0.3	isC
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    isJ: 
      c: 
        el: 1
        s: "A.I.isJ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    ref $s eq 'HASH' && ref s.bb eq 'HASH';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 133e12cc5fa2
        gro: Indulator/SlideEa
      t: isJ
      "y": 
        cv: '0.3'
        cvt: 0.3	isJ
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    jamsc: 
      c: 
        el: 1
        s: "A.I.jamsc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $ar = $s;\n    my $sc = ar.sc || {};\n    my $J = ar.J || die \"jamsc noj\".ki$s;\n    ar.C = ar.d if ar.d;\n    my $t = defined ar.t ? ar.t\n        : ar.j ? ar.j.l\n        : ar.C ? ar.C.t : die'not';\n    my $cv = defined ar.cv ? ar.cv\n        : ar.j ? ar.j.cv\n        : ar.C ? ar.C.cv || ar.C.y.cv : die'cvoy';\n    \n    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {\n        my $J = ar.oJ;\n        if (my $ljm = J.A.ljm) {\n            my $Me = \"ar.oJ.ind ar.J.name \"\n            .\" J.A.ljmo <<< J.name  sends:\"\n            .\" $t\\t$cv  $ljm\";\n            sayyl $Me if J.V || ar.J.V;\n            push @$ljm, {%$ar};\n        }\n    }\n    \n    my @fobz;\n    push @fobz, [$cv,$t,undef,ar.s] if exists ar.s;\n    push @fobz, [$cv,$t,$_,$sc->{$_}] for keys %$sc;\n    my @tobz = map {\n        my ($cv,$t,$s,$v) = @$_;\n        my $r;\n        if (J.tt) { # FUTU\n            $r = $cv.\"\\t\".$t.\"\\t\".$s;\n        }\n        else {\n            my $s = $s;\n            $s = '%'.$s if $s;\n            $r = $t.$s.\"\\t\".$cv;\n        }\n        if ($s) {\n            ar.C.sc->{$s} = $v;\n        }\n        [$r,$v]\n    } @fobz;\n    \n    for (@tobz) {\n        my ($r,$v) = @$_;\n        J.bz->($r,$v);\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e4b9a5326152
        gro: Modems/Jamsc
        l: "#c"
      t: jamsc
      "y": 
        cv: '0.3'
        cvt: 0.3	jamsc
        p: qq/Modems/Modems/Jamsc/Jamsc
    last2here: 
      c: 
        el: 1
        s: "A.I.last2here = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($last,$r,$here,@Me) = @M;\n    my $I = A.I;\n    here.x  = last.x = r.x if exists r.x;\n    here.y = last.y = r.y if exists r.y;\n    here.rad = 4*$RADIAN * r.spun if exists r.spun;\n    here.zoom = r.zoom if defined r.zoom;\n    \n    I.d&atom,$last,$here;\n    \n    here.spin = r.curve if exists r.curve; # on the level\n    #\n    here.x = I.d&ron,here.x;\n    here.y = I.d&ron,here.y;\n    here.rad = I.d&ron,here.rad;\n};\n"
      sc: 
        acgt: last,r,here
        args: A,C,G,T,last,r,here
        code: I 1
        dige: 338d0c840521
        gro: GeoSo
      t: last2here
      "y": 
        cv: '0.3'
        cvt: 0.3	last2here
        p: qq/GeoSo/GeoSo
    mean: 
      c: 
        el: 2
        s: "A.I.mean = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($to,$fro,$mix,@Me) = @M;\n    my $I = A.I;\n    $mix ||= 0.5;\n    my $yu = $fro - $to;\n    $yu = $yu * $mix;\n    $fro -= $yu;\n    $fro\n};\n"
      sc: 
        acgt: to,fro,mix
        args: A,C,G,T,to,fro,mix
        code: I 1
        dige: e465093efb10
      t: mean
      "y": '0.3'
    meat: 
      c: 
        el: 2
        s: "A.I.meat = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($k,$v,@Me) = @M;\n    my $I = A.I;\n    my $f = $v;\n    my $mv = C.sc->{$k};\n    $f = I.d&mean,$f,$mv;\n    C.sc->{$k} = $f;\n};\n"
      sc: 
        acgt: k,v
        args: A,C,G,T,k,v
        code: I 1
        dige: 16486e072e02
      t: meat
      "y": '0.3'
    mkD: 
      c: 
        el: 1
        s: "A.I.mkD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$ar,@Me) = @M;\n    my $I = A.I;\n    my $D;\n    D.point = $pin;\n    if (my $C = ar.__D) {\n        delete ar.__D;\n        D.bab = C.c.s || die \"N s\".ki $C;\n        D.noise .= C.sc.dige if C.sc.dige;\n        D.babnon = 1 if C.sc.bab eq 'non';\n        D.Verb = 1;\n    }\n    D.ar = $ar;\n    D.name = join ' ', D.point, sort keys %{D.ar};\n    D.sign = \"Z\";\n    D.talk = join' ',grep{defined}map{$D->{$_}}qw'sign name noise';\n    $D;\n};\n"
      sc: 
        acgt: pin,ar
        args: A,C,G,T,pin,ar
        code: I 1
        dige: 974b297c1911
        gro: Goodat
      t: mkD
      "y": 
        cv: '0.3'
        cvt: 0.3	mkD
        p: qq/Goodat/Goodat
    mksc: 
      c: 
        el: 2
        s: "A.I.mksc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $t = I.d&mos,$s;\n    I.d&xot,C.sc,$t;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6c70a35929b6
      t: mksc
      "y": '0.3'
    mos: 
      c: 
        el: 2
        s: "A.I.mos = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @t = split ',',$s;\n    for (@t) {\n        my ($k, $v) = split ':', $_;\n        $T.>$k = $v;\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 79ec92d3b771
      t: mos
      "y": '0.3'
    moy: 
      c: 
        el: 1
        s: "A.I.moy = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # groups, spread the moise over A\n        my $i = $A->{mo}->{y}->{$s}||die\"no$s\";\n        my $is = $i->{$C->{y}->{p}}; # things in our C's pool\n        {is=>$is,N=>[map{$is->{$_}}sort keys %$is]};\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 2fb4d87f09eb
        gro: Indulator/Motion
      t: moy
      "y": 
        cv: '0.3'
        cvt: 0.3	moy
        p: qq/Indulator/Indulator/Motion/Motion
    "n": 
      c: 
        el: 1
        s: "A.I.n = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($AA,$CC,$GG,$TT,@Me) = @M;\n    my $I = A.I;\n    I.nF = {A=>$AA,C=>$CC,G=>$GG,T=>$TT};\n};\n"
      sc: 
        acgt: AA,CC,GG,TT
        args: A,C,G,T,AA,CC,GG,TT
        code: I 1
        dige: 84db0b320205
        gro: Indulator/IStuff
      t: 'n'
      "y": 
        cv: '0.3'
        cvt: 0.3	n
        p: qq/Indulator/Indulator/IStuff/IStuff
    norp: 
      c: 
        el: 1
        s: "A.I.norp = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    sort { I.pwin->($pin,$a) <=> I.pwin->($pin,$b) } @Me;\n};\n"
      sc: 
        acgt: pin
        args: A,C,G,T,pin
        code: I 1
        dige: e00d4915894a
        gro: Goodat
      t: norp
      "y": 
        cv: '0.3'
        cvt: 0.3	norp
        p: qq/Goodat/Goodat
    numb: 
      c: 
        el: 2
        s: "A.I.numb = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s);\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: cfe09d49b1d6
      t: numb
      "y": '0.3'
    ori: 
      c: 
        el: 2
        s: "A.I.ori = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    @{s.et} > 2 && die \"Many et for ori s.v: @{s.et}\";\n    my ($t,$f) = @{s.et};\n    return s.v =~ /[1ay]/ ? $t : $f\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d68915c91260
      t: ori
      "y": '0.3'
    oseverato: 
      c: 
        el: 1
        s: "A.I.oseverato = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        if ($T->{d}) {\n            $A->{T}->{d} = $T->{d}; # carte\n        }\n        if (my $z = delete $T->{Z}) { # tease out the next times\n            my ($lo) = sort keys %$z; # next one\n            my $v = $z->{$lo};\n            push @{$A->{mo}->{re}->{$lo} ||= []},\n                ref $v eq 'ARRAY' ? @$v :\n                $v ne '1' ? [$A,$C,$v] :\n                [$A,$C];\n            @{$T->{oM}} = ();\n        }\n        if (!@{$A->{mo}->{N}} && $A->{mo}->{re}) {\n            my $ats = $A->{mo}->{re} || {};\n            my @wa = sort keys %$ats;\n            my ($lo) = @wa;\n            if ($lo) {\n                my $ay = delete $ats->{$lo};\n                my @N = map { {AZ=>{$lo=>$_}} } @$ay;\n                push @{$A->{mo}->{N}}, @N;\n                saybl \"Looping \".@N.\" to $lo\" if $A->{J}->{V} > 1;\n            }\n        }\n        # concoi severaliser, for conglom up; merging spiral snips of code\n        if (my $y = $T->{y}) {\n            for my $k (keys %$y) {\n                $A->{mo}->{y}->{$k}->{$C->{y}->{p}}->{$C->{y}->{cvt}} = $C;\n            }\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c2111bfab654
        gro: Indulator/Motion
      t: oseverato
      "y": 
        cv: '0.3'
        cvt: 0.3	oseverato
        p: qq/Indulator/Indulator/Motion/Motion
    pas: 
      c: 
        el: 1
        s: "A.I.pas = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$d,@Me) = @M;\n    my $I = A.I;\n    my $s = d.s;\n    my $e = d.e;\n    my @ks = $pin eq '*' ? sort keys %$s\n        : exists $s->{$pin} ? $pin\n        : ();\n    map {\n        my $dd;\n        dd.e.k = $_;\n        dd.s = $s->{$_};\n        dd.d = d.d if d.d;\n        $dd;\n    } @ks\n};\n"
      sc: 
        acgt: pin,d
        args: A,C,G,T,pin,d
        code: I 1
        dige: f6ee4585b5c1
        gro: Seven/Yools
      t: pas
      "y": 
        cv: '0.3'
        cvt: 0.3	pas
        p: qq/Seven/Seven/Yools/Yools
    pass: 
      c: 
        el: 1
        s: "A.I.pass = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$s,@Me) = @M;\n    my $I = A.I;\n    @$s = grep{defined} map { I.d&pas,$pin,$_ } grep{defined} @$s;\n};\n"
      sc: 
        acgt: pin,s
        args: A,C,G,T,pin,s
        code: I 1
        dige: f2135db4468e
        gro: Seven/Yools
      t: pass
      "y": 
        cv: '0.3'
        cvt: 0.3	pass
        p: qq/Seven/Seven/Yools/Yools
    peel: 
      c: 
        el: 1
        s: "A.I.peel = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    $s =~ s/^%// || \n        $s =~ s/^{// && $s =~ s/}$//\n        || die \"unpealable $s\";\n    my $c;\n    for (split ',', $s) {\n        my ($k, $v) = split ':', $_, 2;\n        $v = 1 if !defined $v;\n        $c->{$k} = $v;\n    }\n    $c||{}\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 86d02e052c88
        gro: Indulator/C
      t: peel
      "y": 
        cv: '0.3'
        cvt: 0.3	peel
        p: qq/Indulator/Indulator/C/C
    peels: 
      c: 
        el: 1
        s: "A.I.peels = (sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    qr/^[\\{\\%]\\w+/;\n})->($A,$C,$G,$T);\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1a4b86ada8e3
        gro: Indulator/C
        subpeel: 1
      t: peels
      "y": 
        cv: '0.3'
        cvt: 0.3	peels
        p: qq/Indulator/Indulator/C/C
    pha: 
      c: 
        el: 1
        s: "A.I.pha = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name,@Me) = @M;\n    my $I = A.I;\n    # tracked being\n    # temporal phatness, per suJ (encap $M surges within)\n    if (my $x = J.phy->{$name}) {\n        sayre \"J.name 's $name was re entrant\";\n        I.d&end,$x;\n        # end - maybe new stuffright as some random part of this process\n        # hold yay minutes of changes in 10 second groups, etc\n    }\n    # bz multicasts\n    my $x = J.phy->{$name} = {};\n    x.begin = hitime();\n    x.name = $name;\n    x.J = $J;\n    x.bb = {};\n    x.ord = [];\n    #x.tim = {};\n    #x.wtf = {}; # F grab\n    #x.ap = sub{}; # bz do aftering\n    x.qui = 1;\n    x.head = J.phl->{$name}->{l}->[-1] if J.phy->{$name};\n    $x;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: ab1fd2a37714
        gro: Modems/Pha
      t: pha
      "y": 
        cv: '0.3'
        cvt: 0.3	pha
        p: qq/Modems/Modems/Pha/Pha
    pin: 
      c: 
        el: 1
        s: "A.I.pin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way);\n};\n"
      sc: 
        acgt: pin,way
        args: A,C,G,T,pin,way
        code: I 1
        dige: 82803a8c20f2
        gro: Goodat
      t: pin
      "y": 
        cv: '0.3'
        cvt: 0.3	pin
        p: qq/Goodat/Goodat
    plus: 
      c: 
        el: 2
        s: "A.I.plus = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    s.v + s.et\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: b7dfa07a876d
      t: plus
      "y": '0.3'
    pon: 
      c: 
        el: 1
        s: "A.I.pon = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,$s,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way,{et=>$s});\n};\n"
      sc: 
        acgt: pin,way,s
        args: A,C,G,T,pin,way,s
        code: I 1
        dige: e37d81abf9f1
        gro: Goodat
      t: pon
      "y": 
        cv: '0.3'
        cvt: 0.3	pon
        p: qq/Goodat/Goodat
    pwin: 
      c: 
        el: 1
        s: "A.I.pwin = sub {\n    my ($pin,$way,$set,@Me) = @_;\n    my $I = A.I;\n    if (exists $way->{$pin}) {\n          my $o = $way->{$pin};\n        $way->{$pin} = set.et if exists set.et;\n        delete $way->{$pin} if set.de;\n        return $o;\n    }\n    my @path = split /\\/|\\./, $pin;\n    my $h = $way;\n    my $last;\n    for my $p (@path) {\n        if (ref $h ne 'HASH' && ref $h ne 'G') {\n            undef $last;\n            undef $h;\n            last;\n        }\n        $last = [$h,$p];\n        $h = $h->{$p};\n        # ref = T makes it look for jointed rest of path in tiedinto {}\n        # then T collapses the feely data mesh\n    }\n    if ($last) {\n        my ($he,$pi) = @$last;\n        $he->{$pi} = set.et if exists set.et;\n        delete $he->{$pi} if set.de;\n    }\n    return $h if defined $h;\n    \n    return undef unless $pin =~ /\\*/;\n    die \"sat rs findy $pin\";\n};\n"
      sc: 
        acgt: s
        args: pin,way,set
        code: I 1
        dige: 41ad5cef7aed
        gro: Goodat
      t: pwin
      "y": 
        cv: '0.3'
        cvt: 0.3	pwin
        p: qq/Goodat/Goodat
    rJ: 
      c: 
        el: 1
        s: "A.I.rJ = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($r,$J,@Me) = @M;\n    my $I = A.I;\n    my $j;\n    my $sing;\n    if (J.tt) {\n        $sing = 'J_tt';\n        (j.cv,j.t,j.style) = $r =~ /^(.*?)\\t(.*)\\t(.*?)$/;\n        if (!defined j.cv) {\n            sayre \"Hind $r  \" for 1..5;\n            (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n        }\n    }\n    else {\n        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n    }\n    defined j.cv || die \"$sing no $r    \".ki $j;\n    j.s = J.bb->{$r} if $J;\n    j.nos = 1 if $J && !exists J.bb->{$r};\n    $j;\n};\n"
      sc: 
        acgt: r,J
        args: A,C,G,T,r,J
        code: I 1
        dige: cbfd0ce46c1d
        gro: Modems/Jamsc
        l: "#c"
      t: rJ
      "y": 
        cv: '0.3'
        cvt: 0.3	rJ
        p: qq/Modems/Modems/Jamsc/Jamsc
    radun: 
      c: 
        el: 2
        s: "A.I.radun = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $o = $RADIAN*4;\n    my $swish = $o;\n    $swish *= -1 if $s < 0;\n    my $i = 0;\n    my $ori = $s;\n    $s -= $swish until\n        do {$i++>5&&die\"$i muchwind from $ori ... $s\";0}\n        ||\n        $o*-1 < $s && $s < $o;\n    return $s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: abfde1e30618
      t: radun
      "y": '0.3'
    ratio: 
      c: 
        el: 1
        s: "A.I.ratio = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t,@Me) = @M;\n    my $I = A.I;\n    my $ratio = $o / ($t||1);\n    0.01 * int(100*$ratio);\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: e592ace66dff
        gro: Modems/Timing
      t: ratio
      "y": 
        cv: '0.3'
        cvt: 0.3	ratio
        p: qq/Modems/Modems/Timing/Timing
    recycle: 
      c: 
        el: 1
        s: "A.I.recycle = sub {\n    my ($A,$C,$G,$T,@Me) = @_;\n    my $I = A.I;\n    return if I.recyttl++ > 8;\n    G.drop.recycling->{A.J.id}->{A.am} = $I;\n};\n"
      sc: 
        acgt: 1
        args: A,C,G,T
        code: I 1
        dige: 070c7dc51b65
        gro: Indulator/IStuff
      t: recycle
      "y": 
        cv: '0.3'
        cvt: 0.3	recycle
        p: qq/Indulator/Indulator/IStuff/IStuff
    renc: 
      c: 
        el: 1
        s: "A.I.renc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.c = C.c =~ I.peels ? I.d&peel,C.c\n      : do {\n        A.btw.cwass = 1 if \"\" eq C.c;\n        A.btw.cwasnd = 1 if !defined C.c;\n          {s => C.c};\n      };\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c80f2d6f0f67
        gro: Indulator/SlideEa
      t: renc
      "y": 
        cv: '0.3'
        cvt: 0.3	renc
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    rensc: 
      c: 
        el: 1
        s: "A.I.rensc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.sc = C.sc eq '' ? {}\n        : C.sc =~ I.peels\n        ? I.d&peel,C.sc\n        : die \"C sc nostr: C.sc   of I.peels  \".ki $C\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 4e4662544dd1
        gro: Indulator/SlideEa
      t: rensc
      "y": 
        cv: '0.3'
        cvt: 0.3	rensc
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    ron: 
      c: 
        el: 1
        s: "A.I.ron = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    0.0001 * int(10000*$s)\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 45a95b7f03ae
        gro: GeoSo
      t: ron
      "y": 
        cv: '0.3'
        cvt: 0.3	ron
        p: qq/GeoSo/GeoSo
    saydeg: 
      c: 
        el: 2
        s: "A.I.saydeg = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    int($s).'deg';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 5e7ada839c6c
      t: saydeg
      "y": '0.3'
    saypx: 
      c: 
        el: 2
        s: "A.I.saypx = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return $s if $s =~ /px$/;\n    $s.'px';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 45775017d410
      t: saypx
      "y": '0.3'
    sayurl: 
      c: 
        el: 2
        s: "A.I.sayurl = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    \"url('$s')\"\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 586d4e0b28ea
      t: sayurl
      "y": '0.3'
    scIfs: 
      c: 
        el: 1
        s: "A.I.scIfs = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @is;\n    for my $k (keys %$s) {\n        my $Q = $s->{$k};\n        my $tot = @{Q.path};\n        my $star = grep{$_ eq '*'} @{Q.path};\n        Q.weig = $tot - $star;\n    \n        my $in = [{s=>{T=>$T}}];\n        my $pi = 0;\n        for my $pin (@{Q.path}) {\n            for my $pTn (@{Q.onpa}) {\n                I.d&pass,$pTn,$in;\n            }\n            I.d&pass,$pin,$in;\n            @$in = map {\n                if (_.d) { # nonroot pattern mutable (into/on/off origin s)\n                    _.od ||= _.d;\n                    if (my $su = _.od.s.T.q->{_.e.k}) {\n                        $_ = $su;\n                        # deeper knowish\n                    }\n                }\n                _.d = $_;\n                _.e.lk = Q.atar->[$pi]||die\"no idea what $pi is\";\n                $_\n            } grep{defined} @$in;\n            $pi++;\n            last if !@$in;\n        }\n    \n        for my $d (@$in) {\n            # now inmost, .od leads above (without pTn inway)\n            # and each d.e.lk calls it something $nk $gk and $wk\n                # and avoid less specific after more specific\n                # or just avoid repeats\n                #   \n                # shaky but index\n                # the fish is shaking but on the deck\n            my $arg;\n            my $up = $d;\n            my $last = $up;\n            my $i = 0;\n            while ($up) {\n                $i++ > 8 && die \"LAST WANDERS\";\n                $arg->{up.e.lk} = up.e.k;\n                if (Q.caps) {\n                    for my $k (grep{Q.caps->{$_}} keys %$up) {\n                        $arg->{$k} ||= $up->{$k};\n                    }\n                }\n                $last = $up;\n                $up = up.od;\n                if ($up eq $last) {\n                    sayre \"D.t D.sc.Td  refers to itself as .od: \".wdump $last;\n                    last;\n                }\n            }\n    \n            arg.d = $d;\n    \n            for my $k (keys %{d.s}) {\n                next if $k eq 'T';\n                $arg->{$k} && die \"Already $k arg of \".wdump[$d,$arg];\n                $arg->{$k} = d.s->{$k};\n            }\n    \n            my $path = \"@{Q.path}\";\n            arg.talk = \"C.t  ($k:$path) C.t C.y.cv\"\n                .\":\\t\".join '/', map{$arg->{$_}} @{Q.atar};\n            d.weig ||= Q.weig;\n            d.path ||= $path;\n            if (d.weig > Q.weig) {\n                say \"Later $path  Q.weig < d.weig  d.path\" if A.J.V > 1;\n                next;\n            }\n            elsif (d.path ne $path) {\n                say \"Moreo $path  Q.weig > d.weig  d.path\" if A.J.V > 1;\n                d.weig = Q.weig;\n                d.path = $path;\n            }\n            push @is, $arg;\n            T.ut.matchTd = 1;\n            # Z/D wad of multiplicity\n            # D args $d and arg, $nk/$ov etc things plucked\n            # they must stay present to later Ds as well\n            # stored T.d path subtlates\n            # 6 ^\n            sayre(ki($arg)) if A.J.V > 1;\n        }\n    }\n    @is\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: a1daba5fc7ed
        gro: Seven/Yools
      t: scIfs
      "y": 
        cv: '0.3'
        cvt: 0.3	scIfs
        p: qq/Seven/Seven/Yools/Yools
    sca: 
      c: 
        el: 1
        s: "A.I.sca = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    $s /= 10 while $s > 1 || $s < -1;\n    return $s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 2649b4f98317
        gro: Indulator/SlideEa
      t: sca
      "y": 
        cv: '0.3'
        cvt: 0.3	sca
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    scd: 
      c: 
        el: 1
        s: "A.I.scd = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($rv,$rl,@Me) = @M;\n    my $I = A.I;\n    my $r;\n    r.z = [];\n    r.oldz = [];\n    undef $rl if $rl && rl.c ne rv.c;\n    push @{$rl ? r.oldz : r.z}, @{rv.c};\n    \n    r.in = @{rl.sc||[]};\n    r.out = @{rv.sc};\n    if (r.out > r.in) {\n        r.ay = [r.in..(r.out - 1)];\n        push @{r.oldz}, @{rv.sc}[0..r.in] if r.in;\n        push @{r.z}, @{rv.sc}[@{r.ay}];\n    }\n    $r\n};\n"
      sc: 
        acgt: rv,rl
        args: A,C,G,T,rv,rl
        code: I 1
        dige: 66c846f2fdba
        gro: Modems/Timing
      t: scd
      "y": 
        cv: '0.3'
        cvt: 0.3	scd
        p: qq/Modems/Modems/Timing/Timing
    sces: 
      c: 
        el: 1
        s: "A.I.sces = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $i = 0;\n    while (s.c.e) {\n        $s = s.c.e;\n        $i++ > 9 && die \"HUGE $i recursing CceCceCceCce... by \".ki $s;\n    }\n    return $s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 74601405c36b
        gro: Indulator/C
      t: sces
      "y": 
        cv: '0.3'
        cvt: 0.3	sces
        p: qq/Indulator/Indulator/C/C
    scyvle: 
      c: 
        el: 1
        s: "A.I.scyvle = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    for (qw'in out cv') {\n        if (my $so = C.y->{$_}) {\n            my $i;\n            while (C.y->{$_} <= -1 || C.y->{$_} >= 1) {\n                C.y->{$_} /= 10;\n                die \"Many i chewing on \".ki C.y if $i++ > 10;\n            }\n        }\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d054be1e9bda
        gro: Indulator/SlideEa
      t: scyvle
      "y": 
        cv: '0.3'
        cvt: 0.3	scyvle
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    servehash: 
      c: 
        el: 1
        s: "A.I.servehash = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n      s.AZ ? I.d&AZu,s.AZ\n    : s.MZ ? I.d&MZu,s.MZ\n    : s.EZ ? I.d&EZu,s.EZ\n    : s.WZ ? I.d&WZu,s.WZ\n    : s.EC ? I.d&ECu,s.EC\n    : s.Elvis ? I.d&Elvisu,s.Elvis\n    : die 'hash: '.wdump($s);\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6cd29f303517
        gro: Indulator/Servo
      t: servehash
      "y": 
        cv: '0.3'
        cvt: 0.3	servehash
        p: qq/Indulator/Indulator/Servo/Servo
    shadole: 
      c: 
        el: 2
        s: "A.I.shadole = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my @m = split m/\\s/, $s;\n    $m[-1] = I.d&cole,$m[-1];\n    return sprintf '%dpx %dpx %dpx %s', @m;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 72d2fab5b281
      t: shadole
      "y": '0.3'
    sorp: 
      c: 
        el: 1
        s: "A.I.sorp = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    sort { I.pwin->($pin,$a) cmp I.pwin->($pin,$b) } @Me;\n};\n"
      sc: 
        acgt: pin
        args: A,C,G,T,pin
        code: I 1
        dige: 53cc12a39989
        gro: Goodat
      t: sorp
      "y": 
        cv: '0.3'
        cvt: 0.3	sorp
        p: qq/Goodat/Goodat
    stri: 
      c: 
        el: 2
        s: "A.I.stri = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,$s,@Me) = @M;\n    my $I = A.I;\n    my $v = C.sc->{D.sc.gk};\n    if (D.sc.flex) {\n        for my $st (@{D.sc.flex}) {\n            for my $k (sort keys %$st) {\n                my $vv = $st->{$k};\n                my $e;\n                e.v = $v;\n                e.et = $vv;\n                $v = I.d&$k,$e;\n                !length $v && sayre \"$k dfrom D.t didn't... $v from e.v\";\n            }\n        }\n    }\n    else {\n        my $k = D.sc.filt;\n        return unless $k;\n        $v = I.d&$k,$v;\n    }\n    C.sc->{D.sc.gk} = $v;\n};\n"
      sc: 
        acgt: D,s
        args: A,C,G,T,D,s
        code: I 1
        dige: d373fd92fce7
      t: stri
      "y": '0.3'
    string: 
      c: 
        el: 1
        s: "A.I.string = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die \"string: $s\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 196a2239898a
        gro: Indulator/SlideEa
      t: string
      "y": 
        cv: '0.3'
        cvt: 0.3	string
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    t: 
      c: 
        el: 1
        s: "A.I.t = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($K,$cv,$av,@Me) = @M;\n    my $I = A.I;\n    ($K,$cv) = (A.am,$K) if !$cv && $K;\n    $av = 0+(\"0.\".$av) if $av;\n    die \"K$K cv$cv\" unless $K && $cv;\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    \n    # adapt to much  mergey       extendo  rubble\n    my $i = Rw collaspII $A;\n    die'difAvcol' if $Av ne ($av || A.cv);\n    #\n    my $ncv;\n    my $re;\n    my $dont;\n    if ($Av < 0.6 || $c >= 0.7) {\n        if ($c >= $Av) {\n            $ncv = $c;\n            $re = 1;\n        }\n        else {\n            $re = 0;\n            $dont = 1;\n            say \" deInc $Av - $cv $c\";\n        }\n        die \"pre bigger\" if $cv < $Av;\n    }\n    else {\n        if ($c < $Av) {\n            if ($Av == 0.6) { # scoop up all on entering timezone\n                $re = 1;\n                $dont = 1; # or will II fall away\n            }\n            else {\n                $re = 0;\n                $dont = 1;\n            }\n        }\n        elsif ($c == $Av) {\n            $re = 1;\n        }\n        elsif ($c > $Av) { # and $c < 0.7, is a next time\n            T.Z->{$c} = 1;\n            $re = 0;\n            $dont = 1;\n        }\n        else {die\"nof\"}\n    }\n    undef $ncv if $av; # aux K\n    my $was = A.cv;\n    $dont || I.d&ex,$i,$K,$cv,$av;\n    A.cv = $ncv if defined $ncv && A.cv == $was;\n    $re;\n};\n"
      sc: 
        acgt: K,cv,av
        args: A,C,G,T,K,cv,av
        code: I 1
        dige: 442c4320522f
        gro: Indulator/KnowTime
        nois: "#c"
      t: t
      "y": 
        cv: '0.3'
        cvt: 0.3	t
        p: qq/Indulator/Indulator/KnowTime/KnowTime
    taJe: 
      c: 
        el: 1
        s: "A.I.taJe = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    I.d&isC,$s || I.d&isJ,$s || return;\n    if (s.bb) {\n        if (I.d&isC,C.c ) {\n            C.c = {e=>C.c};\n        }\n        C.c.s = $s;\n    }\n    else {\n        if (I.d&isJ,C.c ) {\n            C.c = {s=>C.c};\n        }\n        C.c.e = $s;\n    }\n    C.y = {};\n    C.c.W = C.t;\n    return 1\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: faa4604847df
        gro: Indulator/SlideEa
      t: taJe
      "y": 
        cv: '0.3'
        cvt: 0.3	taJe
        p: qq/Indulator/Indulator/SlideEa/SlideEa
    tlM: 
      c: 
        el: 1
        s: "A.I.tlM = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $os = $s;\n    $s = s.M if ref $s eq 'HASH';\n    ref $s eq 'ARRAY' || return \"S not N/M: \".wdump[$os];\n    Rw ZNews $N:s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 26c4c9eceb6f
        gro: Modulator/Rings
        nov: 1
      t: tlM
      "y": 
        cv: '0.3'
        cvt: 0.3	tlM
        p: qq/Modulator/Modulator/Rings/Rings
    us: 
      c: 
        el: 1
        s: "A.I.us = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($D,@Me) = @M;\n    my $I = A.I;\n    my $e = I.d&sces,C.c.e||return();\n    my $us = e.c.us||return();\n    push @M, 'NOGK' if @M == 1;\n    I.d&inDin,$us,@M;\n};\n"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I 1
        dige: e8b25536c033
        gro: Indulator/C
      t: us
      "y": 
        cv: '0.3'
        cvt: 0.3	us
        p: qq/Indulator/Indulator/C/C
    whipre: 
      c: 
        el: 2
        s: "A.I.whipre = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return $s =~ /[1p]/ ? 'pre' : \n    $s =~ /[2n]/ ? 'nowrap' : \n    die \"Canot $s whipre?\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1f6463e93179
      t: whipre
      "y": '0.3'
    wordbreakwords: 
      c: 
        el: 2
        s: "A.I.wordbreakwords = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die \"Wordbreaku: $s\" if $s ne '1';\n    'break-word';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: fec6238facc3
      t: wordbreakwords
      "y": '0.3'
    writef: 
      c: 
        el: 1
        s: "A.I.writef = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($f,$s,$append,@Me) = @M;\n    my $I = A.I;\n    (my $d = $f) =~ s/\\/[^\\/]+?$//;\n    unless (-d $d) {\n        `mkdir -p $d`;\n    }\n    \n    $s = [$s] if !ref $s;\n    my $li = ref $s eq 'ARRAY' ? join(\"\",map{/\\n$/?$_:\"$_\\n\"}@$s)\n        : die \"Wsome other $f type: $s\";\n    $li = encode_utf8 $li;\n    \n    my $wa = {};\n    wa.append = 1 if $append;\n    write_file($f,$wa,$li);\n};\n"
      sc: 
        acgt: f,s,append
        args: A,C,G,T,f,s,append
        code: I 1
        dige: 40e5b67ad1ea
        gro: Seven/SevWo
      t: writef
      "y": 
        cv: '0.3'
        cvt: 0.3	writef
        p: qq/Seven/Seven/SevWo/SevWo
    wtfch: 
      c: 
        el: 1
        s: "A.I.wtfch = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($Jb,$Yb,@Me) = @M;\n    my $I = A.I;\n    my $wtf = {};\n    wtf.same = 1;\n    $wtf->{$_} = {} for qw'new diff gone';\n    \n    for (sort keys %$Jb) {\n        if (!exists $Yb->{$_}) {\n            wtf.new->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        } \n        elsif ($Yb->{$_} ne $Jb->{$_}) {\n            wtf.diff->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        }\n        else {\n            wtf.sami++;\n            wtf.still->{$_} = $Jb->{$_};\n        }\n        wtf.tot++;\n    }\n    for (grep { !exists $Jb->{$_} } sort keys %$Yb) {\n        wtf.gone->{$_} = $Yb->{$_};\n        wtf.same = 0;\n    }\n    $wtf;\n};\n"
      sc: 
        acgt: Jb,Yb
        args: A,C,G,T,Jb,Yb
        code: I 1
        dige: 75e75366ec49
        gro: Modems/Pha
        l: "#c diff J"
      t: wtfch
      "y": 
        cv: '0.3'
        cvt: 0.3	wtfch
        p: qq/Modems/Modems/Pha/Pha
    xot: 
      c: 
        el: 1
        s: "A.I.xot = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$c,@Me) = @M;\n    my $I = A.I;\n    ref $c eq 'HASH' && ref $s eq 'HASH' ||\n        die \"Hash up\".wdump 3, [$s,$c];\n    while (my($k,$v) = each %$c) {\n        $s->{$k} = ref $v eq 'HASH' ?\n                    {%{$s->{$k}||{}}, %$v}\n        : ref $v ? \n            die \"Hash a ref v: \".wdump 2, $s\n        : $v;\n    }\n    return $s\n};\n"
      sc: 
        acgt: s,c
        args: A,C,G,T,s,c
        code: I 1
        dige: 5b5480545ba0
        gro: Indulator/C
      t: xot
      "y": 
        cv: '0.3'
        cvt: 0.3	xot
        p: qq/Indulator/Indulator/C/C
    xoy: 
      c: 
        el: 1
        s: "A.I.xoy = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($s,$c,@Me) = @M;\n    my $I = A.I;\n    $c = I.d&xot,{},$c;\n    I.d&xot,$c,$s;\n    return $s;\n};\n"
      sc: 
        acgt: s,c
        args: A,C,G,T,s,c
        code: I 1
        dige: 3bee9aa63385
        gro: Indulator/C
      t: xoy
      "y": 
        cv: '0.3'
        cvt: 0.3	xoy
        p: qq/Indulator/Indulator/C/C
    z: 
      c: 
        el: 1
        s: "A.I.z = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $I->{d}->(\"oseverato\");\n        push @{$A->{M}}, @{$T->{oM}};\n        1\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 85ce5e302f71
        gro: Indulator/Motion
      t: z
      "y": 
        cv: '0.3'
        cvt: 0.3	z
        p: qq/Indulator/Indulator/Motion/Motion
  "0.11": 
    after: 
      c: 
        el: 1
        s: "A.I.after = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    A.bangdesk = {};\n    A.bangdesk.main = sub {\n        $_->() for values %{A.bangdesk.aft};\n        $@ || return;\n        A.bang && return;\n        A.bang = 21;\n        $_->() for values %{A.bangdesk.bang};\n        # want to sus $@ and hang vectors of what, should be autoish\n        my $m = \"J: I.nF.A.talk        A.mo.ont.cv\";\n        $m .= \"\\nC: \".k2 I.nF.C;\n        $m .= \"\\ns: \".wdump 3, I.nF.A.s unless length $m > 20;\n        sayre \" * bangdesk: \\n$m\";\n        return $m;\n    };\n    aft { A.bangdesk.main->() }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 11
        dige: ba76e9085ca3
        gro: Indulator/Bangdesk
        its: 1
      t: after
      "y": 
        cv: '0.3'
        cvt: 0.3	after
        p: qq/Indulator/Indulator/Bangdesk/Bangdesk
  "0.12": 
    Ci: 
      c: 
        el: 1
        s: "A.I.Ci = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    !ref $s ? I.d&string,$s\n    :\n    ref $s eq 'ARRAY' ? I.d&array,$s\n    :\n    ref $s eq 'HASH' ? I.d&hash,$s\n    :\n    die \"mmtype:$s\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 12
        dige: 0ae2f062639c
        gro: Indulator/SlideEa
        its: 1
      t: Ci
      "y": 
        cv: '0.3'
        cvt: 0.3	Ci
        p: qq/Indulator/Indulator/SlideEa/SlideEa
  "0.18": 
    reasonlock: 
      c: 
        el: 1
        s: "A.I.reasonlock = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die\"reft\" if ref C.t;\n    if (A.J.name eq 'qq' || A.J.most.J eq A.J) {\n        C.c.W = C.t unless C.c || C.sc || C.y;\n    }\n    I.d&renc if !ref C.c;\n    \n    my $yy = C.y;\n    C.y = {} if ref C.y ne 'HASH';\n    I.d&givy,$yy;\n    \n    I.d&rensc if !ref C.sc;\n    \n    I.d&isC,$C && ref C.sc\n        || die \"reaso fail\".wdump [A.s,$C];\n    I.d&scyvle;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 18
        dige: 2498294940c1
        gro: Indulator/SlideEa
        its: 1
      t: reasonlock
      "y": 
        cv: '0.3'
        cvt: 0.3	reasonlock
        p: qq/Indulator/Indulator/SlideEa/SlideEa
  "0.71": 
    CoM: 
      c: 
        el: 1
        s: "A.I.CoM = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        push @{$T->{oM}}, $C unless $T->{Z};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 71
        dige: 7a9e6cff36b8
        gro: Indulator/Motion
        its: 1
      t: CoM
      "y": 
        cv: '0.3'
        cvt: 0.3	CoM
        p: qq/Indulator/Indulator/Motion/Motion
  "0.9": 
    erg: 
      c: 
        el: 1
        s: "A.I.erg = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # must pre compile, see D severators\n    my $m = \"J: A.talk\";\n    $m .= \"\\nC: \".ki $C;\n    $m .= \"\\ns: \".wdump 3, A.s unless length $m > 20;\n    $@ = \"$m\\n$@\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 9
        dige: 1f5c81388334
        gro: Indulator/Bangdesk
      t: erg
      "y": 
        cv: '0.3'
        cvt: 0.3	erg
        p: qq/Indulator/Indulator/Bangdesk/Bangdesk
Ii: G/T/Wild:HASH + G/T/Seate:HASH + G/T/Chang:HASH
J: 
  "0.6211": 
    J_6211: 
      c: 
        el: 1
        s: "A.I.J_6211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $M = [];\n    my $y = {o=>$M};\n    J.oy = $y;\n    \n    return if exists C.c.pi;\n    \n    if (A.ztime < 9) {\n        if (A.jr&bol) {\n            sayre \"STOPPING \".ki($C) for 1..3;\n            # TODO stop\n        }\n        A.bangdesk.aft.unblocknine = A.jr&bol,9;\n    }\n    A.bangdesk.bang.bang_ts = sub {\n        A.jr&bang_ts,hitime\n    };\n    \n    C.c.pin = J.name;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6211
        dige: 5ddc711a102e
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_6211
      "y": 
        cv: '0.6211'
        cvt: 0.6211	J_6211
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.6211211": 
    J_6211211: 
      c: 
        el: 1
        s: "A.I.J_6211211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    J.le && return;\n    my $x = A.J.pix || J.mo.J.pix || return;\n    Rw Foldout $x $A $C $J $T $y:J.oy;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6211211
        dige: a283762a195b
        gk: J
        gro: Foli
        nk: c
        v: cJ
      t: J_6211211
      "y": 
        cv: '0.621121'
        cvt: 0.621121	J_6211211
        p: qq/Foli/Foli
  "0.6212": 
    J_6212: 
      c: 
        el: 1
        s: "A.I.J_6212 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless exists C.c.pi;\n    \n    die'csnod'.wdump 3, [$C, J.C] if $C ne J.C;\n    J.cv = (C.c.gp && C.c.gp.cv) || C.c.cv || 0.6;\n    my $path = C.sc.pi||die'nopi';\n    if (J.A.d > 9) {\n        $path = 'text';\n        warn \"J.name J.A.d limit to text\";\n    }\n    C.c.pin = \"pi/$path\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6212
        dige: 7d6cf8475ee3
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_6212
      "y": 
        cv: '0.6212'
        cvt: 0.6212	J_6212
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.631": 
    J_631: 
      c: 
        el: 1
        s: "A.I.J_631 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    A.coi = I.d&pha,$J,'ako';\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 631
        dige: 59b0dc2b2481
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_631
      "y": 
        cv: '0.631'
        cvt: 0.631	J_631
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.632": 
    J_632: 
      c: 
        el: 1
        s: "A.I.J_632 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless exists C.sc.pi;\n    \n    map { # telephone winch, propaganda (top-er levels receiving stuff)\n         J.A->{$_} = J.Jiter.A->{$_}\n         if J.Jiter && J.Jiter.A->{$_};\n    } qw'ljm ljmo';\n    \n    A.time = sub {\n        my($JJ,$q) = @_;\n        $J eq $JJ || die \"wtfJure  J.name   vs JJ.name\";\n        # wanna A.t&T,2,0 us to difference streams\n        # they could be xot maps or code to run\n        # then all over things \n    \n        if ($q == 2) {\n            my $sc = Rw Jamroot $J $C:J.C $y:J.oy if J.oy.at;\n    \n            A.ico = I.d&pha,$J,'ico';\n            A.ico.qui = 1;\n            I.d&as,A.ico,A.coi;\n            my $wtf = I.d&exactl,A.ico;\n    \n            if (wtf.last && !wtf.same) {\n                my $uf = join \"\\n\", map{\"$_: \".wdump(1,$wtf->{$_})}\n                    grep {keys %{$wtf->{$_}}} qw'new diff gone';\n                saybl \"T.alk  2222  $uf\";\n            }\n    \n            my $iM = 1 if sc.osci && J.mo.J.act;\n            my $stick = !J.mo.J.act && !$iM && # travel part\n                Rw eighthnot $J;\n            if (!$stick) { # am sticking\n                my ($o,$O) = (J.oy,J.Oy);\n                for (grep{$o->{$_} ne $O->{$_}} \n                    grep{!ref $o->{$_}} keys %$o) {\n                    $stick = 1; # unless y.? nonref changed, or wider spacer\n                    saybl \"J.name unstuck due to ychange: $_:\"\n                        .\" $o->{$_} ne $O->{$_}\";\n                }\n            }\n            # rhythm^\n            if ($stick) {\n                A.ico.wtf.same = 0;\n            }\n            elsif (wtf.same) {\n                T.iM = $iM if $iM;\n                return 0;\n            }\n    \n            # for the lift, osc should Jiter ne A.J and pd it\n            J.A.ljm = [];\n            J.A.ljmo = \"fr  J.name\";\n            return 1;\n        }\n    \n        warn \"T.alk other $q\";\n        if ($q == 8) {\n            # until J.most coord attention evaporates\n            # as in pulling on a list\n        }\n        A.ztime >= $q;\n    };\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 632
        dige: df07e0c70cbe
        gk: J
        gro: Modulator/Jong/Juperfi
        its: 1
        nk: c
        v: cJ
      t: J_632
      "y": 
        cv: '0.632'
        cvt: 0.632	J_632
        p: qq/Modulator/Modulator/Jong/Jong/Juperfi/Juperfi
  "0.632114142": 
    J_632114142: 
      c: 
        el: 1
        s: "A.I.J_632114142 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return if exists C.sc.pi;\n    A.time = sub {\n        my ($JJ,$q) = @_;\n        $J eq $JJ || die \"wtfJure  J.name   vs JJ.name\";\n        my $r = 1;\n        if ($q == 2) {\n            A.Subtle.time = 1;\n            A.t&time,3,19;\n            $r = 0 if T.pos == 0; # def 1, 0 if no change\n            return $r;\n        }\n    \n        warn \"T.alk other $q\";\n        if ($q == 8) {\n            # until J.most coord attention evaporates\n            # as in pulling on a list\n        }\n        $r\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 632114142
        dige: 3ff893ff2467
        gk: J
        gro: threJ
        nk: c
        v: cJ
      t: J_632114142
      "y": 
        cv: '0.632114'
        cvt: 0.632114	J_632114142
        p: qq/threJ/threJ
  "0.66": 
    J_66: 
      c: 
        el: 1
        s: "A.I.J_66 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $ar = {%{C.c}};\n    ar.s = '' if !exists ar.s;\n    ar.u = ar.s;\n    ar.pin = C.c.pin || die \"nopin\";\n    my $y = J.oy;\n    my $M = y.o;\n    \n    Rw ar.pin + $A $C $G $T $I $J $M $y;\n    \n    if (T.iM) {\n        J.Oy || die \"no JOy J.name\";\n        ref J.Oy.o eq 'HASH' || die \"J.name oYo not hash/picked up\";\n        ref J.Oy.o.M eq 'ARRAY' || die \"J.name oYoM not array\";\n        push @{J.oy.o}, @{J.Oy.o.M};\n    }\n    J.Oy = $y;\n    if (@$M) {\n        n z=>$y=>{}\n    }\n    Rw Jamroot $C $J $y if y.at;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 66
        dige: a5370c4c8b94
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_66
      "y": 
        cv: '0.66'
        cvt: 0.66	J_66
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
  "0.672": 
    J_672: 
      c: 
        el: 1
        s: "A.I.J_672 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return unless A.ico && A.ico.wtf.same;\n    # first the superstilled\n    # anything T_D can arrange through time...\n    # wants to join G subtly vis T and so....\n    # should be no M in the first bit\n    # it is just pinpricks of consciousness keeping it alive, like mtime\n    # be nicer to do with an I that can T out of this whole change res patch\n    my $cut = @{A.ico.ord};\n    my @cc = @{A.coi.ord};\n    if (@cc > $cut) {\n        warn\"J.name entered stuff after 2!\".wdump [@cc, \n        '                 =============', @{A.ico.ord}];\n    }\n    I.d&bandon,A.coi;\n    if (my $ljm = J.A.ljm) {\n        for my $s (@$ljm) {\n            s.noR=1;\n            I.d&jamsc,$s;\n        }\n    }\n    sayre \"SKIP T.alk\";# if J.V || J.most.J.V;\n    T.whack = 1; # exit A.t&J\n    T.same = 1; # exit Mo, T.not but not, kind of unlet ztime6->7\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 672
        dige: 8a8f5c43f7ab
        gk: J
        gro: Modulator/Jong/Juperfi
        its: 1
        nk: c
        v: cJ
      t: J_672
      "y": 
        cv: '0.672'
        cvt: 0.672	J_672
        p: qq/Modulator/Modulator/Jong/Jong/Juperfi/Juperfi
  "0.677": 
    J_677: 
      c: 
        el: 1
        s: "A.I.J_677 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    if (J.oy.ope) {\n        sayyl \"Leaving J.name open pha...\" if A.V&ope;\n        I.d&end,A.coi;\n        return;\n    }\n    A.coi.qui = 1;\n    my $wt = I.d&exactl,A.coi;\n    if (wt.same) {\n        if (++J.A.wch > 4) {\n            J.A.wch = 0;\n            # ^ rate to avoid v see J 632 eighthnot\n        }\n        else {\n           sayre \"SAME T.alk\" if A.V&SAME;\n           T.same = 1;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 677
        dige: fe51018f11a7
        gk: J
        gro: Modulator/Jong/Jiterbug
        its: 1
        nk: c
        v: cJ
      t: J_677
      "y": 
        cv: '0.677'
        cvt: 0.677	J_677
        p: qq/Modulator/Modulator/Jong/Jong/Jiterbug/Jiterbug
Mo: 
  "0.1": 
    acted: 
      c: 
        el: 1
        s: "A.I.acted = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # wheels acts run into, 6* coupling\n    # we should scrub away any T we understand  (exactly)\n    # trace flop F and see the swims\n    I.d&Tat if T.at;\n    return die'tlast' if T.last;\n    1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Mo 1
        dige: 323b52543ebb
        gro: Modulator/Rings
      t: acted
      "y": 
        cv: '0.3'
        cvt: 0.3	acted
        p: qq/Modulator/Modulator/Rings/Rings
  "0.201": 
    bals_201: 
      c: 
        el: 1
        s: "A.I.bals_201 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $bals = C.c.bals;\n    # a non-s\n    my $N = C.c.bals;\n    $N = [ map { [$_] } split \"\\n\",$N ] if !ref $N;\n    my $y = C.y || die\"noy\";\n    y.o && return sayre \"bals y o already\".wdump[ki $C, $y, I.d&tlM,y.o ];\n    y.bal && return sayre \"bals y bal already\".wdump[ki $C, $y, I.d&tlM,y.bal ];\n    y.bal = [];\n    # have some minions to od thi:\n    A.oA || die \"wanting to s bab, no oA\";\n    Rw In $J:A.J $M:y.bal $N;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 201
        dige: 3c7cea229c38
        gk: bals
        gro: Modulator/Wrinkles
        nk: c
        v: cbals
      t: bals_201
      "y": 
        cv: '0.3'
        cvt: 0.3	bals_201
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.21": 
    yo_: 
      c: 
        el: 1
        s: "A.I.yo_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $o = C.y.o;\n        $o = $C->{y}->{o} = {M=>$o} if ref $o eq 'ARRAY';\n        $o->{M} ||= [$C];\n        # 4d jelly slower-downer\n        # so we should acquire many $A->{t}&\n        # this is an EC into our C's $T->{oM}, as $s->{M} now\n        # stackable A with stitchable others interleaved in time\n        # 6 FLIES\n        $o->{M} = [grep{defined}map{\n            my $d;\n            ref $_ || die \"oM nonhashi \".wdump 2, $o->{M};\n            $d->{t} = $_->{t};\n            $d->{y} = {%{$_->{y}}};\n            $d->{c} = {%{$_->{c}}};\n            delete $d->{y}->{cv} if $y->{ecv};\n            # allow any cv to wander from yarNgrid:\n            #$y->{cvil} = 1 if defined $d->{y}->{cv};\n            $d->{sc} = {%{$_->{sc}||{}}};\n            # TRansituio, soul spread\n            if ($o->{ou}) {\n                # inside our, change slightly how we see\n                # spread compound\n                $d->{c}->{pi} = $o->{ou};\n                $d->{c}->{s} = $_;\n            }\n            $d->{sc}->{oJ} = $o->{oJ} if $o->{oJ};\n            # travel agent ^\n            # traveli\n            $G->{w}->(\"C14\", {I => $I, A => $A, C => $d}, $G);\n            #\n            $A->{J}->{V} && say \"AH $A->{J}->{name}  ::: $d->{t}   \".ki $d->{sc};\n            keys %$d ? $d : undef\n        }@{$o->{M}}];\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 21
        dige: 2179053cd325
        gk: o
        gro: Modulator/Space
        nk: 'y'
        v: yo
      t: yo_
      "y": 
        cv: '0.3'
        cvt: 0.3	yo_
        p: qq/Modulator/Modulator/Space/Space
  "0.22": 
    yon_: 
      c: 
        el: 1
        s: "A.I.yon_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $o = C.y.o;\n        my $J = $A->{J};\n        my $Jy = $J->{C}->{y}; # pi's sea\n        # surface tesion, lum\n        if (my $lt = $C->{y}->{limn}) {\n            $Jy->{spc} || die \"no space ! $J->{name} - $C->{t} keep more numbers\";\n            my $rl = int(9 * $lt * $Jy->{spc});\n            my $was = @{$o->{M}};\n            if ($was > $rl) {\n                my @um = @{$o->{M}};\n                @um = @um[0..$rl-1];\n                @{$o->{M}} = @um;\n                # space mod\n                my $s = $was;\n                $J->{n}->($J, \"limo\",0.7,\"$was>$rl\",'%fs:7,hs:7487');\n            }\n        }\n        $C->{y}->{bal} = $o->{M} || die\"nomo\";\n        # unless y unlimited...until\n        $o->{J} = $J->{most}->{J} if $Jy && $Jy->{o} && $Jy->{spc} > 0.1;\n        delete $o->{J} if $y->{clos};\n        my $shut = $Jy && $Jy->{o} && !$o->{J};\n        $C->{y}->{over} = ($Jy->{o} && $Jy->{over} && $Jy->{over} || 0) + 0.06 if $y->{o}->{J};\n        #sayre \"Jyspace: spc:  $J->{d}->{y}->{spc}  or aspace: $Jy->{aspace}\" if $Jy;\n        # divvy space inside parent's share most J or in 3-4 of the pi\n        my $sl = $Jy->{spc} * 0.01;\n        $sl = 0.02 if $sl < 0.02;\n        $C->{y}->{in} ||= $shut ? 0.3 : $Jy ? $Jy->{cv} + $sl : 0.1;\n        $C->{y}->{out} ||= $shut ? 0.4 : $Jy ? $Jy->{ov} - $sl : 0.9;\n        $C->{c}->{lumfa} = 1 if $y->{lumfa};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 22
        dige: edc5cbc554cd
        gk: o
        gro: Modulator/Space
        nk: 'y'
        v: yo
      t: yon_
      "y": 
        cv: '0.3'
        cvt: 0.3	yon_
        p: qq/Modulator/Modulator/Space/Space
  "0.221": 
    yall_: 
      c: 
        el: 1
        s: "A.I.yall_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    C.y = {thi => C.y} if !ref C.y;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 221
        dige: 1dc839684266
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yall_
      "y": 
        cv: '0.3'
        cvt: 0.3	yall_
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.223": 
    bal_: 
      c: 
        el: 1
        s: "A.I.bal_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    y.thi = @$bal;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 223
        dige: d6a901a533ea
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: bal_
      "y": 
        cv: '0.3'
        cvt: 0.3	bal_
        p: qq/Modulator/Modulator/bal/bal
  "0.23": 
    yin_: 
      c: 
        el: 1
        s: "A.I.yin_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # build wave plot manifold\n    # solar systems\n    y.cv ||= 0.3 if !defined y.cv && !defined y.in;\n    y.in = y.cv if defined y.cv;\n    y.in ||= 0.1;\n    y.out = y.in + y.space if defined y.space;\n    y.out ||= 0.9; # up to, then low things big\n    y.thi ||= 1;\n    if (my $mk = y.ert) {\n        $mk += y.ert while y.thi > $mk;\n        y.thi = $mk;\n    }\n    y.space = y.out - y.in;\n    y.space *= -1 unless y.space > 0;\n    y.aspace = y.space / y.thi;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 23
        dige: b8b2317909f4
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yin_
      "y": 
        cv: '0.3'
        cvt: 0.3	yin_
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.233": 
    lum_thy_: 
      c: 
        el: 1
        s: "A.I.lum_thy_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $lum = C.y.lum;\n    my $bal = C.y.bal;\n    my $um = {};\n    (um.l,um.r) = split ',', $lum;\n    $um->{$_} =\n        $um->{$_} =~ /^(?:(\\d+)-)??(?:(\\d)+)(?:-(\\d)+)?$/\n        ? {i=>$1,um=>$2,o=>$3}\n        : die \"notunder: \".wdump 2, $um\n        for keys %$um;\n    saybl \"Lum C.t: \". wdump 2, $um;\n    um.l.um ||= 3;\n    my $lumhalvesby = (um.l.um / 2) / (um.r.um || 3);\n    my $i = 0;\n    for (@$bal) {\n        _.y.thy+=um.l.um;\n        $i++;\n        if ($i > um.l.o) {\n            um.l.um -= $lumhalvesby if um.l.um > 0.1;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 233
        dige: c9f3fdde73dc
        gk: lum
        gro: Modulator/lum
        nk: 'y'
        rg: bal
        v: ylum
      t: lum_thy_
      "y": 
        cv: '0.3'
        cvt: 0.3	lum_thy_
        p: qq/Modulator/Modulator/lum/lum
  "0.241": 
    muav_: 
      c: 
        el: 1
        s: "A.I.muav_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    my $total = sum(map { y.thy||1 } @$bal) || 1;\n    my $over = @$bal || 1;\n    y.u.muav = $over / $total;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 241
        dige: a65c817c1fac
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: muav_
      "y": 
        cv: '0.3'
        cvt: 0.3	muav_
        p: qq/Modulator/Modulator/bal/bal
  "0.26": 
    yarN_: 
      c: 
        el: 1
        s: "A.I.yarN_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # twist, lay into segment\n    ref $y eq 'HASH' || die \"Notash: \".wdump 2, $C;\n    !defined y.u || ref y.u eq 'HASH' || die \"Nou : y.u \".wdump 2, $y;\n    y.u.v = defined y.cv ? y.cv\n        : defined y.in ? y.in\n        : die \"no yiny\".ki$y;\n    y.thi || die \"Whythi\".ki$C;\n    die \":idify\" if $y ne C.y;\n    # y.u. shares av, y. separates\n    # difference pours out of y.bal via y.i in 32\n    my @lot = map {\n        my $C = eval { I.d&xot,{},$C };\n        C.y.i = $_-1;\n        $@ && die \"Tpp \".wdump 2, $C;\n        $C\n    } 1..y.thi;\n    if (@lot > 1) {\n        push @{A.mo.re->{0.29}||=[]}, map{[undef,$_]}@lot;\n        T.not = 1;\n    }\n    else {\n        my ($CC) = @lot;\n        ref $CC eq 'HASH' || die \"not one? $CC\";\n        %$C = %$CC;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 26
        dige: 8b60c744edc4
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yarN_
      "y": 
        cv: '0.3'
        cvt: 0.3	yarN_
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.3": 
    yinvout_: 
      c: 
        el: 1
        s: "A.I.yinvout_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    y.mu = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3
        dige: ea75f29040cf
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yinvout_
      "y": 
        cv: '0.3'
        cvt: 0.3	yinvout_
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.301": 
    balin_: 
      c: 
        el: 1
        s: "A.I.balin_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    my $CC = $bal->[y.i];\n    if (ref $CC ne 'HASH') {\n        sayre \"Not ref: $CC A.J.name  C.t bal y.i :\";\n        return T.not = 1;\n    }\n    $CC ||= {};\n    I.d&xot,$C,$CC;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 301
        dige: 8b609488ea6d
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: balin_
      "y": 
        cv: '0.3'
        cvt: 0.3	balin_
        p: qq/Modulator/Modulator/bal/bal
  "0.3211": 
    J_3211: 
      c: 
        el: 1
        s: "A.I.J_3211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    C.c.W = $J unless ref C.c.W;\n    ref C.c.W || !ref $J || C.c.W eq J.name || die \"J.name isn't\".ki(C.c);\n    !ref C.c.W || !ref $J || C.c.W eq $J || die \"nzoWJ\".ki(C.c);\n    # avoid 6ing, its doubling orso\n    A.ztime = 3 if A.J.name ne 'qq'; # break off\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3211
        dige: cde84b43b42c
        gk: J
        gro: Modulator/Jing/Jlaces
        nk: c
        v: cJ
      t: J_3211
      "y": 
        cv: '0.3211'
        cvt: 0.3211	J_3211
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.3213": 
    pi_3213: 
      c: 
        el: 1
        s: "A.I.pi_3213 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pi = C.c.pi;\n    # - c. language is map to some u before 6ing\n    ref $pi && die\"refpi: \".wdump 2, $pi;\n    T.at.pi = $pi || 'guess';\n    C.c.J = 'pi';\n    my $oJ = A.J;\n    $oJ = C.y.o.J if C.y.o && C.y.o.J;\n    A.jr = Rw Ajr $J:oJ $C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3213
        dige: c5aa5fc1a21a
        gk: pi
        gro: Modulator/Jing/Jlaces
        its: 1
        nk: c
        v: cpi
      t: pi_3213
      "y": 
        cv: '0.3213'
        cvt: 0.3213	pi_3213
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.321323": 
    W_321323: 
      c: 
        el: 1
        s: "A.I.W_321323 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $W = C.c.W;\n    my $J = A.J;\n    return unless J.name eq 'qq';\n    my $f = \"w/u/$W\";\n    return unless -f $f;\n    C.sc.wW = delete C.c.W;\n    C.sc.Wf = $f;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 321323
        dige: 3dae2bd46d97
        gk: W
        gro: qqlaces
        nk: c
        v: cW
      t: W_321323
      "y": 
        cv: '0.321323'
        cvt: 0.321323	W_321323
        p: qq/qqlaces/qqlaces
  "0.3214": 
    W_3214: 
      c: 
        el: 1
        s: "A.I.W_3214 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $W = C.c.W;\n    my $t = $W;\n    $t = W.name if ref $t;\n    my $jr = Rw Ajr $J:G.oin $t $cv=0.3;\n    \n    return C.c.W = die \"SOIDNG RESEAR(pi with W)\".  jr&J\n        if C.c.pi; # doing research\n    A.jr = $jr; # being\n    \n    T.at.W = $t;\n    T.at.J = ref $W ? $W : $t;\n    # going over J should be same...\n    C.c.J ||= $W;\n    C.t = $t;\n    C.y.cv ||= 0.3;\n    # and where the thrust (J.A?)\n    if (C.c.vv) {\n        A.ztime = delete C.c.vv;\n        A.jr&vv,'',9\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3214
        dige: e31ad819f6b6
        gk: W
        gro: Modulator/Jing/Jlaces
        its: 1
        nk: c
        v: cW
      t: W_3214
      "y": 
        cv: '0.3214'
        cvt: 0.3214	W_3214
        p: qq/Modulator/Modulator/Jing/Jing/Jlaces/Jlaces
  "0.337": 
    balou_: 
      c: 
        el: 1
        s: "A.I.balou_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $bal = C.y.bal;\n    y.mu = y.thy if exists y.thy;\n    y.mu = y.mu * y.u.muav if y.u.muav;\n    #\n    say \"A.J.C.t  /  T.t ist y.mu  among y.u.muav\"\n        if A.J.V && y.u.muav != 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 337
        dige: 4ade4215e92e
        gk: bal
        gro: Modulator/bal
        nk: 'y'
        v: ybal
      t: balou_
      "y": 
        cv: '0.3'
        cvt: 0.3	balou_
        p: qq/Modulator/Modulator/bal/bal
  "0.34": 
    black_: 
      c: 
        el: 1
        s: "A.I.black_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $was = y.u.v;\n    defined $was || die\"noAv\".ki$C;\n    # in:\n    y.cv = 0+sprintf '%.6f', y.u.v unless y.cvil && defined y.cv;\n    y.pcv = 0+sprintf '%.6f', y.i / C.y.thi;\n    # over:\n    my $in = y.aspace * y.mu;\n    y.u.v += $in;\n    # out: \n    y.ov = sprintf '%.6f', y.u.v;\n    y.spc = y.ov - y.cv;\n    #\n    sayyl \"Bend: C.t   $was += $in       y.aspace * y.mu       muav:y.u.muav\"\n        if A.J.V && y.u.muav && y.u.muav != 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 34
        dige: 0f5f111f2197
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: black_
      "y": 
        cv: '0.3'
        cvt: 0.3	black_
        p: qq/Modulator/Modulator/Spaci/Spaci
  "0.341": 
    J_341: 
      c: 
        el: 1
        s: "A.I.J_341 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $f = A.jr&J;\n    my $j = C.sc.J;\n    ref $j && ref $f && ($j eq $f || die \".sc J dif $f $j\");\n    # should T.at so vis, substrate insecting\n    C.c.J = T.at.J = $f if $f && ref $f && !f.dead;\n    A.Iso.oJ = 1; # getting pinned into J\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 341
        dige: a66bb6c1e9e4
        gk: J
        gro: Modulator/Jing/Joot
        its: 1
        nk: c
        v: cJ
      t: J_341
      "y": 
        cv: '0.341'
        cvt: 0.341	J_341
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.342": 
    X_342: 
      c: 
        el: 1
        s: "A.I.X_342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $X = C.c.X;\n    my $J = C.sc.J;\n    sayre \"DELING J.name\".ki$C;\n    $J || die \"X no J\";\n    ref $J || die \"Nofound $J  C.t   C.y.cv\";\n    $X eq $J || die \"noovewr X  C.c.X ne $J\";\n    A.jr&J,$J,9;\n    J.dead = 1;\n    # SNat bail, we have balin by now so hole in space this time\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 342
        dige: 62f17d0fcd62
        gk: X
        gro: Modulator/Jing/Joot
        nk: c
        v: cX
      t: X_342
      "y": 
        cv: '0.342'
        cvt: 0.342	X_342
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.37": 
    ent_: 
      c: 
        el: 1
        s: "A.I.ent_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    $y->{$_} = 0+sprintf('%.6f',$y->{$_}) for qw'cv ov aspace spc';\n    C.sc.yspc = y.spc if C.sc.nspc;\n    C.sc.ml = (C.y.over * 40).\"%\" if y.over;\n    if (!y.bal && y.aspace == 0.6 && y.in == 0.3) {\n        #saygr \"tidying the y of A.J.name C.t: $y \".ki $y;\n        #delete $y->{$_} for qw'aspace i in mu out ov pcv space spc thi u';\n        # unless any y.o, spacestuff around it\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 37
        dige: 9aa3d27345c8
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: ent_
      "y": 
        cv: '0.3'
        cvt: 0.3	ent_
        p: qq/Modulator/Modulator/Spaci/Spaci
    spc_lum_: 
      c: 
        el: 1
        s: "A.I.spc_lum_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $lum = C.y.lum;\n    my $spc = C.y.spc;\n    # feel effects of... f eel\n    my $upt = 0;\n    $spc = $upt if $spc < $upt;\n    # t-rewirey formulae:\n    my $fs = ($spc / 0.02) * 4;\n    C.sc.fs = $fs;# if $fs < 9;\n    C.y.spc = $spc;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 37
        dige: 08649b070e27
        gk: lum
        gro: Modulator/lum
        nk: 'y'
        rg: spc
        v: ylum
      t: spc_lum_
      "y": 
        cv: '0.3'
        cvt: 0.3	spc_lum_
        p: qq/Modulator/Modulator/lum/lum
  "0.42": 
    id_42: 
      c: 
        el: 1
        s: "A.I.id_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $id = C.c.id;\n    T.at.id = $id;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: 3c4f77654dfc
        gk: id
        gro: Modulator/Wrinkles
        nk: c
        v: cid
      t: id_42
      "y": 
        cv: '0.3'
        cvt: 0.3	id_42
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
    idly_42: 
      c: 
        el: 1
        s: "A.I.idly_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $idly = C.c.idly;\n    T.at.id = mkuid();\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: 82ee17a24ca6
        gk: idly
        gro: Modulator/Wrinkles
        nk: c
        v: cidly
      t: idly_42
      "y": 
        cv: '0.3'
        cvt: 0.3	idly_42
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
    pwar_42: 
      c: 
        el: 1
        s: "A.I.pwar_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pwar = C.c.pwar;\n    T.at.pwar = $pwar;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: 997ea79deb48
        gk: pwar
        gro: Modulator/Wrinkles
        nk: c
        v: cpwar
      t: pwar_42
      "y": 
        cv: '0.3'
        cvt: 0.3	pwar_42
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
    pwth_42: 
      c: 
        el: 1
        s: "A.I.pwth_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $pwth = C.c.pwth;\n    # 8case, to way\n    $pwth =~ s/^(?!!)/!/s;\n    C.c.path = $pwth;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 42
        dige: ae1051bf392f
        gk: pwth
        gro: Modulator/Wrinkles
        nk: c
        v: cpwth
      t: pwth_42
      "y": 
        cv: '0.3'
        cvt: 0.3	pwth_42
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.421": 
    path_421: 
      c: 
        el: 1
        s: "A.I.path_421 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $path = C.c.path;\n    # install sc path, wants idlyness (indexedness)\n    T.at.path = $path;\n    T.at.idly = 1 if !C.c.fo;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 421
        dige: bb050943fa9e
        gk: path
        gro: Modulator/Wrinkles
        nk: c
        v: cpath
      t: path_421
      "y": 
        cv: '0.3'
        cvt: 0.3	path_421
        p: qq/Modulator/Modulator/Wrinkles/Wrinkles
  "0.436": 
    time_436: 
      c: 
        el: 1
        s: "A.I.time_436 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $time = C.c.time;\n    A.ztime = delete C.c.time;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 436
        dige: 0997581cf491
        gk: time
        gro: Modulator/Jing/Jamping
        nk: c
        v: ctime
      t: time_436
      "y": 
        cv: '0.436'
        cvt: 0.436	time_436
        p: qq/Modulator/Modulator/Jing/Jing/Jamping/Jamping
  "0.77": 
    pin_: 
      c: 
        el: 1
        s: "A.I.pin_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    return if delete T.oke;\n    my $oJ = A.J;\n    my $J = C.y.o && C.y.o.J || $oJ;\n    my $ar = {};\n    ar.s = C.c.s if exists C.c.s;\n    \n    Rw jamsc + $J $oJ $C $sc:C.sc;\n    \n    # man is an insect is a flame\n    \n    sayyl \"Hamsc! A.talk: C.t C.y.cv     \".ki(1,{c=>C.c,sc=>C.sc})\n        if A.J.V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 77
        dige: 30369ff61d2a
        gro: Modulator/Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: pin_
      "y": 
        cv: '0.3'
        cvt: 0.3	pin_
        p: qq/Modulator/Modulator/Spaci/Spaci
O: 
  "0.31": 
    tycsc_31: 
      c: 
        el: 1
        s: "A.I.tycsc_31 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    A.Subtle.Art = 1;\n    A.t&Art,33,18;\n    at.t = C.t;\n    at.y.cv = C.y.cv;\n    V.ids->{C.sc.id} = $C if C.sc.id;\n    if (ref C.c.s eq 'HASH' && C.c.s.bb) {\n        # an other that is holding this\n        at.c.S = C.c.s eq A.J && C.sc.W ? ''\n            : C.c.s.name || \"unamed\";\n        # makes link\n    }\n    elsif (exists C.c.s) {\n        at.c.s = C.c.s\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 31
        dige: 4ba726d5b510
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: tycsc_31
      "y": 
        cv: '0.31'
        cvt: 0.31	tycsc_31
        p: qq/Seven/Seven/Yosc/Yosc
  "0.35": 
    J_35: 
      c: 
        el: 1
        s: "A.I.J_35 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    delete at.sc.J if C.c.S;\n    # conceal the multiJexits\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 35
        dige: d89f32f8eb51
        gk: 'Y'
        gro: Seven/SevWo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: J_35
      "y": 
        cv: '0.35'
        cvt: 0.35	J_35
        p: qq/Seven/Seven/SevWo/SevWo
  "0.36": 
    Jin_36: 
      c: 
        el: 1
        s: "A.I.Jin_36 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # so osci ^ can C.sc. > at.sc.bla\n    at.sc = {%{C.sc}};\n    for (qw'idly nspc path yspc') {\n        delete at.sc->{$_}# && sayre \"C.t sc blocking $_\";\n    }\n    # haps to be crate later somewhere if we oWl/S\n    delete ta.V if ref ta.V eq 'HASH' && !keys %{ta.V};\n    \n    if (my $v = at.sc.J) { # J unifies -\n        at.sc.J = v.name;\n    \n        return if C.sc.qz;\n        return if C.sc.W && Y.root.sc.oWl;\n        return if C.sc.W && defined at.c.S && at.c.S eq '';\n    \n        my $nV = v.El->{V.name};\n        return sayre \"no V.name on v.name $v: El: \"\n            .join', ',sort keys %{v.El}\n            if !$nV;\n    \n        my $rv = nV.rv || {LIES=>\"from v.name\"};\n        return sayre \"no rv V.name on v.name\"\n            if !nV.rv;\n    \n        lv.do->{V.name} = $rv;\n        at.V->{V.name} = rv.i;\n    \n        if (at.sc.pi && exists at.c.s && (Y.root.sc.ux || at.sc.qs)) {\n            delete at.c.s; # words about what its looking\n        }\n    }\n    A.t&Art,6,33;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 36
        dige: ca27b9fa769d
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jin_36
      "y": 
        cv: '0.36'
        cvt: 0.36	Jin_36
        p: qq/Seven/Seven/Yosc/Yosc
  "0.37": 
    Josl_37: 
      c: 
        el: 1
        s: "A.I.Josl_37 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (C.c.root) { # / unifies  <\n        %{J.at||die\"You must make Jat for J.name\"} = %{C.sc};\n        if (at.sc.pi && exists at.c.s && Y.root.sc.ux) {\n            delete at.c.s; # itself, 'pi'\n        }\n        lv.voso = 1;\n        for my $ik (@{V.os}) {\n            my $iv = V.lv->{$ik};\n            my $C = iv.C;\n            do { sayre(\"Skip C.t: self in self\") for 1..6 } && next\n                if C.sc.J && C.sc.J eq A.J;\n            lv.do->{$ik} = $iv;\n            at.V->{$ik} = iv.i;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 37
        dige: a926cd30cf05
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Josl_37
      "y": 
        cv: '0.37'
        cvt: 0.37	Josl_37
        p: qq/Seven/Seven/Yosc/Yosc
  "0.38": 
    sel_38: 
      c: 
        el: 1
        s: "A.I.sel_38 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    A.t&Art,8,6;\n    at.sc.geo = ki(at.sc.geo) if ref at.sc.geo;\n    at.y = at.y.cv if keys %{at.y} == 1 && exists at.y.cv;\n    # ^ to SlideEater decode array of y expressions, xotted together\n    for my $up (qw'tag id ht cod') {\n        at.c->{$up} = delete at.sc->{$up} if exists at.sc->{$up}\n    }\n    delete at.c.s if at.c.s eq 'pi' && C.t eq 'pi' && C.y.cv == 0.9;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 38
        dige: 4ede6ef51b8f
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: sel_38
      "y": 
        cv: '0.38'
        cvt: 0.38	sel_38
        p: qq/Seven/Seven/Yosc/Yosc
S: 
  "0.24": 
    Y_24: 
      c: 
        el: 1
        s: "A.I.Y_24 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $di = Y.lo->{C.y.k}) {\n        if (keys %$di == 1 && di.diff) {\n            my $CC = V.tv->{C.y.k};\n            if (!$CC) {\n                sayre \"never heard of (V_tv) diff J.name : C.y.k \";\n                return 1;\n            }\n            for my $tk (keys %{di.diff}) {\n                if ($tk eq 'geo') {\n                    T.to = 1 if !I.d&heq,C.sc.geo,CC.sc.geo;\n                }\n                elsif ($tk eq '') {\n                    T.to = 1 unless ref C.c.s && C.sc.dige && C.sc.dige eq CC.sc.dige;\n                }\n                else {\n                    saybl \"J.name C.y.k has diffre: $tk\";\n                    T.to = 1;\n                }\n            }\n        }\n        else {\n            T.to = 1;\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 24
        dige: 4acc12e47726
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_24
      "y": 
        cv: '0.24'
        cvt: 0.24	Y_24
        p: qq/Seven/Seven/Ysleep/Ysleep
  "0.25": 
    Y_25: 
      c: 
        el: 1
        s: "A.I.Y_25 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $JJ = C.sc.J) {\n        my $ta = V.ta->{C.y.k};\n        if (my $nV = JJ.El->{V.name}) {\n            my $iv = nV.rv;\n            my $oi = ta.V->{V.name};\n            if ($oi ne iv.i) {\n                T.to = 1;\n            }\n        }\n        else {\n            sayre \"no El V.name on JJ.name\";\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 25
        dige: cacb392f6070
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_25
      "y": 
        cv: '0.25'
        cvt: 0.25	Y_25
        p: qq/Seven/Seven/Ysleep/Ysleep
Sev: 
  "0.1": 
    hup: 
      c: 
        el: 1
        s: "A.I.hup = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $CC = {%$s};\n    $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\n    $CC;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Sev 1
        dige: 2bc362811316
        gro: Seven/Yools
      t: hup
      "y": 
        cv: '0.3'
        cvt: 0.3	hup
        p: qq/Seven/Seven/Yools/Yools
  "0.2": 
    JYV_2: 
      c: 
        el: 1
        s: "A.I.JYV_2 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    for my $K ('Y','V') {\n        my $name = C.c->{$K};\n        $name || die \"No $K\";\n        C.c->{$K} = I.d&Elj,$J,$name;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 2
        dige: 486c2792da09
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: JYV_2
      "y": 
        cv: '0.2'
        cvt: 0.2	JYV_2
        p: qq/Seven/Seven/Yuni/Yuni
  "0.21": 
    dElvis_21: 
      c: 
        el: 1
        s: "A.I.dElvis_21 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    I.d&Elvis,$J,$Y;\n    \n    V.os = [];\n    A.mo.retu && die \"J.name's  V.name: Already is  A.mo.retu.name\";\n    A.mo.retu = $V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 21
        dige: e7cd78979127
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: dElvis_21
      "y": 
        cv: '0.21'
        cvt: 0.21	dElvis_21
        p: qq/Seven/Seven/Yuni/Yuni
  "0.22": 
    root_22: 
      c: 
        el: 1
        s: "A.I.root_22 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $rC = Y.tv->{\"0.9\\t/\"}\n        || Y.tv->{\"0.9\\t\".J.name}\n        || Y.tv->{\"0.9\\t\".J.uname}\n        || die \" noroot J.name: showing 0.9s: \"\n            .wdump [map{ki $_}values %{Y.v->{0.9}}];\n    rC.c.root = 1;\n    Y.root = $rC;\n    my $N = [grep { $_ ne $rC } @{Y.vs}];\n    $N = [] if rC.sc.dark;\n    unshift @$N, $rC;\n    # T.Z.$incv = 1||$setAcv makes A,Celf, \n    # A.mo.re array others (yarN) which may Acquire\n    push @{A.mo.re->{0.22}||=[]}, map{\n        my $CC = I.d&hup,$_;\n        # all spreads out to play Y/V\n        I.d&xot,$CC,{c=>C.c};\n        [undef,$CC]\n    }@$N;\n    T.not = 1; # or more 78ism\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 22
        dige: 1943ae62b7e5
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: root_22
      "y": 
        cv: '0.22'
        cvt: 0.22	root_22
        p: qq/Seven/Seven/Yuni/Yuni
  "0.23": 
    Y_23: 
      c: 
        el: 1
        s: "A.I.Y_23 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    C.y.k = C.y.cv.\"\\t\".C.t;\n    push @{V.os}, C.y.k unless C.c.root;\n    Y.root = $C if C.c.root;\n    # how happening to thingk\n    # must ,,,, A.t to gain perception (not mid ex but should)\n    # but yeah add things as lines rejoin\n    A.Iso.O = 1; # also ex O as I (whoever we are)\n    A.Subtle.S = 1; # only-S ex slips through time unwide\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 23
        dige: da4c5970cd85
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_23
      "y": 
        cv: '0.23'
        cvt: 0.23	Y_23
        p: qq/Seven/Seven/Yuni/Yuni
  "0.231": 
    Y_231: 
      c: 
        el: 1
        s: "A.I.Y_231 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    return if C.c.root;\n    T.to = 0;\n    A.t&S,6,2;\n    T.not = 1 if !delete T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 231
        dige: a21d44321272
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_231
      "y": 
        cv: '0.231'
        cvt: 0.231	Y_231
        p: qq/Seven/Seven/Yuni/Yuni
  "0.289": 
    Y_289: 
      c: 
        el: 1
        s: "A.I.Y_289 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    V.alv->{$k} = C.y.lv = {k=>$k,C=>$C};\n    C.y.at = {};\n    C.y.ta = V.ta->{$k};\n    C.y.vl = V.lv->{$k};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 289
        dige: ff9554a21c04
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk
        v: cY
      t: Y_289
      "y": 
        cv: '0.289'
        cvt: 0.289	Y_289
        p: qq/Seven/Seven/Yuni/Yuni
  "0.345": 
    root_345: 
      c: 
        el: 1
        s: "A.I.root_345 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $root = C.c.root;\n    my $J = C.c.J;\n    my $Y = C.c.Y;\n    my $V = C.c.V;\n    if (C.c.root) { \n        Y.root = $C;\n        T.Z->{0.6} = 0.345;\n        T.not = 1;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 345
        dige: 19a76cc18f23
        gk: root
        gro: Seven/Yuni
        nk: c
        rg: J,Y,V
        v: croot
      t: root_345
      "y": 
        cv: '0.345'
        cvt: 0.345	root_345
        p: qq/Seven/Seven/Yuni/Yuni
  "0.41": 
    force_41: 
      c: 
        el: 1
        s: "A.I.force_41 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.c.el = 1;\n    lv.force = 'el';\n    lv.selfs = 1;\n    lv.grab = [at.t, at.y, {el=>8}];\n    lv.rmnsc = [at.t, at.y, {el=>9}];\n    # ID makes possible to throw into the W\n    #    (most J) tiniest specs of change\n    # receiving with ID means most.J knows ID to Jpath (bottom up easy)\n    #   also wants to know originating light cone \n    # - figure that once things on screen again!\n    # maybe 8regate\n    # greg annotates the flyby\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 41
        dige: b74fc53eff90
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: force_41
      "y": 
        cv: '0.41'
        cvt: 0.41	force_41
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.42": 
    mkTd_42: 
      c: 
        el: 1
        s: "A.I.mkTd_42 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    for my $nk (qw't y c sc V') {\n        my $v = $at->{$nk};\n        my $o = $ta->{$nk};\n        I.d&heq,$v,$o && next;\n        my $d;\n        d.v = $v;\n        d.o = $o;\n        if (ref $v eq 'HASH') {\n            my $wt = Rw wtfch $Jb:v $Yb:o;\n            for my $wk (qw'gone diff new still') {\n                for my $gk (sort keys %{$wt->{$wk}}) {\n                    my $dd = {};\n                    dd.v = $at->{$nk}->{$gk};\n                    dd.o = $ta->{$nk}->{$gk};\n                    d.T.d->{$gk} && die \"C.t: $nk,$gk ($v) rep.\";\n                    d.T.d->{$gk} =\n                        dd.T.d->{$wk} = $dd;\n                    sayyl \"C.t  $nk $gk is $wk    (dd.v <=-=- dd.o)\" if A.V&od;\n                }\n            }\n        }\n        else {\n            my $wk = !$vl ? \"new\"\n                : !exists $at->{$nk} ? \"gone\"\n                : \"diff\";\n            my $dd = {%$d};\n            sayyl \"C.t  $nk is  $wk (dd.v <=-=- dd.o)\" if A.V&od;\n            d.T.d.s =\n                dd.T.d->{$wk} = $dd;\n        }\n        T.d->{$nk} = $d;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 42
        dige: 6650ec94c303
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: mkTd_42
      "y": 
        cv: '0.42'
        cvt: 0.42	mkTd_42
        p: qq/Seven/Seven/Yod/Yod
  "0.4311": 
    tsnew_4311: 
      c: 
        el: 1
        s: "A.I.tsnew_4311 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{t} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - t
              - s
              - new
        Td: t/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4311
        dige: 45beb479e8e9
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: tsnew_4311
      "y": 
        cv: '0.4311'
        cvt: 0.4311	tsnew_4311
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4312": 
    ysnew_4312: 
      c: 
        el: 1
        s: "A.I.ysnew_4312 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{y} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - 'y'
              - s
              - new
        Td: y/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4312
        dige: b11ce7cbcd47
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: ysnew_4312
      "y": 
        cv: '0.4312'
        cvt: 0.4312	ysnew_4312
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4321": 
    cgone_4321: 
      c: 
        el: 1
        s: "A.I.cgone_4321 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        sayre \"how delete a c $gk\";\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - gone
        Td: c/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: 73fd3a261366
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cgone_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	cgone_4321
        p: qq/Seven/Seven/Ydo/Ydo
    cnew_4321: 
      c: 
        el: 1
        s: "A.I.cnew_4321 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        sayre \"how inject a c $gk\" if $vl;\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - new
        Td: c/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: 94e3a3249bf6
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cnew_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	cnew_4321
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4323": 
    csdiff_4323: 
      c: 
        el: 1
        s: "A.I.csdiff_4323 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{c}->{$gk} = 1;\n        $lv->{pur}->{c}->{ht} = 1 if $at->{c}->{ht};\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - s
              - diff
        Td: c/s/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4323
        dige: 0dbc0fafbfec
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: csdiff_4323
      "y": 
        cv: '0.4323'
        cvt: 0.4323	csdiff_4323
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4324": 
    cdiff_4324: 
      c: 
        el: 1
        s: "A.I.cdiff_4324 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        sayre \"how to c dif $gk\".slim(30,$v).\" <--- \".slim(30,$o);\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - diff
        Td: c/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4324
        dige: cc3740350322
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cdiff_4324
      "y": 
        cv: '0.4324'
        cvt: 0.4324	cdiff_4324
        p: qq/Seven/Seven/Ydo/Ydo
    cstill_4324: 
      c: 
        el: 1
        s: "A.I.cstill_4324 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        # ya\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - still
        Td: c/*/still
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4324
        dige: f0385bf11ed7
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cstill_4324
      "y": 
        cv: '0.4324'
        cvt: 0.4324	cstill_4324
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4331": 
    scnew_4331: 
      c: 
        el: 1
        s: "A.I.scnew_4331 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - new
        Td: sc/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4331
        dige: ed6a3580064b
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scnew_4331
      "y": 
        cv: '0.4331'
        cvt: 0.4331	scnew_4331
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4332": 
    scgone_4332: 
      c: 
        el: 1
        s: "A.I.scgone_4332 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        sayre \"how delete a sc $gk\";\n        $lv->{op}->{sc}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - gone
        Td: sc/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4332
        dige: df31e964970c
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scgone_4332
      "y": 
        cv: '0.4332'
        cvt: 0.4332	scgone_4332
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4333": 
    scdiff_4333: 
      c: 
        el: 1
        s: "A.I.scdiff_4333 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - diff
        Td: sc/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4333
        dige: f99cd21f7ef8
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scdiff_4333
      "y": 
        cv: '0.4333'
        cvt: 0.4333	scdiff_4333
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4334": 
    scstill_4334: 
      c: 
        el: 1
        s: "A.I.scstill_4334 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        # ya\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - still
        Td: sc/*/still
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4334
        dige: 17b5350c4358
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scstill_4334
      "y": 
        cv: '0.4334'
        cvt: 0.4334	scstill_4334
        p: qq/Seven/Seven/Ydo/Ydo
  "0.434": 
    Vsup_434: 
      c: 
        el: 1
        s: "A.I.Vsup_434 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    d.iv = lv.do->{$gk};\n    d.ov = vl.do->{$gk};\n    d.ov && d.ov.i && (d.ov.i eq $o || warn \"no ovi ogk  d.ov.i eq $o\");\n    T.noTd = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - "*"
        Td: V/*/*
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 434
        dige: ef43dc6a97ad
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: Vsup_434
      "y": 
        cv: '0.434'
        cvt: 0.434	Vsup_434
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4341": 
    Vnew_4341: 
      c: 
        el: 1
        s: "A.I.Vnew_4341 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # may like to grab the element before it\n    # like a curve continuing\n    $iv || sayre(\"News cap no iv: \".wdump $s) && return;\n    lv.od.new->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - new
        Td: V/*/new
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4341
        dige: 692cb136bf07
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vnew_4341
      "y": 
        cv: '0.4341'
        cvt: 0.4341	Vnew_4341
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4342": 
    Vgone_4342: 
      c: 
        el: 1
        s: "A.I.Vgone_4342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (!ov.rmnsc) {\n        #\n        lv.op.V->{$gk} = 'oio';\n        return sayre \"no rm: A.J.name => (C.t C.y.cv) C.sc.J.name\";\n        #\n        #    .wdump 3, [$at,$ta,\"Cfor $gk pmtp\", $vl,'','',$lv,\"ESS:\", $s];\n    }\n    !$iv || die \"gone had iv\";\n    # ^ sc plumb its destruction\n    # can void if our c reframes by implicitly clearing\n    lv.od.go->{$gk} = $ov;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - gone
        Td: V/*/gone
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4342
        dige: a1e300befe89
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vgone_4342
      "y": 
        cv: '0.4342'
        cvt: 0.4342	Vgone_4342
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4343": 
    Vdiff_4343: 
      c: 
        el: 1
        s: "A.I.Vdiff_4343 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (iv.c eq ov.c) {\n        iv.sc eq ov.sc && do {\n            sayre \"SAME FLUC SC $gk\";\n            die \"same c fluc sc $gk\";\n        };\n        my $in = @{iv.sc};\n        my $out = @{ov.sc};\n        if (@{iv.sc} > @{ov.sc}) {\n            saybl \"$talk GROWS\" if J.V > 2;\n            lv.od.gr->{$gk} = $iv;\n        }\n        else {\n            warn \"WTFF \".wdump 2,[$iv,$ov];\n        }\n    }\n    else {\n        saybl \"$talk  REPLACES c\";\n        lv.od.over->{$gk} = $iv;\n    }\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - diff
        Td: V/*/diff
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4343
        dige: 03b867b3b306
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vdiff_4343
      "y": 
        cv: '0.4343'
        cvt: 0.4343	Vdiff_4343
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4344": 
    Vstill_4344: 
      c: 
        el: 1
        s: "A.I.Vstill_4344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    lv.od.ll->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - still
        Td: V/*/still
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4344
        dige: efc847006328
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vstill_4344
      "y": 
        cv: '0.4344'
        cvt: 0.4344	Vstill_4344
        p: qq/Seven/Seven/YdoV/YdoV
  "0.48": 
    doTd_48: 
      c: 
        el: 1
        s: "A.I.doTd_48 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # pick T bones, dot Is\n    # a 9 for the Td (ill 8) consciousness rendezvou\n    for my $nk (sort keys %{T.d}) {\n        my $d = T.d->{$nk};\n        for my $gk (sort keys %{d.T.d}) {\n            my $dd = d.T.d->{$gk};\n            if (dd.T.m) {\n                #say \"Answers  $nk $gk: \".wdump 4, $dd;\n            }\n            elsif (dd.T.q) {\n                #say \"probly $nk $gk\";\n            }\n            else {\n                sayre \"Unclear $nk $gk:  \". ki $dd;\n            }\n        }\n    }\n    delete T.d;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 48
        dige: 6060b1b69930
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: doTd_48
      "y": 
        cv: '0.48'
        cvt: 0.48	doTd_48
        p: qq/Seven/Seven/Yod/Yod
  "0.49": 
    Y_49: 
      c: 
        el: 1
        s: "A.I.Y_49 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    V.ta->{$k} = I.d&hup,$at;\n    V.tv->{$k} = I.d&hup,$C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 49
        dige: a3500cd5c349
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,yat
        v: cY
      t: Y_49
      "y": 
        cv: '0.49'
        cvt: 0.49	Y_49
        p: qq/Seven/Seven/Yuni/Yuni
  "0.52": 
    OlOMP_52: 
      c: 
        el: 1
        s: "A.I.OlOMP_52 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    Rw OMP $J $A $I $C $k $Y $V $at $ta $lv $vl;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 52
        dige: 24e5784b5003
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: OlOMP_52
      "y": 
        cv: '0.52'
        cvt: 0.52	OlOMP_52
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.58": 
    Y_58: 
      c: 
        el: 1
        s: "A.I.Y_58 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    V.lv->{$k} = $lv;\n    if (C.c.root) {\n        V.rl = $vl;\n        V.rv = $lv;\n        Rw TNews $J $talk:A.talk $rl:V.rl $rv:V.rv\n            if J.V || A.V&N;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 58
        dige: fe866d47c232
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,ylv,yvl
        v: cY
      t: Y_58
      "y": 
        cv: '0.58'
        cvt: 0.58	Y_58
        p: qq/Seven/Seven/Yuni/Yuni
  "0.582": 
    root_582: 
      c: 
        el: 1
        s: "A.I.root_582 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $root = C.c.root;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    return unless A.J.most.J eq A.J || A.J.C.c.Wo;\n    my $r = Rw scd $rl:vl $rv:lv;\n    return unless @{r.z};\n    aft { $@ || return; sayre \"$@  !~!! \".wdump 9, $r; };\n    C.c.em && die'wtf';\n    \n    my $em = C.c.em = {};\n    em.lines = r.z;\n    em.i = @{r.oldz};\n    \n    A.Subtle.em = 1;\n    A.t&em,6,2;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 582
        dige: bb70d9483888
        gk: root
        gro: Seven/SevWo
        nk: c
        rg: ylv,yvl
        v: croot
      t: root_582
      "y": 
        cv: '0.582'
        cvt: 0.582	root_582
        p: qq/Seven/Seven/SevWo/SevWo
Styles: 
  "0.4": 
    bg_4: 
      c: 
        el: 2
        s: "A.I.bg_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bg = C.sc.bg;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: background
        dige: 0c7d6c6382e1
        filt: ''
        gk: bg
        nk: sc
        nov: 1
        nv: scbg
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbg
      t: bg_4
      "y": '0.4'
    bgh_4: 
      c: 
        el: 2
        s: "A.I.bgh_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bgh = C.sc.bgh;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: background-color
        dige: cda2876b4a07
        filt: hsle
        gk: bgh
        nk: sc
        nov: 1
        nv: scbgh
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbgh
      t: bgh_4
      "y": '0.4'
    bgi_4: 
      c: 
        el: 2
        s: "A.I.bgi_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bgi = C.sc.bgi;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: background-image
        dige: ccc493dc4bde
        filt: sayurl
        gk: bgi
        nk: sc
        nov: 1
        nv: scbgi
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbgi
      t: bgi_4
      "y": '0.4'
    blr_4: 
      c: 
        el: 2
        s: "A.I.blr_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $blr = C.sc.blr;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-blur
        dige: d7fc87106729
        filt: saypx
        gk: blr
        nk: sc
        nov: 1
        nv: scblr
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scblr
      t: blr_4
      "y": '0.4'
    bo_4: 
      c: 
        el: 2
        s: "A.I.bo_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bo = C.sc.bo;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: border
        dige: 8799d6bc5818
        filt: ''
        gk: bo
        nk: sc
        nov: 1
        nv: scbo
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbo
      t: bo_4
      "y": '0.4'
    bottom_4: 
      c: 
        el: 2
        s: "A.I.bottom_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bottom = C.sc.bottom;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: bottom
        dige: 8f94d53e9cfb
        filt: empc
        gk: bottom
        nk: sc
        nov: 1
        nv: scbottom
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbottom
      t: bottom_4
      "y": '0.4'
    bri_4: 
      c: 
        el: 2
        s: "A.I.bri_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $bri = C.sc.bri;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-brightness
        dige: e0c02b242d1f
        filt: ''
        gk: bri
        nk: sc
        nov: 1
        nv: scbri
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scbri
      t: bri_4
      "y": '0.4'
    co_4: 
      c: 
        el: 2
        s: "A.I.co_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $co = C.sc.co;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: color
        dige: 68aa21baea14
        filt: cole
        gk: co
        nk: sc
        nov: 1
        nv: scco
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scco
      t: co_4
      "y": '0.4'
    con_4: 
      c: 
        el: 2
        s: "A.I.con_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $con = C.sc.con;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-contrast
        dige: d6c37b4567f3
        filt: ''
        gk: con
        nk: sc
        nov: 1
        nv: sccon
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sccon
      t: con_4
      "y": '0.4'
    deco_4: 
      c: 
        el: 2
        s: "A.I.deco_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $deco = C.sc.deco;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: text-decoration
        dige: f9a98642bfa0
        filt: defsa:underline
        flex: 
          - 
            defsa: underline
        gk: deco
        nk: sc
        nov: 1
        nv: scdeco
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scdeco
      t: deco_4
      "y": '0.4'
    dis_4: 
      c: 
        el: 2
        s: "A.I.dis_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $dis = C.sc.dis;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: display
        dige: 3b86824e1776
        filt: ori:block~none
        flex: 
          - 
            ori: 
              - block
              - none
        gk: dis
        nk: sc
        nov: 1
        nv: scdis
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scdis
      t: dis_4
      "y": '0.4'
    float_4: 
      c: 
        el: 2
        s: "A.I.float_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $float = C.sc.float;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: float
        dige: ae6e60296db3
        filt: ''
        gk: float
        nk: sc
        nov: 1
        nv: scfloat
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scfloat
      t: float_4
      "y": '0.4'
    fs_4: 
      c: 
        el: 2
        s: "A.I.fs_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $fs = C.sc.fs;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: font-size
        dige: a5fb933a45e2
        filt: hunine
        gk: fs
        nk: sc
        nov: 1
        nv: scfs
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scfs
      t: fs_4
      "y": '0.4'
    fsi_4: 
      c: 
        el: 2
        s: "A.I.fsi_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $fsi = C.sc.fsi;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: font-size
        dige: 518aa965cda0
        filt: hundr
        gk: fsi
        nk: sc
        nov: 1
        nv: scfsi
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scfsi
      t: fsi_4
      "y": '0.4'
    fw_4: 
      c: 
        el: 2
        s: "A.I.fw_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $fw = C.sc.fw;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: font-weight
        dige: eb5f73c86d73
        filt: hundr
        gk: fw
        nk: sc
        nov: 1
        nv: scfw
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scfw
      t: fw_4
      "y": '0.4'
    gray_4: 
      c: 
        el: 2
        s: "A.I.gray_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $gray = C.sc.gray;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-grayscale
        dige: 394b4effb4d1
        filt: ''
        gk: gray
        nk: sc
        nov: 1
        nv: scgray
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scgray
      t: gray_4
      "y": '0.4'
    height_4: 
      c: 
        el: 2
        s: "A.I.height_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $height = C.sc.height;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: height
        dige: f6dc1b5b2d46
        filt: empc
        gk: height
        nk: sc
        nov: 1
        nv: scheight
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scheight
      t: height_4
      "y": '0.4'
    hs_4: 
      c: 
        el: 2
        s: "A.I.hs_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $hs = C.sc.hs;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: color
        dige: 6465beb23bfb
        filt: hsle
        gk: hs
        nk: sc
        nov: 1
        nv: schs
        rg: J,V,yk,yat,yta,ylv,yvl
        v: schs
      t: hs_4
      "y": '0.4'
    hue_4: 
      c: 
        el: 2
        s: "A.I.hue_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $hue = C.sc.hue;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-hue-rotate
        dige: b70fee77323b
        filt: saydeg
        gk: hue
        nk: sc
        nov: 1
        nv: schue
        rg: J,V,yk,yat,yta,ylv,yvl
        v: schue
      t: hue_4
      "y": '0.4'
    inv_4: 
      c: 
        el: 2
        s: "A.I.inv_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $inv = C.sc.inv;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-invert
        dige: 9fac7e93fe5e
        filt: ''
        gk: inv
        nk: sc
        nov: 1
        nv: scinv
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scinv
      t: inv_4
      "y": '0.4'
    lef_4: 
      c: 
        el: 2
        s: "A.I.lef_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $lef = C.sc.lef;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: left
        dige: 64613cd2d33c
        filt: empc
        gk: lef
        nk: sc
        nov: 1
        nv: sclef
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sclef
      t: lef_4
      "y": '0.4'
    left_4: 
      c: 
        el: 2
        s: "A.I.left_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $left = C.sc.left;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: left
        dige: 59656f98e135
        filt: empc
        gk: left
        nk: sc
        nov: 1
        nv: scleft
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scleft
      t: left_4
      "y": '0.4'
    lh_4: 
      c: 
        el: 2
        s: "A.I.lh_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $lh = C.sc.lh;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: line-height
        dige: 63ec5022f8e2
        filt: empc
        gk: lh
        nk: sc
        nov: 1
        nv: sclh
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sclh
      t: lh_4
      "y": '0.4'
    ls_4: 
      c: 
        el: 2
        s: "A.I.ls_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ls = C.sc.ls;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: letter-spacing
        dige: 19fcc15f86c2
        filt: empc
        gk: ls
        nk: sc
        nov: 1
        nv: scls
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scls
      t: ls_4
      "y": '0.4'
    ma_4: 
      c: 
        el: 2
        s: "A.I.ma_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ma = C.sc.ma;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: margin
        dige: f21846612033
        filt: empc
        gk: ma
        nk: sc
        nov: 1
        nv: scma
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scma
      t: ma_4
      "y": '0.4'
    mb_4: 
      c: 
        el: 2
        s: "A.I.mb_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $mb = C.sc.mb;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: margin-bottom
        dige: cd7931d57f80
        filt: empc
        gk: mb
        nk: sc
        nov: 1
        nv: scmb
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scmb
      t: mb_4
      "y": '0.4'
    mih_4: 
      c: 
        el: 2
        s: "A.I.mih_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $mih = C.sc.mih;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: max-height
        dige: 37996618f177
        filt: empc
        gk: mih
        nk: sc
        nov: 1
        nv: scmih
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scmih
      t: mih_4
      "y": '0.4'
    miw_4: 
      c: 
        el: 2
        s: "A.I.miw_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $miw = C.sc.miw;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: max-width
        dige: e2eb3f2bd521
        filt: empc
        gk: miw
        nk: sc
        nov: 1
        nv: scmiw
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scmiw
      t: miw_4
      "y": '0.4'
    ml_4: 
      c: 
        el: 2
        s: "A.I.ml_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ml = C.sc.ml;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: margin-left
        dige: 29cabfd2fa4d
        filt: empc
        gk: ml
        nk: sc
        nov: 1
        nv: scml
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scml
      t: ml_4
      "y": '0.4'
    mr_4: 
      c: 
        el: 2
        s: "A.I.mr_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $mr = C.sc.mr;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: margin-right
        dige: efe906c8dba5
        filt: empc
        gk: mr
        nk: sc
        nov: 1
        nv: scmr
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scmr
      t: mr_4
      "y": '0.4'
    mt_4: 
      c: 
        el: 2
        s: "A.I.mt_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $mt = C.sc.mt;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: margin-top
        dige: 1e6fd22f4d0d
        filt: empc
        gk: mt
        nk: sc
        nov: 1
        nv: scmt
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scmt
      t: mt_4
      "y": '0.4'
    opa_4: 
      c: 
        el: 2
        s: "A.I.opa_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $opa = C.sc.opa;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: opacity
        dige: 628e96b861b3
        filt: sca
        gk: opa
        nk: sc
        nov: 1
        nv: scopa
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scopa
      t: opa_4
      "y": '0.4'
    over_4: 
      c: 
        el: 2
        s: "A.I.over_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $over = C.sc.over;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: overflow
        dige: b7df5f0576ac
        filt: ''
        gk: over
        nk: sc
        nov: 1
        nv: scover
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scover
      t: over_4
      "y": '0.4'
    poi_4: 
      c: 
        el: 2
        s: "A.I.poi_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $poi = C.sc.poi;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: pointer-events
        dige: 87eaefb9f187
        filt: ori:all~none
        flex: 
          - 
            ori: 
              - all
              - none
        gk: poi
        nk: sc
        nov: 1
        nv: scpoi
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scpoi
      t: poi_4
      "y": '0.4'
    rad_4: 
      c: 
        el: 2
        s: "A.I.rad_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $rad = C.sc.rad;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: transform-rotate
        dige: 59d533b6652a
        filt: radun
        gk: rad
        nk: sc
        nov: 1
        nv: scrad
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scrad
      t: rad_4
      "y": '0.4'
    ri_4: 
      c: 
        el: 2
        s: "A.I.ri_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ri = C.sc.ri;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: right
        dige: 8438319595ac
        filt: empc
        gk: ri
        nk: sc
        nov: 1
        nv: scri
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scri
      t: ri_4
      "y": '0.4'
    right_4: 
      c: 
        el: 2
        s: "A.I.right_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $right = C.sc.right;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: right
        dige: b083f1f59986
        filt: empc
        gk: right
        nk: sc
        nov: 1
        nv: scright
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scright
      t: right_4
      "y": '0.4'
    sat_4: 
      c: 
        el: 2
        s: "A.I.sat_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $sat = C.sc.sat;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-saturate
        dige: 81506b750a81
        filt: ''
        gk: sat
        nk: sc
        nov: 1
        nv: scsat
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scsat
      t: sat_4
      "y": '0.4'
    scale_4: 
      c: 
        el: 2
        s: "A.I.scale_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $scale = C.sc.scale;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: transform-scale
        dige: 9c0af02ee849
        filt: ''
        gk: scale
        nk: sc
        nov: 1
        nv: scscale
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scscale
      t: scale_4
      "y": '0.4'
    sep_4: 
      c: 
        el: 2
        s: "A.I.sep_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $sep = C.sc.sep;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: filter-sepia
        dige: d36f6e2c346a
        filt: ''
        gk: sep
        nk: sc
        nov: 1
        nv: scsep
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scsep
      t: sep_4
      "y": '0.4'
    sha_4: 
      c: 
        el: 2
        s: "A.I.sha_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $sha = C.sc.sha;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: text-shadow
        dige: 1bca08791ce8
        filt: shadole
        gk: sha
        nk: sc
        nov: 1
        nv: scsha
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scsha
      t: sha_4
      "y": '0.4'
    top_4: 
      c: 
        el: 2
        s: "A.I.top_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $top = C.sc.top;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: top
        dige: 646a2d8a1aa8
        filt: empc
        gk: top
        nk: sc
        nov: 1
        nv: sctop
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sctop
      t: top_4
      "y": '0.4'
    tro_4: 
      c: 
        el: 2
        s: "A.I.tro_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $tro = C.sc.tro;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: transform-origin
        dige: 13286872b5fa
        filt: ''
        gk: tro
        nk: sc
        nov: 1
        nv: sctro
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sctro
      t: tro_4
      "y": '0.4'
    wb_4: 
      c: 
        el: 2
        s: "A.I.wb_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $wb = C.sc.wb;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: word-break
        dige: 862630e56f4f
        filt: wordbreakwords
        gk: wb
        nk: sc
        nov: 1
        nv: scwb
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scwb
      t: wb_4
      "y": '0.4'
    width_4: 
      c: 
        el: 2
        s: "A.I.width_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $width = C.sc.width;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: width
        dige: 05f95d14effb
        filt: empc
        gk: width
        nk: sc
        nov: 1
        nv: scwidth
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scwidth
      t: width_4
      "y": '0.4'
    ws_4: 
      c: 
        el: 2
        s: "A.I.ws_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ws = C.sc.ws;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: white-space
        dige: ca5af819755a
        filt: whipre
        gk: ws
        nk: sc
        nov: 1
        nv: scws
        rg: J,V,yk,yat,yta,ylv,yvl
        v: scws
      t: ws_4
      "y": '0.4'
    zi_4: 
      c: 
        el: 2
        s: "A.I.zi_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $zi = C.sc.zi;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: z-index
        dige: cb3f47a0019f
        filt: numb
        gk: zi
        nk: sc
        nov: 1
        nv: sczi
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sczi
      t: zi_4
      "y": '0.4'
    zie_4: 
      c: 
        el: 2
        s: "A.I.zie_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $zie = C.sc.zie;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: z-index
        dige: 8932837a35fe
        filt: numb+plus:-10
        flex: 
          - 
            numb: ~
          - 
            plus: -10
        gk: zie
        nk: sc
        nov: 1
        nv: sczie
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sczie
      t: zie_4
      "y": '0.4'
    zig_4: 
      c: 
        el: 2
        s: "A.I.zig_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $zig = C.sc.zig;\n    my $J = C.sc.J;\n    my $V = C.sc.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n            $I->{d}->(\"stri\",$T->{D},$s);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Styles 4
        cssk: z-index
        dige: fd7680733539
        filt: numb+plus:-20
        flex: 
          - 
            numb: ~
          - 
            plus: -20
        gk: zig
        nk: sc
        nov: 1
        nv: sczig
        rg: J,V,yk,yat,yta,ylv,yvl
        v: sczig
      t: zig_4
      "y": '0.4'
em: 
  "0.21": 
    em_21: 
      c: 
        el: 1
        s: "A.I.em_21 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $em = C.c.em;\n    em.lines || die \"Not lines\";\n    em.hitime = hitime();\n    em.is.W = C.sc.Wid || A.J.id;\n    em.is.M = C.sc.Mid || A.J.name;\n    em.id = em.is.W.'.'.(0+em.i);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: em 21
        dige: c304cc4fd1ff
        gk: em
        gro: Seven/SevWo/Meta
        nk: c
        v: cem
      t: em_21
      "y": 
        cv: '0.21'
        cvt: 0.21	em_21
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
  "0.3": 
    jslines_3: 
      c: 
        el: 1
        s: "A.I.jslines_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $jslines = C.sc.jslines;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    Rw EmJSlines $A $J $em $C $T;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: 41cef4532459
        gk: jslines
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scjslines
        rg: J,em
        v: scjslines
      t: jslines_3
      "y": 
        cv: '0.3'
        cvt: 0.3	jslines_3
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
    ressur_3: 
      c: 
        el: 1
        s: "A.I.ressur_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ressur = C.sc.ressur;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    saybl \"Ressurrecting $ressur ...\";\n    die \"zomp $ressur\" if $ressur =~ /\\W/;\n    die \"bno JSlines\" unless -e \"life/W/$ressur\";\n    `cd life; ln -s ../W/$ressur J/em.id\\.c`;\n    my $catch = sjson {y=>J=>id=>em.id};\n    I.d&writef,\"life/J\\.s\",$catch,1;\n    T.whack = 1; # out of em\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: bc77ff177d9a
        gk: ressur
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scressur
        rg: J,em
        v: scressur
      t: ressur_3
      "y": 
        cv: '0.3'
        cvt: 0.3	ressur_3
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
    ux_3: 
      c: 
        el: 1
        s: "A.I.ux_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ux = C.sc.ux;\n    my $em = C.c.em;\n    my $J = G.oin;\n    my $M = ['','',{W=>J.id},{z=>em.lines}];\n    em.lines = [sjson($M)];\n    C.sc.Wc = 1;\n    n GW\n    # ^ router, W with an .e v\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 3
        dige: ff8f2dae6153
        gk: ux
        gro: Seven/SevWo/Meta
        nk: sc
        nov: 1
        nv: scux
        rg: em
        v: scux
      t: ux_3
      "y": 
        cv: '0.3'
        cvt: 0.3	ux_3
        p: qq/Seven/Seven/SevWo/SevWo/Meta/Meta
  "0.446": 
    Wc_446: 
      c: 
        el: 1
        s: "A.I.Wc_446 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $Wc = C.sc.Wc;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    saybl join\"\\n\",\"Downing em.is.M: em.is.W: \",\n        map{!ref $_ ? $_ : wdump 5,$_} @{em.lines}\n        if A.V&W;\n    I.d&writef,\"life/W/em.is.W\\.c\",em.lines,em.i;\n    \n    C.c.as = !C.c.os;\n    C.c.As = C.c.as;\n    C.sc.meta = 1;\n    C.sc.speak = 1 if C.c.as;\n    C.sc.takeover = 1 if C.c.As;\n    saybl \"WHITESPACE S em.is.M\" if C.c.os;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 446
        dige: c1499eada9e8
        gk: Wc
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scWc
        rg: J,em
        v: scWc
      t: Wc_446
      "y": 
        cv: '0.446'
        cvt: 0.446	Wc_446
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.47": 
    meta_47: 
      c: 
        el: 1
        s: "A.I.meta_47 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $meta = C.sc.meta;\n    my $em = C.c.em;\n    G.Wh->{em.is.W} && return;\n    G.Wh->{em.is.W} = A.J;\n    my $me = I.d&hup,$em;\n    delete me.lines;\n    $me = sjson $me;\n    I.d&writef,\"life/W/em.is.W\\.i\",$me;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 47
        dige: 30bf9edceb58
        gk: meta
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scmeta
        rg: em
        v: scmeta
      t: meta_47
      "y": 
        cv: '0.47'
        cvt: 0.47	meta_47
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.48": 
    speak_48: 
      c: 
        el: 1
        s: "A.I.speak_48 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $speak = C.sc.speak;\n    my $em = C.c.em;\n    return if G.Jlone;\n    \n    I.d&writef,\"life/J/em.id\\.c\",em.lines;\n    \n    my $catch = sjson {y=>J=>id=>em.id};\n    I.d&writef,\"life/J\\.s\",$catch,1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 48
        dige: 0d76e3292b22
        gk: speak
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: scspeak
        rg: em
        v: scspeak
      t: speak_48
      "y": 
        cv: '0.48'
        cvt: 0.48	speak_48
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
  "0.49": 
    takeover_49: 
      c: 
        el: 1
        s: "A.I.takeover_49 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $takeover = C.sc.takeover;\n    my $em = C.c.em;\n    -l $_ && `unlink $_` for \"life/W/em.is.M\";\n    `cd life/W; ln -s em.is.W\\.c em.is.M`;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 49
        dige: 9e3b4735db14
        gk: takeover
        gro: Seven/SevWo/Wuts
        nk: sc
        nov: 1
        nv: sctakeover
        rg: em
        v: sctakeover
      t: takeover_49
      "y": 
        cv: '0.49'
        cvt: 0.49	takeover_49
        p: qq/Seven/Seven/SevWo/SevWo/Wuts/Wuts
oJ: 
  "0.343": 
    J_343: 
      c: 
        el: 1
        s: "A.I.J_343 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return if ref $J;\n    $J = Rw Jto $name:J;\n    G.W->{J.id} && G.W->{J.id} ne $J && die \"runup J.name\";\n    G.W->{J.id} = $J;\n    ref $J || die 'watt'.$J;\n    if (exists C.c.pi) {\n        J.Jiter = A.J; # erse rev\n        J.most->{$_} = A.J.most->{$_} for keys %{A.J.most||{}};\n    }\n    # til the I train shows up:\n    J.V = J.most.J.inV || 1 if A.J.V == 2 || J.most.J.inV;\n    J.A.Indo = 2;\n    #C.c.s ||= 'Wildy';\n    sayyl \"J33   Made J.name\" unless J.Jiter;\n    C.c.J = T.at.J = $J;\n    A.jr&J,$J; # sc, c, and on sphere\n    die \"noovewr   C.c.J ne $J\" if ref C.c.J && C.c.J ne $J;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 343
        dige: c940f9361cba
        gk: J
        gro: Modulator/Jing/Joot
        its: 1
        nk: c
        v: cJ
      t: J_343
      "y": 
        cv: '0.343'
        cvt: 0.343	J_343
        p: qq/Modulator/Modulator/Jing/Jing/Joot/Joot
  "0.344": 
    J_344: 
      c: 
        el: 1
        s: "A.I.J_344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $ins = sub { my $J = shift; $J ne J.mo.J ? \"J.mo.J.name ' J.name\" : J.name };\n    if (C.c.e) {\n        my $new = !J.A.first ? \"(first!)\":\"\";\n        say $ins->(A.J).\"   is elvising to  \".$ins->($J).\" $new\\n    \"\n            .\" C.t  \".ki(C.c).\"     \".ki(C.sc);\n        C.c.elv = delete C.c.e if $new;\n        # do over after osc (or time2 could in middle)\n        # donow, may wat\n        A.Iso.th = 1;\n    }\n    else {\n        A.J eq $J && die sayre \"THreJ does Celt A.J.name   \".(C.c.e && ki C.c.e);\n        #saybl $ins->(A.J).\" can create -----> \".$ins->($J);\n        if (J.ev.amb) {\n            my $ar = I.d&ar;\n            Rw J.ev.amb + $J;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 344
        dige: 4620d2953769
        gk: J
        gro: threJ
        nk: c
        v: cJ
      t: J_344
      "y": 
        cv: '0.344'
        cvt: 0.344	J_344
        p: qq/threJ/threJ
  "0.434": 
    J_434: 
      c: 
        el: 1
        s: "A.I.J_434 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    $J = C.c.J = C.sc.J;\n    # TODO: soft acuminy over \\d esp. until .bb or something\n    A.mo.Js->{J.name} = $J;\n    # A falls\n    # A.mo exits\n    # J.A persists\n    J.A.first ||= hitime();\n    if (C.sc.W && G.oin ne $J) {\n        my $lev = G.oin.A.tid;\n        if (J.A.tidi && (J.A.tidi + 3) > $lev) {\n            A.ztime ||= 4;\n        }\n        else {\n            J.A.tidi = $lev;\n        }\n    }\n    sayre \"same A.J.name inside J.name\" if A.J eq $J;\n    if (exists C.sc.pi) {\n        sayre \"JiternotAJ J.Jiter.name ne A.J.name\" if J.Jiter ne A.J;\n        die 'pimostJ'if J.most.J eq $J;\n    }\n    else {\n        die 'esel' if J.most.J ne $J;\n    }\n    A.ztime ||= 6;\n    A.time && sayre \"Had atime\";\n    A.time = sub { # A.t& cover, serve single digit ad hocs, like 2\n        my ($JJ,$q) = @_; die\"JTIMEJ\" if $JJ ne $J;\n        A.ztime >= $q\n    };\n    if (C.sc.pi) {\n        J.A.d = J.Jiter.A.d + 1;\n        J.ind = join '  ', ('') x J.A.d;\n        J.name = \"J.A.d. C.c.pi*C.t\";\n        J.d = $C;\n        A.ztime = 6 if A.ztime < 6;\n    }\n    J.C = $C;\n    A.talk .= \" J: J.name\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 434
        dige: b6d6df2e9e5b
        gk: J
        gro: Modulator/Jing/Jamping
        its: 1
        nk: c
        v: cJ
      t: J_434
      "y": 
        cv: '0.434'
        cvt: 0.434	J_434
        p: qq/Modulator/Modulator/Jing/Jing/Jamping/Jamping
  "0.61": 
    J_61: 
      c: 
        el: 1
        s: "A.I.J_61 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        $T->{alk} = \"$A->{talk}  TT  $A->{ztime}\";\n        $A->{time}->($J, 6) || return do {\n            say \"SKive! $T->{alk}\" if $A->{V}->(\"skive\");\n            $T->{nose} = 1;\n        };\n        sayyl \"J6 ! $T->{alk}\" unless !$A->{V}->(\"sixes\") || $C->{sc}->{pi} || $T->{alk} =~ /^all/;\n        $A->{Subtle}->{J} = 1;\n        $A->{t}->(\"J\",9,1);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 61
        dige: 7184afd776e4
        gk: J
        gro: Modulator/Jing/Jumps
        its: 1
        nk: c
        v: cJ
      t: J_61
      "y": 
        cv: '0.61'
        cvt: 0.61	J_61
        p: qq/Modulator/Modulator/Jing/Jing/Jumps/Jumps
  "0.71": 
    J_71: 
      c: 
        el: 1
        s: "A.I.J_71 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        $T->{nose} && return $A->{V}->(\"nose\") && sayre \"nose $T->{alk}\";\n        if (!$J->{A}->{II}->{Sev}) {\n            my $A = {J=>$J,G=>$G};\n            $G->{w}->(\"collaspII\", {A => $A}, $G);\n            say \"$J->{name} \".($J->{A}->{II}->{Sev} ? \"quietly Sevs\" : 'Yesuis???????????????');\n        }\n        $J->{most}->{eo} = 'Sev' if $J->{A}->{II}->{Sev};\n        say \"oJ77 77 $T->{alk}     -> $J->{most}->{eo}\"\n            unless $J->{most}->{eo} ne 'Sev' || !$A->{V}->(\"sevens\") || $J->{yt}->{quiet} || $C->{sc}->{pi} || $T->{alk} =~ /^all/;\n        $G->{w}->(\"$J->{most}->{eo}\", {J => $J, A => $A}, $G);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 71
        dige: 0a8d8347135d
        gk: J
        gro: Modulator/Jing/Jumps
        its: 1
        nk: c
        v: cJ
      t: J_71
      "y": 
        cv: '0.71'
        cvt: 0.71	J_71
        p: qq/Modulator/Modulator/Jing/Jing/Jumps/Jumps
  "0.76": 
    elv_76: 
      c: 
        el: 1
        s: "A.I.elv_76 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $elv = C.c.elv;\n    my $J = C.c.J;\n    C.c.e = delete C.c.elv;\n    my $ar = I.d&ar;\n    J.VV.E = J.VV.V = 1;\n    Rw hevt + $J elv76;\n    if (T.oke) {\n        die \"76 thoughtself J.name\" if A.J eq $J;\n        say \"Tanking 76 into J.name\";\n        Rw waited $J;\n        return;\n    }\n    T.pos = 1 unless defined T.pos;\n    T.pos &&\n        Rw waito $J $C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 76
        dige: 255985b1842a
        gk: elv
        gro: threJ
        nk: c
        rg: J
        v: celv
      t: elv_76
      "y": 
        cv: '0.76'
        cvt: 0.76	elv_76
        p: qq/threJ/threJ
th: 
  "0.36": 
    e_36: 
      c: 
        el: 1
        s: "A.I.e_36 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $e = C.c.e;\n    my $J = C.c.J;\n    $J || warn \"e no J\";\n    # no J being tricks for handulation, event energy, unless T.oke\n    delete A.Iso.oJ;\n    my $ar = I.d&ar;\n    Rw hevt + $J e36;\n    if (T.oke) {\n        die \"thoughts of a thous J.name\" if A.J eq $J;\n        delete A.Iso.th;\n        A.Iso.oJ = 1;\n        A.ztime = 6;\n        return say \"Tanking into J.name\";\n    }\n    T.pos = 1 unless defined T.pos;\n    T.pos &&\n        Rw waito $J $C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 36
        dige: 5839718a45dc
        gk: e
        gro: threJ
        nk: c
        rg: J
        v: ce
      t: e_36
      "y": 
        cv: '0.36'
        cvt: 0.36	e_36
        p: qq/threJ/threJ
  "0.4": 
    J_4: 
      c: 
        el: 1
        s: "A.I.J_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 4
        dige: cd18581836b3
        gk: J
        gro: threJ
        nk: c
        v: cJ
      t: J_4
      "y": 
        cv: '0.4'
        cvt: 0.4	J_4
        p: qq/threJ/threJ
  "0.769": 
    e_769: 
      c: 
        el: 1
        s: "A.I.e_769 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $e = C.c.e;\n    my $J = C.c.J;\n    T.oke = 1; # unpin\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 769
        dige: 53315c3ae1fb
        gk: e
        gro: threJ
        nk: c
        rg: J
        v: ce
      t: e_769
      "y": 
        cv: '0.769'
        cvt: 0.769	e_769
        p: qq/threJ/threJ
time: 
  "0.2": 
    elv_2: 
      c: 
        el: 1
        s: "A.I.elv_2 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $elv = C.c.elv;\n    my $J = C.c.J;\n    C.c.e = delete C.c.elv;\n    my $ar = I.d&ar;\n    Rw hevt + $J elv2;\n    #T.oke && warn \"NOTOKE time2 J.name\";\n    T.pos = 1 unless defined T.pos;\n    # time true, complete vector, unless we cat a list\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: time 2
        dige: 7d7c7e37b9e0
        gk: elv
        gro: threJ
        nk: c
        rg: J
        v: celv
      t: elv_2
      "y": 
        cv: '0.2'
        cvt: 0.2	elv_2
        p: qq/threJ/threJ
