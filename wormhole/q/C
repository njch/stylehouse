--- 
I: 
  "0.1": 
    Cngk: 
      c: 
        s: "A.I.Cngk = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$D,@Me) = @M;\nmy $I = A.I;\nref $A || die \"nmonref A!\";\nA.bangdesk.bang->{Cngek} = sub {\n    sayre \"was Cngk; \".ki($s).\"\\nWith: \".ki($D)\n} if 0;\nreturn 1 if D.c.any;\ndie \"nonNKnk\".ki$D if !D.c.nk;\nreturn 0 if !exists $s->{D.c.nk};\nreturn [$s->{D.c.nk}] if !exists D.c.gk;\nreturn 0 if !exists $s->{D.c.nk}->{D.c.gk};\nreturn [$s->{D.c.nk}->{D.c.gk}];\n};"
      sc: 
        acgt: s D
        args: A,C,G,T,s,D
        code: I
        dige: 1e50021ad5b4
        of: I
      t: Cngk
      "y": 
        cv: '0.1'
    c: 
      c: 
        s: "A.I.c = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($D,@Me) = @M;\nmy $I = A.I;\nG&inDin,$C,@M;\n};"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I
        dige: 0d3c3af9e72f
        of: I
      t: c
      "y": 
        cv: '0.1'
    e: 
      c: 
        s: "A.I.e = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($D,@Me) = @M;\nmy $I = A.I;\nmy $e = G&sces,C.c.e||return();\nG&inDin,$e,@M;\n};"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I
        dige: 268d2c6fb68f
        of: I
      t: e
      "y": 
        cv: '0.1'
    hup: 
      c: 
        from: T
        s: "A.I.hup = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $CC = {%$s};\n$CC->{$_} = {%{$CC->{$_}}} for\n    grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\nreturn $CC;\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 21c3cdef1671
        of: I
      t: hup
      "y": 
        cv: '0.1'
    inDin: 
      c: 
        s: "A.I.inDin = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$D,@Me) = @M;\nmy $I = A.I;\nreturn () unless defined $s;\nreturn $s if $D eq 'C';\n#\nshift @M; # s\n$D = G&interpD,@M if !ref $D;\n#\nmy $v = G&Cngk,$s,$D;\nsaybl \"Got cnkgk: \".wdump 3,[\\@M,$D,$v,$s] if A.VV.D;\ndie \"Unhandles any: $v: \".ki $D if $v eq '1';\n#\nreturn () unless $v;\n# blankgk\nA.note->{D.c.nk}->{D.c.gk} = $v if A.note;\n#\n@$v == 1 || die \"Many somehowed \".wdump 3,[ki($D),$v];\n($v) = @$v;\nif (D.c.as eq 'list') {\n    ref $v eq 'ARRAY' || die 'Cngk for list not array '.ki $D;\n    return @$v;\n}\nreturn $v;\n};"
      sc: 
        acgt: s D
        args: A,C,G,T,s,D
        code: I
        dige: cba92cd974b7
        of: I
      t: inDin
      "y": 
        cv: '0.1'
    interpD: 
      c: 
        s: "A.I.interpD = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($nk,$gk,@Me) = @M;\nmy $I = A.I;\nmy $defnk = 'c';\nreturn $nk if ref $nk;\nmy $D = {};\nD.c.as = 'list' if $nk =~ s/^_//;\nwhile ($gk =~ s/^%(.+?):(.+?)(?=%|$)//g) {\n    D.c->{$1} = $2;\n    pop @M if @M == 2;\n}\nif (@M == 1 && $nk eq 't') {\n    D.c.nk = $nk;\n}\nelsif (@M == 1) { # or from t,,,\n    D.c.nk ||= $defnk;\n    D.c.gk ||= $nk;\n}\nelsif (@M == 2) {\n    D.c.nk = $nk;\n    D.c.gk = $gk;\n}\ndelete D.c.gk if D.c.gk eq 'NOGK';\n$D\n};"
      sc: 
        acgt: nk gk
        args: A,C,G,T,nk,gk
        code: I
        dige: f1b27a193502
        of: I
      t: interpD
      "y": 
        cv: '0.1'
    ip: 
      c: 
        from: T
        s: "A.I.ip = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$c,@Me) = @M;\nmy $I = A.I;\nmy $z;\n$s = G&peel,$$s if ref $s eq 'SCALAR';\nmy $n;\nif (ref $s eq 'REF') {\n    # do s.do\n    $s = $$s;\n    $n = $s;\n    s.ip || die \"sip no ref\";\n    $s = {map{$_=> \\s.ip.>$_ }keys %{s.ip}};\n}\n# n.all keeps going after a pass--\nmy $pass = 1;\nEE: for my $k (keys %$s) {\n    $pass == 1 || n.all || return 0;\n    my $y = $s.>$k;\n    my $x = $c.>$k;\n    if (ref $y eq 'REF') {\n        $y = $$y;\n        if (exists y.nk) {\n            $x = $c;\n            for my $k (grep{defined}y.nk,y.gk,y.tk) {\n                $pass--, next EE unless\n                    ref $x eq 'HASH' && exists $x.>$k;\n                $x = $x.>$k;\n            }\n        }\n        my $wa = $pass;\n        !defined $x || $pass-- if y.ndef;\n        defined $x || $pass-- if y.def;\n        y.is eq $x || $pass-- if exists y.is;\n        y.not ne $x || $pass-- if exists y.not;\n        y.in->{$x} || $pass-- if y.in;\n        !y.nin->{$x} || $pass-- if y.nin;\n        $x > y.gt || $pass-- if exists y.gt;\n        $x < y.lt || $pass-- if exists y.lt;\n        $x >= y.gteq || $pass-- if exists y.gteq;\n        $x <= y.lteq || $pass-- if exists y.lteq;\n        $x =~ y.re || $pass-- if exists y.re;\n        $pass = $pass < $wa ? $wa : $pass-1\n            if y.neg;\n    }\n    elsif ($y ne $c.>$k) {\n        $pass--;\n    }\n}\n$pass == 1\n};"
      sc: 
        acgt: s c
        args: A,C,G,T,s,c
        code: I
        dige: 15ce682807e6
        of: I
      t: ip
      "y": 
        cv: '0.1'
    peel: 
      c: 
        s: "A.I.peel = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\n$s =~ s/^%//;\nmy $c = {};\nfor (split ',', $s) {\n    my ($k, $v) = split ':', $_, 2;\n    $v = 1 if !defined $v;\n    $c->{$k} = $v;\n}\n$c\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 20667cf19a01
        of: I
      t: peel
      "y": 
        cv: '0.1'
    peels: 
      c: 
        s: "A.I.peels = (sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nqr/^[\\{\\%]\\w+/;\n})->($A,$C,$G,$T);"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 7d6059b05247
        of: I
        subpeel: 1
      t: peels
      "y": 
        cv: '0.1'
    sca: 
      c: 
        s: "A.I.sca = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\n$s /= 10 while $s > 1 || $s < -1;\nreturn $s\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: cdd56c3308e4
        of: I
      t: sca
      "y": 
        cv: '0.1'
    sces: 
      c: 
        s: "A.I.sces = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $i = 0;\nwhile (s.c.e) {\n    $s = s.c.e;\n    $i++ > 9 && die \"HUGE $i recursing CceCceCceCce... by \".ki $s;\n}\nreturn $s;\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: d0c8253ecc14
        of: I
      t: sces
      "y": 
        cv: '0.1'
    scyvle: 
      c: 
        s: "A.I.scyvle = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmap { my$i;\n    C.y->{$_} /= 10 while\n    (C.y->{$_} <= -1 || C.y->{$_} >= 1)\n    &&\n    (++$i < 10 || die \"Many i chewing on $_: \".ki C.y)\n}\ngrep { C.y->{$_} }\nqw'in out cv'\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 731015a47e93
        of: I
      t: scyvle
      "y": 
        cv: '0.1'
    us: 
      c: 
        s: "A.I.us = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($D,@Me) = @M;\nmy $I = A.I;\nmy $e = G&sces,C.c.e||return();\nmy $us = e.c.us||return();\npush @M, 'NOGK' if @M == 1;\nG&inDin,$us,@M;\n};"
      sc: 
        acgt: D
        args: A,C,G,T,D
        code: I
        dige: 9c32a0a00a75
        of: I
      t: us
      "y": 
        cv: '0.1'
    xo: 
      c: 
        from: T
        s: "A.I.xo = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$c,@Me) = @M;\nmy $I = A.I;\nref $c eq 'HASH' && ref $s eq 'HASH'\n    || die \"Hash up\".wdump 3, [$s,$c];\nwhile (my($k,$v) = each %$c) {\n    $s->{$k} = $v;\n}\nreturn $s\n};"
      sc: 
        acgt: s c
        args: A,C,G,T,s,c
        code: I
        dige: 3fe77b2bee02
        of: I
      t: xo
      "y": 
        cv: '0.1'
    xot: 
      c: 
        from: T
        s: "A.I.xot = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$c,@Me) = @M;\nmy $I = A.I;\nref $c eq 'HASH' && ref $s eq 'HASH'\n    || die \"Hash up\".wdump 3, [$s,$c];\nwhile (my($k,$v) = each %$c) {\n    $s->{$k} = ref $v eq 'HASH' ?\n                {%{$s->{$k}||{}}, %$v}\n    : $v;\n}\nreturn $s\n};"
      sc: 
        acgt: s c
        args: A,C,G,T,s,c
        code: I
        dige: f563a13757f0
        of: I
      t: xot
      "y": 
        cv: '0.1'
    xoy: 
      c: 
        from: T
        s: "A.I.xoy = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$c,@Me) = @M;\nmy $I = A.I;\n$c = G&xot,{},$c;\nG&xot,$c,$s;\nreturn $s;\n};"
      sc: 
        acgt: s c
        args: A,C,G,T,s,c
        code: I
        dige: c7efffb7d7d5
        of: I
      t: xoy
      "y": 
        cv: '0.1'
Ii: Cngk vers:HASH + T vers:HASH + c vers:HASH + e vers:HASH + inDin vers:HASH + interpD vers:HASH + peel vers:HASH + peels vers:HASH + sca vers:HASH + sces vers:HASH + scyvle vers:HASH + us vers:HASH
