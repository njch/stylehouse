--- 
I: 
  "0.1": 
    El: 
      c: 
        from: Pha
        s: "A.I.El = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($J,$name,@Me) = @M;\nmy $I = A.I;\nJ.El->{$name} ||= {bb=>{},name=>$name};\n};"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I
        dige: 7d05f4a56f42
        l: "#c without a self"
        of: I
      t: El
      "y": 
        cv: '0.1'
    Elj: 
      c: 
        from: Pha
        s: "A.I.Elj = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($J,$name,@Me) = @M;\nmy $I = A.I;\nJ.El->{$name} ||= Rw Jto - $le:J $name;\n};"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I
        dige: 0bd3f0bf8579
        l: "#c with a self"
        of: I
      t: Elj
      "y": 
        cv: '0.1'
    Elvis: 
      c: 
        from: Pha
        s: "A.I.Elvis = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($J,$Y,@Me) = @M;\nmy $I = A.I;\nmy $wtf = I.d&wtfch,J.bb,Y.bb;\n\nY.tw ||= {};\nY.lo = {}; # compile\n\nfor my $mo (qw'gone diff new') {\n    for my $r (keys %{$wtf->{$mo}}) {\n        my $j = I.d&rJ,$r,$J;\n        j.r = $r;\n        j.lt = j.cv.\"\\t\".j.t;\n        if (!j.lt=~/\\S/) {\n            die \"Got $r =>   \".ki $j;\n        }\n        if ($mo eq 'gone') {\n            delete Y.bb->{j.r};\n            delete Y.tw->{j.lt}->{j.style};\n        }\n        else {\n            Y.bb->{j.r} = j.s;\n            Y.tw->{j.lt}->{j.style} = j.s;\n        }\n        Y.lo->{j.lt}->{$mo}->{j.style} = j.s;\n    }\n}\n\nY.tv ||= {};\nY.v ||= {};\nY.go = {};\nmy $same = 1;\nfor my $k (keys %{Y.lo}) {\n    my $tf = Y.lo->{$k};\n    my $cs = Y.tw->{$k};\n    if (tf.new && !tf.gone && !tf.diff && keys %{tf.new} == keys %$cs) {\n        $same = 0; # new line to make\n    }\n    if (tf.gone && !keys %$cs) {\n        $same = 0; # line to disappear\n        my $C = Y.go->{$k} = delete Y.tv->{$k};\n        my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n        delete Y.v->{$cv}->{$t};\n        delete Y.v->{$cv} unless keys %{Y.v->{$cv}};\n    }\n    if (tf.diff || tf.new) {\n        keys %$cs || die 'nokeys';\n        my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n        defined $cv || die \"twas $k\";\n        my $foam = sub {\n            my $C = shift;\n            %$C = (t=>$t,y=>{cv=>$cv},c=>{},sc=>{%$cs});\n            C.c.s = delete C.sc->{''} if exists C.sc->{''};\n        };\n        $foam->(Y.tv->{$k} ||= {});\n        $foam->(Y.v->{$cv}->{$t} ||= {});\n    }\n}\nif (!$same) {\n    Y.vs = [];\n    Y.kvi = {};\n    Y.cvi = {};\n    Y.te = {};\n    my $i = 0;\n    for my $k (sort keys %{Y.tv}) {\n        my $C = Y.tv->{$k} || die \"wtf $k\";\n        push @{Y.vs}, $C;\n        Y.kvi->{$k} = $i;\n        Y.cvi->{C.y.cv} ||= $i;\n        Y.te->{C.t}->{C.y.cv} = $C;\n        $i++;\n    }\n}\n\nY.ra = I.d&ratio,wtf.sami,wtf.tot;\nY.rato = wtf.tot;\nY.revs = !$same;\n\n$Y;\n};"
      sc: 
        acgt: J,Y
        args: A,C,G,T,J,Y
        code: I
        dige: b524314061c7
        l: "#c"
        of: I
      t: Elvis
      "y": 
        cv: '0.1'
    as: 
      c: 
        from: Pha
        s: "A.I.as = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$x,@Me) = @M;\nmy $I = A.I;\nfor (qw'begin bb ord tim wtf') {\n     exists $x->{$_} || next;\n     my $v = $x->{$_};\n     $v = [@$v] if ref $v eq 'ARRAY';\n     $v = {%$v} if ref $v eq 'HASH';\n     $s->{$_} = $v;\n}\n};"
      sc: 
        acgt: s,x
        args: A,C,G,T,s,x
        code: I
        dige: 5033d1e30627
        of: I
      t: as
      "y": 
        cv: '0.1'
    bandon: 
      c: 
        from: Pha
        s: "A.I.bandon = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\ndelete s.J.phy->{s.name};\ns.abandoned = 1;\nif (my $x = s.head) {\n    I.d&as,$s,$x;\n}\nI.d&end,$s\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: d7e447789ace
        of: I
      t: bandon
      "y": 
        cv: '0.1'
    end: 
      c: 
        from: Pha
        s: "A.I.end = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $y = s.J.phl->{s.name} ||= {name=>s.name, l=>[]};\ns.ended = hitime();\ndelete s.J.phy->{s.name};\nshift @{y.l} while @{y.l} > 5;\n# layers ^ rolling in time index .r -> the y.l\n# so last phase of $name can be found?\npush @{y.l}, $s;\nif (s.bb) {\n    my $w = @{y.l};\n    y.l_bb->{$_} = $w for keys %{s.bb};\n}\n# somewhere thinks about what happened\n$y\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: c1c0a7f86e83
        of: I
      t: end
      "y": 
        cv: '0.1'
    exactl: 
      c: 
        from: Pha
        s: "A.I.exactl = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $q = shift;\nmy $y = I.d&end,$s;\nmy $cur = y.l->[-1];\nmy $last = y.l->[-2];\n$cur eq $s || die \"sidf$cur $s\";\nlast.bb ||= {};\n\nmy $wtf = I.d&wtfch,cur.bb,last.bb;\n\ndelete s.J.bb->{$_} for keys %{wtf.gone};\n\n# see s.extill, time passing interesto...\n# churn stats like 30% of last disappear, 20% new\ns.wtf = $wtf;\n$wtf;\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 9e4e811b6cdd
        l: "#c un-ins things from J"
        of: I
      t: exactl
      "y": 
        cv: '0.1'
    jamsc: 
      c: 
        from: Jamsc
        s: "A.I.jamsc = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $ar = $s;\nmy $sc = ar.sc || {};\nmy $J = ar.J || die \"jamsc noj\".ki$s;\nar.C = ar.d if ar.d;\nmy $t = defined ar.t ? ar.t\n    : ar.j ? ar.j.l\n    : ar.C ? ar.C.t : die'not';\nmy $cv = defined ar.cv ? ar.cv\n    : ar.j ? ar.j.cv\n    : ar.C ? ar.C.cv || ar.C.y.cv : die'cvoy';\n\nif (ar.oJ && ar.oJ ne ar.J && !ar.noR) {\n    my $J = ar.oJ;\n    if (my $ljm = J.A.ljm) {\n        my $Me = \"ar.oJ.ind ar.J.name \"\n        .\" J.A.ljmo <<< J.name  sends:\"\n        .\" $t\\t$cv  $ljm\";\n        sayyl $Me if J.V || ar.J.V;\n        push @$ljm, {%$ar};\n    }\n}\n\nmy @fobz;\npush @fobz, [$cv,$t,undef,ar.s] if exists ar.s;\npush @fobz, [$cv,$t,$_,$sc->{$_}] for keys %$sc;\nmy @tobz = map {\n    my ($cv,$t,$s,$v) = @$_;\n    my $r;\n    if (J.tt) { # FUTU\n        $r = $cv.\"\\t\".$t.\"\\t\".$s;\n    }\n    else {\n        my $s = $s;\n        $s = '%'.$s if $s;\n        $r = $t.$s.\"\\t\".$cv;\n    }\n    if ($s) {\n        ar.C.sc->{$s} = $v;\n    }\n    [$r,$v]\n} @fobz;\n\nfor (@tobz) {\n    my ($r,$v) = @$_;\n    J.bz->($r,$v);\n}\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: e10b659b1e49
        l: "#c"
        of: I
      t: jamsc
      "y": 
        cv: '0.1'
    pha: 
      c: 
        from: Pha
        s: "A.I.pha = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($J,$name,@Me) = @M;\nmy $I = A.I;\n# tracked being\n# temporal phatness, per suJ (encap $M surges within)\nif (my $x = J.phy->{$name}) {\n    sayre \"J.name 's $name was re entrant\";\n    I.d&end,$x;\n    # end - maybe new stuffright as some random part of this process\n    # hold yay minutes of changes in 10 second groups, etc\n}\n# bz multicasts\nmy $x = J.phy->{$name} = {};\nx.begin = hitime();\nx.name = $name;\nx.J = $J;\nx.bb = {};\nx.ord = [];\n#x.tim = {};\n#x.wtf = {}; # F grab\n#x.ap = sub{}; # bz do aftering\nx.qui = 1;\nx.head = J.phl->{$name}->{l}->[-1] if J.phy->{$name};\n$x;\n};"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I
        dige: 6a41ebf0d831
        of: I
      t: pha
      "y": 
        cv: '0.1'
    rJ: 
      c: 
        from: Jamsc
        s: "A.I.rJ = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($r,$J,@Me) = @M;\nmy $I = A.I;\nmy $j;\nmy $sing;\nif (J.tt) {\n    $sing = 'J_tt';\n    (j.cv,j.t,j.style) = $r =~ /^(.*?)\\t(.*)\\t(.*?)$/;\n    if (!defined j.cv) {\n        sayre \"Hind $r  \" for 1..5;\n        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n    }\n}\nelse {\n    (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n}\ndefined j.cv || die \"$sing no $r    \".ki $j;\nj.s = J.bb->{$r} if $J;\nj.nos = 1 if $J && !exists J.bb->{$r};\n$j;\n};"
      sc: 
        acgt: r,J
        args: A,C,G,T,r,J
        code: I
        dige: c21993cdde6e
        l: "#c"
        of: I
      t: rJ
      "y": 
        cv: '0.1'
    ratio: 
      c: 
        from: Timing
        s: "A.I.ratio = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($o,$t,@Me) = @M;\nmy $I = A.I;\nmy $ratio = $o / ($t||1);\n0.01 * int(100*$ratio);\n};"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I
        dige: 154102a3aff4
        of: I
      t: ratio
      "y": 
        cv: '0.1'
    scd: 
      c: 
        from: Timing
        s: "A.I.scd = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($rv,$rl,@Me) = @M;\nmy $I = A.I;\nmy $r;\nr.z = [];\nr.oldz = [];\nundef $rl if $rl && rl.c ne rv.c;\npush @{$rl ? r.oldz : r.z}, @{rv.c};\n\nr.in = @{rl.sc||[]};\nr.out = @{rv.sc};\nif (r.out > r.in) {\n    r.ay = [r.in..(r.out - 1)];\n    push @{r.oldz}, @{rv.sc}[0..r.in] if r.in;\n    push @{r.z}, @{rv.sc}[@{r.ay}];\n}\n$r\n};"
      sc: 
        acgt: rv,rl
        args: A,C,G,T,rv,rl
        code: I
        dige: 3f4381cc6821
        of: I
      t: scd
      "y": 
        cv: '0.1'
    wtfch: 
      c: 
        from: Pha
        s: "A.I.wtfch = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($Jb,$Yb,@Me) = @M;\nmy $I = A.I;\nmy $wtf = {};\nwtf.same = 1;\n$wtf->{$_} = {} for qw'new diff gone';\n\nfor (sort keys %$Jb) {\n    if (!exists $Yb->{$_}) {\n        wtf.new->{$_} = $Jb->{$_};\n        wtf.same = 0;\n    } \n    elsif ($Yb->{$_} ne $Jb->{$_}) {\n        wtf.diff->{$_} = $Jb->{$_};\n        wtf.same = 0;\n    }\n    else {\n        wtf.sami++;\n        wtf.still->{$_} = $Jb->{$_};\n    }\n    wtf.tot++;\n}\nfor (grep { !exists $Jb->{$_} } sort keys %$Yb) {\n    wtf.gone->{$_} = $Yb->{$_};\n    wtf.same = 0;\n}\n$wtf;\n};"
      sc: 
        acgt: Jb,Yb
        args: A,C,G,T,Jb,Yb
        code: I
        dige: a0a901d4f11b
        l: "#c diff J"
        of: I
      t: wtfch
      "y": 
        cv: '0.1'
Ii: Jamsc vers:HASH + Pha vers:HASH + Timing vers:HASH
