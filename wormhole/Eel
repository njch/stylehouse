--- 
I: 
  "0.1": 
    array: 
      c: 
        el: 1
        s: "A.I.array = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return I.d&fourreal,$s if @$s != 1 && !ref $s->[0] || $s->[0] =~ /^\\w+$/;\n    return I.d&fourstring,$s->[0] if @$s == 1 && !ref $s->[0];\n    # should stick In in first and M it? \n    # kind of motion that wants to be unsure in the wild\n    unshift @{A.N}, @$s;\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 1621c6fcf424
        gro: SlideEa
      t: array
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    hash: 
      c: 
        el: 1
        s: "A.I.hash = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    return %$C = %$s if exists s.t && s.y && s.c;\n    # some talking to self - how to C over exactly\n    # the object could be live\n    I.d&servehash,$s;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d4c8ca29125b
        gro: SlideEa
      t: hash
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    mkD: 
      c: 
        el: 1
        s: "A.I.mkD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$ar,@Me) = @M;\n    my $I = A.I;\n    my $D;\n    D.point = $pin;\n    if (my $C = ar.__D) {\n        delete ar.__D;\n        D.bab = C.c.s || die \"N s\".ki $C;\n        D.noise .= C.sc.dige if C.sc.dige;\n        D.babnon = 1 if C.sc.bab eq 'non';\n        D.Verb = 1;\n    }\n    D.ar = $ar;\n    D.name = join ' ', D.point, sort keys %{D.ar};\n    D.sign = \"Z\";\n    D.talk = join' ',grep{defined}map{$D->{$_}}qw'sign name noise';\n    $D;\n};\n"
      sc: 
        acgt: pin,ar
        args: A,C,G,T,pin,ar
        code: I 1
        dige: 974b297c1911
        gro: Goodat
      t: mkD
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pin: 
      c: 
        el: 1
        s: "A.I.pin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way);\n};\n"
      sc: 
        acgt: pin,way
        args: A,C,G,T,pin,way
        code: I 1
        dige: 82803a8c20f2
        gro: Goodat
      t: pin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pwin: 
      c: 
        el: 1
        s: "A.I.pwin = sub {\n    my ($pin,$way,@Me) = @_;\n    my $I = A.I;\n    return $way->{$pin} if exists $way->{$pin};\n    my @path = split /\\/|\\./, $pin;\n    my $h = $way;\n    for my $p (@path) {\n        $h = $h->{$p};\n        unless ($h) {\n            undef $h;\n            last;\n        }\n    }\n    return $h if defined $h;\n    \n    return undef unless $pin =~ /\\*/;\n    die \"sat rs findy $pin\";\n};\n"
      sc: 
        acgt: s
        args: pin,way
        code: I 1
        dige: cc43f0214875
        gro: Goodat
      t: pwin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    renc: 
      c: 
        el: 1
        s: "A.I.renc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.c = C.c =~ I.peels ? I.d&peel,C.c\n      : do {\n        A.btw.cwass = 1 if !defined C.c;\n          {s => C.c};\n      };\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 53c8354b3c3d
        gro: SlideEa
      t: renc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    rensc: 
      c: 
        el: 1
        s: "A.I.rensc = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.sc = C.sc eq '' ? {}\n        : C.sc =~ I.peels\n        ? I.d&peel,C.sc\n        : die \"C sc nostr: C.sc   of I.peels  \".ki $C\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 4e4662544dd1
        gro: SlideEa
      t: rensc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    reny: 
      c: 
        el: 1
        s: "A.I.reny = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    C.y = C.y eq '' ? (I.blanky ? I.d&blanky : {})\n        : C.y =~ /^($NUM)$/ ? {cv=>$1}\n        : C.y =~ /^($NUM)-($NUM)$/ ? {in=>$1,out=>$2}\n        : C.y =~ /^($NUM)-($NUM)x($NUM)$/ ? {in=>$1,out=>$2,thi=>$3}\n        : C.y =~ /^-(\\w+)$/ ? do {\n            C.c.pi = $1;\n            C.c.s = C.t if !exists C.c.s || A.btw.cwass;\n            {}\n        }\n        : C.y =~ /^([a-zA-Z]+)(?::(.+))?$/ ? do {\n            C.c->{$1} = $2 || C.t;\n            {};\n        }\n        : I.rey ? I.d&rey\n        : die \"C y wtf: C.y\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 395247b38a13
        gro: SlideEa
      t: reny
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    scyvle: 
      c: 
        el: 1
        s: "A.I.scyvle = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    for (qw'in out cv') {\n        if (my $so = C.y->{$_}) {\n            my $i;\n            while (C.y->{$_} <= -1 || C.y->{$_} >= 1) {\n                C.y->{$_} /= 10;\n                die \"Many i chewing on \".ki C.y if $i++ > 10;\n            }\n        }\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d054be1e9bda
        gro: SlideEa
      t: scyvle
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
    string: 
      c: 
        el: 1
        s: "A.I.string = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die \"string: $s\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 196a2239898a
        gro: SlideEa
      t: string
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
  "0.12": 
    Ci: 
      c: 
        el: 1
        s: "A.I.Ci = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    !ref $s ? I.d&string,$s\n    :\n    ref $s eq 'ARRAY' ? I.d&array,$s\n    :\n    ref $s eq 'HASH' ? I.d&hash,$s\n    :\n    die \"mmtype:$s\";\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 12
        dige: 0ae2f062639c
        gro: SlideEa
        its: 1
      t: Ci
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
  "0.18": 
    reasonlock: 
      c: 
        el: 1
        s: "A.I.reasonlock = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    die\"reft\" if ref C.t;\n    my $istf = sub {\n        my $s = shift;\n        exists s.t && !ref s.t && ref s.y && ref s.c && 9 > keys %$s;\n    };\n    # uis a nested wave - falling ]]]]]]]\n    # allow much manufold\n    # knot this not this:\n    if (A.J.name eq 'qq' || A.J.most.J eq A.J) {\n        C.c.W = C.t unless C.c || C.sc || C.y;\n    }\n    # this form: NextWorm=>$C=>$J (C/J swappy)\n    if (ref C.y eq 'HASH' && (C.y.bb || $istf->(C.y))) {\n        if (C.y.bb) {\n            if (ref C.c eq 'HASH' && $istf->(C.c)) {\n                C.c = {e=>C.c};\n            }\n            C.c.s = C.y;\n        }\n        else {\n            if (ref C.c eq 'HASH' && C.c.bb) {\n                C.c = {s=>C.c};\n            }\n            C.c.e = C.y;\n        }\n        C.y = '';\n        C.c.W = C.t;\n    }\n    \n    I.d&renc if !ref C.c;\n    I.d&reny if !ref C.y;\n    I.d&rensc if !ref C.sc;\n    defined C.t && !ref C.t\n    && ref C.y && ref C.c && ref C.sc\n        || die \"reaso fail\".wdump [A.s,$C];\n    I.d&scyvle;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 18
        dige: 860ac48a38e1
        gro: SlideEa
        its: 1
        li: "#c"
      t: reasonlock
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/SlideEa/SlideEa
Mo: 
  "0.221": 
    yall_: 
      c: 
        el: 1
        s: "A.I.yall_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    C.y = {thi => C.y} if !ref C.y;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 221
        dige: 1dc839684266
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yall_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.23": 
    yin_: 
      c: 
        el: 1
        s: "A.I.yin_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # build wave plot manifold\n    # solar systems\n    y.cv ||= 0.3 if !defined y.cv && !defined y.in;\n    y.in = y.cv if defined y.cv;\n    y.in ||= 0.1;\n    y.out = y.in + y.space if defined y.space;\n    y.out ||= 0.9; # up to, then low things big\n    y.thi ||= 1; \n    y.space = y.out - y.in;\n    y.space *= -1 unless y.space > 0;\n    y.aspace = y.space / y.thi;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 23
        dige: a4ca6c6964aa
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yin_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.26": 
    yarN_: 
      c: 
        el: 1
        s: "A.I.yarN_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    # twist, lay into segment\n    y.u.v = defined y.cv ? y.cv\n        : defined y.in ? y.in\n        : die \"no yiny\".ki$y;\n    y.thi || die \"Whythi\".ki$C;\n    # y.u. shares av, y. separates\n    # difference pours out of y.bal via y.i in 32\n    my @lot = map {\n        my $C = I.d&xot,{},$C;\n        C.y.i = $_-1;\n        $C\n    } 1..y.thi;\n    if (@lot > 1) {\n        push @{A.mo.re->{0.29}||=[]}, map{[undef,$_]}@lot;\n        T.not = 1;\n    }\n    else {\n        my ($CC) = @lot;\n        $CC || die \"not one?\";\n        %$C = %$CC;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 26
        dige: ecbb73c46e57
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yarN_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.3": 
    yinvout_: 
      c: 
        el: 1
        s: "A.I.yinvout_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    y.mu = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 3
        dige: ea75f29040cf
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: yinvout_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.34": 
    black_: 
      c: 
        el: 1
        s: "A.I.black_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    my $was = y.u.v;\n    defined $was || die\"noAv\".ki$C;\n    # in:\n    y.cv = 0+sprintf '%.6f', y.u.v unless y.cvil && defined y.cv;\n    y.pcv = 0+sprintf '%.6f', y.i / C.y.thi;\n    # over:\n    my $in = y.aspace * y.mu;\n    y.u.v += $in;\n    # out: \n    y.ov = sprintf '%.6f', y.u.v;\n    y.spc = y.ov - y.cv;\n    #\n    sayyl \"Bend: C.t   $was += $in       y.aspace * y.mu       muav:y.u.muav\"\n        if A.J.V && y.u.muav && y.u.muav != 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 34
        dige: 0f5f111f2197
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: black_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.341": 
    J_341: 
      c: 
        el: 1
        s: "A.I.J_341 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $f = A.jr&J;\n    my $j = C.sc.J;\n    ref $j && ref $f && ($j eq $f || die \".sc J dif $f $j\");\n    # should T.at so vis, substrate insecting\n    C.c.J = T.at.J = $f if $f && ref $f && !f.dead;\n    A.Iso.oJ = 1; # getting pinned into J\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 341
        dige: a66bb6c1e9e4
        gk: J
        gro: Joot
        nk: c
        v: cJ
      t: J_341
      "y": 
        cv: '0.341'
        cvt: 0.341	C.t
        p: qq/Joot/Joot
  "0.342": 
    X_342: 
      c: 
        el: 1
        s: "A.I.X_342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $X = C.c.X;\n    my $J = C.sc.J;\n    sayre \"DELING J.name\".ki$C;\n    $J || die \"X no J\";\n    ref $J || die \"Nofound $J  C.t   C.y.cv\";\n    $X eq $J || die \"noovewr X  C.c.X ne $J\";\n    A.jr&J,$J,9;\n    J.dead = 1;\n    # SNat bail, we have balin by now so hole in space this time\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 342
        dige: 62f17d0fcd62
        gk: X
        gro: Joot
        nk: c
        v: cX
      t: X_342
      "y": 
        cv: '0.342'
        cvt: 0.342	C.t
        p: qq/Joot/Joot
  "0.37": 
    ent_: 
      c: 
        el: 1
        s: "A.I.ent_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    $y->{$_} = 0+sprintf('%.6f',$y->{$_}) for qw'cv ov aspace spc';\n    C.sc.yspc = y.spc if C.sc.nspc;\n    C.sc.ml = (C.y.over * 40).\"%\" if y.over;\n    if (!y.bal && y.aspace == 0.6 && y.in == 0.3) {\n        delete $y->{$_} for qw'space i in mu out ov pcv space spc thi u';\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 37
        dige: a7dafb032f01
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: ent_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
  "0.77": 
    pin_: 
      c: 
        el: 1
        s: "A.I.pin_ = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $y = C.y;\n    return if delete T.oke;\n    my $oJ = A.J;\n    my $J = C.y.o && C.y.o.J || $oJ;\n    my $ar = {};\n    ar.s = C.c.s if exists C.c.s;\n    \n    Rw jamsc + $J $oJ $C $sc:C.sc;\n    \n    # man is an insect is a flame\n    \n    sayyl \"Hamsc! A.talk: C.t C.y.cv     \".ki(1,{c=>C.c,sc=>C.sc})\n        if A.J.V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 77
        dige: 30369ff61d2a
        gro: Spaci
        its: 1
        nk: 'y'
        v: 'y'
      t: pin_
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Spaci/Spaci
O: 
  "0.31": 
    tycsc_31: 
      c: 
        el: 1
        s: "A.I.tycsc_31 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.t = C.t;\n    at.y.cv = C.y.cv;\n    V.ids->{C.sc.id} = $at if C.sc.id;\n    if (ref C.c.s eq 'HASH' && C.c.s.bb) {\n        # an other that is holding this\n        at.c.S = C.c.s eq A.J && C.sc.W ? ''\n            : C.c.s.name || \"unamed\";\n        # makes link\n    }\n    elsif (exists C.c.s) {\n        at.c.s = C.c.s\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 31
        dige: 8c81088ecddd
        gk: 'Y'
        gro: Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: tycsc_31
      "y": 
        cv: '0.31'
        cvt: 0.31	C.t
        p: qq/Yosc/Yosc
  "0.36": 
    Jin_36: 
      c: 
        el: 1
        s: "A.I.Jin_36 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # so osci ^ can C.sc.\n    at.sc = {%{C.sc}};\n    for (qw'idly ml nspc path yspc') {\n        delete at.sc->{$_}# && sayre \"C.t sc blocking $_\";\n    }\n    # haps to be crate later somewhere if we oWl/S\n    delete ta.V if ref ta.V eq 'HASH' && !keys %{ta.V};\n    \n    if (my $v = at.sc.J) { # J unifies -\n        at.sc.J = v.name;\n    \n        return if C.sc.qz;\n        return if C.sc.W && Y.root.sc.oWl;\n        return if C.sc.W && defined at.c.S && at.c.S eq '';\n    \n        my $nV = v.El->{V.name};\n        return sayre \"no V.name on v.name $v: El: \"\n            .join', ',sort keys %{v.El}\n            if !$nV;\n    \n        my $rv = nV.rv || {LIES=>\"from v.name\"};\n        return sayre \"no rv V.name on v.name\"\n            if !nV.rv;\n    \n        lv.do->{V.name} = $rv;\n        at.V->{V.name} = rv.i;\n    \n        if (at.sc.pi && exists at.c.s && (Y.root.sc.ux || at.sc.qs)) {\n            delete at.c.s; # words about what its looking\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 36
        dige: fdd58d9f5777
        gk: 'Y'
        gro: Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jin_36
      "y": 
        cv: '0.36'
        cvt: 0.36	C.t
        p: qq/Yosc/Yosc
  "0.37": 
    Jnine_37: 
      c: 
        el: 1
        s: "A.I.Jnine_37 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (C.c.root) { # / unifies  <\n        if (at.sc.pi && exists at.c.s && Y.root.sc.ux) {\n            delete at.c.s; # itself, 'pi'\n        }\n        lv.voso = 1;\n        for my $ik (@{V.os}) {\n            my $iv = V.lv->{$ik};\n            my $C = iv.C;\n            do { sayre(\"Skip C.t: self in self\") for 1..6 } && next\n                if C.sc.J && C.sc.J eq A.J;\n            lv.do->{$ik} = $iv;\n            at.V->{$ik} = iv.i;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 37
        dige: ce6542f237c0
        gk: 'Y'
        gro: Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jnine_37
      "y": 
        cv: '0.37'
        cvt: 0.37	C.t
        p: qq/Yosc/Yosc
  "0.38": 
    sel_38: 
      c: 
        el: 1
        s: "A.I.sel_38 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.sc.geo = ki(at.sc.geo) if ref at.sc.geo;\n    at.y = at.y.cv if keys %{at.y} == 1 && exists at.y.cv;\n    # ^ to SlideEater decode array of y expressions, xotted together\n    for my $up (qw'tag id') {\n        at.c->{$up} = delete at.sc->{$up} if exists at.sc->{$up}\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 38
        dige: de0b4f579d01
        gk: 'Y'
        gro: Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: sel_38
      "y": 
        cv: '0.38'
        cvt: 0.38	C.t
        p: qq/Yosc/Yosc
Sev: 
  "0.434": 
    Vsup_434: 
      c: 
        el: 1
        s: "A.I.Vsup_434 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    d.iv = lv.do->{$gk};\n    d.ov = vl.do->{$gk};\n    #saybl \"Seen: $gk    d.iv   d.ov\";\n    d.ov && d.ov.i && (d.ov.i eq $o || warn \"no ovi ogk  d.ov.i eq $o\");\n    T.noTd = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - "*"
        Td: V/*/*
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 434
        dige: '37961e421368'
        gk: 'Y'
        gro: goneplay
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: Vsup_434
      "y": 
        cv: '0.434'
        cvt: 0.434	C.t
        p: qq/goneplay/goneplay
  "0.4342": 
    Vgone_4342: 
      c: 
        el: 1
        s: "A.I.Vgone_4342 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (!ov.rmnsc) {\n        die \"no rm: A.J.name =>  C.t: C.y.k   \\n\".ki(C.sc)\n            .wdump 3, [$at,$ta,\"Cfor $gk pmtp\", $vl,'','',$lv,\"ESS:\". $s];\n    }\n    !$iv || die \"gone had iv\";\n    # ^ sc plumb its destruction\n    # can void if our c reframes by implicitly clearing\n    lv.od.go->{$gk} = $ov;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - gone
        Td: V/*/gone
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4342
        dige: 8d2c9d96544a
        gk: 'Y'
        gro: goneplay
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vgone_4342
      "y": 
        cv: '0.4342'
        cvt: 0.4342	C.t
        p: qq/goneplay/goneplay
oJ: 
  "0.343": 
    J_343: 
      c: 
        el: 1
        s: "A.I.J_343 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    return if ref $J;\n    $J = Rw Jto $name:J;\n    G.W->{J.id} && G.W->{J.id} ne $J && die \"runup J.name\";\n    G.W->{J.id} = $J;\n    ref $J || die 'watt'.$J;\n    if (exists C.c.pi) {\n        J.Jiter = A.J; # erse rev\n        J.most->{$_} = A.J.most->{$_} for keys %{A.J.most||{}};\n    }\n    # til the I train shows up:\n    J.V = J.most.J.inV || 1 if A.J.V == 2 || J.most.J.inV;\n    J.A.Indo = 2;\n    #C.c.s ||= 'Wildy';\n    sayyl \"J33   Made J.name\" unless J.Jiter;\n    C.c.J = T.at.J = $J;\n    A.jr&J,$J; # sc, c, and on sphere\n    die \"noovewr   C.c.J ne $J\" if ref C.c.J && C.c.J ne $J;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 343
        dige: c940f9361cba
        gk: J
        gro: Joot
        nk: c
        v: cJ
      t: J_343
      "y": 
        cv: '0.343'
        cvt: 0.343	C.t
        p: qq/Joot/Joot
  "0.344": 
    J_344: 
      c: 
        el: 1
        s: "A.I.J_344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    # here before we could be interrupting\n    my $isJ = sub { my $J = shift; ref $J eq 'HASH' && J.bb };\n    if (A.J ne $J) {\n        # what we are holding out as .e and .s helps it leave\n        A.ztime = 6 if exists C.c.e;\n        sayre \"THosught of A.J.name  holds  J.name  \".ki C.c if A.V&V;\n        return;\n    }\n    unless (exists C.c.e || $isJ->(C.c.s)) { # subscribe maintain there\n        say \"threesorbtion: A.J.name to J.name\"\n            .\" is not holding e or sJ\" if A.V&V;\n        # absorb self Cing\n        T.not = 1;\n        return;\n    }\n    my $S = C.c.s;\n    my $E = C.c.e;\n    saybl \"In s C.t: E.t     \".ki(E.sc) if A.V&E;\n    sayre \" unable to count self ?\" if C.c.s eq $J;\n    die \"thoughts of a thous\" if A.J ne $J;\n    if (!exists C.c.e) {\n        # be thing=>W=>other, later\n        C.c.IsOn || return do {\n            say \"Comebacking J.name with C.t...\" if A.V&V;\n            Rw wayt $J $C $d=0.01 $p=jive;\n            T.not = 1;\n        }\n    }\n    # no J being tricks for handulation, event energy\n    A.Iso.th = 1;\n    delete A.Iso.oJ;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 344
        dige: 1e29eacdb3b2
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_344
      "y": 
        cv: '0.344'
        cvt: 0.344	C.t
        p: qq/threes/threes
th: 
  "0.4": 
    J_4: 
      c: 
        el: 1
        s: "A.I.J_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $ar;\n    ar.A=$A;ar.G=$G;ar.C=$C;ar.T=$T;ar.J=$J;\n    C.c.e ?\n        Rw threve\n    :\n        Rw thank;\n    if (T.oke) {\n        die \"thoughts of a thous\" if A.J ne $J;\n        delete A.Iso.th;\n        A.Iso.oJ = 1;\n        A.ztime = 6;\n        return sayyl \"Tanking into J.name\";\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 4
        dige: 0ea60ba92a74
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_4
      "y": 
        cv: '0.4'
        cvt: 0.4	C.t
        p: qq/threes/threes
