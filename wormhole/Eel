--- 
I: 
  "0.1": 
    mkD: 
      c: 
        el: 1
        s: "A.I.mkD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$ar,@Me) = @M;\n    my $I = A.I;\n    my $D;\n    D.point = $pin;\n    if (my $C = ar.__D) {\n        delete ar.__D;\n        D.bab = C.c.s || die \"N s\".ki $C;\n        D.noise .= C.sc.dige if C.sc.dige;\n        D.babnon = 1 if C.sc.bab eq 'non';\n        D.Verb = 1;\n    }\n    D.ar = $ar;\n    D.name = join ' ', D.point, sort keys %{D.ar};\n    D.sign = \"Z\";\n    D.talk = join' ',grep{defined}map{$D->{$_}}qw'sign name noise';\n    $D;\n};\n"
      sc: 
        acgt: pin,ar
        args: A,C,G,T,pin,ar
        code: I 1
        dige: 974b297c1911
        gro: Goodat
      t: mkD
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pin: 
      c: 
        el: 1
        s: "A.I.pin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way);\n};\n"
      sc: 
        acgt: pin,way
        args: A,C,G,T,pin,way
        code: I 1
        dige: 82803a8c20f2
        gro: Goodat
      t: pin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pon: 
      c: 
        el: 1
        s: "A.I.pon = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,$s,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way,{et=>$s});\n};\n"
      sc: 
        acgt: pin,way,s
        args: A,C,G,T,pin,way,s
        code: I 1
        dige: e37d81abf9f1
        gro: Goodat
      t: pon
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pwin: 
      c: 
        el: 1
        s: "A.I.pwin = sub {\n    my ($pin,$way,$set,@Me) = @_;\n    my $I = A.I;\n    if (exists $way->{$pin}) {\n          my $o = $way->{$pin};\n        $way->{$pin} = set.et if exists set.et;\n        delete $way->{$pin} if set.de;\n        return $o;\n    }\n    my @path = split /\\/|\\./, $pin;\n    my $h = $way;\n    my $last;\n    for my $p (@path) {\n        if (ref $h ne 'HASH' && ref $h ne 'G') {\n            undef $last;\n            undef $h;\n            last;\n        }\n        $last = [$h,$p];\n        $h = $h->{$p};\n        # ref = T makes it look for jointed rest of path in tiedinto {}\n        # then T collapses the feely data mesh\n    }\n    if ($last) {\n        my ($he,$pi) = @$last;\n        $he->{$pi} = set.et if exists set.et;\n        delete $he->{$pi} if set.de;\n    }\n    return $h if defined $h;\n    \n    return undef unless $pin =~ /\\*/;\n    die \"sat rs findy $pin\";\n};\n"
      sc: 
        acgt: s
        args: pin,way,set
        code: I 1
        dige: 41ad5cef7aed
        gro: Goodat
      t: pwin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
  "0.11": 
    after: 
      c: 
        el: 1
        s: "A.I.after = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    A.bangdesk = {};\n    A.bangdesk.main = sub {\n        $_->() for values %{A.bangdesk.aft};\n        $@ || return;\n        A.bang && return;\n        A.bang = 21;\n        $_->() for values %{A.bangdesk.bang};\n        # want to sus $@ and hang vectors of what, should be autoish\n        my $m = \"J: I.nF.A.talk        A.mo.ont.cv\";\n        $m .= \"\\nC: \".k2 I.nF.C;\n        $m .= \"\\ns: \".wdump 3, I.nF.A.s unless length $m > 20;\n        sayre \" * bangdesk: \\n$m\\n$@\";\n        return $m;\n    };\n    aft { A.bangdesk.main->() }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 11
        dige: 79dc6dfb4dcf
        gro: Bangdesk
        its: 1
      t: after
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Bangdesk/Bangdesk
  "0.9": 
    erg: 
      c: 
        el: 1
        s: "A.I.erg = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    # must pre compile, see D severators\n    my $m = \"J: A.talk\";\n    $m .= \"\\nC: \".ki $C;\n    $m .= \"\\ns: \".wdump 3, A.s unless length $m > 20;\n    $@ = \"$m\\n$@\";\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 9
        dige: 1f5c81388334
        gro: Bangdesk
      t: erg
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Bangdesk/Bangdesk
J: 
  "0.6211211": 
    J_6211211: 
      c: 
        el: 1
        s: "A.I.J_6211211 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $x = A.J.pix || J.mo.J.pix || return;\n    Rw Foldout $x $A $C $J $T $y:J.oy;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: J 6211211
        dige: 5d27efc43d08
        gk: J
        gro: Foli
        nk: c
        v: cJ
      t: J_6211211
      "y": 
        cv: '0.621121'
        cvt: 0.621121	C.t
        p: qq/Foli/Foli
