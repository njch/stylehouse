--- 
I: 
  "0.1": 
    carebowl: 
      c: 
        el: 1
        s: "A.I.carebowl = sub {\n    my ($A,$C,$G,$T,$s,$iii,$x,$xrd) = @_;\n    my $I = A.I;\n    for my $ik (sort keys %$iii) {\n        my $D = $iii->{$ik};\n        if (my $nk = D.sc.nk) {\n            my $C = I.nF.C;\n            next if !exists $C->{$nk};\n            if (my $gk = D.sc.gk) {\n                next if !exists $C->{$nk}->{$gk};\n            }\n        }\n        my $act;\n        my $dont;\n        if (D.sc.acgt && D.sc.act) {\n            $act = 1;\n            # acgtsubs can be defined at any cv\n            # run themselves if act\n            # usu. one receiver (Ci) and the rest scheme\n            die \"D.t .act gets... D.sc.act\" if D.sc.act ne '1';\n            $dont = 1 if exists A.I->{D.t};\n        }\n        # way or acgt-setuping-way\n        unless ($dont) {\n            my $paw = join\"_\",'',I.k,I.cv,D.t;\n            $paw =~ s/\\W//g;\n            Rw $paw $A $C $G $T $__D:D;\n        }\n        # most tiny ticks\n        # this ind is all flywheel\n        # it's a kind of unity that wants to be a block of code like this\n        # and c\n        my @is = A.s;\n        @is = I.d&scIfs,D.sc.Ifs if D.sc.Ifs;\n        @is || next;\n        if ($act) {\n            push @$xrd, [I.k,$ik];\n            my $Ds = $x->{I.k}->{$ik} ||= {};\n            Ds.D = $D;\n            Ds.is = \\@is;\n            D.sc.its = @is;\n        }\n        # TreeD\n        $s->{I.k}->{I.cv}->{$ik} = $D;\n    }\n};\n"
      sc: 
        acgt: s,iii,x,xrd
        args: A,C,G,T,s,iii,x,xrd
        code: I 1
        dige: 6a65d4535276
        gro: KowTime
        l: "#c"
      t: carebowl
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
    ex: 
      c: 
        el: 1
        s: "A.I.ex = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($i,$K,$cv,$av) = @M;\n    my $I = A.I;\n    # was Rw SNat $A $C $G $T $I $i $K $cv;\n    # baseism\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    my $sp = $av ? \" Flav $av (no A.cv)\" : \"\";\n    \n    my $talk = \"A.talk: $K$sp $Av > $c --- C.t \";\n    \n    my $aim = {$K=>1};\n    if ($aim->{A.am}) {\n        $aim->{$_} = 1 for @{A.Isl||[]};\n        aim.I = 1;\n    }\n    \n    my $yv = {};\n    # make K/cv/t -> cv/K/t\n    for my $k (sort keys %$i) {\n        my $ii = $i->{$k};\n    \n        next if $k eq 'Ii';\n        next if $k eq 'ooI';\n        ref $ii eq 'HASH' || die \"weird $k=$ii\";\n    \n        for my $vc (sort keys %$ii) {\n            my $iii = $ii->{$vc};\n            die'$k !0<$vc<1' unless $vc > 0 && $vc < 1;\n            $yv->{$vc}->{$k} = $iii;\n        }\n    }\n    \n    # do stuff\n    my $vb; # in fractions\n    my $wasSubtle;\n    for my $vc (sort keys %$yv) {\n        my $is = $yv->{$vc};\n        my $s = {};\n        my $x = {};\n        my $xrd = [];\n    \n        next if $vc <= $Av && $vc != $c;\n        next if $vc > $c;\n    \n        # our  osc (stay in K per Subtle ness);\n        my @iz = grep {\n            $aim->{$_} || (aim.I && A.Iso->{$_})\n        } sort keys %$is;\n        next if !@iz;\n    \n        # (for oscillating stretches of inner being)\n        if ($wasSubtle) {\n            undef $wasSubtle;\n            $vb = $vc;\n        }\n        # inter cv wideness loop v and its not ^\n        if ($vb && $vc > $vb && (\n            @{A.N} || @{A.mo.re->{$vb}||[]}\n            )) {\n            # sincing, wide order\n            # various others want to be around for only some of the process...\n            sayre \"$vb -> $vc  bump, \". @{A.N} if A.J.V > 1;\n            T.Z->{$vb} = 1;\n            A.cv = $vb; # so we dont wind up to 6 on the way out of t\n            return T.not = 1;\n        }\n    \n        # pin down poles\n        I.cv = $vc;\n        I.vb = $vb;\n        # draw curvles as spirals done\n    \n        for my $k (@iz) {\n            my $iii = $is->{$k};\n            I.k = $k;\n            I.d&carebowl,$s,$iii,$x,$xrd;\n        }\n        #c suble\n        my $se = Rw TreeD $s $scby=gro \n            if A.J.V > 1 && keys %$s;\n        $c == 0.1 ? saygr $se : say $se if $se;\n    \n        die if I.cv ne $vc;\n        die if I.vb ne $vb;\n        my $o;\n        o.vc = $vc;\n        o.vb = $vb;\n        o.Subtle = 0;\n        o.nonSubtle = 0;\n        I.d&exood,$o,$x,$xrd;\n        $vc = o.vc;\n        $vb = o.vb;\n        if (o.Subtle && !o.nonSubtle) {\n            $wasSubtle = 1;\n        }\n    \n        return if T.not;  # will &z, oseve\n        return if delete T.whack;\n    }\n};\n"
      sc: 
        acgt: i,K,cv,av
        args: A,C,G,T,i,K,cv,av
        code: I 1
        dige: ff84b6093988
        gro: KowTime
        nois: "#c"
      t: ex
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
    exood: 
      c: 
        el: 1
        s: "A.I.exood = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$x,$xrd) = @M;\n    my $I = A.I;\n    for my $kik (@$xrd) {\n        my ($k,$ik) = @$kik;\n        A.Subtle && A.Subtle->{$k} ? o.Subtle++ : o.nonSubtle++;\n        my $Ds = $x->{$k}->{$ik};\n        my $D = Ds.D;\n        for my $s (@{Ds.is}) {\n            D.sc.acgt eq 's'||die \"nonacgts\".wdump $D;\n            exists A.I->{D.t}||die \"acgtI D.t not up: \".wdump A.I;\n    \n            I.d&D.t,$s;\n    \n            I.acted and I.d&acted,$s;\n    \n            if (my $ut = T.ut) {\n                if (ut.matchTd) {\n                    my $d = s.d || die \"confuse\";\n                    d.od.s.T.q->{d.e.k} ||= $d;\n                    d.od.s.T.m->{d.e.k} ||= $d\n                        unless delete(T.noTd);\n                }\n                else { die\"utrowhat \".wdump 2, $ut }\n            }\n    \n            # outwave: schools of many fish (not upcv if !@is)\n            o.vb ||= o.vc if D.sc.v;\n    \n            last if T.not || T.whack;\n        }\n        delete T.ut;\n        last if T.not || T.whack;\n    }\n};\n"
      sc: 
        acgt: o,x,xrd
        args: A,C,G,T,o,x,xrd
        code: I 1
        dige: b15d585bb0fa
        gro: KowTime
        l: "#c"
      t: exood
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
Mo: 
  "0.6": 
    J_6: 
      c: 
        el: 1
        s: "A.I.J_6 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        my $talk = \"T $A->{cv} $A->{ztime} $J->{most}->{J}->{name}       $J->{name}\";\n        $A->{time}->($J, 6) || return do {\n            say\"$talk   SKive!\" if $A->{J}->{V};\n            $T->{nose} = 1;\n        };\n        sayyl \"J6 ! $talk\";\n        $A->{Subtle}->{J} = 1;\n        $A->{t}->(\"J\",9,1);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 6
        dige: 14d02492dab9
        gk: J
        gro: Jumps
        nk: c
        v: cJ
      t: J_6
      "y": 
        cv: '0.6'
        cvt: 0.6	C.t
        p: qq/Jumps/Jumps
  "0.7": 
    J_7: 
      c: 
        el: 1
        s: "A.I.J_7 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n        return sayre\"$J->{name} nose\" if $T->{nose};\n        return sayre \"Tsame=$T->{same} $J->{name}\" if $T->{same};\n        $J->{most}->{eo} = 'Sev' if $J->{A}->{II}->{Sev};\n        say \"oJ77 77 $J->{name} -> $J->{most}->{eo}\";# unless $J->{yt}->{quiet} || $C->{sc}->{pi};\n        $G->{w}->(\"$J->{most}->{eo}\", {J => $J, A => $A}, $G);\n        # dos geo ^ Yesui\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Mo 7
        dige: d4fee509f0fe
        gk: J
        gro: Jumps
        nk: c
        v: cJ
      t: J_7
      "y": 
        cv: '0.7'
        cvt: 0.7	C.t
        p: qq/Jumps/Jumps
S: 
  "0.24": 
    Y_24: 
      c: 
        el: 1
        s: "A.I.Y_24 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $di = Y.lo->{C.y.k}) {\n        my $not;\n        if (keys %$di == 1 && di.diff) {\n            my $CC = V.tv->{C.y.k};\n            if (!$CC) {\n                sayre \"never heard of (V_tv) diff J.name : C.y.k \";\n                return 1;\n            }\n            for my $tk (keys %{di.diff}) {\n                if ($tk eq 'geo') {\n                    T.to = 1 if 0 && !I.d&heq,C.sc.geo,CC.sc.geo;\n                    if ($not && 0) {\n                        sayyl \"Geo was $not a difference in the thing\";\n                        sayyl sjson(C.sc.geo);\n                        saybl sjson(CC.sc.geo);\n                    }\n                }\n                elsif ($tk eq '') {\n                    T.to = 1 unless ref C.c.s && C.sc.dige && C.sc.dige eq CC.sc.dige;\n                }\n                else {\n                    saybl \"J.name C.y.k has diffre: $tk\";\n                    T.to = 1;\n                }\n            }\n        }\n        else {\n            T.to = 1;\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 24
        dige: 2fb8df542383
        gk: 'Y'
        gro: Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_24
      "y": 
        cv: '0.24'
        cvt: 0.24	C.t
        p: qq/Ysleep/Ysleep
  "0.25": 
    Y_25: 
      c: 
        el: 1
        s: "A.I.Y_25 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $JJ = C.sc.J) {\n        my $ta = V.ta->{C.y.k};\n        if (my $nV = JJ.El->{V.name}) {\n            my $iv = nV.rv;\n            my $oi = ta.V->{V.name};\n            if ($oi ne iv.i) {\n                T.to = 1;\n            }\n        }\n        else {\n            sayre \"no El V.name on JJ.name\";\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 25
        dige: 9f6d02eaea0d
        gk: 'Y'
        gro: Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_25
      "y": 
        cv: '0.25'
        cvt: 0.25	C.t
        p: qq/Ysleep/Ysleep
