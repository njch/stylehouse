--- 
I: 
  "0.1": 
    Act: 
      c: 
        el: 1
        s: "A.I.Act = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $A = {%$s};\n        $A->{mo}->{ont} = $A;\n        $A->{s} = shift @{$A->{N}};\n        $T = {};\n        $T->{oM} = [];\n        $I->{d}->(\"n\",$A,{},$G,$T);\n        $I->{d}->(\"An\");\n        $A->{t}->(\"2\");\n        map{$I->{nF}->{$_}}qw'A C T';\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: e24a2c98dffd
        gro: Motion
      t: Act
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    An: 
      c: 
        el: 1
        s: "A.I.An = sub {\n    my ($A,$C,$G,$T,@Me) = @_;\n    my $I = A.I;\n        $A->{note} = {}; # pinging csc\n        $A->{talk} = \"$A->{J}->{name} \".($A->{J}->{le} && $A->{J}->{le}->{name});\n        $A->{c} = sub { $I->{d}->(\"c\",@_); };\n        $A->{e} = sub { $I->{d}->(\"e\",@_); };\n        $A->{us} = sub { $I->{d}->(\"us\",@_); };\n        $A->{t} = sub { $I->{d}->(\"t\",@_); };\n        $A->{V} = sub {\n            my $bl = shift;\n            $A->{J}->{VV} && $A->{J}->{VV}->{$bl}\n            || $A->{J}->{V}\n        };\n        $A\n};A.I.d&An;\n"
      sc: 
        acgt: 1
        args: A,C,G,T
        code: I 1
        dige: fb63d04c1357
        gro: Motion
      t: An
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    Other: 
      c: 
        el: 1
        s: "A.I.Other = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $ar = $F[0]->{ar};\n        $A = $G->{w}->(\"RB\", {%$ar, t => $s}, $G);\n        $I = $A->{I};\n        # midnight at the oasis\n        $I->{d}->(\"n\",$A,{},$G,{});\n        $I->{d}->(\"An\");\n        $A->{t}->(\"1\");\n        $A->{t}->(\"11111\") || warn \"NO 1\";\n        ($A,$A->{I})\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 9e38e8306a8d
        gro: Motion
      t: Other
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    Tat: 
      c: 
        el: 1
        s: "A.I.Tat = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $at = delete $T->{at};\n        $at || die \"youAT\";\n        $C->{sc}->{$_} = $at->{$_} for keys %$at; # sizling update sprites\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 0a4f4c661b5b
        gro: Motion
      t: Tat
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    ar: 
      c: 
        el: 1
        s: "A.I.ar = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        my $ar;\n        $ar->{A}=$A;$ar->{G}=$G;$ar->{C}=$C;$ar->{T}=$T;\n        $ar;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 87aa910d4bc6
        gro: Motion
      t: ar
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    flywheels: 
      c: 
        el: 1
        s: "A.I.flywheels = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # wants to be a six alwayser... ,{code=>'I 6',act=>'all'} # $II->{All}? $II->{Fly}?\n        # its $I->{d}->(\"nded\") and holds things to code, $v a spiral it's filling up\n        # $v could be mounted... aj8 mysteries\n        for my $k (sort keys %{$A->{fl}}) {\n            my $v = $A->{fl}->{$k};\n            #   ^ bus to ride\n            $k = $2 if $k =~ /^(\\d+) (.+)$/;\n            $G->{w}->(\"ym/$k\", {I => $I, J => $A->{J}, A => $A, C => $C, v => $v, G => $G, T => $T}, $G);\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 6a90e0b56807
        gro: Motion
      t: flywheels
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    mkD: 
      c: 
        el: 1
        s: "A.I.mkD = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$ar,@Me) = @M;\n    my $I = A.I;\n    my $D;\n    D.point = $pin;\n    if (my $C = ar.__D) {\n        delete ar.__D;\n        D.bab = C.c.s || die \"N s\".ki $C;\n        D.noise .= C.sc.dige if C.sc.dige;\n        D.babnon = 1 if C.sc.bab eq 'non';\n        D.Verb = 1;\n    }\n    D.ar = $ar;\n    D.name = join ' ', D.point, sort keys %{D.ar};\n    D.sign = \"Z\";\n    D.talk = join' ',grep{defined}map{$D->{$_}}qw'sign name noise';\n    $D;\n};\n"
      sc: 
        acgt: pin,ar
        args: A,C,G,T,pin,ar
        code: I 1
        dige: 974b297c1911
        gro: Goodat
      t: mkD
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    moy: 
      c: 
        el: 1
        s: "A.I.moy = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        # groups, spread the moise over A\n        my $i = $A->{mo}->{y}->{$s}||die\"no$s\";\n        my $is = $i->{$C->{y}->{p}}; # things in our C's pool\n        {is=>$is,N=>[map{$is->{$_}}sort keys %$is]};\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 2fb4d87f09eb
        gro: Motion
      t: moy
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    oseverato: 
      c: 
        el: 1
        s: "A.I.oseverato = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        if ($T->{d}) {\n            $A->{T}->{d} = $T->{d}; # carte\n        }\n        if (my $z = delete $T->{Z}) { # tease out the next times\n            my ($lo) = sort keys %$z; # next one\n            my $v = $z->{$lo};\n            push @{$A->{mo}->{re}->{$lo} ||= []},\n                ref $v eq 'ARRAY' ? @$v :\n                $v ne '1' ? [$A,$C,$v] :\n                [$A,$C];\n            @{$T->{oM}} = ();\n        }\n        if (!@{$A->{mo}->{N}} && $A->{mo}->{re}) {\n            my $ats = $A->{mo}->{re} || {};\n            my @wa = sort keys %$ats;\n            my ($lo) = @wa;\n            if ($lo) {\n                my $ay = delete $ats->{$lo};\n                my @N = map { {AZ=>{$lo=>$_}} } @$ay;\n                push @{$A->{mo}->{N}}, @N;\n                saybl \"Looping \".@N.\" to $lo\" if $A->{J}->{V} > 1;\n            }\n        }\n        # concoi severaliser, for conglom up; merging spiral snips of code\n        if (my $y = $T->{y}) {\n            for my $k (keys %$y) {\n                $A->{mo}->{y}->{$k}->{$C->{y}->{p}}->{$C->{y}->{cvt}} = $C;\n            }\n        }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: c2111bfab654
        gro: Motion
      t: oseverato
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
    pin: 
      c: 
        el: 1
        s: "A.I.pin = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$way,@Me) = @M;\n    my $I = A.I;\n    I.pwin || die \"nopwin from pin\";\n    I.pwin->($pin,$way);\n};\n"
      sc: 
        acgt: pin,way
        args: A,C,G,T,pin,way
        code: I 1
        dige: 82803a8c20f2
        gro: Goodat
      t: pin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    pwin: 
      c: 
        el: 1
        s: "A.I.pwin = sub {\n    my ($pin,$way,@Me) = @_;\n    my $I = A.I;\n    return $way->{$pin} if exists $way->{$pin};\n    my @path = split /\\/|\\./, $pin;\n    my $h = $way;\n    for my $p (@path) {\n        $h = $h->{$p};\n        unless ($h) {\n            undef $h;\n            last;\n        }\n    }\n    return $h if defined $h;\n    \n    return undef unless $pin =~ /\\*/;\n    die \"sat rs findy $pin\";\n};\n"
      sc: 
        acgt: s
        args: pin,way
        code: I 1
        dige: cc43f0214875
        gro: Goodat
      t: pwin
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Goodat/Goodat
    z: 
      c: 
        el: 1
        s: "A.I.z = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        $I->{d}->(\"oseverato\");\n        push @{$A->{M}}, @{$T->{oM}};\n        1\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 85ce5e302f71
        gro: Motion
      t: z
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
  "0.71": 
    CoM: 
      c: 
        el: 1
        s: "A.I.CoM = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n        push @{$T->{oM}}, $C unless $T->{Z};\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: I 71
        dige: 7a9e6cff36b8
        gro: Motion
        its: 1
      t: CoM
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Motion/Motion
em: 
  "0.21": 
    em_21: 
      c: 
        el: 1
        s: "A.I.em_21 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $em = C.c.em;\n    em.lines || die \"Not lines\";\n    em.hitime = hitime();\n    em.is.W = C.sc.Wid || A.J.id;\n    em.is.M = C.sc.Mid || A.J.name;\n    em.id = em.is.W.'.'.(0+em.i);\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: em 21
        dige: c304cc4fd1ff
        gk: em
        gro: Meta
        nk: c
        v: cem
      t: em_21
      "y": 
        cv: '0.21'
        cvt: 0.21	C.t
        p: qq/Meta/Meta
  "0.3": 
    eve_3: 
      c: 
        el: 1
        s: "A.I.eve_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $eve = C.sc.eve;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    #J.mo.s.al.opt.fole = [Followe=>W=>\"life/W/em.is.W\\.e\"];\n    n \"life/W/em.is.W\\.e\"=>-sol\n    # routes ids[] into All(Oth)\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: 1faf0cd4043c
        gk: eve
        gkiss: s
        gro: Meta
        nk: sc
        nov: 1
        nv: sceve
        rg: J,em
        v: sceve
      t: eve_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Meta/Meta
    jslines_3: 
      c: 
        el: 1
        s: "A.I.jslines_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $jslines = C.sc.jslines;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    Rw EmJSlines $J $em $C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: e2f32f324398
        gk: jslines
        gkiss: s
        gro: Meta
        nk: sc
        nov: 1
        nv: scjslines
        rg: J,em
        v: scjslines
      t: jslines_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Meta/Meta
    ressur_3: 
      c: 
        el: 1
        s: "A.I.ressur_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ressur = C.sc.ressur;\n    my $J = C.c.J;\n    my $em = C.c.em;\n    saybl \"Ressurrecting $ressur ...\";\n    die \"zomp $ressur\" if $ressur =~ /\\W/;\n    die \"bno JSlines\" unless -e \"life/W/$ressur\";\n    `cd life; ln -s ../W/$ressur J/em.id\\.c`;\n    my $catch = sjson {y=>J=>id=>em.id};\n    I.d&writef,\"life/J\\.s\",$catch,1;\n    T.whack = 1; # out of em\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em 3
        dige: bc77ff177d9a
        gk: ressur
        gkiss: s
        gro: Meta
        nk: sc
        nov: 1
        nv: scressur
        rg: J,em
        v: scressur
      t: ressur_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Meta/Meta
    ux_3: 
      c: 
        el: 1
        s: "A.I.ux_3 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $sc = C.sc;\n    my $ux = C.sc.ux;\n    my $em = C.c.em;\n    my $J = G.oin;\n    my $M = ['','',{W=>J.id},{z=>em.lines}];\n    em.lines = [sjson($M)];\n    C.sc.Wc = 1;\n    n GW\n    # ^ router, W with an .e v\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em 3
        dige: ff8f2dae6153
        gk: ux
        gkiss: s
        gro: Meta
        nk: sc
        nov: 1
        nv: scux
        rg: em
        v: scux
      t: ux_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Meta/Meta
oJ: 
  "0.344": 
    J_344: 
      c: 
        el: 1
        s: "A.I.J_344 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    # here before we could be interrupting\n    my $isJ = sub { my $J = shift; ref $J eq 'HASH' && J.bb };\n    if (A.J ne $J) {\n        # what we are holding out as .e and .s helps it leave\n        A.ztime = 6 if exists C.c.e;\n        sayre \"e zught of A.J.name  holds  J.name  \".ki C.c if C.c.e;\n        return;\n    }\n    unless (exists C.c.e || $isJ->(C.c.s)) { # subscribe maintain there\n        say \"threesorbtion: A.J.name to J.name\"\n            .\" is not holding e or sJ\" if A.V&V;\n        if (J.ev.amb) {\n            my $ar = I.d&ar;\n            Rw J.ev.amb + $J;\n        }\n        # absorb self Cing\n        T.not = 1;\n        # above will oscusifetc\n        return;\n    }\n    my $E = C.c.e;\n    # S could be a C if we are already inflecting panopsi\n    saybl \"In s C.t: E.t     \".ki(E.sc) if A.V&E;\n    sayre \" unable to count self ?\" if C.c.s eq $J;\n    die \"thoughts of a thous\" if A.J ne $J;\n    if (!exists C.c.e) {\n        # be s=J suctio later, ev on at protocol for incompleteness\n        unless (C.c.IsOn) {\n            say \"Comebacking J.name with C.t...\" if A.V&V;\n            Rw wayt $J $C $d=0.01 $p=jive;\n            return T.not = 1;\n        }\n    }\n    # no J being tricks for handulation, event energy, unless T.oke\n    A.Iso.th = 1;\n    delete A.Iso.oJ;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: oJ 344
        dige: 9d9b54b635ad
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_344
      "y": 
        cv: '0.344'
        cvt: 0.344	C.t
        p: qq/threes/threes
th: 
  "0.4": 
    J_4: 
      c: 
        el: 1
        s: "A.I.J_4 = sub {\n    my ($A,$C,$G,$T,$s,@Me) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $J = C.c.J;\n    my $ar = I.d&ar;\n    C.c.e ?\n        Rw threve + $J\n    :\n        Rw thank + $J;\n    if (T.oke) {\n        die \"thoughts of a thous\" if A.J ne $J;\n        delete A.Iso.th;\n        A.Iso.oJ = 1;\n        A.ztime = 6;\n        return sayyl \"Tanking into J.name\";\n    }\n    T.not = 1;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: th 4
        dige: 1db12d55949e
        gk: J
        gro: threes
        nk: c
        v: cJ
      t: J_4
      "y": 
        cv: '0.4'
        cvt: 0.4	C.t
        p: qq/threes/threes
