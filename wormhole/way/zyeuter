# c z is Croute of energy from event listener
# c us is decoded event hash from s, is trust
my $u = E.c.us;
# send on with $C, next closeline shall re idi, maybe redime asapish
# te .e modalism focuses on how to recursion
# the line/pipe compresses as it substrates certainly
# wants can do as J 8, fishing/finishing zom
# could fork & do asap but rezoom results sluggishly
# for an oozey process that writes small high quality about etc.
my $oth;
if (ref u.ids eq 'ARRAY') {
    my $res = sub {
        my $id = shift;
        # idyl || G.Wh
        G.Wh->{$id} || G.W->{$id};
    };
    # v should maybe just C pipeline ($z)
    u.idi ||= 0;
    my $i = 0;
    for my $id (@{u.ids}) {
        my $oJ = $res->($id);
        my $ta;
        if ($i == 0) {
            $oJ || die "alien space going $id";
            $ta = "Got this G";
        }
        elsif ($oJ) {
            $ta = "Would in";
        }
        if ($oJ && u.idi == $i) {
            u.idi = $i+1;
            $oth = $oJ;
            $ta .= " ~Routo $i";
        }
        my $name = $oJ ? oJ.name : "UNKNOWN";
        sayyl " ^ $id: $name    $ta" if A.V&V;
        last if $oth;
        $i++;
    }
    u.idi = $i+1;
}
elsif (ref u.p eq 'ARRAY') {
    my $res = sub {
        my $t = shift;
        G.M->{$t}
    };
    # v should maybe just C pipeline ($z)
    u.p_i ||= 0;
    my $i = 0;
    for my $t (@{u.p}) {
        my ($t) = @$t;
        my $oJ = $res->($t);
        my $ta;
        if ($i == 0) {
            $oJ || die "alien space going $t: ".wdump 2,G.M;
            $ta = "Got this G";
        }
        elsif ($oJ) {
            $ta = "Would in";
        }
        if ($oJ && u.p_i == $i) {
            u.p_i = $i+1;
            $oth = $oJ;
            $ta .= " ~Routo $i";
        }
        my $name = $oJ ? oJ.name : "UNKNOWN";
        sayyl " ^ $t: $name    $ta";# if A.V&V;
        last if $oth;
        $i++;
    }
    u.p_i = $i+1;
}
else {
    die "Quackvent: ".wdump $u;
}
$oth || die "no others ".ki $u;
sayyl "Routing J.name: C.t   ---> oth.name";
my $oJ = $J;
if (my $J = $oth) {
    # e stackin, very end has anoth stackin that we travel & do
    n J.C.t,$C,$oJ
}
T.pos = 0;
