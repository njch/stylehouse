u allvse
n '','','%of:J'

# use less -
n J =>632,<<''
    #return 1 unless exists C.sc.pi;
    .
    map { # telephone winch, propaganda (top-er levels receiving stuff)
         J.A->{$_} = J.Jiter.A->{$_}
         if J.Jiter && J.Jiter.A->{$_};
    } qw'ljm ljmo';
    .
    A.time = sub {
        my($JJ,$q) = @_;
        $J eq $JJ || die "wtfJure  J.name   vs JJ.name";
        # wanna A.t&T,2,0 us to difference streams
        # they could be xot maps or code to run
        # then all over things 
        .
        if ($q == 2) {
            my $sc = Rw Jamroot $J $C:J.C $y:J.oy if J.oy.at;
            .
            A.ico = I.d&pha,$J,'ico';
            A.ico.qui = 1;
            I.d&as,A.ico,A.coi;
            my $wtf = I.d&exactl,A.ico;
            .
            if (wtf.last && !wtf.same) {
                my $uf = join "\n", map{"$_: ".wdump(1,$wtf->{$_})}
                    grep {keys %{$wtf->{$_}}} qw'new diff gone';
                saybl "T.alk  2222  $uf";
            }
            .
            my $iM = 1 if sc.osci && J.mo.J.act;
            my $stick = !J.mo.J.act && !$iM && # travel part
                Rw eighthnot $J;
            if (!$stick) { # am sticking
                my ($o,$O) = (J.oy,J.Oy);
                for (grep{$o->{$_} ne $O->{$_}} 
                    grep{!ref $o->{$_}} keys %$o) {
                    $stick = 1; # unless y.? nonref changed, or wider spacer
                    saybl "J.name unstuck due to ychange: $_:"
                        ." $o->{$_} ne $O->{$_}";
                }
            }
            # rhythm^
            if ($stick) {
                A.ico.wtf.same = 0;
            }
            elsif (wtf.same) {
                T.iM = $iM if $iM;
                return 0;
            }
            .
            # for the lift, osc should Jiter ne A.J and pd it
            J.A.ljm = [];
            J.A.ljmo = "fr  J.name";
            return 1;
        }
        .
        warn "T.alk other $q";
        if ($q == 8) {
            # until J.most coord attention evaporates
            # as in pulling on a list
        }
        A.ztime >= $q;
    };

# if early exact light, no A.ico if not to (to)... scIfy thing (sees ACGT)
# first the superstilled
# anything T_D can arrange through time...
# wants to join G subtly vis T and so....
# should be no M in the first bit
# it is just pinpricks of consciousness keeping it alive, like mtime
# be nicer to do with an I that can T out of this whole change res patch
n J =>672,<<''
    return unless A.ico && A.ico.wtf.same;
    my $cut = @{A.ico.ord};
    my @cc = @{A.coi.ord};
    if (@cc > $cut) {
        warn"J.name entered stuff after 2!".wdump [@cc, 
        '                 =============', @{A.ico.ord}];
    }
    I.d&bandon,A.coi;
    if (my $ljm = J.A.ljm) {
        for my $s (@$ljm) {
            s.noR=1;
            I.d&jamsc,$s;
        }
    }
    sayre "SKIP T.alk";# if J.V || J.most.J.V;
    T.whack = 1; # exit A.t&J
    T.same = 1; # exit Mo, T.not but not, kind of unlet ztime6->7
