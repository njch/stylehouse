u allacgts

n d =>'',<<''
    die "USING I->d !".wdump 2, [$s,@Me];

n AN =>'',<<''
    $C = {};
    C.c->{$_} = shift @Me for qw'J N M';
    ref C.c.N eq 'ARRAY' || die "Not array CcN";
    my $t = C.c.N->[0];
    C.c.N = [C.c.N] if defined $t && !ref $t; # C[] -> N[C[]]
    ref C.c.M || delete C.c.M;
    G&A,$s

n A =>''=><<''
    ($A,my$up) = ({},$A);
    A.G = $G;
    A.up = $up;
    A.mo = $A;
    A.am = $s || die "unsame?";
    .
    A.C = $C;
    A.N = [@{C.c.N||[$C]}];
    A.M = [];
    A.J = C.c.J if C.c.J;
    A.J || die "NOJ";
    A.talk = (A.J.le&&"(A.J.le.name)").A.J.name."-".A.am;
    .
    $T = A.T = {};
    $G::KA->{"$A"} = $A;
    A.fl = C.c.fl || {};
    {
    my $I = A.I = {};
    %$I = (%$I,%{G.I});
    my $II = Rw collaspII $A;
    I.Ii = II.Ii;
    # split from R, dispatches of patches as I.$k = CODE
    # base exuder of self if no Ii resol
    I.Ii = II.Ii;
    # throw in from R exact Ii, bits of Ii to I before t gets it
    if (my $re = delete G.drop.recycling->{A.J.id}->{A.am}) {
        if (re.Ii eq I.Ii) {
            %$I = (%$I,%$re);
            A.cv = 0.1;
        }
        else {
            #sayre "Recycloped:  Diff I.Ii  <--  re.Ii";
        }
    }
    I.d&An;
    A.t&1;
    A.t&11111 || warn "NO 1";
    }
    ($A,$C,$G,$T)

n recycle =>''=>{s=><<''}
    return if I.recyttl++ > 38;
    G.drop.recycling->{A.J.id}->{A.am} = $I;

n Act =>'',<<''
    my $up = $s;
    $s = shift @{A.N};
    if (ref $s eq 'HASH' && s.J && s.mo && s.talk) {
        $A = $s;
        A.mo eq $up || die "A.talk re A mo A.mo.talk notfrom up.talk";
        $C = A.C||die"travcno A.talk";
        keys %$C == 4 || die "A.talk carries wei ".wdump 3, $A;
        $T = A.T ||= {};
        saybl "Resume has TNOT: A.talk to A.cv   with C.t" if delete T.not;
    }
    else {
        $A = {%$up};
        A.mo.ont = $A;
        A.s = $s;
        $C = A.C = {};
        $T = A.T = {};
    }
    T.oM = [];
    G&An;
    if (A.cv < 0.2) {
        A.t&2;
        return (undef,undef,undef,{isnot=>1}) if T.isnot;
        ($C,$T) = (A.C,A.T);
        G&An;
    }
    ($A,A.C,$G,A.T)

n An =>'',<<''
    A.I || die "GimeI";
    A.note = {}; # pinging csc
    A.c = sub { G&c,@_; };
    A.e = sub { G&e,@_; };
    A.us = sub { G&us,@_; };
    A.t = sub { G&t,@_; };
    A.V = sub { A.J.VV && A.J.VV->{$_[0]} || A.J.V };
    $A



#c veNtlike      à¶¬
# make pool, synth space, want arches
# fork & rejoin to exciting place
# the valley, what it means to be here in here YIN
# todo undef $s as repl, J ventlike
    #  $J, [in], [out]
# @M = $s + @Me
# Mn(.+) is n $J [$1] $M

n In =>'',<<''
    ($A,$C,$G,$T) = G&AN,'In',$s,@Me;
    G&loop;

n Mo =>'',<<''
    ($A,$C,$G,$T) = G&AN,'Mo',$s,@Me;
    G&loop;

n Sev =>'',<<''
    $Me[0] ||= [Elvis=>''=>{J=>$s,Y=>'Pre',V=>'Duv'}];
    $Me[1] ||= [];
    ($A,$C,$G,$T) = G&AN,'Sev',$s,@Me;
    A.I.scIfs || die "NO scIfs: A.J.name";
    G&loop;

n loop =>'',<<''
    my $i;
    @{A.N}||die"nonois A.talk ".wdump(3, $C).wdump 2,$A;
    while (@{A.N}) { #
        $i++ > 10000 && die "Huge A.talk";
        my ($A,$C,$G,$T) = G&Act,$A;
        next if delete T.isnot; # zless
        for (1) {
            T.not&&next;
            A.t&6;
            T.not&&next;
            G&flywheels;
            T.not&&next;
            A.t&78;
            T.not&&next;
        }
        continue {
            G&z
        }
    }
    A.cv = 0.78;
    A.t&8;
    G&recycle;
    (A.nj) = values %{A.Js} if A.Js && keys %{A.Js} == 1;
    A.bangdesk.main->() if A.bangdesk.main;
    if (C.c.M) {
        @{C.c.M} = () if C.c.M eq C.c.N;
        my @un = uniq @{A.M};
        die "ManyofsameM: ".wdump 3, A.M if @{A.M} > @un;
        push @{C.c.M}, @{A.M};
        $A
    }
    elsif (C.c.J && A.am eq 'In') {
        G&Mo,C.c.J,A.M,C.c.M||[] if @{A.M};
    }
    else {
        die "noJMout A.am";
    }
