u allacgts
away: %com:#c
    # lines up .c oscs;
    # make my $sc st ii: %sc ii s:i lk=usto
    my $Me = shift @Me;
    s.om || die wdump 3,["No om: ",$s];
    # steal an I
    s.om.II = s.om.J.A.II || die "NojAII ".ki s.om;
    # s.R.II spiral + cv index
    my $i = G&st,$s,II=>{s=>s.om,in=>'K,cv,t',to=>'cv,K,t'};
    my $ii = G&st,$s,ii=>{s=>$i,lk=>'usto'};
    my $sc = ii.c.R.sc;

    # ties itselves in knots to avoid foaming
    # interest in dispatching to A where m not us
    # that this C is kinda lying around clues and the seed itself
    # s.c.ii.c.R.sc is junk iterator

    s.c.m ||= 1 if s.m && s.m eq $s;
    s.c.mo ||= 1 if s.mo && s.mo eq $s;

    # figure for other al loop, cv wide
    # is a travel
    if (s.c.m) {
        _.I = $I for values %{s.al};

        my ($lo) = s.c.alov || do {
            reverse
            map { G&st,$s,alov=>{Ant=>$_} }
            map { s.al->{$_} }
                @{s.allk};
        };
        my $low = lo.sc.sl->[0];
        my $o = lo.sc.tv->{$low} || die "no tv $low";
        my $wan;
        for (@{s.allk}) {
            $wan = $o->{$_} || next;
            last;
        }
        $wan || die "no $low";
        #sayre "sm  s.t going to wan.t  was  @{lo.sc.sl}[0..4]";

        if ($wan) {
            undef $wan if $wan eq $s;
        }
        if ($wan) {
            sayyl "s.t s.cv - s.ov ! want wan.t wan.cv - wan.ov";
            G&mode,$wan,$_ for "from s.t s.cv s.ov to wan.t $low";
            return 0;
        }
    }


    if (s.m && s.m ne $s) {
        # nonm wanders back when other alov is lower
        # remember to-fro
        my $lo = s.m.c.alov || die;
        my $low = lo.sc.sl->[0];
        my $tv = lo.sc.tv->{$low};
        if (s.ov > $low && $tv->{s.t} ne $s) {
            #say "mreturn s.t s.talk at s.cv s.ov  vs $low  "
            #    .join" ", sort keys %{$tv};
            return 1;
        }
        #say "s.t s.talk \t\t  s.ov > $low" if s.ov > $low;
        #return 1 if A.ov != 
    }

    # sc is ii order & state by lk holds it, adjusted to next > s.cv all the time
    # A.cv sync cv index lk
    # things in 8 want to attract corus - pond density into it, wait for levels, this space out
    # A things can project above 0.9 onto the through-microfilm bunch of stuff that's you
    # distributed computation
    # once in its a huge bundle of dont fall out (mind) 
    my $i = sc.it || 0;
    if (sc.lk->[$i] ne s.cv) {
        $i++ while exists sc.lk->[$i+1] && sc.lk->[$i+1] < s.cv;
        $i-- while $i > 0 && sc.lk->[$i] > s.cv;
    }
    if (sc.lk->[$i] <= s.cv) {
        $i++;
    }
    my ($ta) = s.cv =~ /^0?(.+)$/;
    if (!exists sc.lk->[$i]) {
        sayyl "Done $i  - s.t $ta s.ov";
        return 1;
    }
    sc.it = $i;

    s.c.osc = $sc; # unlk.$ov = $o
    s.c.ov = sc.lk->[$i];
    s.c.aim ||= {map{$_=>1}I=>s.t};

    # stackmess
    $G::KA->{"$s"} = $s;
    @$Me = ("To $ta s.c.ov");
    # somewhere (C) a by yU folength N inputty (Teo)
    0

thro: %com:#c
    return sayre "s.t s.talk  s.cv - s.ov  no re s.c.ov"
        if s.mo ne $s && s.ov > s.c.ov;
    if (!s.mo && s.N && s.cv >= 0.1) {
        s.c.mo = 2; # back to 1 for N repercolate
        # An/actomise travel relateds: person timedigits* 'N'
        # N is like yU or more a u or a way, isle of Pile
        # then refs to work from in that, N <> grabs source refs C.y.T, fly itself
        my @C = G&Ze,$s,1,N=>s.N;
        _.y.A.c.n = 1 for @C;
    }

    #saybl "Thro s.t s.cv-s.ov    - s.c.ov    s.talk  ";
    T.conty++ > 840 && sayre("CONTYREX") && exit;

    if (s.c.mo == 2) {
        # switch to children forever
        # give osc/ov
        # many persons throat mAny persons per cv
        # for moov
        for my $n (@{s.c.N.sc.N||die"No NscN"}) {
            next if n.ov > s.c.ov;
            # next if s.T.e->{_.C} ...
            # pass ring
            n.c->{$_} = s.c->{$_} for grep {exists s.c->{$_}} qw'aim osc ov o';
            G&thro,$n,"n.t~s.c.o";
        }
    }
    else {
        # Personalities (of/K/code) wind of synth noise stick for sort
        my $sc = s.c.osc||die"nonoscthro";
        my $ov = s.c.ov||die"noovthro";
        my $o = s.c.o = sc.unlk->{$ov}||die"notlk$ov";
        # comp how if
        my $if = 1;

        say "s.t s.cv s.ov ov $ov hide?" if $ov <= s.cv;
        undef $if if s.c.aim && !grep { s.c.aim->{$_} } keys %$o;
        if ($if) {
            # noise is the ornre
            # it contributes flips
            # that feeling in your fins
            my $C = s.C ||= {};
            my $T = s.T ||= {};
            s.c.x = {};

            G&how,$s,$o;

            G&exo,$s,s.c.x;

            T.not && die "cv 0.9 and z, oseve...";
        }
        s.cv = s.c.ov;
        my $i = sc.it + 1;
        s.ov = sc.lk->[$i] || s.cv;
        my $skip;
        while (s.c.aim) {
            s.ov = sc.lk->[$i] || last;
            last if grep { s.c.aim->{$_} } keys %{sc.unlk->{s.ov}};
            s.c.ovwi ||= s.ov; # check after
            $i++;
            $skip++;
        }
        #sayyl "Wound s.t $skip   s.c.ovwi -> s.ov \t\t s.talk" if s.c.ovwi;
        delete s.c.ovwi;
        s.ov = s.cv if s.cv > s.ov;
    }
    if (s.c.n) {
        G&st,s.mo,moov=>{Ant=>$s};
    }
    if (s.c.mo) {
        # s.ov = lowest ^
        my $low = s.c.moov.sc.sl->[0];
        $low || die "s.t mo no low $low";
        s.cv = s.ov;
        s.ov = $low;
        G&st,s.m,alov=>{Ant=>$s};
        #say "mo s.t   s.cv -> $low o";
    }

    # returns what to say to away
    ("YTe yep s.cv s.ov");

how: %com:#c D > C how of things if, makes selections & compilings
    for my $o (@Me) {
        for my $k (keys %$o) {
            my $tD = $o->{$k};
            s.c.aim && !s.c.aim->{$k} && next;
            for my $t (keys %$tD) {
                my $D = $tD->{$t};
                # head match
                if (D.sc.nk && !D.sc.def) {
                    !exists $C->{D.sc.nk} && next;
                    D.sc.gk && !exists $C->{D.sc.nk}->{D.sc.gk} && next;
                }
                my @is = (ref D.y ? D.y.cv : D.y) < 0.2 ? s.s : s.C.c.s;
                if (D.sc.t) {
                    my $sc = D.sc;
                    ref sc.ip eq 'HASH' || die "Dsct ip not: ".ki$D;
                    return unless G&ip,\$sc,$C
                }
                if (D.sc.Ifs) {
                    die "A impli";
                    @is = G&scIfs,D.sc.Ifs;
                }
                !@is && next;
                # artists get drunk with power and fall of piers
                # usu. one receiver (Ci) and the rest scheme
                # may up Iso personalities as sublingoes to decompress inpatterns.
                if (D.sc.acgt) {
                    # acgt lump normal as microfilm .001
                    # film replaces if you shave A.I
                    # which should Rustle up/m local code
                    # and float random code, manifolds of effects
                    # able to present ends to each other
                    # soft-here
                    # could do lots of I swapping
                    my $dont = 1 if exists s.I->{D.t};
                    $dont = 0 if $dont && s.I->{D.t."_dige"} ne D.sc.dige;

                    unless ($dont) {
                        if (!ref D.y) {
                            sayre "D.t is .y = D.y   at s.c.ov";
                            D.y = {cv=>D.y};
                        }
                        s.I->{D.t} = Rw D.t $A $C $G $T $__D:D;
                        s.I->{D.t.'_dige'} = D.sc.dige;
                        #sayyl "Compile D.t   for C.t  D.y.cv ";# if D.y.cv != 0.1;
                    }
                }
                s.I->{D.t."_D"} = $D;
                # this ind is all flywheel
                # it's a kind of unity that wants to be a block of code like this
                # most tiny ticks
                # and c
                s.c.x->{$k}->{$t} = \@is if D.sc.act;
            }
        }
    }

exo: %com:#c
    # adapt to much  mergey # extendo  rubble # do stuff # in fractions
    # T personality slickers, T.68 x ut , 
    # all produces a slope for how much time you've got
    # outwave T: schools of many fish (cv=ov silentnot upcv if !@is)
    for my $x (@Me) {
        for my $k (keys %$x) { # cv's K/t
            my $tD = $x->{$k};
            s.c.aim && !s.c.aim->{$k} && next;
            for my $t (keys %$tD) {
                my $Ds = $tD->{$t};
                my $D = s.c.o->{$k}->{$t} || die "Nohead $k $t";
                # head match
                my $A = $s;
                my $C = A.C;
                my $T = A.T;
                for my $s (@$Ds) {
                    D.sc.acgt eq 's'||die "nonacgts".wdump $D;
                    exists A.I->{D.t}||die "acgtI D.t not up".wdump 3, [ $A, $D ];

                    T.D = $D;
                    G&D.t,$s;

                    G&Tut if T.ut;

                    if (T.Z) {
                        die "A.t 's D.y.cv~D.t used TZ for C.y.cv~C.t ".wdump 3, T.Z;
                    }
                    if (T.oM) {
                        #say "A.t 's D.y.cv~D.t used ToM for C.y.cv~C.t ".wdump 3, T.oM;
                        push @{A.mo.M||=[]}, @{T.oM};
                    }
                    last if T.not || T.whack;
                }
                delete T.ut;
                return if delete T.whack || T.not; # close & fine slow mode
            }
        }
    }
