u allovse
n '','','%of:Sev'

# without being a match prepare the Vacuumosd iv/ov
n Vsup =>434=><<'',{Td=>'V/*/*'}
    d.iv = lv.do->{$gk};
    d.ov = vl.do->{$gk};
    d.ov && d.ov.i && (d.ov.i eq $o || warn "no ovi ogk  d.ov.i eq $o");
    T.noTd = 1;

n Vnew =>4341=><<'',{Td=>'V/*/new',Tdarge=>'iv,ov'}
    # may like to grab the element before it
    # like a curve continuing
    $iv || sayre("News cap no iv: ".wdump $s) && return;
    lv.od.new->{$gk} = $iv;

n Vgone =>4342=><<'',{Td=>'V/*/gone',Tdarge=>'iv,ov'}
    if (!ov.rmnsc) {
        #
        lv.op.V->{$gk} = 'oio';
        return sayre "no rm: A.J.name => (C.t C.y.cv) C.sc.J.name";
        #
        #    .wdump 3, [$at,$ta,"Cfor $gk pmtp", $vl,'','',$lv,"ESS:", $s];
    }
    !$iv || die "gone had iv";
    # ^ sc plumb its destruction
    # can void if our c reframes by implicitly clearing
    lv.od.go->{$gk} = $ov;

n Vdiff =>4343=><<'',{Td=>'V/*/diff',Tdarge=>'iv,ov'}
    if (iv.c eq ov.c) {
        iv.sc eq ov.sc && do {
            sayre "SAME FLUC SC $gk";
            die "same c fluc sc $gk";
        };
        my $in = @{iv.sc};
        my $out = @{ov.sc};
        if (@{iv.sc} > @{ov.sc}) {
            saybl "$talk GROWS" if J.V > 2;
            lv.od.gr->{$gk} = $iv;
        }
        else {
            warn "WTFF ".wdump 2,[$iv,$ov];
        }
    }
    else {
        saybl "$talk  REPLACES c";
        lv.od.over->{$gk} = $iv;
    }

n Vstill =>4344=><<'',{Td=>'V/*/still',Tdarge=>'iv,ov'}
    lv.od.ll->{$gk} = $iv;
