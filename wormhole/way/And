u alljs

nw: %args:dp
    var now = Date.now();
    now /= 1000;
    return now;

# func or zet with .fut (next now) .e (func) ##$
nim:
    $K = typeof s == 'function' && 'N' || 'sN';
    a.WW ||= {};
    a.WW[K] ||= {};
    a.WW[K][C.t] = s;
    if (K == 'sN' && 0) {
        s.ee ||= &e{
            $til = s.fut - a.nw();
            if (til <= 0) {
                s.e({});
                til = s.fut - a.nw();
            }
            til <= 0 and ~sucesiv: s.t
            til <= 0 and til = 1;
            a.yl(til,s.ee);
        }
        s.ee();
    }
    ~nimbly: C.t

# W.next && W.next > Date() and return ! #
frame: %args:e
    a.WW ||= {};
    a.WW.N ||= {};
    a.WW.sN ||= {};
    a.yl(5, &{ a.huf(e) });

rnd: %args:s
    return Math.round( s * 100) / 100

huf: %args:e
    $.each(a.WW.N, &t,M{
        $.each(M, &k,s{
            s(e);
        });
    });
    if (e.count % 10 == 0) {
        $nw = a.nw();
        $gap = nw - (a.tenlast || nw);
        $.each(a.WW.sN, &t,s{
            if (nw < s.fut) {
                $of = a.rnd(s.fut - nw);
                //~wai: t, of
                return
            }
            e.now = nw;
            s.e(e);
        });
        $del = nw - a.tenlast;
        //~tenframes: a.rnd(gap), a.rnd(del)
        a.tenlast = nw;
    }
