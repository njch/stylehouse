u allacgts

# make an al loop-t, many cones together  #
# default S, which unpacks self data coils
# which loops out time to others as they spiral things in to texiter
# tex figure of each ones om, goes off and vamps them up if s.u or so
# u being c and sc opposites, an into I recipe or contents
# create a new A.mo (loop gatherer) with same A.om (I implier)

S:
    unshift @Me, $s if !ref $s;
    # s is theg, z is the m, all is mo, then Ans <-> mos
    # may be no S if S,A=>$M
    my @z = reverse G&wdef,'S',@Me;
    my $z = $z[0];
    G&st,$z,al=>{tug=>\@z,mks=>'m'};
    # s.m,mo,n share R
    G&mode,$z;
    $z

mode:
    @Me = G&thro,$s,@Me until G&away,$s,\@Me,@Me

st: %com:#c
    my ($C) = G&tC,@Me;
    # spiral from this whitehole:
    #   II=>\s.mo=>'%in:K cv t,to:cv K t'
    # redunt, selects by personality enough... make A.c.aim.? instead of A.Iso.$
    # and aim is selected as a tw heq to rebuild the sorted together personality
    # 
    C.c.re ||= 1;

    # C may already have R, hardwiring clue
    # or an R to diff this to, already in the environment or would-be
    # the other this v becomes to lk, An...
    C.c.An ||= C.c.Ant if C.c.Ant;
    # things that separate per 
    C.c.cR ||= 1 if C.c.An || C.c.lk;
    my $R = C.c.R ||= do {
        if (C.c.cR) {
            # A.c is corner on the mn stretch
            s.c->{C.t} ||= {};
        }
        else {
            s.R->{C.t} ||= {};
        }
    };
    .
    # '' looks at $s, surfs II
    # syncopate times
    C.c.in = ['',split/[ ,]/,C.c.in] if C.c.in && !ref C.c.in;
    C.c.to =    [split/[ ,]/,C.c.to] if C.c.to && !ref C.c.to;
    my $de = C.c.in->[C.c.de];
    my $re = C.c.re <= C.c.de;
    C.c.is = $de;
    C.c.is = 'C' if C.c.in && !defined $de;
    C.sc ||= {};

    # the only mechani, passback if awake
    my $off = sub {
        for ('usto', 'uz') {
            C.c->{$_} = R.c->{$_} if $_[0] && exists R.c->{$_};
            C.y.U.sc->{$_}->{C.t} = C.c->{$_} if exists C.c->{$_};
        }
    };

    return $off->(1) #&& say "A C.t s ok $de   "
        if $re && $de &&
            C.c.s eq R.c.s;

    my $tw = C.sc.tw = {};
    if (defined $de) {
        $tw->{$_} = C.c.s->{$_} for !$de ? C.t : keys %{C.c.s};
        if (C.c.is eq 'K') {
            # clues to whittledness for less intact webs
            delete tw.ooI;
            delete tw.Ii;
        }
    }

    G&stlk,$s if C.c.lk;
    G&sttug,$s if C.c.tug;
    G&stAn,$s if C.c.An;
    G&stmk,$s if C.c.mk;

    return $off->(1) #&& say "A C.t tw ok $de"
        if $re && $de &&
            G&heq,R.sc.tw,$tw;

    $tw = {} if C.c.notw;

    # bits to revamp for group or
    # then whattoselect
    for my $k (sort keys %$tw) {
        my $c = G&hup,$C;
        delete c.sc.usto;
        delete c.c.usto;
        delete c.c.uz;
        delete c.sc.uz;
        c.t = $k;
        if (C.c.is) {
            c.sc->{C.c.is} = $k if C.c.is;
            # move raft from top.sc.i into C.c.us
            # c.c.us = c.c.us->{$k} ||= {};
        }
        c.c eq C.c && die "Soplf";
        c.c.R = R.sc.th->{$k} ||= {};
        c.c.de++;
        c.c.s = $tw->{$k};
        c.y.U = $C;
        c.y.T ||= $C;
        G&st,$s,$c;
    }

    G&stdoc,$s if C.c.is eq 'C';
    G&stuz,$s if C.sc.uz;
    G&stusto,$s if C.sc.usto;

    $off->();
    C.sc.th = R.sc.th;
    if (!C.c.de && !C.c.nos) {
        # top .c ends on s.R.II.c (.us = s.II)
        # and how us must change, be pumped upwards
        $s->{C.t} = C.c.uz->{C.t};
    }
    %$R = %$C;
    $C
