my $N = [@{em.lines||die"Nop"}];
@$N = Rw humms $J $N wongui _;
@$N = sort { a.t cmp b.t }
Rw humms $J $N notnotjs _;

if (C.sc.jslines == 2) {
    sayre "HEavily JSLINES: J.name";
    my ($don,$not);
    for (@$N) {
        ++$don && next if _.sc.args;
        $not++;
        sayre " the _.t  has not been processed .... ".ki _.sc;
    }

    if ($not && !$don) {
        sayyl "In Em jscoi $don done, $not remain";
        Rw humms $J $N jscoi;
        # N will be changed...
        sayre "DedstilL: _.t   ".ki _.sc 
            for grep{!_.sc.args} @$N;
    }
    elsif (!$not && $don) {
        say "Is good jscoi";
    }
    else {
        die "Mis somewhere".wdump 3,[map{ki $_}@$N];
    }
}

my $S = Rw humms $J $N spots;
if (S.X) {
    sayyl "J.name has in em jslines X";
    my $lv = C.y.lv;
    my $vl = C.y.vl;
    if (vl.X) {
        Rw qsp $I:S.X $II:vl.X;
        #sayre "Should under at: ". wdump 3, vl.X;
    }
    lv.X = {%{S.X}};
    delete S.X->{$_} for 'ooI','Ii';
    sayyl "Alltook: ".F_delta();
}

my $l = em.lines = [];
push @$l, map{" a\.e(".sjson($_).");"} @{S.z};
push @$l, Rw JSpots $II:S.X;
C.c.os = 1 if !grep {/\S/} @{S.z};
C.sc.Wc = 1;
