u allsvse
n '','','%of:Art'
# all but intercepted sc is sc
# 

n sz =>2=><<''
    my $si = length(C.c.s);
    ($s, my $lim) = split '/',$s;
    my $di = $s/$si;
    $di = $lim if $lim && $di > $lim;
    I.d&meat,fsi=>$di;
    I.d&meat,fsi=>1 if $di > 2;
    return;

n is =>2=><<''
    my ($t,$z) = split ':', $s;
    $z ||= C.c.s;
    my $i = sum map { ord $_ } split '', $z;
    $i -= 9 until $i < 10;
    C.sc.hs = "${i}75";

n mu =>2=><<''
    if ($s eq 'g') {
        C.c.s || die "nos : ".wdump 2, $C;
        C.c.s = Rw mugwu $d:C.c.s;
        C.sc.hs ||= "576";
    }
    else {
        die "how mu $s? C.c.s";
    }

n nspc =>2=><<''
    my $J = C.sc.J;
    my $squ = C.sc.yspc || J.C.y.spc;
    my $ratio = $squ / $s;
    my $sl = sprintf '%.2f', $ratio;
    my $cl = 0.02;
    my $max = C.sc.nspc_max || 1;
    $sl = $max if $sl > $max;
    if ($sl > 1+$cl || $sl < 1-$cl) {
        saybl "Abo nspc $sl";
        C.sc.scale = $sl;
    }

n enid =>59=><<''
    at.id = $s;
    at.c.nobody = 1; 
    at.t = j.l;
    #say "enid j.l ::::  C.sc.at.sc.ab   ".k2 $at;
    at.sc.ab = '100';
    .
    if (my $J = C.sc.J) {
        die "DIffnoiw";
        my $aj = C.sc.J.oJ.A.W->[-1];
        my $l = aj.c->[0];
        if (!aj.sent && ref $l) {
            my ($t,$y,$c,$sc) = @$l;
            if ($t eq j.l) {
                die if c.id ne at.id;
                %$sc = (%$sc,%{at.sc});
                at._aux = 1;
            }
        }
    }

n css =>555=><<''
    $s = join ';', map{"$_:$s->{$_}"} sort keys %$s if ref $s eq 'HASH';
    for my $set (split ';', $s) {
        my ($k,$s) = split ':', $set;
        at.sc.css->{$k} = $s;
    }

n src =>556=><<''
    at.c.src = $s;

# long range stuff reporting, use A.sv the toplevel intergatr
# like sort by A.sv length and number
# also putting a particular object behind an id... blessing
# weird sortes is the ways
# even urls are like this, we making up a short url or so
# keeping bits of short urls percolating up from where
# wants to find C, which may unify to ...
n idly =>58=><<''
    my $id = mkuid();
    my $qual = '';
    at.c.id && sayre "Blessing C.t with $qual ($id -> at.c.id)";
    at.c.id = $id;
    #J.idyl->($J, $id, $j);
    sayre "idly C.t  J.name J.r    ".ki C.sc;

n lp =>5=><<''
    at.c.ht = 1;

n ishtml =>5=><<''
    at.c.ht = 1;

n tt =>5=><<''
    at.c.title = $s;

n canvas =>5=><<''
    at.c.canvas = $s;

n type =>51=><<''
    at.c.type = $s;
    at.c.ht = 1;
    sayre "at.t at.y cannot have a title: $_" for grep{defined} delete at.c.title;

n tag =>5=><<''
    at.c.tag = $s;

n at =>5=><<''
    die;
    $s =~ /^(?:(\S+):)?(\S+)$/;
    $at->{$1} = $2;

n atrp =>5=><<''
    die "heloarp";
    at.rp = $s;

n path =>5=><<''
    # to compuile J.ys

n origin =>5=><<''
    # better than W via c pi and W

n pwar =>5=><<''
    # to suggest

n Joint =>5=><<''
    # Something
