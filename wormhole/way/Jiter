sayyl "Jiterating ! C.t";
# not =>$E properly, C is first C,c.e $E is from before $E
my @Js = A.e&_hJ;
my ($tW,$tl) = @Js[0,-1];
tW.mo.J eq $tW || die "not most 1: ".ki $tW;
my $ing = tl.C;
my $ip = {map{$_=>ing.sc->{$_}}@{J.uzk}};
ip.mean && ip.onto || die " notmeanonto compre ".ki $ing;
ip.pi = 'edr';
my ($gate,$way) = ip.onto =~ /^(.+)\/(.+?)$/;
$gate && $way || die "notipono: ip.onto";

my $duvi = sub {
    my $tl = shift;
    my $uv = tl.El.Duv || die "HJiter not Duv tl.name";
    map{uv.tv->{$_}}@{uv.os}
};
my $gre = sub {
    grep { I.d&ip,$ip,_.sc } $duvi->(shift);
};
my @bun = $gre->($tW);
push @bun, $gre->($tl);
my @s = uniq map{_.c.s} @bun;
saybl "Make Joint stand: ".ki($ip).": ".wdump 3, \@s;
my $r = {};
for my $leng (@s) {
    my @l = split ';', $leng;
    @l > 1 || die "Leng not long enough: @l".wdump \@l;
    r.ops->{$l[0]}++;
    while (@l > 1) {
        my $o = shift @l;
        my $n = shift @l;
        my $f = ip.onto."/J/$o/$n";
        r.ave->{$f}++;
        unshift @l, $n;
    }
}
my $c = {isle=>$way};
sayyl "You ordered: ip.onto: $way (c.isle) ".wdump $r;
`echo 1 > $_` for keys %{r.ave};
# jobinate (J1) or fork or acquire fork or something...
Rw waited $J:_ $c
for keys %{r.ops};
T.pos = 0;
saybl "All done";
