my @C;
if (ar.src) {
    for (@{ar.src}) {
        my ($t,$s) = @$_;
        push @C, {t=>$t,c=>{s=>$s}};
    }
}
elsif (ar.m) {
    my @N = @{ar.m};
    while (@N) {
        my $m = shift @N;
        my $r = G.pwin->($m, $A);
        if (ref $r eq 'ARRAY') {
            unshift @N, @$r;
        }
        elsif ($m eq 'J/A/III' && $r) {
            die "the one hash that isn't code is: ".wdump 3, [$m, $r]
                unless ref $r eq 'HASH' &&
                values %$r == grep{ref $_ eq 'ARRAY'} values %$r;
            next if !keys %$r;
            push @N, @{$r->{$_}} for sort keys %$r;
        }
        elsif (ref $r eq 'HASH') {
            push @C, {t=>$m,c=>{s=>$r}};
        }
    }
}
my $Ii = join " + ", map{"_.t:_.c.s"} @C;
$Ii eq II.Ii && return;
if (my $TI = G.TT->{$Ii}) {
    die "DifgTI " if TI.Ii ne $Ii;
    %$II = %$TI;
    $Ii eq II.Ii || die "Hiked GTT TI.Ii ne $Ii";
    return G.protV && sayyl "Hiked GTT $Ii";
}
else {
    G.TT->{$Ii} = $II;
}
II.Ii = $Ii;
# we dive into always, should form tidy tree with D chaos at tips
# the screening space saver, the no way out-er
my $N = [@C];
my $s = {};
my $say;
(($say = 
Rw spIII $A $II $N K/cv/t $s
)=~ /stabilised/ #&& say("Stabilised A.talk ...")
&& 0
|| A.J.V > 1 || A.J.VV.t) &&
saybl Rw TreeD $s $scby=gro;

say "Spidered A.talk: ".F_delta if A.J.V;
$say
