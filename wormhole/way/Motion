u allacgts
# 6* thing/rule management
# SNat exudes over the nk'ing ish things which .wh=fly(wheel)
# iterates grouped 6cv via T.Z, all N at a time
# (make no hop if N==1 or A.Subtle.$K)
# also have pha cone stack available for offphasing
# if our intent it loose enough

# encap A/spiral spinner for the G.h, from the  to ar A.I.d&Others
# finds relevant A.I, returning ($A,$I)
# ingoing niles, can take ACGT or just J, like you were holding the self
#    T compine with ^ ? whatever
#    tie T, T&M for temp A.c like grappler, ack from n that it did
#    ie argument imposer, passes manual bits eg Magnets
#    and some are required reading for the call to succeed
# T is the only kind of dataspace that could store its q right there
# see also the II's ooI branch rememberer, Yod, etc
n NM =>''=><<'','%acgt:J'
    my $M = [];
    my $N = [@Me];
    Mn($N);
    return $M;

# A and A.mo dye drops, M tractios, T tooly, see also flywheel
# wants to be a six alwayser... ,{code=>'I 6',act=>'all'} # II.All? II.Fly?
# its I.d&nded and holds things to code, $v a spiral it's filling up
# $v could be mounted... aj8 mysteries
        #   ^ bus to ride
n flywheels =>'',<<''
    for my $k (sort keys %{A.fl||return}) {
        my $v = A.fl->{$k};
        $k = $2 if $k =~ /^(\d+) (.+)$/;
        Rw ym/$k $I $J:A.J $A $C $v $G $T;
    }

n sano =>''=><<''
    A.C = $C;
    A.T = $T;
    return$A

# outgoing magnatrain (per Act)
n CoM =>''=>{s=><<''},{code=>'I 71',act=>1}
    push @{T.oM}, $C unless T.Z;

# on exit, snakes
n z =>''=>{s=><<''}
    I.d&oseverato;
    push @{A.M}, @{T.oM};
    delete T.not;
    1

n oseverato =>''=><<''
    A.T.d = T.d if T.d;
    if (my $z = delete T.Z) {
        I.d&Tz,$z;
    }
    !@{A.mo.N} && A.mo.re &&
        I.d&more,A.mo.re;
    if (my $y = delete T.y) {
        I.d&mar,T.y;
    }

# carry A through time
# T.Z always for lowest, tease out the next times off T.Z.$nexttime = $incv|$N
# is N or incv, put things off til all else lo
n Tz =>'',<<''
    my ($lo) = sort keys %$s;
    my $v = $s->{$lo};
    T.incv = $v if $v ne '1';
    $v = [ I.d&sano , undef ];
    push @{A.mo.re->{$lo}||=[]}, $v;
    @{T.oM} = ();

# TODO sort by y.i ) s = c
n more =>'',<<''
    my ($lo) = sort keys %$s;
    if ($lo) {
        my $ay = delete $s->{$lo};
        my @N = map { {AZ=>{$lo=>$_}} } @$ay;
        push @{A.mo.N}, @N;
        saybl "Looping ".@N." to $lo" if A.J.V > 1;
    }

n moy =>''=>{s=><<''}
    # groups, spread the moise over A
    my $i = A.mo.y->{$s}||die"no$s";
    my $is = $i->{C.y.p}; # things in our C's pool
    {is=>$is,N=>[map{$is->{$_}}sort keys %$is]};

n ar =>''=><<''
    my $ar;
    ar.A=$A;ar.G=$G;ar.C=$C;ar.T=$T;ar.I=$I;
    $ar;
