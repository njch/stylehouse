u allvse
# heaven's above me on a street called love
n J =>344,<<'','%code:oJ'
    my $ins = sub { my $J = shift; $J ne J.mo.J ? "J.mo.J.name ' J.name" : J.name };
    if (C.c.e) {
        my $new = !J.A.first ? "(first!)":"";
        A.V&E &&
        say $ins->(A.J)."   is elvising to  ".$ins->($J)." $new\n    "
            ." C.t  ".ki(C.c)."     ".ki(C.sc);
        C.c.elv = delete C.c.e if $new;
        # do over after osc (or time2 could in middle)
        # donow, may wat
        A.Iso.th = 1;
    }
    else {
        A.J eq $J && die sayre "THreJ does Celt A.J.name   ".(C.c.e && ki C.c.e);
        #saybl $ins->(A.J)." can create -----> ".$ins->($J);
        if (J.ev.amb) {
            Rw J.ev.amb $J;
        }
    }

# fit e into 2
n J =>632114142,<<'','%code:J'
    return if exists C.sc.pi;
    A.time = sub {
        my ($JJ,$q) = @_;
        $J eq $JJ || die "wtfJure  J.name   vs JJ.name";
        my $r = 1;
        if ($q == 2) {
            A.Subtle.time = 1;
            A.t&time,3,19;
            $r = 0 if T.pos == 0; # def 1, 0 if no change
            return $r;
        }
        .
        warn "T.alk other $q";
        if ($q == 8) {
            # until J.most coord attention evaporates
            # as in pulling on a list
        }
        $r
    }


# coming to a known thing, engage wave lasso
#   vector may want to wake up itself,
#   e could time2 in, pre-osc 7 or post-osc 76
#   also the e could know if its an incoming list,
# bringing into the handler ...
n '','','%of:th'
n e =>36,<<'','%rg:J'
    $J || warn "e no J";
    # no J being tricks for handulation, event energy, unless T.oke
    delete A.Iso.oJ;
    .
    Rw hevt $J e36;
    .
    if (T.oke) {
        die "thoughts of a thous J.name" if A.J eq $J;
        delete A.Iso.th;
        A.Iso.oJ = 1;
        A.ztime = 6;
        return say "Tanking into J.name";
    }
    T.pos = 1 unless defined T.pos;
    T.pos &&
        Rw waito $J $C;

# cancels proto this (threes)
n J =>4,<<''
    return;

# communication log, join proton, usually no trace of other in the self
n e =>769,<<'','%rg:J'
    T.oke = 1; # unpin


# T.oke means the vector wants to immediately handle e itself
# or must m/osc some truth for the question, eg creating geo
# the answer is laid along the tracks
n elv =>2,<<'','%rg:J,code:time'
    C.c.e = delete C.c.elv;
    .
    Rw hevt $J elv2;
    .
    T.pos = 1 unless defined T.pos;
    # time true, complete vector, unless we cat a list


n elv =>76,<<'','%rg:J,code:oJ'
    C.c.e = delete C.c.elv;
    .
    Rw hevt $J elv76;
    .
    if (T.oke) {
        die "76 thoughtself J.name" if A.J eq $J;
        say "Tanking 76 into J.name";
        Rw waited $J;
        return;
    }
    T.pos = 1 unless defined T.pos;
    T.pos &&
        Rw waito $J $C;
