sayyl "Elis: J.name provcesses: E.sc.pi: E.t E.c.s";
# c.z from CsE does path, this gets singularity of Js
E.c.yJ ||= Rw yJTrunk $C:E;

# ne.C.t is name of re (s) aggregate pano to read
my ($mo,$ne) = @{E.c.yJ};
mo.mo.J eq $mo || die "momo no mo: mo.name";
my $om = E.c.z->[0];
$om = om.sc.J;
#
$om eq $J || die "om not on: om.name <-> J.name";

my $dub = ne.C.y.cv * 2;
my $t = $dub."\t".ne.C.t;
my $cC = om.El.Pre.tv->{$t};
$cC || return sayre "FIND MORE: ".wdump 3,[$t, om.El.Pre.tv];
my $cJ = cC.sc.J;
$cJ || die "No dubJar: om.name  and $t";
my @routes = grep {_.sc.opel} @{cJ.El.Pre.vs};

@routes || die "no routes for cJ.name";
for my $r (@routes) {
    E.c.us = {ids=>[split ',',r.t],hopel=>r.sc.opel};
    say "givesd to router: r.t  => r.sc.opel";
    n $C
}
