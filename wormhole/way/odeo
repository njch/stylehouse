u allsvse
n '','','%of:Art'

n X =>7=><<''
    lv.X = $X;
    at.sc.notX = Rw sumX $X:lv.X;

n J =>7=><<''
    return sayre "BanJ" if C.c.root;
    my $rv = lv.do.Duv || die "Noduv";
    rv.X || sayre "A.J.name  Not Xceiving C.t  (C.sc.J.name)";
    lv.X ||= rv.X;
    #lv.do->{V.name} = $rv;

# pack the inners, they get names as they leave here
# receiving end should be able to see Ii outside, as w/$isle/$W.i
# which should talk of versions of things
# so we could grab the smallest chunks of change without reading the whole top again
n root =>7=><<'','%nv:croot'
    lv.X ||= vl.X || {My=>"self"}; # disappears
    my $src = [];
    for my $k (@{C.c.V.os}) {
        my $kv = lv.do->{$k} || die "nondo $k";
        kv.X || next;
        my $D = kv.C;
        D.sc.noXup && sayyl("tent: C.t (J.at.isle)   D.sc.J.C.t (D.sc.J.at.isle)")
            && next;
        .
        if (kv.X.Ii && !C.sc.invis) { # has spII before, Ii clues versions of things
            my $N = [];
            Rw sumX $X:kv.X $N;
            my $for = D.t || die "Nofor ".ki $D;
            _.c.from = join '/', grep{defined} $for, _.c.from for @$N;
        }
        my $ib = "D.t D.y.cv kv.i";
        .
        push @$src, [$ib,kv.X];
    }
    Rw spII $A $II:lv.X $src;
    lv.X.My eq 'self' && warn "Didndt get any C.sc.isle off J.name: ".wdump C.c.V.os;

# name these
n coil =>701=><<''
    my $N = [];
    my $X = lv.X || die "no X on J.name for isl";
    my $op = {map{$_=>1} split ' ', $coil};
    sayyl "C.t: coils: ". Rw sumX $X $N;
    for my $D (grep { _.sc.tldo }@$N) {
        Rw D.sc.tldo $D $N;
    }

n '','','%of:em'
n isle =>3=><<''
    my $X = C.y.lv.X || die "no X on J.name for isl $isle";
    $X = {} if $isle eq 'top';
    Rw down $f=$isle/C.t $s:X;

# jagged seral
n jsl =>3=><<'',{cg=>'J,em'}
    $jsl = "js" if $jsl eq '1';
    $jsl eq 'js' || die "No regoc $jsl langoup";
    my $X = C.y.lv.X || die "no X on J.name for isl $jsl";
    my $N = [];
    sayyl "jsl $jsl: ". Rw sumX $X $N;
    my $S = Rw humms $J $N spots;
    my $l = em.lines = [];
    push @$l, map{" a\.e(".sjson($_).");"} @{S.z};
    push @$l, Rw JSpots $II:S.X;
    C.c.os = 1 if !grep {/\S/} @{S.z};
    C.sc.Wc = 1;
