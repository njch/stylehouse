u allacgts

n servehash =>'',<<''
      s.AZ ? I.d&AZu,s.AZ
    : s.MZ ? I.d&MZu,s.MZ
    : s.EZ ? I.d&EZu,s.EZ
    : s.WZ ? I.d&WZu,s.WZ
    : s.EC ? I.d&ECu,s.EC
    : s.Elvis ? I.d&Elvisu,s.Elvis
    : die 'hash: '.wdump($s);

# time impersonator
n AZu =>''=>{s=><<''},{l=>'Motion/oseverato'}
    die 'amany' if keys %$s > 1;
    my ($cv,$ac) = %$s;
    my ($AA,$CC) = ref $ac eq 'ARRAY' ? @$ac : ($ac,ac.C);
    $AA || $CC || die "AZ NO A or C: ".wdump 3, $s;
    $AA && $CC && die "AZ toomuch A or C: ".wdump 3, $s;
    my $cov;
    if ($AA) {
        $A = $AA;
        my $Te = A.T;
        $cov = delete Te.incv;
        A.cv = $cov || $cv;
        unshift @{A.mo.N}, $A;
        return T.whack = T.isnot = 1;
    }
    else {
        A.C = $CC;
    }
    A.cv = $cov || $cv;
    T.whack = 1;

n MZu =>''=>{s=><<''}
    my $uM = sub {
        my ($k,$v) = @_;
        if (defined $v && $v eq '0') {
            delete A.fl->{$k}
        }
        else {
            A.fl->{$k} = $v || 1;
        }
    };
    ref $s eq 'HASH' ?
        map{ $uM->($_,$s->{$_}) } keys %$s
    :   map{
            /^(.+?)(?::(.+))?$/ || die;
            $uM->($1,$2);
        } split /\s+/, $s;
    T.not = 1;

# without our humm, straight to M
# this is kind of like going through el1389, so many spires to pi on
# the calls to In want to be IId
n EZu =>''=>{s=><<''},{l=>'Motion'}
    my $Z = I.d&iZu,$s;
    warn "About EZ";
    for my $k (sort keys %$Z) {
        my $N = $Z->{$k};
        $N = [ map { [$_] } split "\n",$N ] if !ref $N;
        Rw In $M:T.oM $N;
    }
    T.not = 1;

# with our humm
n WZu =>''=>{s=><<''},{l=>'Motion'}
    my $Z = I.d&iZu,$s;
    warn "About WZ";
    for my $k (sort keys %$Z) {
        my $s = $Z->{$k};
        die wdump $s if ref $s ne 'ARRAY';
        unshift @{A.N}, @$s;
    }
    T.not = 1;

# extend C on the way in to another dome, magnetised into our M
# probably for collapsing roooves...
# dumber than sc decompresphere & playing out
# (is mailing itself further instructions, intro c, further lines)
# an In persona, joining our M
# push to dome
# that must in  A
n ECu =>''=>{s=><<''},{l=>'Motion'}
    ref $s eq 'ARRAY' || die;
    my ($N,$c) = @$s;
    $N = [{MZ=>A.fl}, {MZ=>{'3 doex'=>$c}}, @$N];
    # and In could feel our light cone
    Rw In $J:A.J $M:T.oM $N;
    # ^but instead push to A.N and A.No, the sister strand Whare Y Whare
    # and A walks through t&Y, d&Whare(6)
    # turns via n&ACGT
    # the time beams mapped... a W concat couldol
    T.not = 1;

# theses, pulling bits
n iZu =>''=>{s=><<''}
    my $way = $s =~ s/^\/// ? 'fund' : 'muck';
    my $Z = Rw $way - $p:s $dclone=1;
