u allacgts

shouldWe:
    my $tr = 1; # yes
    my $i = T.isle;
    $i && c&isle && C.t || die "Cno isle/t ".ki $C;

    i.f = 'w/'.c&isle.'/'.C.t;
    unless (i.stop) {
        i.j = 'w/'.s.c.isle.'/J/'.s.t;
        `mkdir -p i.j` if !-d i.j;
        i.j .= '/'.C.t;
        G&fmakund,$i;
    }

    if (i.j && -f i.j) {
        $tr = -s i.j ? read_file(i.j) : 0;
        say "Joint i.j weighs $tr";
    }
    if (!-f i.f) {
        $tr = 1;
        say "Joint i.j must make i.f";
    }
    $tr

# flat reiter T log, $s = .../J/parent, @Me = {src:$isle}
# C.t_src_$isle, on the parent join to the child
fmakund:
    my @l = map { join '_', s.j, $_, $s.>$_ } grep /../, keys %$s;
    s/_1$// for @l;
    push @l, s.j;
    my $l = {map{$_=>1}@l};
    for (glob "s.j*") {
        next if delete $l.>$_;
        warn "want to RM $_";
        #unlink $_;
    }
    #saybl "Info\n".ki $s;
    `touch $_` for @l;

jound:
    say "Found! s.f";
    `touch s.j` if !-f s.j;
fli:
    LoadFile(s.f);
fown:
    my $f = s.f;
    $f =~ s/^w\/// || die "CAnot down out of w/: $f";
    # drops ooI, scrubs Ii: (saves file)
    my $X = C.sc.X || die "get X ".ki$C;
    Rw down $f $s:X;
joined:
    return if s.stop;
    `cat /dev/null > s.j`;
    saybl ki $s;
