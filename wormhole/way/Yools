u allacgts

Tut:
    my $ut = T.ut;
    if (ut.matchTd) {
        my $d = s.d || die "confuse";
        d.od.s.T.q->{d.e.k} ||= $d;
        d.od.s.T.m->{d.e.k} ||= $d
            unless delete T.noTd;
    }
    else { die"utrowhat ".wdump 2, $ut }

n oleak =>'',<<'',{acgt=>'s,n'}
    length(wdump $n,$s) < length(wdump $n+1,$s);

n hup =>'',<<'','%code:Sev 1'
    my $CC = {%$s};
    $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;
    $CC;

n heq =>'',<<'',{acgt=>'o,t'}
    if (ref $o && ref $t) {
        keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o
    }
    elsif (!ref $o && !ref $t) {
        $o eq $t
    }else{0}

# pwin flexy passing tubes, to atoms
n pas =>'',<<'',{acgt=>'pin,d'}
    my $s = d.s;
    my $e = d.e;
    my @ks = $pin eq '*' ? sort keys %$s
        : exists $s->{$pin} ? $pin
        : ();
    map {
        my $dd;
        dd.e.k = $_;
        dd.s = $s->{$_};
        dd.d = d.d if d.d;
        $dd;
    } @ks

n pass =>'',<<'',{acgt=>'pin,s'}
    @$s = grep{defined} map { I.d&pas,$pin,$_ } grep{defined} @$s;

n convog =>'',<<'',{acgt=>'in,Q'}
    Q.path && Q.onpa || die "learn more";
    for my $pin (@{Q.path}) {
        for my $pTn (@{Q.onpa}) {
            I.d&pass,$pTn,$in;
        }
        I.d&pass,$pin,$in;
    }

n scIfs =>''=><<''
    my @is;
    for my $k (keys %$s) {
        my $Q = $s->{$k};
        my $tot = @{Q.path};
        my $star = grep{$_ eq '*'} @{Q.path};
        Q.weig = $tot - $star;
        .
        my $in = [{s=>{T=>$T}}];
        my $pi = 0;
        for my $pin (@{Q.path}) {
            for my $pTn (@{Q.onpa}) {
                I.d&pass,$pTn,$in;
            }
            I.d&pass,$pin,$in;
            @$in = map {
                if (_.d) { # nonroot pattern mutable (into/on/off origin s)
                    _.od ||= _.d;
                    if (my $su = _.od.s.T.q->{_.e.k}) {
                        $_ = $su;
                        # deeper knowish
                    }
                }
                _.d = $_;
                _.e.lk = Q.atar->[$pi]||die"no idea what $pi is";
                $_
            } grep{defined} @$in;
            $pi++;
            last if !@$in;
        }
        .
        for my $d (@$in) {
            # now inmost, .od leads above (without pTn inway)
            # and each d.e.lk calls it something $nk $gk and $wk
                # and avoid less specific after more specific
                # or just avoid repeats
                #   
                # shaky but index
                # the fish is shaking but on the deck
            my $arg;
            my $up = $d;
            my $last = $up;
            my $i = 0;
            while ($up) {
                $i++ > 8 && die "LAST WANDERS";
                $arg->{up.e.lk} = up.e.k;
                if (Q.caps) {
                    for my $k (grep{Q.caps->{$_}} keys %$up) {
                        $arg->{$k} ||= $up->{$k};
                    }
                }
                $last = $up;
                $up = up.od;
                if ($up eq $last) {
                    sayre "C.t (?) refers to itself as .od: ".wdump $last;
                    last;
                }
            }
            .
            arg.d = $d;
            .
            for my $k (keys %{d.s}) {
                next if $k eq 'T';
                $arg->{$k} && die "Already $k arg of ".wdump[$d,$arg];
                $arg->{$k} = d.s->{$k};
            }
            .
            my $path = "@{Q.path}";
            arg.talk = "C.t  ($k:$path) C.t C.y.cv"
                .":\t".join '/', map{$arg->{$_}} @{Q.atar};
            d.weig ||= Q.weig;
            d.path ||= $path;
            if (d.weig > Q.weig) {
                say "Later $path  Q.weig < d.weig  d.path" if A.J.V > 1;
                next;
            }
            elsif (d.path ne $path) {
                say "Moreo $path  Q.weig > d.weig  d.path" if A.J.V > 1;
                d.weig = Q.weig;
                d.path = $path;
            }
            push @is, $arg;
            T.ut.matchTd = 1;
            # Z/D wad of multiplicity
            # D args $d and arg, $nk/$ov etc things plucked
            # they must stay present to later Ds as well
            # stored T.d path subtlates
            # 6 ^
            sayre(ki($arg)) if A.J.V > 1;
        }
    }
    @is
