u allacgts
# make impon this other surface, whose A.am is
Ze:
    # al/cv,ov/isle N[]
    my $r = {};
    acum $r, !ref($_)||0, $_ for @Me;
    my ($cv,$e,$etc) = @{r.1};
    my @N = @{r.0};
    die "much spec" if $etc;
    die "$cv $e $etc   e nt abc" if $e !~ /^[a-z]$/i;

    # trade off round here for synapse of in, that tapeysplice other grasping
    my @C = G&tC,@N;

    s.mo ||= $s;
    s.mo ne $s && die "Ze is mo only s.t";

    my @M;
    for my $C (@C) {
        my $z = {%$s};
        if (C.y && C.y eq $C) {
            say "s.t eats ,c,A C.t";
            $C = G&tC,{A=>$C};
        }
        C.t = 'S1eve' if !exists C.t;
        exists C.y && ref C.y ne 'HASH' && die "NMotah".wdump 3, $C;
        C.y.A = $z;
        C.y.cv ||= 0.0001;
        z.mo = $s;
        z.y = $z;
        z.c = {};
        z.sc = {};
        z.s = $C;
        z.C = $C;
        z.talk .= s.c.chid++.": C.y.cv~C.t";
        z.T = {};
        G&st,z.mo,$e=>{An=>$z};
        G&st,z.mo,moov=>{Ant=>$z};
        push @M, $C;
    }
    # make An for all, same .I, .R
    # the $e puts in tv for channel
    @M;
Z:
    # s.m.al.$person attach/create for N
    # seek ^ and spawn Anlike A.N->A.Cs
    # returning Cs with the .y.A = A
    # so you y.U = etc
    # the bunch of As will catch it up after current tex
    #   (from cv pocket)
    # unless the Z.1.7 = C, ov queues 7 then from 1
    #   (ov = thing after A.cv, time to come back)
    # so An ov on leaving tex
    # hits Amo ovs.$ov.$A = $A, rm old ov, shift/resort [] ovsl
    # ovsl->[0] low/change, thats where to swim
    # Ans ovsl to Amo,
    # Amo.ov = ovsl->[0],
    # Amo ovsl to Am
    # Am ovsl->[0] chases an Amo, possibly itself
    # the coathanger dangles
    #    Arm oldov & close orphans in [] iter
    # Am on top looks for Aal.*ovsl->[0]
    # lateral thinking Aw for local network 
    unshift @Me, $s;
    my (@S) = grep {!ref $_} @Me;
    unshift @S, A.t if $S[0] !~ /\D/;
    my ($K,$cv,$ov) = @S;
    $cv ||= 0.1;
    my $s = A.t eq $K ? $A : G&fint,$K;
    # find A.m.al
    # create on A.m
    my (@N) = grep {ref $_} @Me;
    #

stlk: %com:#c
    my $R = C.c.R;
    if (my $i = C.c.lk) {
        C.c.nos = 1;
        my $u = C.c.s;
        C.sc.s = $u;
        C.sc.lk = u.c->{$i.'lk'};
        C.sc.unlk = u.c->{$i};
        ref C.sc.lk eq 'ARRAY' || die "no lk array".wdump 3, $C;
        ref C.sc.unlk eq 'HASH' || die "no unlk hash";
        %{C.sc} = (%{R.sc},%{C.sc}) if C.sc.lk eq R.sc.lk;
    }

# one time _.t => _ and input ordered _.t *lk onto s.*
sttug: %com:#c
    my $R = C.c.R;
    if (my $u = C.c.tug) {
        C.c.nos = 1;
        C.c.notw = 1;
        my $tw = C.sc.tw;
        R.sc.lk && die "Do C.t on s.t moren1: ".wdump 3,[$R,$C];
        my $nd;
        for (@$u) {
            my $t = _.t;
            $nd->{$t}++ && die "two same lights";
            $tw->{$t} = $_;
            push @{C.sc.lk||=[]}, $t;
            if (my $m = C.c.mks) {
                $_->{$m} = $s;
            }
        }
        $s->{C.t} = $tw; # al t=>A
        $s->{C.t.'lk'} = C.sc.lk;
    }

# grow N ordered C as an An for a.mo
# that is where we 
# also inter whaT, changey shared tapes, reel arrays 
stAn: %com:#c
    my $R = C.c.R;
    # when some splits from A.mo=A  (lowovsorts An)
    # or as al possibles also al lowcvs A.ovs 
    # R lives in mo.c.$t, c differ all A
    if (my $n = C.c.An) {
        C.c.nos = 1;
        C.c.notw = 1;
        n.y eq $n || die "An so A";

        my $id = C.c.Ant ? n.t : "$n";

        my $ov = n.ov || 0;

        my $tw = C.sc.tw = R.sc.tw || {};
        my $new = !exists $tw->{$id};
        $tw->{$id} = $n;

        my $de = C.sc.N = R.sc.N || [];
        push @$de, $n if $new;

        my $tt = C.sc.tt = R.sc.tt || {};
        my $old = $tt->{$id};
        $tt->{$id} = $ov;

        my $sl = C.sc.sl = R.sc.sl || [];
        my $tv = C.sc.tv = R.sc.tv || {};
        my $done;
        if (defined $old && $old ne $ov) {
            my $o = $tv->{$old};
            delete $o->{$id};
            if (!keys %$o) {
                my $done;
                for (0..6) {
                    $old eq $sl->[$_] || next;
                    splice @$sl, $_, 1;
                    $done = $_;
                    last;
                }
                if (!defined $done) {
                    @$sl = sort keys %$tv;
                    saybl "n.t n.cv n.ov @@ C.t sl rm Resorted to rm $old, s.t   @$sl";
                }
            }
        }
        if (!defined $old || $old ne $ov) {
            my $o = $tv->{$ov} ||= {};
            my $vnew = !keys %$o;
            $o->{$id} = $n;
            if ($vnew) {
                # must insert o
                my $i = 0;
                $i++ until !@$sl || !exists $sl->[$i] || $sl->[$i] >= $ov;
                @$sl && $sl->[$i] == $ov && die "Thought $i would new $ov ".wdump 3, $sl;
                splice @$sl, $i, 0, ($ov);
                sayre "n.t n.cv n.ov @@ C.t sl $i" if $i != 0 && $i != 1;
            }
        }
        # sc.tw.$id = sc.tv.$ov.$id = $n
        # sc.sl[0] = lowest $ov, etc
    }
stuz: %com:#c
    my $R = C.c.R;
    if (my $z = C.sc.uz) {
        if (G&heq,R.sc.uz,$z ) {
            #sayre "Same euzk C.t $de";
            C.c.uz = R.c.uz;
        }
        else {
            my $to = C.c.uz = {};
            G&supe,$to,1,$z;
        }
    }
stusto:
    my $R = C.c.R;
    if (my $u = C.sc.usto) {;
        if (G&heq,R.sc.usto,$u ) {
            #sayre "Same euk C.t $de";
            C.c.usto = R.c.usto;
            C.c.ustolk = R.c.ustolk;
        }
        else {
            my $to = C.c.usto = {};
            G&supe,$to,3,$_ for values %$u;
            C.c.ustolk = [sort keys %$to];
        }
    }
stdoc:
        if (C.c.in) {
            # %{C.c.us} = %{C.c.s}; # embrace c/sc
            #C.y.U.c.us->{C.t} = C.c.s;
            C.c.uz = C.c.s; # pass entropy
        }
        if (my $to = C.c.to) {
            my @k = grep {defined} map { C.sc->{$_} } @$to;
            die "@k not for ".ki$to if @k != @$to;
            my $x = C.c.usto ||= {};
            while (@k) {
                my $k = shift @k;
                if (@k) {
                    $x = $x->{$k} ||= {};
                }
                else {
                    $x->{$k} = C.c.s;
                }
            }
        }
