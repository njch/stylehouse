y.at.>$_ = c&$_ || die "no $_ givec" for qw'ts ino size';
y.in=y.out=0.3;
#  # #
$A=
n sha=>1=>(`sha1sum $s` =~ /^(\S+)/)[0]
my ($sha) = @{A.M};

if (!delete c&hard && sha.c.s eq J.wz.sha.c.s) {
    J.lies = 1;
    saybl"Skiping same C.t";
    y.ope = 1;
    return;
}

my $file = $s;    
my $am = LoadFile($file);
my @l = sort keys %$am;
my @ch;
for (@l) {
    # should be on sev somewhere, impose new ts by s/dig change, maintain this W ##
    my $s = $am.>$_;
    my $wa = J.wz.>$_;

    sayre("Jaws missing: $_") if !$wa;
    my $dig = slm(9,dig($s));
    if ($dig ne wa.sc.dig) {
        my $c;
        c.t = $_;
        c.c.s = $s;
        c.sc.pi = 'Gup';
        (c.sc.ts) = map{_.ts} G&qh,<<'';
            select now() as ts
        c.sc.tos = J.at.ts;
        c.sc.dig = $dig;
        c.sc.file = $file;
        sayyl "Was a change: $file -> c.t\t:    $dig ne wa.sc.dig";
        push @ch, $c;
    }
    n $_=>3=>$s,{dig=>$dig}
}
y.ope = 1;
if (@ch) {
    say "zending ".@ch;
    G&zen,Goh=>@ch if @ch;
    Rw waito $J:J.mo.J $W=Sefission;
}
# sev fold 3 - ! #
