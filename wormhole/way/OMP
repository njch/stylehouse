my $talk = "J.name OMP ".join"  ", ($vl?"vl":"**"),
    (map{"$_:".ki(1,$lv->{$_})}qw'pur op'), wdump 2, lv.od;

say $talk if J.V > 2 && $vl && (lv.pur || lv.op || lv.od);

!$vl && !lv.op && die "unopposed to not-bfore";

my $ne = {};
if (!lv.op) {
    for my $nk (keys %{lv.pur}) {
        my $sv = lv.pur->{$nk};
        if (ref $sv eq 'HASH') {
            for my $ck (keys %$sv) {
                $ne->{$nk}->{$ck} = $at->{$nk}->{$ck};
            }
        }
        else {
            ref $sv && die "wtf $sv";
            $ne->{$nk} = $at->{$nk};
        }
    }
}
else {
    $ne = $at;
    # client can drop other t to this, helps sane in forkedness
    ne.c.el = '2' if ne.c.el eq '1' && 1 == keys %{Y.te->{C.t}};
    # grab can also transplant inners for a minorish
    # not re-c but recreate element a move things in
    # while re-cing anything within that can't be grabbed
    # element rebuild may be crucial for undoing anything we cant undo
    # something may restate its entire c
    # including any inner c..sc tents
}

if (lv.od) {
    Rw VOD + $ne $talk;
}


my $nn = sub { my $n=shift; [n.t, n.y||{}, n.c||{}, n.sc||{}] };
if (lv.op) {
    # make sure z is full...
    lv.c = [$nn->($ne)];
    lv.sc = [];
}
elsif (keys %$ne) {
    die wdump [lv.op, $ne]  if lv.op;
    ne.t = at.t;
    ne.y = at.y;
    ne.c->{lv.force} = 3;

    lv.c = vl.c || die"novlc";
    lv.sc = [@{vl.sc}, $nn->($ne)];
    # Rw doc 5 [lv.c,lv.sc];
    # the two pronged link
    # circuity internet
}
else {
    lv.c = vl.c;
    lv.sc = vl.sc;
}

# but there is intended to wipe clean or just redo the surface
# much more is liking to collapse the past into the future in degrees as the c fulls
# pur and sc
# handleable od over time
lv.ma = ($vl?vl.ma:0)+1;
lv.i = "lv.c ".@{lv.sc};
