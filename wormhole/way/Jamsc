u allof
n '','','%of:I'

# interpreter of buzzed puit partiscules r -> j.[cv,t,style]
# opens schema, how to interpret r to J
n rJ =>''=><<'',{acgt=>'r,J',l=>'#c'}
    my $j;
    my $sing;
    if (J.tt) {
        $sing = 'J_tt';
        (j.cv,j.t,j.style) = $r =~ /^(.*?)\t(.*)\t(.*?)$/;
        if (!defined j.cv) {
            sayre "Hind $r  " for 1..5;
            (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\s+(.+?)$/;
        }
    }
    else {
        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\s+(.+?)$/;
    }
    defined j.cv || die "$sing no $r    ".ki $j;
    j.s = J.bb->{$r} if $J;
    j.nos = 1 if $J && !exists J.bb->{$r};
    $j;

# put C in bb, some towering tractor beams (ljm)
n jamsc =>''=><<'','%l:#c'
    my $ar = $s;
    my $sc = ar.sc || {};
    my $J = ar.J || die "jamsc noj".ki$s;
    ar.C = ar.d if ar.d;
    my $t = defined ar.t ? ar.t
        : ar.j ? ar.j.l
        : ar.C ? ar.C.t : die'not';
    my $cv = defined ar.cv ? ar.cv
        : ar.j ? ar.j.cv
        : ar.C ? ar.C.cv || ar.C.y.cv : die'cvoy';
    .
    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {
        my $J = ar.oJ;
        if (my $ljm = J.A.ljm) {
            my $Me = "ar.oJ.ind ar.J.name "
            ." J.A.ljmo <<< J.name  sends:"
            ." $t\t$cv  $ljm";
            sayyl $Me if J.V || ar.J.V;
            push @$ljm, {%$ar};
        }
    }
    .
    my @fobz;
    push @fobz, [$cv,$t,undef,ar.s] if exists ar.s;
    push @fobz, [$cv,$t,$_,$sc->{$_}] for keys %$sc;
    my @tobz = map {
        my ($cv,$t,$s,$v) = @$_;
        my $r;
        if (J.tt) { # FUTU
            $r = $cv."\t".$t."\t".$s;
        }
        else {
            my $s = $s;
            $s = '%'.$s if $s;
            $r = $t.$s."\t".$cv;
        }
        if ($s) {
            ar.C.sc->{$s} = $v;
        }
        [$r,$v]
    } @fobz;
    .
    for (@tobz) {
        my ($r,$v) = @$_;
        J.bz->($r,$v);
    }
