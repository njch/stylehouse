u allacgts
n tie =>''=><<'','%acgt:class'
    my %na;
    tie %na, $class, @Me;
    return \%na

# see also Loading for ongoign G.T timeyness
n T =>''=><<''
    my $e = I.d&tie,'Wormhole',{base=>$s},@Me;
    return $e;

u allpack
# for the hash of a filesystem
# results must be kept up to date otherwise
# (use only as G.T & Loading)
n Wormhole =>''=><<''
    {
        package Wormhole;
        use G;
        use Tie::Hash;
        our @ISA = qw(Tie::ExtraHash);
        sub TIEHASH {
            my $class = shift;
            my %o;
            %o = (%o, %{$_}) for @_;
            return bless [{},\%o], $class;
        }
        sub STORE {
            my ($e,$k,$v) = @_;
            my ($s,$o,@o) = @$e;
            die "Storign o: $v" if $k eq 'o';
            if (o.nonyam) {
                o.dige->{$k} = slm 12, dig $v unless ref $v;
            }
            $s->{$k} = $v;
        }
        sub FETCH {
            my ($e,$k,$v) = @_;
            my ($s,$o,@o) = @$e;
            return $o if $k eq 'o';
            $s->{$k} || STORE($e,$k, do {
                my $il = join('/', grep{defined} o.dir, $k);
                my $f = o.base.'/'.$il;
                if (-d $f) {
                    my %Di;
                    tie %Di, 'Wormhole', $o, {dir=>$il};
                    \%Di;
                }
                elsif (-f $f) {
                    o.nonyam ?
                    scalar read_file($f)
                    :
                    LoadFile($f);
                }
                else {
                    warn "Wormhole sens nothing: $f";
                    undef
                }
            });
        }
    }

# for the T.at that also sees J.oy.at
n Ghoz =>''=><<''
    {
        package Ghoz; #
        use Tie::Hash;
        our @ISA = qw(Tie::ExtraHash);
        sub TIEHASH {
            my $class = shift;
            my $sto = bless [{},@_], $class;
            $sto
        }
        sub FETCH {
            my ($s,$k) = @_;
            my ($st,@o) = @$s;
            return $st->{$k} if exists $st->{$k};
            option:
            for my $o (@o) {
                if (my $in = o.inp) {
                    my $v = o.o;
                    for my $i (@$in,$k) {
                        exists $v->{$i} || next option;
                        $v = $v->{$i};
                    }
                    return $v;
                }
                else {
                    die "Hwoto climb a ".G::ki $o;
                }
            }
        }
    }
