# networky other G.W/GW the J, see also Oth who is G.s/oin the J, self time pourer
G.c.b &&
    u UpPg
u Bubble
J.VV.N = 1;

#y.at.jslines = 1;
J.ev.th = 'middle';
y.at.ux = 2;
y.at.sq = G.c.i ? 'Iam' : 'oWo';
# and oin.C.c.s is also G.t, it does it
y.at.Mid = G.t || die "NoGt? ".ki$G;
y.at.Wid = G.oin.id;
delete c&s;
# ^ V
J.lA=$A=
n GW=>9=>{},'%ab:100,poi:0,tag:ww'

my $ear = G.W;
G.GW = G.W = $J;
G&xot,$J,$ear if $ear;
delete c&s;

if (!G.c.b) {
    my $f = "life/W/y.at.Wid\.e";
    J.taile = $f;
    `cat /dev/null > $f` if !-f $f;
    G&dlin,'life/W',"J.at.Wid\.e","J.at.Mid\.e";
    # =>{ac=>{create=>1}} # ac/asc/etc involvers slide into the experiment from E
    n $f =>-sol
    return;
}

my $ya = G.onfork.GW = sub {
    my $db = G&db;
    my $not = G.W.noti ||= {};
    $db->on(notification => sub {
        my ($db, $name, $pid, $s) = @_;
        $s = encode_utf8($s);
        Rw GW_Answer $name $s;
    });
    for (J.at.Wid, keys %{G.W.noti}) {
        $db->listen($_);
        sayyl "Listen: $_";
    }
    G.W.lizdb = $db;
};
$ya->() unless J.islisten++;
