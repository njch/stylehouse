--- 
Ii: em_21 vers:HASH + sq_24 vers:HASH + jslines_3 vers:HASH + ressur_3 vers:HASH + ux_3 vers:HASH
em: 
  "0.21": 
    em_21: 
      c: 
        s: "A.I.em_21 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $c = C.c;\nmy $em = C.c.em;\nem.lines || die \"Not lines\";\nem.hitime = hitime();\nem.is.W = C.sc.Wid || A.J.id;\nem.is.M = C.sc.Mid || A.J.name;\nem.id = em.is.W.'.'.(0+em.i);\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: em
        dige: e66800053d42
        gk: em
        nk: c
        of: em
        v: cem
      t: em_21
      "y": 
        cv: '0.21'
  "0.24": 
    sq_24: 
      c: 
        s: "A.I.sq_24 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $sq = C.sc.sq;\nmy $em = C.c.em;\nem.lines = Rw $sq $N:em.lines $em $J:A.J;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 17abc19ebcc9
        gk: sq
        nk: sc
        nov: 1
        nv: scsq
        of: em
        rg: em
        v: scsq
      t: sq_24
      "y": 
        cv: '0.24'
  "0.3": 
    jslines_3: 
      c: 
        s: "A.I.jslines_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $jslines = C.sc.jslines;\nmy $J = C.c.J;\nmy $em = C.c.em;\nRw EmJSlines $A $J $em $C $T;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em
        dige: 9c47bab70c61
        gk: jslines
        nk: sc
        nov: 1
        nv: scjslines
        of: em
        rg: J,em
        v: scjslines
      t: jslines_3
      "y": 
        cv: '0.3'
    ressur_3: 
      c: 
        s: "A.I.ressur_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $ressur = C.sc.ressur;\nmy $J = C.c.J;\nmy $em = C.c.em;\nsaybl \"Ressurrecting $ressur ...\";\ndie \"zomp $ressur\" if $ressur =~ /\\W/;\nmy $resu = \"life/W/$ressur\";\ndie \"bno JSlines\" unless -e $resu;\nif (G.Jsem) {\n    my $q = G&ajam,$resu;\n    say \"Sending $resu via Jsem\";\n    return G.Jsem->($q);\n}\n`cd life; ln -s ../W/$ressur J/em.id\\.c`;\nmy $catch = sjson {y=>J=>id=>em.id};\nI.d&writef,\"life/J\\.s\",$catch,1;\nT.whack = 1; # out of em\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em
        dige: 5ba05f2fb6b4
        gk: ressur
        nk: sc
        nov: 1
        nv: scressur
        of: em
        rg: J,em
        v: scressur
      t: ressur_3
      "y": 
        cv: '0.3'
    ux_3: 
      c: 
        s: "A.I.ux_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $ux = C.sc.ux;\nmy $em = C.c.em;\nif (ref em.lines) {\n    my $M = em.lines;\n    if ($ux < 2) {\n        $M = ['','',{W=>G.t},{z=>$M}]\n    }\n    em.lines = [sjson($M)];\n}\nC.sc.Wc = 1;\nreturn sayyl \"Was router for G.W.name\" if C.c.J eq G.W;\nmy $J = G.oin;\nn GW\n#\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 4dd4f3a02ae3
        gk: ux
        nk: sc
        nov: 1
        nv: scux
        of: em
        rg: em
        v: scux
      t: ux_3
      "y": 
        cv: '0.3'
