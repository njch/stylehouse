--- 
I: 
  "0.1": 
    ajam: 
      c: 
        s: "A.I.ajam = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\n\" \\$.ajax('$s').done(function(v) {\"\n    .\" var m = v\".'.split(\"\\n\");'\n    .\" \\$.each(m,function(k,v){ a\\.m(v); }); });\";\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: d74c0fd04e0e
        of: I
      t: ajam
      "y": 
        cv: '0.1'
    dlin: 
      c: 
        s: "A.I.dlin = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($dir,$to,$it,@Me) = @M;\nmy $I = A.I;\nreturn readlink $dir if !defined $to;\nmy $l = \"$dir/$it\";\nmy $is = -l $l;\nreturn if $is && readlink($l) eq $to;\n`unlink $l` if $is;\n`cd $dir; ln -s $to $it`;\n};"
      sc: 
        acgt: dir to it
        args: A,C,G,T,dir,to,it
        code: I
        dige: 8b21164df2a5
        of: I
      t: dlin
      "y": 
        cv: '0.1'
    slnk: 
      c: 
        s: "A.I.slnk = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $i = readlink $s;\nreturn $i if !@Me;\nmy $e = $Me[0];\nreturn if $i eq $e;\n`unlink $s` if -l $s;\n`ln -s $e $s`;\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 9112d4a33f56
        of: I
      t: slnk
      "y": 
        cv: '0.1'
    wraf: 
      c: 
        s: "A.I.wraf = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($f,$s,$noappend,@Me) = @M;\nmy $I = A.I;\n$s =~ s/\\n?$/\\n/s if !ref $s;\nG&writef,$f,$s,!$noappend\n};"
      sc: 
        acgt: f s noappend
        args: A,C,G,T,f,s,noappend
        code: I
        dige: d8b449120e40
        of: I
      t: wraf
      "y": 
        cv: '0.1'
    writef: 
      c: 
        s: "A.I.writef = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($f,$s,$append,@Me) = @M;\nmy $I = A.I;\n(my $d = $f) =~ s/\\/[^\\/]+?$//;\nunless (-d $d) {\n    `mkdir -p $d`;\n}\n\n$s = [$s] if !ref $s;\nmy $li = ref $s eq 'ARRAY' ? join(\"\",map{/\\n$/?$_:\"$_\\n\"}@$s)\n    : die \"Wsome other $f type: $s\";\n\nmy $wa = {};\nwa.append = 1 if $append;\nwrite_file($f,$wa,$li);\nreturn length $li;\n};"
      sc: 
        acgt: f s append
        args: A,C,G,T,f,s,append
        code: I
        dige: 5f790739e82e
        of: I
      t: writef
      "y": 
        cv: '0.1'
Ii: Meta vers:HASH + Wuts vers:HASH + ajam vers:HASH + dlin vers:HASH + slnk vers:HASH + wraf vers:HASH + writef vers:HASH + J_35 vers:HASH + root_582 vers:HASH
O: 
  "0.35": 
    J_35: 
      c: 
        s: "A.I.J_35 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $c = C.c;\nmy $Y = C.c.Y;\nmy $J = C.c.J;\nmy $V = C.c.V;\nmy $k = C.y.k;\nmy $at = C.y.at;\nmy $ta = C.y.ta;\nmy $lv = C.y.lv;\nmy $vl = C.y.vl;\ndelete at.sc.J if C.c.S;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O
        dige: 06a35a3ada53
        gk: 'Y'
        nk: c
        of: O
        rg: cJ,cV,yk,yat,yta,ylv,yvl
        v: cY
      t: J_35
      "y": 
        cv: '0.35'
Sev: 
  "0.582": 
    root_582: 
      c: 
        s: "A.I.root_582 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $c = C.c;\nmy $root = C.c.root;\nmy $lv = C.y.lv;\nmy $vl = C.y.vl;\nreturn unless A.J.most.J eq A.J || A.J.C.c.Wo;\nmy $r = G&scd,$lv,$vl;\nreturn unless @{r.z};\nA.bangdesk.bang.sevwoe = sub {\n    sayre \" was in em section: \".wdump 5, $r;\n};\nC.c.em && die'wtf';\n\nmy $em = C.c.em = {};\nem.lines = r.z;\nem.i = @{r.oldz};\n\nA.Subtle.em = 1;\nA.t&em,6,2;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev
        dige: ed9e989dba5a
        gk: root
        nk: c
        of: Sev
        rg: ylv,yvl
        v: croot
      t: root_582
      "y": 
        cv: '0.582'
em: 
  "0.21": 
    em_21: 
      c: 
        from: Meta
        s: "A.I.em_21 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $c = C.c;\nmy $em = C.c.em;\nem.lines || die \"Not lines\";\nem.hitime = hitime();\nem.is.W = C.sc.Wid || A.J.id;\nem.is.M = C.sc.Mid || A.J.name;\nem.id = em.is.W.'.'.(0+em.i);\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: em
        dige: e66800053d42
        gk: em
        nk: c
        of: em
        v: cem
      t: em_21
      "y": 
        cv: '0.21'
  "0.24": 
    sq_24: 
      c: 
        from: Meta
        s: "A.I.sq_24 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $sq = C.sc.sq;\nmy $em = C.c.em;\nem.lines = Rw $sq $N:em.lines $em $J:A.J;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 17abc19ebcc9
        gk: sq
        nk: sc
        nov: 1
        nv: scsq
        of: em
        rg: em
        v: scsq
      t: sq_24
      "y": 
        cv: '0.24'
  "0.3": 
    jslines_3: 
      c: 
        from: Meta
        s: "A.I.jslines_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $jslines = C.sc.jslines;\nmy $J = C.c.J;\nmy $em = C.c.em;\nRw EmJSlines $A $J $em $C $T;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em
        dige: 9c47bab70c61
        gk: jslines
        nk: sc
        nov: 1
        nv: scjslines
        of: em
        rg: J,em
        v: scjslines
      t: jslines_3
      "y": 
        cv: '0.3'
    ressur_3: 
      c: 
        from: Meta
        s: "A.I.ressur_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $ressur = C.sc.ressur;\nmy $J = C.c.J;\nmy $em = C.c.em;\nsaybl \"Ressurrecting $ressur ...\";\ndie \"zomp $ressur\" if $ressur =~ /\\W/;\nmy $resu = \"life/W/$ressur\";\ndie \"bno JSlines\" unless -e $resu;\nif (G.Jsem) {\n    my $q = G&ajam,$resu;\n    say \"Sending $resu via Jsem\";\n    return G.Jsem->($q);\n}\n`cd life; ln -s ../W/$ressur J/em.id\\.c`;\nmy $catch = sjson {y=>J=>id=>em.id};\nI.d&writef,\"life/J\\.s\",$catch,1;\nT.whack = 1; # out of em\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em
        dige: 5ba05f2fb6b4
        gk: ressur
        nk: sc
        nov: 1
        nv: scressur
        of: em
        rg: J,em
        v: scressur
      t: ressur_3
      "y": 
        cv: '0.3'
    ux_3: 
      c: 
        from: Meta
        s: "A.I.ux_3 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $ux = C.sc.ux;\nmy $em = C.c.em;\nif (ref em.lines) {\n    my $M = em.lines;\n    if ($ux < 2) {\n        $M = ['','',{W=>G.t},{z=>$M}]\n    }\n    em.lines = [sjson($M)];\n}\nC.sc.Wc = 1;\nreturn sayyl \"Was router for G.W.name\" if C.c.J eq G.W;\nmy $J = G.oin;\nn GW\n#\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 4dd4f3a02ae3
        gk: ux
        nk: sc
        nov: 1
        nv: scux
        of: em
        rg: em
        v: scux
      t: ux_3
      "y": 
        cv: '0.3'
  "0.446": 
    Wc_446: 
      c: 
        from: Wuts
        s: "A.I.Wc_446 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $Wc = C.sc.Wc;\nmy $J = C.c.J;\nmy $em = C.c.em;\nsaybl join\"\\n\",\"Downing em.is.M: em.is.W: \",\n    map{!ref $_ ? $_ : wdump 5,$_} @{em.lines}\n    if A.V&W;\nI.d&writef,\"life/W/em.is.W\\.c\",em.lines,em.i;\n\nC.c.as = !C.c.os;\nC.c.As = C.c.as;\nC.sc.meta = 1;\nC.sc.speak = 1 if C.c.as;\nC.sc.takeover = 1 if C.c.As;\nsaybl \"WHITESPACE S em.is.M\" if C.c.os;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: J,em
        code: em
        dige: 491ccd2fc8a3
        gk: Wc
        nk: sc
        nov: 1
        nv: scWc
        of: em
        rg: J,em
        v: scWc
      t: Wc_446
      "y": 
        cv: '0.446'
  "0.47": 
    meta_47: 
      c: 
        from: Wuts
        s: "A.I.meta_47 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $meta = C.sc.meta;\nmy $em = C.c.em;\nG.M->{em.is.M} = A.J;\nG.Wh->{em.is.W} && return;\nG.Wh->{em.is.W} = A.J;\nmy $me = I.d&hup,$em;\ndelete me.lines;\nI.d&writef,\"life/W/em.is.W\\.i\",sjson($me);\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 72e0fe23dbb2
        gk: meta
        nk: sc
        nov: 1
        nv: scmeta
        of: em
        rg: em
        v: scmeta
      t: meta_47
      "y": 
        cv: '0.47'
  "0.48": 
    speak_48: 
      c: 
        from: Wuts
        s: "A.I.speak_48 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $speak = C.sc.speak;\nmy $em = C.c.em;\nreturn if G.Jlone;\n\nmy $jf = \"life/J/em.id\\.c\";\nmy $l = I.d&writef,$jf,em.lines;\nif (G.Jsem) {\n    if ($l > 4000) {\n        sayre \"Big em.is.M: $l\";\n        my $q = G&ajam,$jf;\n        sayyl \"Sending in $q\";\n        G.Jsem->($q);\n    }\n    else {\n        G.Jsem->($em);\n    }\n}\n\nI.d&writef,\"life/J\\.s\",sjson({y=>'J',id=>em.id}),1;\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 1d8ce23c0a44
        gk: speak
        nk: sc
        nov: 1
        nv: scspeak
        of: em
        rg: em
        v: scspeak
      t: speak_48
      "y": 
        cv: '0.48'
  "0.49": 
    takeover_49: 
      c: 
        from: Wuts
        s: "A.I.takeover_49 = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $sc = C.sc;\nmy $takeover = C.sc.takeover;\nmy $em = C.c.em;\nG&dlin,'life/W',\"em.is.W\\.c\",\"em.is.M\";\n};"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        cg: em
        code: em
        dige: 3f588750befb
        gk: takeover
        nk: sc
        nov: 1
        nv: sctakeover
        of: em
        rg: em
        v: sctakeover
      t: takeover_49
      "y": 
        cv: '0.49'
