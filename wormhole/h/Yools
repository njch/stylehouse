--- 
I: 
  "0.1": 
    Tut: 
      c: 
        s: "A.I.Tut = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $ut = T.ut;\nif (ut.matchTd) {\n    my $d = s.d || die \"confuse\";\n    d.od.s.T.q->{d.e.k} ||= $d;\n    d.od.s.T.m->{d.e.k} ||= $d\n        unless delete T.noTd;\n}\nelse { die\"utrowhat \".wdump 2, $ut }\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: 22c10e1849d8
        of: I
      t: Tut
      "y": 
        cv: '0.1'
    convog: 
      c: 
        s: "A.I.convog = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($in,$Q,@Me) = @M;\nmy $I = A.I;\nQ.path && Q.onpa || die \"learn more\";\nfor my $pin (@{Q.path}) {\n    for my $pTn (@{Q.onpa}) {\n        I.d&pass,$pTn,$in;\n    }\n    I.d&pass,$pin,$in;\n}\n};"
      sc: 
        acgt: in,Q
        args: A,C,G,T,in,Q
        code: I
        dige: 1c2079808022
        of: I
      t: convog
      "y": 
        cv: '0.1'
    heq: 
      c: 
        s: "A.I.heq = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($o,$t,@Me) = @M;\nmy $I = A.I;\nif (ref $o && ref $t) {\n    keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o\n}\nelsif (!ref $o && !ref $t) {\n    $o eq $t\n}else{0}\n};"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I
        dige: 29e589a1b0cd
        of: I
      t: heq
      "y": 
        cv: '0.1'
    oleak: 
      c: 
        s: "A.I.oleak = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($s,$n,@Me) = @M;\nmy $I = A.I;\nlength(wdump $n,$s) < length(wdump $n+1,$s);\n};"
      sc: 
        acgt: s,n
        args: A,C,G,T,s,n
        code: I
        dige: 5eefa2c1ef37
        of: I
      t: oleak
      "y": 
        cv: '0.1'
    pas: 
      c: 
        s: "A.I.pas = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($pin,$d,@Me) = @M;\nmy $I = A.I;\nmy $s = d.s;\nmy $e = d.e;\nmy @ks = $pin eq '*' ? sort keys %$s\n    : exists $s->{$pin} ? $pin\n    : ();\nmap {\n    my $dd;\n    dd.e.k = $_;\n    dd.s = $s->{$_};\n    dd.d = d.d if d.d;\n    $dd;\n} @ks\n};"
      sc: 
        acgt: pin,d
        args: A,C,G,T,pin,d
        code: I
        dige: 03f05738f442
        of: I
      t: pas
      "y": 
        cv: '0.1'
    pass: 
      c: 
        s: "A.I.pass = sub {\nmy ($A,$C,$G,$T,@M)=@_;\nmy ($pin,$s,@Me) = @M;\nmy $I = A.I;\n@$s = grep{defined} map { I.d&pas,$pin,$_ } grep{defined} @$s;\n};"
      sc: 
        acgt: pin,s
        args: A,C,G,T,pin,s
        code: I
        dige: c9c0a7ed5036
        of: I
      t: pass
      "y": 
        cv: '0.1'
    scIfs: 
      c: 
        s: "A.I.scIfs = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy @is;\nfor my $k (keys %$s) {\n    my $Q = $s->{$k};\n    my $tot = @{Q.path};\n    my $star = grep{$_ eq '*'} @{Q.path};\n    Q.weig = $tot - $star;\n    \n    my $in = [{s=>{T=>$T}}];\n    my $pi = 0;\n    for my $pin (@{Q.path}) {\n        for my $pTn (@{Q.onpa}) {\n            I.d&pass,$pTn,$in;\n        }\n        I.d&pass,$pin,$in;\n        @$in = map {\n            if (_.d) { # nonroot pattern mutable (into/on/off origin s)\n                _.od ||= _.d;\n                if (my $su = _.od.s.T.q->{_.e.k}) {\n                    $_ = $su;\n                    # deeper knowish\n                }\n            }\n            _.d = $_;\n            _.e.lk = Q.atar->[$pi]||die\"no idea what $pi is\";\n            $_\n        } grep{defined} @$in;\n        $pi++;\n        last if !@$in;\n    }\n    \n    for my $d (@$in) {\n        # now inmost, .od leads above (without pTn inway)\n        # and each d.e.lk calls it something $nk $gk and $wk\n            # and avoid less specific after more specific\n            # or just avoid repeats\n            #   \n            # shaky but index\n            # the fish is shaking but on the deck\n        my $arg;\n        my $up = $d;\n        my $last = $up;\n        my $i = 0;\n        while ($up) {\n            $i++ > 8 && die \"LAST WANDERS\";\n            $arg->{up.e.lk} = up.e.k;\n            if (Q.caps) {\n                for my $k (grep{Q.caps->{$_}} keys %$up) {\n                    $arg->{$k} ||= $up->{$k};\n                }\n            }\n            $last = $up;\n            $up = up.od;\n            if ($up eq $last) {\n                sayre \"C.t (?) refers to itself as .od: \".wdump $last;\n                last;\n            }\n        }\n        \n        arg.d = $d;\n        \n        for my $k (keys %{d.s}) {\n            next if $k eq 'T';\n            $arg->{$k} && die \"Already $k arg of \".wdump[$d,$arg];\n            $arg->{$k} = d.s->{$k};\n        }\n        \n        my $path = \"@{Q.path}\";\n        arg.talk = \"C.t  ($k:$path) C.t C.y.cv\"\n            .\":\\t\".join '/', map{$arg->{$_}} @{Q.atar};\n        d.weig ||= Q.weig;\n        d.path ||= $path;\n        if (d.weig > Q.weig) {\n            say \"Later $path  Q.weig < d.weig  d.path\" if A.J.V > 1;\n            next;\n        }\n        elsif (d.path ne $path) {\n            say \"Moreo $path  Q.weig > d.weig  d.path\" if A.J.V > 1;\n            d.weig = Q.weig;\n            d.path = $path;\n        }\n        push @is, $arg;\n        T.ut.matchTd = 1;\n        # Z/D wad of multiplicity\n        # D args $d and arg, $nk/$ov etc things plucked\n        # they must stay present to later Ds as well\n        # stored T.d path subtlates\n        # 6 ^\n        sayre(ki($arg)) if A.J.V > 1;\n    }\n}\n@is\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I
        dige: ded9f3e983ee
        of: I
      t: scIfs
      "y": 
        cv: '0.1'
Ii: Tut vers:HASH + convog vers:HASH + heq vers:HASH + hup vers:HASH + oleak vers:HASH + pas vers:HASH + pass vers:HASH + scIfs vers:HASH
Sev: 
  "0.1": 
    hup: 
      c: 
        s: "A.I.hup = sub {\nmy ($A,$C,$G,$T,$s,@Me) = @_;\nmy $I = A.I;\nmy $CC = {%$s};\n$CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\n$CC;\n};"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Sev
        dige: 51f3a1aa316a
        of: Sev
      t: hup
      "y": 
        cv: '0.1'
