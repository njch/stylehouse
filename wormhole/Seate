--- 
I: 
  "0.1": 
    El: 
      c: 
        el: 1
        s: "A.I.El = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= {bb=>{},name=>$name};\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 6a34521b1d60
        gro: Modems/Pha
        l: "#c without a self"
      t: El
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    Elj: 
      c: 
        el: 1
        s: "A.I.Elj = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name) = @M;\n    my $I = A.I;\n    J.El->{$name} ||= Rw Jto - $le:J $name;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 9fe11b6f8fdd
        gro: Modems/Pha
        l: "#c with a self"
      t: Elj
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    Elvis: 
      c: 
        el: 1
        s: "A.I.Elvis = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$Y) = @M;\n    my $I = A.I;\n    my $wtf = I.d&wtfch,J.bb,Y.bb;\n    \n    Y.tw ||= {};\n    Y.lo = {}; # compile\n    \n    for my $mo (qw'gone diff new') {\n        for my $r (keys %{$wtf->{$mo}}) {\n            my $j = I.d&r2j,$J,$r;\n            j.r = $r;\n            j.lt = j.cv.\"\\t\".j.t;\n            if (!j.lt=~/\\S/) {\n                die \"Got $r =>   \".ki $j;\n            }\n            if ($mo eq 'gone') {\n                delete Y.bb->{j.r};\n                delete Y.tw->{j.lt}->{j.style};\n            }\n            else {\n                Y.bb->{j.r} = j.s;\n                Y.tw->{j.lt}->{j.style} = j.s;\n            }\n            Y.lo->{j.lt}->{$mo}->{j.style} = j.s;\n        }\n    }\n    \n    Y.tv ||= {};\n    Y.v ||= {};\n    Y.go = {};\n    my $same = 1;\n    for my $k (keys %{Y.lo}) {\n        my $tf = Y.lo->{$k};\n        my $cs = Y.tw->{$k};\n        if (tf.new && !tf.gone && !tf.diff && keys %{tf.new} == keys %$cs) {\n            $same = 0; # new line to make\n        }\n        if (tf.gone && !keys %$cs) {\n            $same = 0; # line to disappear\n            my $C = Y.go->{$k} = delete Y.tv->{$k};\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            delete Y.v->{$cv}->{$t};\n            delete Y.v->{$cv} unless keys %{Y.v->{$cv}};\n        }\n        if (tf.diff || tf.new) {\n            keys %$cs || die 'nokeys';\n            my ($cv,$t) = $k =~ /^(.+?)\\t(.*)$/;\n            defined $cv || die \"twas $k\";\n            my $foam = sub {\n                my $C = shift;\n                %$C = (t=>$t,y=>{cv=>$cv},c=>{},sc=>{%$cs});\n                C.c.s = delete C.sc->{''} if exists C.sc->{''};\n            };\n            $foam->(Y.tv->{$k} ||= {});\n            $foam->(Y.v->{$cv}->{$t} ||= {});\n        }\n    }\n    if (!$same) {\n        Y.vs = [];\n        for my $k (sort keys %{Y.tv}) {\n            my $C = Y.tv->{$k} || die \"wtf $k\";\n            push @{Y.vs}, $C;\n        }\n        #sayre \"vs re: \".@{Y.vs};\n    }\n    \n    Y.ra = I.d&ratio,wtf.sami,wtf.tot;\n    Y.rato = wtf.tot;\n    Y.revs = !$same;\n    \n    $Y;\n};\n"
      sc: 
        acgt: J,Y
        args: A,C,G,T,J,Y
        code: I 1
        dige: a5eb28a6a34d
        gro: Modems/Pha
        l: "#c"
      t: Elvis
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    as: 
      c: 
        el: 1
        s: "A.I.as = sub {\n    my ($A,$C,$G,$T,$s,$x) = @_;\n    my $I = A.I;\n    for (qw'begin bb ord tim wtf') {\n         exists $x->{$_} || next;\n         my $v = $x->{$_};\n         $v = [@$v] if ref $v eq 'ARRAY';\n         $v = {%$v} if ref $v eq 'HASH';\n         $s->{$_} = $v;\n    }\n};\n"
      sc: 
        acgt: s,x
        args: A,C,G,T,s,x
        code: I 1
        dige: 68275f8dba30
        gro: Modems/Pha
      t: as
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    bandon: 
      c: 
        el: 1
        s: "A.I.bandon = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    delete s.J.phy->{s.name};\n    s.abandoned = 1;\n    if (my $x = s.head) {\n        I.d&as,$s,$x;\n    }\n    I.d&end,$s\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: f11d8e18828e
        gro: Modems/Pha
      t: bandon
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    carebowl: 
      c: 
        el: 1
        s: "A.I.carebowl = sub {\n    my ($A,$C,$G,$T,$s,$iii,$x,$xrd) = @_;\n    my $I = A.I;\n    for my $ik (sort keys %$iii) {\n        my $D = $iii->{$ik};\n        if (my $nk = D.sc.nk) {\n            my $C = I.nF.C;\n            next if !exists $C->{$nk};\n            if (my $gk = D.sc.gk) {\n                next if !exists $C->{$nk}->{$gk};\n            }\n        }\n        my $act;\n        my $dont;\n        if (D.sc.acgt && D.sc.act) {\n            $act = 1;\n            # acgtsubs can be defined at any cv\n            # run themselves if act\n            # usu. one receiver (Ci) and the rest scheme\n            die \"D.t .act gets... D.sc.act\" if D.sc.act ne '1';\n            $dont = 1 if exists A.I->{D.t};\n        }\n        # way or acgt-setuping-way\n        unless ($dont) {\n            my $paw = join\"_\",'',I.k,I.cv,D.t;\n            $paw =~ s/\\W//g;\n            Rw $paw $A $C $G $T $__D:D;\n        }\n        # most tiny ticks\n        # this ind is all flywheel\n        # it's a kind of unity that wants to be a block of code like this\n        # and c\n        my @is = A.s;\n        @is = I.d&scIfs,D.sc.Ifs if D.sc.Ifs;\n        @is || next;\n        if ($act) {\n            push @$xrd, [I.k,$ik];\n            my $Ds = $x->{I.k}->{$ik} ||= {};\n            Ds.D = $D;\n            Ds.is = \\@is;\n            D.sc.its = @is;\n        }\n        # TreeD\n        $s->{I.k}->{I.cv}->{$ik} = $D;\n    }\n};\n"
      sc: 
        acgt: s,iii,x,xrd
        args: A,C,G,T,s,iii,x,xrd
        code: I 1
        dige: 6a65d4535276
        gro: KowTime
        l: "#c"
      t: carebowl
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
    convog: 
      c: 
        el: 1
        s: "A.I.convog = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($in,$Q) = @M;\n    my $I = A.I;\n    Q.path && Q.onpa || die \"learn more\";\n    for my $pin (@{Q.path}) {\n        for my $pTn (@{Q.onpa}) {\n            I.d&pass,$pTn,$in;\n        }\n        I.d&pass,$pin,$in;\n    }\n};\n"
      sc: 
        acgt: in,Q
        args: A,C,G,T,in,Q
        code: I 1
        dige: 66e02c61bff1
        gro: Seven/Yools
      t: convog
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    end: 
      c: 
        el: 1
        s: "A.I.end = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $y = s.J.phl->{s.name} ||= {name=>s.name, l=>[]};\n    s.ended = hitime();\n    delete s.J.phy->{s.name};\n    shift @{y.l} while @{y.l} > 5;\n    # layers ^ rolling in time index .r -> the y.l\n    # so last phase of $name can be found?\n    push @{y.l}, $s;\n    if (s.bb) {\n        my $w = @{y.l};\n        y.l_bb->{$_} = $w for keys %{s.bb};\n    }\n    # somewhere thinks about what happened\n    $y\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 9be2c29b1c85
        gro: Modems/Pha
      t: end
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    ex: 
      c: 
        el: 1
        s: "A.I.ex = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($i,$K,$cv,$av) = @M;\n    my $I = A.I;\n    # was Rw SNat $A $C $G $T $I $i $K $cv;\n    # baseism\n    my $c = 0+(\"0.\".$cv);\n    my $Av = $av || A.cv;\n    my $sp = $av ? \" Flav $av (no A.cv)\" : \"\";\n    \n    my $talk = \"A.talk: $K$sp $Av > $c --- C.t \";\n    \n    my $aim = {$K=>1};\n    if ($aim->{A.am}) {\n        $aim->{$_} = 1 for @{A.Isl||[]};\n        aim.I = 1;\n    }\n    \n    my $yv = {};\n    # make K/cv/t -> cv/K/t\n    for my $k (sort keys %$i) {\n        my $ii = $i->{$k};\n    \n        next if $k eq 'Ii';\n        next if $k eq 'ooI';\n        ref $ii eq 'HASH' || die \"weird $k=$ii\";\n    \n        for my $vc (sort keys %$ii) {\n            my $iii = $ii->{$vc};\n            die'$k !0<$vc<1' unless $vc > 0 && $vc < 1;\n            $yv->{$vc}->{$k} = $iii;\n        }\n    }\n    \n    # do stuff\n    my $vb; # in fractions\n    my $wasSubtle;\n    for my $vc (sort keys %$yv) {\n        my $is = $yv->{$vc};\n        my $s = {};\n        my $x = {};\n        my $xrd = [];\n    \n        next if $vc <= $Av && $vc != $c;\n        next if $vc > $c;\n    \n        # our  osc (stay in K per Subtle ness);\n        my @iz = grep {\n            $aim->{$_} || (aim.I && A.Iso->{$_})\n        } sort keys %$is;\n        next if !@iz;\n    \n        # (for oscillating stretches of inner being)\n        if ($wasSubtle) {\n            undef $wasSubtle;\n            $vb = $vc;\n        }\n        # inter cv wideness loop v and its not ^\n        if ($vb && $vc > $vb && (\n            @{A.N} || @{A.mo.re->{$vb}||[]}\n            )) {\n            # sincing, wide order\n            # various others want to be around for only some of the process...\n            sayre \"$vb -> $vc  bump, \". @{A.N} if A.J.V > 1;\n            T.Z->{$vb} = 1;\n            A.cv = $vb; # so we dont wind up to 6 on the way out of t\n            return T.not = 1;\n        }\n    \n        # pin down poles\n        I.cv = $vc;\n        I.vb = $vb;\n        # draw curvles as spirals done\n    \n        for my $k (@iz) {\n            my $iii = $is->{$k};\n            I.k = $k;\n            I.d&carebowl,$s,$iii,$x,$xrd;\n        }\n        #c suble\n        my $se = Rw TreeD $s $scby=gro \n            if A.J.V > 1 && keys %$s;\n        $c == 0.1 ? saygr $se : say $se if $se;\n    \n        die if I.cv ne $vc;\n        die if I.vb ne $vb;\n        my $o;\n        o.vc = $vc;\n        o.vb = $vb;\n        o.Subtle = 0;\n        o.nonSubtle = 0;\n        I.d&exood,$o,$x,$xrd;\n        $vc = o.vc;\n        $vb = o.vb;\n        if (o.Subtle && !o.nonSubtle) {\n            $wasSubtle = 1;\n        }\n    \n        return if T.not;  # will &z, oseve\n        return if delete T.whack;\n    }\n};\n"
      sc: 
        acgt: i,K,cv,av
        args: A,C,G,T,i,K,cv,av
        code: I 1
        dige: ff84b6093988
        gro: KowTime
        nois: "#c"
      t: ex
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
    exactl: 
      c: 
        el: 1
        s: "A.I.exactl = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $q = shift;\n    my $y = I.d&end,$s;\n    my $cur = y.l->[-1];\n    my $last = y.l->[-2];\n    $cur eq $s || die \"sidf$cur $s\";\n    last.bb ||= {};\n    \n    my $wtf = I.d&wtfch,cur.bb,last.bb;\n    \n    delete s.J.bb->{$_} for keys %{wtf.gone};\n    \n    # see s.extill, time passing interesto...\n    # churn stats like 30% of last disappear, 20% new\n    s.wtf = $wtf;\n    $wtf;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 4f2ceaf538a8
        gro: Modems/Pha
        l: "#c un-ins things from J"
      t: exactl
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    exood: 
      c: 
        el: 1
        s: "A.I.exood = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$x,$xrd) = @M;\n    my $I = A.I;\n    for my $kik (@$xrd) {\n        my ($k,$ik) = @$kik;\n        A.Subtle && A.Subtle->{$k} ? o.Subtle++ : o.nonSubtle++;\n        my $Ds = $x->{$k}->{$ik};\n        my $D = Ds.D;\n        for my $s (@{Ds.is}) {\n            D.sc.acgt eq 's'||die \"nonacgts\".wdump $D;\n            exists A.I->{D.t}||die \"acgtI D.t not up: \".wdump A.I;\n    \n            I.d&D.t,$s;\n    \n            I.acted and I.d&acted,$s;\n    \n            if (my $ut = T.ut) {\n                if (ut.matchTd) {\n                    my $d = s.d || die \"confuse\";\n                    d.od.s.T.q->{d.e.k} ||= $d;\n                    d.od.s.T.m->{d.e.k} ||= $d\n                        unless delete(T.noTd);\n                }\n                else { die\"utrowhat \".wdump 2, $ut }\n            }\n    \n            # outwave: schools of many fish (not upcv if !@is)\n            o.vb ||= o.vc if D.sc.v;\n    \n            last if T.not || T.whack;\n        }\n        delete T.ut;\n        last if T.not || T.whack;\n    }\n};\n"
      sc: 
        acgt: o,x,xrd
        args: A,C,G,T,o,x,xrd
        code: I 1
        dige: b15d585bb0fa
        gro: KowTime
        l: "#c"
      t: exood
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/KowTime/KowTime
    heq: 
      c: 
        el: 1
        s: "A.I.heq = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t) = @M;\n    my $I = A.I;\n    if (ref $o && ref $t) {\n        keys %$o == keys %$t && !grep{$o->{$_} ne $t->{$_}}keys %$o\n    }\n    elsif (!ref $o && !ref $t) {\n        $o eq $t\n    }else{0}\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: 428eb2e855a4
        gro: Seven/Yools
      t: heq
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    jamsc: 
      c: 
        el: 1
        s: "A.I.jamsc = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $ar = $s;\n    my $sc = ar.sc || {};\n    my $J = ar.J || die \"jamsc noj\".ki$s;\n    ar.C = ar.d if ar.d;\n    my $t = ar.t ? ar.t\n        : ar.j ? ar.j.l\n        : ar.C ? ar.C.t : die'not';\n    my $cv = ar.cv ? ar.cv\n        : ar.j ? ar.j.cv\n        : ar.C ? ar.C.cv || ar.C.y.cv : die'noy';\n    \n    if (ar.oJ && ar.oJ ne ar.J && !ar.noR) {\n        my $J = ar.oJ;\n        if (my $ljm = J.A.ljm) {\n            my $Me = \"ar.oJ.ind ar.J.name \"\n            .\" J.A.ljmo <<< J.name  sends:\"\n            .\" $t\\t$cv  $ljm\";\n            sayyl $Me if J.V || ar.J.V;\n            push @$ljm, {%$ar};\n        }\n    }\n    \n    my @fobz;\n    push @fobz, [$cv,$t,undef,ar.s] if exists ar.s;\n    push @fobz, [$cv,$t,$_,$sc->{$_}] for keys %$sc;\n    my @tobz = map {\n        my ($cv,$t,$s,$v) = @$_;\n        my $r;\n        if (J.tt) { # FUTU\n            $r = $cv.\"\\t\".$t.\"\\t\".$s;\n        }\n        else {\n            my $s = $s;\n            $s = '%'.$s if $s;\n            $r = $t.$s.\"\\t\".$cv;\n        }\n        if ($s) {\n            ar.C.sc->{$s} = $v;\n        }\n        [$r,$v]\n    } @fobz;\n    \n    for (@tobz) {\n        my ($r,$v) = @$_;\n        J.bz->($r,$v);\n    }\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: 3423c6b06bb3
        gro: Modems/Jamsc
      t: jamsc
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Jamsc/Jamsc
    pas: 
      c: 
        el: 1
        s: "A.I.pas = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$d) = @M;\n    my $I = A.I;\n    my $s = d.s;\n    my $e = d.e;\n    my @ks = $pin eq '*' ? sort keys %$s\n        : exists $s->{$pin} ? $pin\n        : ();\n    map {\n        my $dd;\n        dd.e.k = $_;\n        dd.s = $s->{$_};\n        dd.d = d.d if d.d;\n        $dd;\n    } @ks\n};\n"
      sc: 
        acgt: pin,d
        args: A,C,G,T,pin,d
        code: I 1
        dige: e0e83fe0dcd3
        gro: Seven/Yools
      t: pas
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    pass: 
      c: 
        el: 1
        s: "A.I.pass = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($pin,$s) = @M;\n    my $I = A.I;\n    @$s = grep{defined} map { I.d&pas,$pin,$_ } grep{defined} @$s;\n};\n"
      sc: 
        acgt: pin,s
        args: A,C,G,T,pin,s
        code: I 1
        dige: b1a803297df2
        gro: Seven/Yools
      t: pass
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    pha: 
      c: 
        el: 1
        s: "A.I.pha = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$name) = @M;\n    my $I = A.I;\n    # tracked being\n    # temporal phatness, per suJ (encap $M surges within)\n    if (my $x = J.phy->{$name}) {\n        sayre \"J.name 's $name was re entrant\";\n        I.d&end,$x;\n        # end - maybe new stuffright as some random part of this process\n        # hold yay minutes of changes in 10 second groups, etc\n    }\n    # bz multicasts\n    my $x = J.phy->{$name} = {};\n    x.begin = hitime();\n    x.name = $name;\n    x.J = $J;\n    x.bb = {};\n    x.ord = [];\n    #x.tim = {};\n    #x.wtf = {}; # F grab\n    #x.ap = sub{}; # bz do aftering\n    x.qui = 1;\n    x.head = J.phl->{$name}->{l}->[-1] if J.phy->{$name};\n    $x;\n};\n"
      sc: 
        acgt: J,name
        args: A,C,G,T,J,name
        code: I 1
        dige: 02e372c4b95c
        gro: Modems/Pha
        l: "#c"
      t: pha
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
    r2j: 
      c: 
        el: 1
        s: "A.I.r2j = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($J,$r) = @M;\n    my $I = A.I;\n    my $j;\n    my $sing;\n    if (J.tt) {\n        $sing = 'J_tt';\n        (j.cv,j.t,j.style) = $r =~ /^(.*?)\\t(.*)\\t(.*?)$/;\n        if (!j.cv) {\n            sayre \"Hind $r  \" for 1..5;\n            (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n        }\n    }\n    else {\n        (j.t,j.style,j.cv) = $r =~ /^(.+?)(?:%(.+))?\\s+(.+?)$/;\n    }\n    defined j.cv || die \"$sing no $r    \".ki $j;\n    j.s = ar.J.bb->{$r} if ar.J;\n    j.nos = 1 if ar.J && !exists ar.J.bb->{$r};\n    $j;\n};\n"
      sc: 
        acgt: J,r
        args: A,C,G,T,J,r
        code: I 1
        dige: a3afa2fc23cb
        gro: Modems/Jamsc
      t: r2j
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Jamsc/Jamsc
    ratio: 
      c: 
        el: 1
        s: "A.I.ratio = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($o,$t) = @M;\n    my $I = A.I;\n    my $ratio = $o / ($t||1);\n    0.01 * int(100*$ratio);\n};\n"
      sc: 
        acgt: o,t
        args: A,C,G,T,o,t
        code: I 1
        dige: c195879acd18
        gro: Modems/Timing
      t: ratio
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Timing/Timing
    scIfs: 
      c: 
        el: 1
        s: "A.I.scIfs = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my @is;\n    for my $k (keys %$s) {\n        my $Q = $s->{$k};\n        my $tot = @{Q.path};\n        my $star = grep{$_ eq '*'} @{Q.path};\n        Q.weig = $tot - $star;\n    \n        my $in = [{s=>{T=>$T}}];\n        my $pi = 0;\n        for my $pin (@{Q.path}) {\n            for my $pTn (@{Q.onpa}) {\n                I.d&pass,$pTn,$in;\n            }\n            I.d&pass,$pin,$in;\n            @$in = map {\n                if (_.d) { # nonroot pattern mutable (into/on/off origin s)\n                    _.od ||= _.d;\n                    if (my $su = _.od.s.T.q->{_.e.k}) {\n                        $_ = $su;\n                        # deeper knowish\n                    }\n                }\n                _.d = $_;\n                _.e.lk = Q.atar->[$pi]||die\"no idea what $pi is\";\n                $_\n            } grep{defined} @$in;\n            $pi++;\n            last if !@$in;\n        }\n    \n        for my $d (@$in) {\n            # now inmost, .od leads above (without pTn inway)\n            # and each d.e.lk calls it something $nk $gk and $wk\n                # and avoid less specific after more specific\n                # or just avoid repeats\n                #   \n                # shaky but index\n                # the fish is shaking but on the deck\n            my $arg;\n            my $up = $d;\n            my $last = $up;\n            my $i = 0;\n            while ($up) {\n                $i++ > 8 && die \"LAST WANDERS\";\n                $arg->{up.e.lk} = up.e.k;\n                if (Q.caps) {\n                    for my $k (grep{Q.caps->{$_}} keys %$up) {\n                        $arg->{$k} ||= $up->{$k};\n                    }\n                }\n                $last = $up;\n                $up = up.od;\n                if ($up eq $last) {\n                    sayre \"D.t D.sc.Td  refers to itself as .od: \".wdump $last;\n                    last;\n                }\n            }\n    \n            arg.d = $d;\n    \n            for my $k (keys %{d.s}) {\n                next if $k eq 'T';\n                $arg->{$k} && die \"Already $k arg of \".wdump[$d,$arg];\n                $arg->{$k} = d.s->{$k};\n            }\n    \n            my $path = \"@{Q.path}\";\n            arg.talk = \"C.t  ($k:$path) C.t C.y.cv\"\n                .\":\\t\".join '/', map{$arg->{$_}} @{Q.atar};\n            d.weig ||= Q.weig;\n            d.path ||= $path;\n            if (d.weig > Q.weig) {\n                say \"Later $path  Q.weig < d.weig  d.path\" if A.J.V > 1;\n                next;\n            }\n            elsif (d.path ne $path) {\n                say \"Moreo $path  Q.weig > d.weig  d.path\" if A.J.V > 1;\n                d.weig = Q.weig;\n                d.path = $path;\n            }\n            push @is, $arg;\n            T.ut.matchTd = 1;\n            # Z/D wad of multiplicity\n            # D args $d and arg, $nk/$ov etc things plucked\n            # they must stay present to later Ds as well\n            # stored T.d path subtlates\n            # 6 ^\n            sayre(ki($arg)) if A.J.V > 1;\n        }\n    }\n    @is\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: I 1
        dige: d4abcdd6b56a
        gro: Seven/Yools
      t: scIfs
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
    wtfch: 
      c: 
        el: 1
        s: "A.I.wtfch = sub {\n    my ($A,$C,$G,$T,@M)=@_;\n    my ($Jb,$Yb) = @M;\n    my $I = A.I;\n    my $wtf = {};\n    wtf.same = 1;\n    $wtf->{$_} = {} for qw'new diff gone';\n    \n    for (sort keys %$Jb) {\n        if (!exists $Yb->{$_}) {\n            wtf.new->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        } \n        elsif ($Yb->{$_} ne $Jb->{$_}) {\n            wtf.diff->{$_} = $Jb->{$_};\n            wtf.same = 0;\n        }\n        else {\n            wtf.sami++;\n            wtf.still->{$_} = $Jb->{$_};\n        }\n        wtf.tot++;\n    }\n    for (grep { !exists $Jb->{$_} } sort keys %$Yb) {\n        wtf.gone->{$_} = $Yb->{$_};\n        wtf.same = 0;\n    }\n    $wtf;\n};\n"
      sc: 
        acgt: Jb,Yb
        args: A,C,G,T,Jb,Yb
        code: I 1
        dige: f4b8a34e7993
        gro: Modems/Pha
        l: "#c diff J"
      t: wtfch
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Modems/Modems/Pha/Pha
O: 
  "0.31": 
    tycsc_31: 
      c: 
        el: 1
        s: "A.I.tycsc_31 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.t = C.t;\n    at.y.cv = C.y.cv;\n    #sayre \"OSC7 C.t no c_s: \".ki $C if !exists C.c.s;\n    at.c.s = C.c.s;\n    at.sc = {%{C.sc}};\n    delete at.sc->{$_} for qw'geo idly ml nspc path yspc';\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 31
        dige: 398a4092f0c1
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: tycsc_31
      "y": 
        cv: '0.31'
        cvt: 0.31	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.36": 
    Jin_36: 
      c: 
        el: 1
        s: "A.I.Jin_36 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (my $v = at.sc.J) { # J unifies -\n        at.sc.J = v.name;\n    \n        my $nV = v.El->{V.name};\n        $nV || return sayre \"no V.name on v.name $v: El: \".join', ',sort keys %{v.El};\n        my $rv = nV.rv || {LIES=>\"from v.name\"};\n        nV.rv || return sayre \"no rv V.name on v.name\";\n    \n        lv.do->{V.name} = $rv;\n        at.V->{V.name} = rv.i;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 36
        dige: ba149a12b887
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jin_36
      "y": 
        cv: '0.36'
        cvt: 0.36	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.37": 
    Jnine_37: 
      c: 
        el: 1
        s: "A.I.Jnine_37 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (C.c.root) { # / unifies  <\n        lv.voso = 1;\n        for my $ik (@{V.os}) {\n            my $iv = V.lv->{$ik};\n            do { sayre(\"Skip self in self\") for 1..6 } && next\n                if C.sc.J && C.sc.J eq A.J;\n            lv.do->{$ik} = $iv;\n            at.V->{$ik} = iv.i;\n        }\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 37
        dige: 6b7f4694cde2
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: Jnine_37
      "y": 
        cv: '0.37'
        cvt: 0.37	C.t
        p: qq/Seven/Seven/Yosc/Yosc
  "0.38": 
    sel_38: 
      c: 
        el: 1
        s: "A.I.sel_38 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.sc.geo = ki(at.sc.geo) if at.sc.geo;\n    at.y = at.y.cv if keys %{at.y} == 1 && exists at.y.cv;\n    # ^ to SlideEater decode array of y expressions, xotted together\n    for my $up (qw'tag id') {\n        at.c->{$up} = delete at.sc->{$up} if exists at.sc->{$up}\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: O 38
        dige: 882e888a0a8a
        gk: 'Y'
        gro: Seven/Yosc
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: sel_38
      "y": 
        cv: '0.38'
        cvt: 0.38	C.t
        p: qq/Seven/Seven/Yosc/Yosc
S: 
  "0.24": 
    Y_24: 
      c: 
        el: 1
        s: "A.I.Y_24 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $di = Y.lo->{C.y.k}) {\n        my $not;\n        if (keys %$di == 1 && di.diff) {\n            my $CC = V.tv->{C.y.k};\n            if (!$CC) {\n                sayre \"never heard of (V_tv) diff J.name : C.y.k \";\n                return 1;\n            }\n            for my $tk (keys %{di.diff}) {\n                if ($tk eq 'geo') {\n                    T.to = 1 if 0 && !I.d&heq,C.sc.geo,CC.sc.geo;\n                    if ($not && 0) {\n                        sayyl \"Geo was $not a difference in the thing\";\n                        sayyl sjson(C.sc.geo);\n                        saybl sjson(CC.sc.geo);\n                    }\n                }\n                elsif ($tk eq '') {\n                    T.to = 1 unless ref C.c.s && C.sc.dige && C.sc.dige eq CC.sc.dige;\n                }\n                else {\n                    saybl \"J.name C.y.k has diffre: $tk\";\n                    T.to = 1;\n                }\n            }\n        }\n        else {\n            T.to = 1;\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 24
        dige: 2fb8df542383
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_24
      "y": 
        cv: '0.24'
        cvt: 0.24	C.t
        p: qq/Seven/Seven/Ysleep/Ysleep
  "0.25": 
    Y_25: 
      c: 
        el: 1
        s: "A.I.Y_25 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    if (my $JJ = C.sc.J) {\n        my $ta = V.ta->{C.y.k};\n        if (my $nV = JJ.El->{V.name}) {\n            my $iv = nV.rv;\n            my $oi = ta.V->{V.name};\n            if ($oi ne iv.i) {\n                T.to = 1;\n            }\n        }\n        else {\n            sayre \"no El V.name on JJ.name\";\n        }\n    }\n    T.whack = 1 if T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: S 25
        dige: 9f6d02eaea0d
        gk: 'Y'
        gro: Seven/Ysleep
        nk: c
        rg: J,V
        v: cY
      t: Y_25
      "y": 
        cv: '0.25'
        cvt: 0.25	C.t
        p: qq/Seven/Seven/Ysleep/Ysleep
Sev: 
  "0.1": 
    hup: 
      c: 
        el: 1
        s: "A.I.hup = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $CC = {%$s};\n    $CC->{$_} = {%{$CC->{$_}}} for grep {ref $CC->{$_} eq 'HASH'} keys %$CC;\n    $CC;\n};\n"
      sc: 
        acgt: s
        args: A,C,G,T,s
        code: Sev 1
        dige: 294a8ada9374
        gro: Seven/Yools
      t: hup
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yools/Yools
  "0.2": 
    JYV_2: 
      c: 
        el: 1
        s: "A.I.JYV_2 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    for my $K ('Y','V') {\n        my $name = C.c->{$K};\n        $name || die \"No $K\";\n        C.c->{$K} = I.d&Elj,$J,$name;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 2
        dige: 74b861812f5b
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: JYV_2
      "y": 
        cv: '0.2'
        cvt: 0.2	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.21": 
    dElvis_21: 
      c: 
        el: 1
        s: "A.I.dElvis_21 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    I.d&Elvis,$J,$Y;\n    V.os = [];\n    A.mo.retu && die \"J.name's  V.name: Already is  A.mo.retu.name\";\n    A.mo.retu = $V;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 21
        dige: 514704dd0b5e
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: dElvis_21
      "y": 
        cv: '0.21'
        cvt: 0.21	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.22": 
    root_22: 
      c: 
        el: 1
        s: "A.I.root_22 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $rC = Y.tv->{\"0.9\\t/\"}\n        || Y.tv->{\"0.9\\t\".J.name}\n        || Y.tv->{\"0.9\\t\".J.uname}\n          || die \" noroot J.name: showing 0.9s: \"\n            .wdump [map{ki $_}values %{Y.v->{0.9}}];\n    rC.c.root = 1;\n    my $N = [grep { $_ ne $rC } @{Y.vs}];\n    push @$N, $rC;\n    # T.Z.$incv = 1||$setAcv makes A,Celf, \n    # A.mo.re array others (yarN) which may Acquire\n    push @{A.mo.re->{0.22}||=[]}, map{\n        my $CC = I.d&hup,$_;\n        # all spreads out to play Y/V\n        I.d&xot,$CC,{c=>C.c};\n        [undef,$CC]\n    }@$N;\n    T.not = 1; # or more 78ism\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 22
        dige: 478535a0bf3c
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: root_22
      "y": 
        cv: '0.22'
        cvt: 0.22	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.23": 
    Y_23: 
      c: 
        el: 1
        s: "A.I.Y_23 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    C.y.k = C.y.cv.\"\\t\".C.t;\n    push @{V.os}, C.y.k unless C.c.root;\n    # how happening to thingk\n    # must ,,,, A.t to gain perception (not mid ex but should)\n    # but yeah add things as lines rejoin\n    A.Iso.O = 1; # also ex O as I (whoever we are)\n    A.Subtle.S = 1; # only-S ex slips through time unwide\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 23
        dige: 45108e25a4cf
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_23
      "y": 
        cv: '0.23'
        cvt: 0.23	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.231": 
    Y_231: 
      c: 
        el: 1
        s: "A.I.Y_231 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    return if C.c.root;\n    T.to = 0;\n    A.t&S,6,2;\n    T.not = 1 if !delete T.to;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 231
        dige: 8a667da8779f
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V
        v: cY
      t: Y_231
      "y": 
        cv: '0.231'
        cvt: 0.231	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.3": 
    Y_3: 
      c: 
        el: 1
        s: "A.I.Y_3 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    C.y.lv = {k=>$k,C=>$C};\n    C.y.at = {};\n    C.y.ta = V.ta->{$k};\n    C.y.vl = V.lv->{$k};\n    if (C.c.root) { # / continues from 3 when everything's 6\n        T.Z->{0.6} = 0.3;\n        T.not = 1;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 3
        dige: cbff00921d90
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk
        v: cY
      t: Y_3
      "y": 
        cv: '0.3'
        cvt: 0.3	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.41": 
    force_41: 
      c: 
        el: 1
        s: "A.I.force_41 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    at.c.el = 1;\n    lv.force = 'el';\n    lv.selfs = 1;\n    lv.grab = [at.t, at.y, {el=>8}];\n    lv.rmnsc = [at.t, at.y, {el=>9}];\n    # ID makes possible to throw into the W\n    #    (most J) tiniest specs of change\n    # receiving with ID means most.J knows ID to Jpath (bottom up easy)\n    #   also wants to know originating light cone \n    # - figure that once things on screen again!\n    # maybe 8regate\n    # greg annotates the flyby\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 41
        dige: 88fca617bd46
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: force_41
      "y": 
        cv: '0.41'
        cvt: 0.41	C.t
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.42": 
    mkTd_42: 
      c: 
        el: 1
        s: "A.I.mkTd_42 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    for my $nk (qw't y c sc V') {\n        my $v = $at->{$nk};\n        my $o = $ta->{$nk};\n        I.d&heq,$v,$o && next;\n        my $d;\n        d.v = $v;\n        d.o = $o;\n        if (ref $v eq 'HASH') {\n            my $wt = Rw wtfch $Jb:v $Yb:o;\n            for my $wk (qw'gone diff new still') {\n                for my $gk (sort keys %{$wt->{$wk}}) {\n                    my $dd = {};\n                    dd.v = $at->{$nk}->{$gk};\n                    dd.o = $ta->{$nk}->{$gk};\n                    d.T.d->{$gk} && die \"C.t: $nk,$gk ($v) rep.\";\n                    d.T.d->{$gk} =\n                        dd.T.d->{$wk} = $dd;\n                }\n            }\n        }\n        else {\n            my $wk = !$vl ? \"new\"\n                : !exists $at->{$nk} ? \"gone\"\n                : \"diff\";\n            my $dd = {%$d};\n            d.T.d.s =\n                dd.T.d->{$wk} = $dd;\n        }\n        T.d->{$nk} = $d;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 42
        dige: f77aa396964a
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: mkTd_42
      "y": 
        cv: '0.42'
        cvt: 0.42	C.t
        p: qq/Seven/Seven/Yod/Yod
  "0.4311": 
    tsnew_4311: 
      c: 
        el: 1
        s: "A.I.tsnew_4311 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{t} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - t
              - s
              - new
        Td: t/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4311
        dige: b55949b02646
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: tsnew_4311
      "y": 
        cv: '0.4311'
        cvt: 0.4311	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4312": 
    ysnew_4312: 
      c: 
        el: 1
        s: "A.I.ysnew_4312 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{op}->{y} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - 'y'
              - s
              - new
        Td: y/s/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4312
        dige: d9668e3f6a76
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: ysnew_4312
      "y": 
        cv: '0.4312'
        cvt: 0.4312	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4321": 
    cgone_4321: 
      c: 
        el: 1
        s: "A.I.cgone_4321 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how delete a c $gk\";\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - gone
        Td: c/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: 9cfac7b23aa9
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cgone_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	C.t
        p: qq/Seven/Seven/Ydo/Ydo
    cnew_4321: 
      c: 
        el: 1
        s: "A.I.cnew_4321 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how inject a c $gk\" if $vl;\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - new
        Td: c/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4321
        dige: 3bd27a097c1a
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cnew_4321
      "y": 
        cv: '0.4321'
        cvt: 0.4321	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4323": 
    csdiff_4323: 
      c: 
        el: 1
        s: "A.I.csdiff_4323 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{c}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - s
              - diff
        Td: c/s/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4323
        dige: 7e928771e532
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: csdiff_4323
      "y": 
        cv: '0.4323'
        cvt: 0.4323	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4324": 
    cdiff_4324: 
      c: 
        el: 1
        s: "A.I.cdiff_4324 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        warn \"how to c dif $gk\".slim(30,$v).\" <--- \".slim(30,$o);\n        $lv->{op}->{c}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - c
              - "*"
              - diff
        Td: c/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4324
        dige: 667dddb5d23d
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: cdiff_4324
      "y": 
        cv: '0.4324'
        cvt: 0.4324	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4331": 
    scnew_4331: 
      c: 
        el: 1
        s: "A.I.scnew_4331 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - new
        Td: sc/*/new
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4331
        dige: c133aa98f82a
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scnew_4331
      "y": 
        cv: '0.4331'
        cvt: 0.4331	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4332": 
    scgone_4332: 
      c: 
        el: 1
        s: "A.I.scgone_4332 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        die \"how delete a sc $gk\";\n        $lv->{op}->{sc}->{$gk} = 9;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - gone
        Td: sc/*/gone
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4332
        dige: 91efa702453a
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scgone_4332
      "y": 
        cv: '0.4332'
        cvt: 0.4332	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.4333": 
    scdiff_4333: 
      c: 
        el: 1
        s: "A.I.scdiff_4333 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n        #sayyl \"$C->{t} $nk $gk $wk: \".slim(30,$v).\" <--- \".slim(30,$o);\n        $lv->{pur}->{sc}->{$gk} = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - sc
              - "*"
              - diff
        Td: sc/*/diff
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4333
        dige: '79362e768770'
        gk: 'Y'
        gro: Seven/Ydo
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: scdiff_4333
      "y": 
        cv: '0.4333'
        cvt: 0.4333	C.t
        p: qq/Seven/Seven/Ydo/Ydo
  "0.434": 
    Vsup_434: 
      c: 
        el: 1
        s: "A.I.Vsup_434 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    d.iv = lv.do->{$gk};\n    d.ov = vl.do->{$gk};\n    d.ov && d.ov.i && (d.ov.i eq $o || warn \"no ovi ogk  d.ov.i eq $o\");\n    T.noTd = 1;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - "*"
        Td: V/*/*
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 434
        dige: c929264c9305
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk
        v: cY
      t: Vsup_434
      "y": 
        cv: '0.434'
        cvt: 0.434	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4341": 
    Vnew_4341: 
      c: 
        el: 1
        s: "A.I.Vnew_4341 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # may like to grab the element before it\n    # like a curve continuing\n    $iv || sayre(\"News cap no iv: \".wdump $s) && return;\n    lv.od.new->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - new
        Td: V/*/new
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4341
        dige: fe5ebcdd9a6f
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vnew_4341
      "y": 
        cv: '0.4341'
        cvt: 0.4341	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4342": 
    Vgone_4342: 
      c: 
        el: 1
        s: "A.I.Vgone_4342 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    ov.rmnsc || die \"no remin\";\n    !$iv || die \"gone had iv\";\n    # ^ sc plumb its destruction\n    # can void if our c reframes by implicitly clearing\n    lv.od.go->{$gk} = $ov;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - gone
        Td: V/*/gone
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4342
        dige: 772ad235e2a1
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vgone_4342
      "y": 
        cv: '0.4342'
        cvt: 0.4342	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4343": 
    Vdiff_4343: 
      c: 
        el: 1
        s: "A.I.Vdiff_4343 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    if (iv.c eq ov.c) {\n        iv.sc eq ov.sc && do {\n            sayre \"SAME FLUC SC $gk\";\n            die \"same c fluc sc $gk\";\n        };\n        my $in = @{iv.sc};\n        my $out = @{ov.sc};\n        if (@{iv.sc} > @{ov.sc}) {\n            saybl \"$talk GROWS\" if J.V > 2;\n            lv.od.gr->{$gk} = $iv;\n        }\n        else {\n            warn \"WTFF \".wdump 2,[$iv,$ov];\n        }\n    }\n    else {\n        saybl \"$talk  REPLACES c\";\n        lv.od.over->{$gk} = $iv;\n    }\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - diff
        Td: V/*/diff
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4343
        dige: 102c6bd276bf
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vdiff_4343
      "y": 
        cv: '0.4343'
        cvt: 0.4343	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.4344": 
    Vstill_4344: 
      c: 
        el: 1
        s: "A.I.Vstill_4344 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $d = s.d;\n    my $o = s.o;\n    my $v = s.v;\n    my $talk = s.talk;\n    my $nk = s.nk;\n    my $gk = s.gk;\n    my $wk = s.wk;\n    my $iv = s.iv;\n    my $ov = s.ov;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    lv.od.ll->{$gk} = $iv;\n};\n"
      sc: 
        Ifs: 
          Td: 
            atar: 
              - nk
              - gk
              - wk
            caps: 
              iv: 1
              ov: 1
            onpa: 
              - T
              - d
            path: 
              - V
              - "*"
              - still
        Td: V/*/still
        Tdarge: iv,ov
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 4344
        dige: 930b3ffee6b9
        gk: 'Y'
        gro: Seven/YdoV
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        sr: d,o,v,talk,nk,gk,wk,iv,ov
        v: cY
      t: Vstill_4344
      "y": 
        cv: '0.4344'
        cvt: 0.4344	C.t
        p: qq/Seven/Seven/YdoV/YdoV
  "0.48": 
    doTd_48: 
      c: 
        el: 1
        s: "A.I.doTd_48 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    # pick T bones, dot Is\n    # a 9 for the Td (ill 8) consciousness rendezvou\n    for my $nk (sort keys %{T.d}) {\n        my $d = T.d->{$nk};\n        for my $gk (sort keys %{d.T.d}) {\n            my $dd = d.T.d->{$gk};\n            if (dd.T.m) {\n                #say \"Answers  $nk $gk: \".wdump 4, $dd;\n            }\n            elsif (dd.T.q) {\n                #say \"probly $nk $gk\";\n            }\n            else {\n                sayre \"Unclear $nk $gk:  \". ki $dd;\n            }\n        }\n    }\n    delete T.d;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 48
        dige: 099aa40486cd
        gk: 'Y'
        gro: Seven/Yod
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: doTd_48
      "y": 
        cv: '0.48'
        cvt: 0.48	C.t
        p: qq/Seven/Seven/Yod/Yod
  "0.49": 
    Y_49: 
      c: 
        el: 1
        s: "A.I.Y_49 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    V.ta->{$k} = I.d&hup,$at;\n    V.tv->{$k} = I.d&hup,$C;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 49
        dige: e2043d4e9a48
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,yat
        v: cY
      t: Y_49
      "y": 
        cv: '0.49'
        cvt: 0.49	C.t
        p: qq/Seven/Seven/Yuni/Yuni
  "0.52": 
    OlOMP_52: 
      c: 
        el: 1
        s: "A.I.OlOMP_52 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $at = C.y.at;\n    my $ta = C.y.ta;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    Rw OMP $J $A $I $C $k $Y $V $at $ta $lv $vl;\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 52
        dige: 016e7697b4bf
        gk: 'Y'
        gro: Seven/Yeomp
        nk: c
        rg: J,V,yk,yat,yta,ylv,yvl
        v: cY
      t: OlOMP_52
      "y": 
        cv: '0.52'
        cvt: 0.52	C.t
        p: qq/Seven/Seven/Yeomp/Yeomp
  "0.58": 
    Y_58: 
      c: 
        el: 1
        s: "A.I.Y_58 = sub {\n    my ($A,$C,$G,$T,$s) = @_;\n    my $I = A.I;\n    my $c = C.c;\n    my $Y = C.c.Y;\n    my $J = C.c.J;\n    my $V = C.c.V;\n    my $k = C.y.k;\n    my $lv = C.y.lv;\n    my $vl = C.y.vl;\n    V.lv->{$k} = $lv;\n    if (C.c.root) {\n        V.rl = $vl;\n        V.rv = $lv;\n        Rw TNews $J $talk:A.talk $rl:V.rl $rv:V.rv\n            if J.V;\n    }\n};\n"
      sc: 
        acgt: s
        act: 1
        args: A,C,G,T,s
        code: Sev 58
        dige: 8d87a19e3583
        gk: 'Y'
        gro: Seven/Yuni
        nk: c
        rg: J,V,yk,ylv,yvl
        v: cY
      t: Y_58
      "y": 
        cv: '0.58'
        cvt: 0.58	C.t
        p: qq/Seven/Seven/Yuni/Yuni
